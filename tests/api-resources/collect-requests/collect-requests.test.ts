// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import Unifieddatalibrary from 'bluestaq@unified-data-library';

const client = new Unifieddatalibrary({
  password: 'My Password',
  username: 'My Username',
  baseURL: process.env['TEST_API_BASE_URL'] ?? 'http://127.0.0.1:4010',
});

describe('resource collectRequests', () => {
  test('create: only required params', async () => {
    const responsePromise = client.collectRequests.create({
      classificationMarking: 'U',
      dataMode: 'TEST',
      source: 'Bluestaq',
      startTime: '2018-01-01T16:00:00.123456Z',
      type: 'DWELL',
    });
    const rawResponse = await responsePromise.asResponse();
    expect(rawResponse).toBeInstanceOf(Response);
    const response = await responsePromise;
    expect(response).not.toBeInstanceOf(Response);
    const dataAndResponse = await responsePromise.withResponse();
    expect(dataAndResponse.data).toBe(response);
    expect(dataAndResponse.response).toBe(rawResponse);
  });

  test('create: required and optional params', async () => {
    const response = await client.collectRequests.create({
      classificationMarking: 'U',
      dataMode: 'TEST',
      source: 'Bluestaq',
      startTime: '2018-01-01T16:00:00.123456Z',
      type: 'DWELL',
      id: 'COLLECTREQUEST-ID',
      alt: 1.1,
      argOfPerigee: 1.1,
      az: 1.1,
      customer: 'Bluestaq',
      dec: 1.1,
      duration: 11,
      dwellId: 'DWELL-ID',
      eccentricity: 1.1,
      el: 1.1,
      elset: {
        classificationMarking: 'U',
        dataMode: 'TEST',
        epoch: '2018-01-01T16:00:00.123456Z',
        source: 'Bluestaq',
        agom: 0.0126,
        algorithm: 'Example algorithm',
        apogee: 1.1,
        argOfPerigee: 1.1,
        ballisticCoeff: 0.00815,
        bStar: 1.1,
        descriptor: 'Example description',
        eccentricity: 0.333,
        ephemType: 1,
        idElset: 'ELSET-ID',
        idOrbitDetermination: '026dd511-8ba5-47d3-9909-836149f87686',
        inclination: 45.1,
        meanAnomaly: 179.1,
        meanMotion: 1.1,
        meanMotionDDot: 1.1,
        meanMotionDot: 1.1,
        origin: 'THIRD_PARTY_DATASOURCE',
        origObjectId: 'ORIGOBJECT-ID',
        perigee: 1.1,
        period: 1.1,
        raan: 1.1,
        rawFileURI: 'Example URI',
        revNo: 111,
        satNo: 12,
        semiMajorAxis: 1.1,
        sourcedData: ['OBSERVATION_UUID1', 'OBSERVATION_UUID2'],
        sourcedDataTypes: ['RADAR', 'RF'],
        tags: ['PROVIDER_TAG1', 'PROVIDER_TAG2'],
        transactionId: 'TRANSACTION-ID',
        uct: false,
      },
      endTime: '2018-01-01T18:00:00.123456Z',
      epoch: '2018-01-01T16:00:00.123456Z',
      esId: 'ES-ID',
      extentAz: 1.1,
      extentEl: 1.1,
      extentRange: 1.1,
      externalId: 'EXTERNAL-ID',
      frameRate: 1.1,
      freq: 1.1,
      freqMax: 1.1,
      freqMin: 1.1,
      idElset: 'REF-ELSET-ID',
      idManifold: 'REF-MANIFOLD-ID',
      idParentReq: 'da98671b-34db-47bf-8c8d-7c668b92c800',
      idPlan: 'REF-PLAN-ID',
      idSensor: 'REF-SENSOR-ID',
      idStateVector: 'STATEVECTOR-ID',
      inclination: 1.1,
      integrationTime: 1.1,
      iron: 3,
      irradiance: 1.1,
      lat: 1.1,
      lon: 1.1,
      msgCreateDate: '2024-04-25T08:17:01.346Z',
      msgType: 'SU67',
      notes: 'Example notes',
      numFrames: 6,
      numObs: 9,
      numTracks: 3,
      obType: 'RADAR',
      orbitRegime: 'GEO',
      orientAngle: 1.1,
      origin: 'Example source',
      origObjectId: 'ORIGOBJECT-ID',
      origSensorId: 'ORIGSENSOR-ID',
      planIndex: 8,
      polarization: 'H',
      priority: 'EMERGENCY',
      ra: 1.1,
      raan: 1.1,
      range: 1.1,
      rcs: 1.1,
      rcsMax: 1.1,
      rcsMin: 1.1,
      reflectance: 1.1,
      satNo: 101,
      scenario: 'Example direction',
      semiMajorAxis: 1.1,
      spectralModel: 'Example Model',
      srchInc: 1.1,
      srchPattern: 'SCAN',
      stateVector: {
        classificationMarking: 'U',
        dataMode: 'TEST',
        epoch: '2018-01-01T16:00:00.123456Z',
        source: 'Bluestaq',
        actualODSpan: 3.5,
        algorithm: 'SAMPLE_ALGORITHM',
        alt1ReferenceFrame: 'TEME',
        alt2ReferenceFrame: 'EFG/TDR',
        area: 5.065,
        bDot: 1.23,
        cmOffset: 1.23,
        cov: [1.1, 2.4, 3.8, 4.2, 5.5, 6],
        covMethod: 'CALCULATED',
        covReferenceFrame: 'J2000',
        descriptor: 'descriptor',
        dragArea: 4.739,
        dragCoeff: 0.0224391269775,
        dragModel: 'JAC70',
        edr: 1.23,
        eqCov: [1.1, 2.2],
        errorControl: 1.23,
        fixedStep: true,
        geopotentialModel: 'EGM-96',
        iau1980Terms: 4,
        idOrbitDetermination: '026dd511-8ba5-47d3-9909-836149f87686',
        idStateVector: 'STATEVECTOR-ID',
        integratorMode: 'integratorMode',
        inTrackThrust: true,
        lastObEnd: '2022-11-09T11:20:21.247192Z',
        lastObStart: '2022-11-09T11:20:21.247192Z',
        leapSecondTime: '2021-01-01T01:01:01.123Z',
        lunarSolar: true,
        mass: 164.5,
        obsAvailable: 376,
        obsUsed: 374,
        origin: 'THIRD_PARTY_DATASOURCE',
        origObjectId: 'ORIGOBJECT-ID',
        partials: 'ANALYTIC',
        pedigree: 'CONJUNCTION',
        polarMotionX: 1.23,
        polarMotionY: 1.23,
        posUnc: 0.333399744452,
        rawFileURI: 'rawFileURI',
        recODSpan: 3.5,
        referenceFrame: 'J2000',
        residualsAcc: 99.5,
        revNo: 7205,
        rms: 0.991,
        satNo: 12,
        sigmaPosUVW: [1.23, 4.56],
        sigmaVelUVW: [1.23, 4.56],
        solarFluxAPAvg: 1.23,
        solarFluxF10: 1.23,
        solarFluxF10Avg: 1.23,
        solarRadPress: true,
        solarRadPressCoeff: 0.0244394,
        solidEarthTides: true,
        sourcedData: ['DATA1', 'DATA2'],
        sourcedDataTypes: ['RADAR'],
        srpArea: 4.311,
        stepMode: 'AUTO',
        stepSize: 1.23,
        stepSizeSelection: 'AUTO',
        tags: ['TAG1', 'TAG2'],
        taiUtc: 1.23,
        thrustAccel: 1.23,
        tracksAvail: 163,
        tracksUsed: 163,
        transactionId: 'transactionId',
        uct: true,
        ut1Rate: 1.23,
        ut1Utc: 1.23,
        velUnc: 0.000004,
        xaccel: -2.12621392,
        xpos: -1118.577381,
        xposAlt1: -1145.688502,
        xposAlt2: -1456.915926,
        xvel: -4.25242784,
        xvelAlt1: -4.270832252,
        xvelAlt2: -1.219814294,
        yaccel: 2.645553717,
        ypos: 3026.231084,
        yposAlt1: 3020.729572,
        yposAlt2: -2883.540406,
        yvel: 5.291107434,
        yvelAlt1: 5.27074276,
        yvelAlt2: -6.602080212,
        zaccel: -1.06310696,
        zpos: 6167.831808,
        zposAlt1: 6165.55187,
        zposAlt2: 6165.55187,
        zvel: -3.356493869,
        zvelAlt1: -3.365155181,
        zvelAlt2: -3.365155181,
      },
      stopAlt: 1.1,
      stopLat: 1.1,
      stopLon: 1.1,
      suffix: 'T',
      tags: ['PROVIDER_TAG1', 'PROVIDER_TAG2'],
      targetSize: 1.1,
      taskCategory: 4,
      taskGroup: '729',
      taskId: 'TASK-ID',
      transactionId: 'TRANSACTION-ID',
      trueAnomoly: 1.1,
      uctFollowUp: false,
      visMag: 1.1,
      visMagMax: 1.1,
      visMagMin: 1.1,
      xAngle: 1.1,
      yAngle: 1.1,
    });
  });

  test('retrieve', async () => {
    const responsePromise = client.collectRequests.retrieve('id');
    const rawResponse = await responsePromise.asResponse();
    expect(rawResponse).toBeInstanceOf(Response);
    const response = await responsePromise;
    expect(response).not.toBeInstanceOf(Response);
    const dataAndResponse = await responsePromise.withResponse();
    expect(dataAndResponse.data).toBe(response);
    expect(dataAndResponse.response).toBe(rawResponse);
  });

  test('retrieve: request options and params are passed correctly', async () => {
    // ensure the request options are being passed correctly by passing an invalid HTTP method in order to cause an error
    await expect(
      client.collectRequests.retrieve(
        'id',
        { firstResult: 0, maxResults: 0 },
        { path: '/_stainless_unknown_path' },
      ),
    ).rejects.toThrow(Unifieddatalibrary.NotFoundError);
  });

  test('list: only required params', async () => {
    const responsePromise = client.collectRequests.list({ startTime: '2019-12-27T18:11:19.117Z' });
    const rawResponse = await responsePromise.asResponse();
    expect(rawResponse).toBeInstanceOf(Response);
    const response = await responsePromise;
    expect(response).not.toBeInstanceOf(Response);
    const dataAndResponse = await responsePromise.withResponse();
    expect(dataAndResponse.data).toBe(response);
    expect(dataAndResponse.response).toBe(rawResponse);
  });

  test('list: required and optional params', async () => {
    const response = await client.collectRequests.list({
      startTime: '2019-12-27T18:11:19.117Z',
      firstResult: 0,
      maxResults: 0,
    });
  });

  test('count: only required params', async () => {
    const responsePromise = client.collectRequests.count({ startTime: '2019-12-27T18:11:19.117Z' });
    const rawResponse = await responsePromise.asResponse();
    expect(rawResponse).toBeInstanceOf(Response);
    const response = await responsePromise;
    expect(response).not.toBeInstanceOf(Response);
    const dataAndResponse = await responsePromise.withResponse();
    expect(dataAndResponse.data).toBe(response);
    expect(dataAndResponse.response).toBe(rawResponse);
  });

  test('count: required and optional params', async () => {
    const response = await client.collectRequests.count({
      startTime: '2019-12-27T18:11:19.117Z',
      firstResult: 0,
      maxResults: 0,
    });
  });

  test('createBulk: only required params', async () => {
    const responsePromise = client.collectRequests.createBulk({
      body: [
        {
          classificationMarking: 'U',
          dataMode: 'TEST',
          source: 'Bluestaq',
          startTime: '2018-01-01T16:00:00.123456Z',
          type: 'DWELL',
        },
      ],
    });
    const rawResponse = await responsePromise.asResponse();
    expect(rawResponse).toBeInstanceOf(Response);
    const response = await responsePromise;
    expect(response).not.toBeInstanceOf(Response);
    const dataAndResponse = await responsePromise.withResponse();
    expect(dataAndResponse.data).toBe(response);
    expect(dataAndResponse.response).toBe(rawResponse);
  });

  test('createBulk: required and optional params', async () => {
    const response = await client.collectRequests.createBulk({
      body: [
        {
          classificationMarking: 'U',
          dataMode: 'TEST',
          source: 'Bluestaq',
          startTime: '2018-01-01T16:00:00.123456Z',
          type: 'DWELL',
          id: 'COLLECTREQUEST-ID',
          alt: 1.1,
          argOfPerigee: 1.1,
          az: 1.1,
          customer: 'Bluestaq',
          dec: 1.1,
          duration: 11,
          dwellId: 'DWELL-ID',
          eccentricity: 1.1,
          el: 1.1,
          elset: {
            classificationMarking: 'U',
            dataMode: 'TEST',
            epoch: '2018-01-01T16:00:00.123456Z',
            source: 'Bluestaq',
            agom: 0.0126,
            algorithm: 'Example algorithm',
            apogee: 1.1,
            argOfPerigee: 1.1,
            ballisticCoeff: 0.00815,
            bStar: 1.1,
            descriptor: 'Example description',
            eccentricity: 0.333,
            ephemType: 1,
            idElset: 'ELSET-ID',
            idOrbitDetermination: '026dd511-8ba5-47d3-9909-836149f87686',
            inclination: 45.1,
            meanAnomaly: 179.1,
            meanMotion: 1.1,
            meanMotionDDot: 1.1,
            meanMotionDot: 1.1,
            origin: 'THIRD_PARTY_DATASOURCE',
            origObjectId: 'ORIGOBJECT-ID',
            perigee: 1.1,
            period: 1.1,
            raan: 1.1,
            rawFileURI: 'Example URI',
            revNo: 111,
            satNo: 12,
            semiMajorAxis: 1.1,
            sourcedData: ['OBSERVATION_UUID1', 'OBSERVATION_UUID2'],
            sourcedDataTypes: ['RADAR', 'RF'],
            tags: ['PROVIDER_TAG1', 'PROVIDER_TAG2'],
            transactionId: 'TRANSACTION-ID',
            uct: false,
          },
          endTime: '2018-01-01T18:00:00.123456Z',
          epoch: '2018-01-01T16:00:00.123456Z',
          esId: 'ES-ID',
          extentAz: 1.1,
          extentEl: 1.1,
          extentRange: 1.1,
          externalId: 'EXTERNAL-ID',
          frameRate: 1.1,
          freq: 1.1,
          freqMax: 1.1,
          freqMin: 1.1,
          idElset: 'REF-ELSET-ID',
          idManifold: 'REF-MANIFOLD-ID',
          idParentReq: 'da98671b-34db-47bf-8c8d-7c668b92c800',
          idPlan: 'REF-PLAN-ID',
          idSensor: 'REF-SENSOR-ID',
          idStateVector: 'STATEVECTOR-ID',
          inclination: 1.1,
          integrationTime: 1.1,
          iron: 3,
          irradiance: 1.1,
          lat: 1.1,
          lon: 1.1,
          msgCreateDate: '2024-04-25T08:17:01.346Z',
          msgType: 'SU67',
          notes: 'Example notes',
          numFrames: 6,
          numObs: 9,
          numTracks: 3,
          obType: 'RADAR',
          orbitRegime: 'GEO',
          orientAngle: 1.1,
          origin: 'Example source',
          origObjectId: 'ORIGOBJECT-ID',
          origSensorId: 'ORIGSENSOR-ID',
          planIndex: 8,
          polarization: 'H',
          priority: 'EMERGENCY',
          ra: 1.1,
          raan: 1.1,
          range: 1.1,
          rcs: 1.1,
          rcsMax: 1.1,
          rcsMin: 1.1,
          reflectance: 1.1,
          satNo: 101,
          scenario: 'Example direction',
          semiMajorAxis: 1.1,
          spectralModel: 'Example Model',
          srchInc: 1.1,
          srchPattern: 'SCAN',
          stateVector: {
            classificationMarking: 'U',
            dataMode: 'TEST',
            epoch: '2018-01-01T16:00:00.123456Z',
            source: 'Bluestaq',
            actualODSpan: 3.5,
            algorithm: 'SAMPLE_ALGORITHM',
            alt1ReferenceFrame: 'TEME',
            alt2ReferenceFrame: 'EFG/TDR',
            area: 5.065,
            bDot: 1.23,
            cmOffset: 1.23,
            cov: [1.1, 2.4, 3.8, 4.2, 5.5, 6],
            covMethod: 'CALCULATED',
            covReferenceFrame: 'J2000',
            descriptor: 'descriptor',
            dragArea: 4.739,
            dragCoeff: 0.0224391269775,
            dragModel: 'JAC70',
            edr: 1.23,
            eqCov: [1.1, 2.2],
            errorControl: 1.23,
            fixedStep: true,
            geopotentialModel: 'EGM-96',
            iau1980Terms: 4,
            idOrbitDetermination: '026dd511-8ba5-47d3-9909-836149f87686',
            idStateVector: 'STATEVECTOR-ID',
            integratorMode: 'integratorMode',
            inTrackThrust: true,
            lastObEnd: '2022-11-09T11:20:21.247192Z',
            lastObStart: '2022-11-09T11:20:21.247192Z',
            leapSecondTime: '2021-01-01T01:01:01.123Z',
            lunarSolar: true,
            mass: 164.5,
            obsAvailable: 376,
            obsUsed: 374,
            origin: 'THIRD_PARTY_DATASOURCE',
            origObjectId: 'ORIGOBJECT-ID',
            partials: 'ANALYTIC',
            pedigree: 'CONJUNCTION',
            polarMotionX: 1.23,
            polarMotionY: 1.23,
            posUnc: 0.333399744452,
            rawFileURI: 'rawFileURI',
            recODSpan: 3.5,
            referenceFrame: 'J2000',
            residualsAcc: 99.5,
            revNo: 7205,
            rms: 0.991,
            satNo: 12,
            sigmaPosUVW: [1.23, 4.56],
            sigmaVelUVW: [1.23, 4.56],
            solarFluxAPAvg: 1.23,
            solarFluxF10: 1.23,
            solarFluxF10Avg: 1.23,
            solarRadPress: true,
            solarRadPressCoeff: 0.0244394,
            solidEarthTides: true,
            sourcedData: ['DATA1', 'DATA2'],
            sourcedDataTypes: ['RADAR'],
            srpArea: 4.311,
            stepMode: 'AUTO',
            stepSize: 1.23,
            stepSizeSelection: 'AUTO',
            tags: ['TAG1', 'TAG2'],
            taiUtc: 1.23,
            thrustAccel: 1.23,
            tracksAvail: 163,
            tracksUsed: 163,
            transactionId: 'transactionId',
            uct: true,
            ut1Rate: 1.23,
            ut1Utc: 1.23,
            velUnc: 0.000004,
            xaccel: -2.12621392,
            xpos: -1118.577381,
            xposAlt1: -1145.688502,
            xposAlt2: -1456.915926,
            xvel: -4.25242784,
            xvelAlt1: -4.270832252,
            xvelAlt2: -1.219814294,
            yaccel: 2.645553717,
            ypos: 3026.231084,
            yposAlt1: 3020.729572,
            yposAlt2: -2883.540406,
            yvel: 5.291107434,
            yvelAlt1: 5.27074276,
            yvelAlt2: -6.602080212,
            zaccel: -1.06310696,
            zpos: 6167.831808,
            zposAlt1: 6165.55187,
            zposAlt2: 6165.55187,
            zvel: -3.356493869,
            zvelAlt1: -3.365155181,
            zvelAlt2: -3.365155181,
          },
          stopAlt: 1.1,
          stopLat: 1.1,
          stopLon: 1.1,
          suffix: 'T',
          tags: ['PROVIDER_TAG1', 'PROVIDER_TAG2'],
          targetSize: 1.1,
          taskCategory: 4,
          taskGroup: '729',
          taskId: 'TASK-ID',
          transactionId: 'TRANSACTION-ID',
          trueAnomoly: 1.1,
          uctFollowUp: false,
          visMag: 1.1,
          visMagMax: 1.1,
          visMagMin: 1.1,
          xAngle: 1.1,
          yAngle: 1.1,
        },
      ],
    });
  });

  test('queryHelp', async () => {
    const responsePromise = client.collectRequests.queryHelp();
    const rawResponse = await responsePromise.asResponse();
    expect(rawResponse).toBeInstanceOf(Response);
    const response = await responsePromise;
    expect(response).not.toBeInstanceOf(Response);
    const dataAndResponse = await responsePromise.withResponse();
    expect(dataAndResponse.data).toBe(response);
    expect(dataAndResponse.response).toBe(rawResponse);
  });

  test('tuple: only required params', async () => {
    const responsePromise = client.collectRequests.tuple({
      columns: 'columns',
      startTime: '2019-12-27T18:11:19.117Z',
    });
    const rawResponse = await responsePromise.asResponse();
    expect(rawResponse).toBeInstanceOf(Response);
    const response = await responsePromise;
    expect(response).not.toBeInstanceOf(Response);
    const dataAndResponse = await responsePromise.withResponse();
    expect(dataAndResponse.data).toBe(response);
    expect(dataAndResponse.response).toBe(rawResponse);
  });

  test('tuple: required and optional params', async () => {
    const response = await client.collectRequests.tuple({
      columns: 'columns',
      startTime: '2019-12-27T18:11:19.117Z',
      firstResult: 0,
      maxResults: 0,
    });
  });

  test('unvalidatedPublish: only required params', async () => {
    const responsePromise = client.collectRequests.unvalidatedPublish({
      body: [
        {
          classificationMarking: 'U',
          dataMode: 'TEST',
          source: 'Bluestaq',
          startTime: '2018-01-01T16:00:00.123456Z',
          type: 'DWELL',
        },
      ],
    });
    const rawResponse = await responsePromise.asResponse();
    expect(rawResponse).toBeInstanceOf(Response);
    const response = await responsePromise;
    expect(response).not.toBeInstanceOf(Response);
    const dataAndResponse = await responsePromise.withResponse();
    expect(dataAndResponse.data).toBe(response);
    expect(dataAndResponse.response).toBe(rawResponse);
  });

  test('unvalidatedPublish: required and optional params', async () => {
    const response = await client.collectRequests.unvalidatedPublish({
      body: [
        {
          classificationMarking: 'U',
          dataMode: 'TEST',
          source: 'Bluestaq',
          startTime: '2018-01-01T16:00:00.123456Z',
          type: 'DWELL',
          id: 'COLLECTREQUEST-ID',
          alt: 1.1,
          argOfPerigee: 1.1,
          az: 1.1,
          customer: 'Bluestaq',
          dec: 1.1,
          duration: 11,
          dwellId: 'DWELL-ID',
          eccentricity: 1.1,
          el: 1.1,
          elset: {
            classificationMarking: 'U',
            dataMode: 'TEST',
            epoch: '2018-01-01T16:00:00.123456Z',
            source: 'Bluestaq',
            agom: 0.0126,
            algorithm: 'Example algorithm',
            apogee: 1.1,
            argOfPerigee: 1.1,
            ballisticCoeff: 0.00815,
            bStar: 1.1,
            descriptor: 'Example description',
            eccentricity: 0.333,
            ephemType: 1,
            idElset: 'ELSET-ID',
            idOrbitDetermination: '026dd511-8ba5-47d3-9909-836149f87686',
            inclination: 45.1,
            meanAnomaly: 179.1,
            meanMotion: 1.1,
            meanMotionDDot: 1.1,
            meanMotionDot: 1.1,
            origin: 'THIRD_PARTY_DATASOURCE',
            origObjectId: 'ORIGOBJECT-ID',
            perigee: 1.1,
            period: 1.1,
            raan: 1.1,
            rawFileURI: 'Example URI',
            revNo: 111,
            satNo: 12,
            semiMajorAxis: 1.1,
            sourcedData: ['OBSERVATION_UUID1', 'OBSERVATION_UUID2'],
            sourcedDataTypes: ['RADAR', 'RF'],
            tags: ['PROVIDER_TAG1', 'PROVIDER_TAG2'],
            transactionId: 'TRANSACTION-ID',
            uct: false,
          },
          endTime: '2018-01-01T18:00:00.123456Z',
          epoch: '2018-01-01T16:00:00.123456Z',
          esId: 'ES-ID',
          extentAz: 1.1,
          extentEl: 1.1,
          extentRange: 1.1,
          externalId: 'EXTERNAL-ID',
          frameRate: 1.1,
          freq: 1.1,
          freqMax: 1.1,
          freqMin: 1.1,
          idElset: 'REF-ELSET-ID',
          idManifold: 'REF-MANIFOLD-ID',
          idParentReq: 'da98671b-34db-47bf-8c8d-7c668b92c800',
          idPlan: 'REF-PLAN-ID',
          idSensor: 'REF-SENSOR-ID',
          idStateVector: 'STATEVECTOR-ID',
          inclination: 1.1,
          integrationTime: 1.1,
          iron: 3,
          irradiance: 1.1,
          lat: 1.1,
          lon: 1.1,
          msgCreateDate: '2024-04-25T08:17:01.346Z',
          msgType: 'SU67',
          notes: 'Example notes',
          numFrames: 6,
          numObs: 9,
          numTracks: 3,
          obType: 'RADAR',
          orbitRegime: 'GEO',
          orientAngle: 1.1,
          origin: 'Example source',
          origObjectId: 'ORIGOBJECT-ID',
          origSensorId: 'ORIGSENSOR-ID',
          planIndex: 8,
          polarization: 'H',
          priority: 'EMERGENCY',
          ra: 1.1,
          raan: 1.1,
          range: 1.1,
          rcs: 1.1,
          rcsMax: 1.1,
          rcsMin: 1.1,
          reflectance: 1.1,
          satNo: 101,
          scenario: 'Example direction',
          semiMajorAxis: 1.1,
          spectralModel: 'Example Model',
          srchInc: 1.1,
          srchPattern: 'SCAN',
          stateVector: {
            classificationMarking: 'U',
            dataMode: 'TEST',
            epoch: '2018-01-01T16:00:00.123456Z',
            source: 'Bluestaq',
            actualODSpan: 3.5,
            algorithm: 'SAMPLE_ALGORITHM',
            alt1ReferenceFrame: 'TEME',
            alt2ReferenceFrame: 'EFG/TDR',
            area: 5.065,
            bDot: 1.23,
            cmOffset: 1.23,
            cov: [1.1, 2.4, 3.8, 4.2, 5.5, 6],
            covMethod: 'CALCULATED',
            covReferenceFrame: 'J2000',
            descriptor: 'descriptor',
            dragArea: 4.739,
            dragCoeff: 0.0224391269775,
            dragModel: 'JAC70',
            edr: 1.23,
            eqCov: [1.1, 2.2],
            errorControl: 1.23,
            fixedStep: true,
            geopotentialModel: 'EGM-96',
            iau1980Terms: 4,
            idOrbitDetermination: '026dd511-8ba5-47d3-9909-836149f87686',
            idStateVector: 'STATEVECTOR-ID',
            integratorMode: 'integratorMode',
            inTrackThrust: true,
            lastObEnd: '2022-11-09T11:20:21.247192Z',
            lastObStart: '2022-11-09T11:20:21.247192Z',
            leapSecondTime: '2021-01-01T01:01:01.123Z',
            lunarSolar: true,
            mass: 164.5,
            obsAvailable: 376,
            obsUsed: 374,
            origin: 'THIRD_PARTY_DATASOURCE',
            origObjectId: 'ORIGOBJECT-ID',
            partials: 'ANALYTIC',
            pedigree: 'CONJUNCTION',
            polarMotionX: 1.23,
            polarMotionY: 1.23,
            posUnc: 0.333399744452,
            rawFileURI: 'rawFileURI',
            recODSpan: 3.5,
            referenceFrame: 'J2000',
            residualsAcc: 99.5,
            revNo: 7205,
            rms: 0.991,
            satNo: 12,
            sigmaPosUVW: [1.23, 4.56],
            sigmaVelUVW: [1.23, 4.56],
            solarFluxAPAvg: 1.23,
            solarFluxF10: 1.23,
            solarFluxF10Avg: 1.23,
            solarRadPress: true,
            solarRadPressCoeff: 0.0244394,
            solidEarthTides: true,
            sourcedData: ['DATA1', 'DATA2'],
            sourcedDataTypes: ['RADAR'],
            srpArea: 4.311,
            stepMode: 'AUTO',
            stepSize: 1.23,
            stepSizeSelection: 'AUTO',
            tags: ['TAG1', 'TAG2'],
            taiUtc: 1.23,
            thrustAccel: 1.23,
            tracksAvail: 163,
            tracksUsed: 163,
            transactionId: 'transactionId',
            uct: true,
            ut1Rate: 1.23,
            ut1Utc: 1.23,
            velUnc: 0.000004,
            xaccel: -2.12621392,
            xpos: -1118.577381,
            xposAlt1: -1145.688502,
            xposAlt2: -1456.915926,
            xvel: -4.25242784,
            xvelAlt1: -4.270832252,
            xvelAlt2: -1.219814294,
            yaccel: 2.645553717,
            ypos: 3026.231084,
            yposAlt1: 3020.729572,
            yposAlt2: -2883.540406,
            yvel: 5.291107434,
            yvelAlt1: 5.27074276,
            yvelAlt2: -6.602080212,
            zaccel: -1.06310696,
            zpos: 6167.831808,
            zposAlt1: 6165.55187,
            zposAlt2: 6165.55187,
            zvel: -3.356493869,
            zvelAlt1: -3.365155181,
            zvelAlt2: -3.365155181,
          },
          stopAlt: 1.1,
          stopLat: 1.1,
          stopLon: 1.1,
          suffix: 'T',
          tags: ['PROVIDER_TAG1', 'PROVIDER_TAG2'],
          targetSize: 1.1,
          taskCategory: 4,
          taskGroup: '729',
          taskId: 'TASK-ID',
          transactionId: 'TRANSACTION-ID',
          trueAnomoly: 1.1,
          uctFollowUp: false,
          visMag: 1.1,
          visMagMax: 1.1,
          visMagMin: 1.1,
          xAngle: 1.1,
          yAngle: 1.1,
        },
      ],
    });
  });
});
