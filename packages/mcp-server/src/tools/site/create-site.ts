// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'site',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/site',
};

export const tool: Tool = {
  name: 'create_site',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to take a single Site as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
  inputSchema: {
    type: 'object',
    properties: {
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      name: {
        type: 'string',
        description: 'The name of this site.',
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      id: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      activity: {
        type: 'string',
        description:
          'Indicates the function or mission of an entity, which that entity may or may not be engaged in at any particular time. Typically refers to a unit, organization, or installation/site performing a specific function or mission such as a redistribution center or naval shipyard. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.',
      },
      airDefArea: {
        type: 'string',
        description:
          'Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.',
      },
      allegiance: {
        type: 'string',
        description:
          'The DoD Standard Country Code designator for the country or political entity to which the site owes its allegiance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).',
      },
      altAllegiance: {
        type: 'string',
        description:
          'Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.',
      },
      beNumber: {
        type: 'string',
        description:
          'The Basic Encyclopedia Number associated with the Site. Uniquely identifies the installation of a site. The beNumber is generated based on the value input for the COORD to determine the appropriate World Aeronautical Chart (WAC) location identifier, the system assigned record originator and a one-up-number.',
      },
      catCode: {
        type: 'string',
        description:
          'The category code that represents the associated site purpose within the target system.',
      },
      catText: {
        type: 'string',
        description: 'Textual Description of Site catCode.',
      },
      classRating: {
        type: 'string',
        description:
          'Indicates the importance of the entity to the OES or MIR system.  This data element is restricted to update by DIA (DB-4). Valid values are:\n\n0 - Does not meet criteria above\n\n1 - Primary importance to system\n\n2 - Secondary importance to system\n\n3 - Tertiary importance to system\n\nO - Other. Explain in Remarks.',
      },
      condition: {
        type: 'string',
        description:
          'The physical manner of being or state of existence of the entity. A physical condition that must be considered in the determining of a course of action. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.',
      },
      conditionAvail: {
        type: 'string',
        description:
          'Availability of the entity relative to its condition. Indicates the reason the entity is not fully operational. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.',
      },
      coord: {
        type: 'string',
        description:
          'Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc.\n\nPos. 1-2.  Latitude Degrees     [00-90]\n\nPos. 3-4.  Latitude Minutes     [00-59]\n\nPos. 5-6.  Latitude Seconds     [00-59]\n\nPos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  \n\nPos. 10. Latitude Hemisphere       [NS] \n\nPos. 11-13. Longitude Degrees     [00-180] \n\nPos. 14-15. Longitude Minutes     [00-59] \n\nPos. 16-17. Longitude Seconds     [00-59] \n\nPos. 18-20. Longitude Thousandths Of Seconds      [000-999]\n\nPos. 21. Longitude Hemisphere     [EW]\n\nPos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U].',
      },
      coordDatum: {
        type: 'string',
        description:
          'A mathematical model of the earth used to calculate coordinates on a map. US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums. The datum must be specified to ensure accuracy of coordinates. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.',
      },
      coordDerivAcc: {
        type: 'number',
        description:
          'Indicates the plus or minus error assessed against the method used to derive the coordinate.',
      },
      elevMsl: {
        type: 'number',
        description:
          'Ground elevation of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum, in meters.',
      },
      elevMslConfLvl: {
        type: 'integer',
        description:
          'Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy.',
      },
      elevMslDerivAcc: {
        type: 'number',
        description:
          'Indicates the plus or minus error assessed against the method used to derive the elevation.',
      },
      entity: {
        $ref: '#/$defs/entity_ingest',
      },
      eval: {
        type: 'integer',
        description:
          'Eval represents the Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.',
      },
      faa: {
        type: 'string',
        description: 'The Federal Aviation Administration (FAA) Location ID of this site, if applicable.',
      },
      fpa: {
        type: 'string',
        description:
          'Functional Production Area (FPA) under the Shared Production Program (SPP). Producers are defined per country per FPA. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.',
      },
      functPrimary: {
        type: 'string',
        description:
          'Principal operational function being performed. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.',
      },
      geoArea: {
        type: 'string',
        description:
          'Geographical region code used by the Requirements Management System (RMS) as specified by National Geospatial Agency (NGA) in Flight Information Publications (FIPS) 10-4, Appendix 3 - Country Code and Geographic Region Codes. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.',
      },
      geoidalMslSep: {
        type: 'number',
        description: 'The distance between Mean Sea Level and a referenced ellipsoid, in meters.',
      },
      grade: {
        type: 'integer',
        description:
          'Indicates the amount or degree of deviation from the horizontal represented as a percent.  Grade is determined by the formula: vertical distance (VD) divided by horizontal distance (HD) times 100. VD is the difference between the highest and  lowest elevation within the entity. HD is the linear distance between the highest and lowest elevation.',
      },
      iata: {
        type: 'string',
        description: 'The International Air Transport Association (IATA) code of this site, if applicable.',
      },
      icao: {
        type: 'string',
        description: 'The International Civil Aviation Organization (ICAO) code of this site, if applicable.',
      },
      ident: {
        type: 'string',
        description:
          'Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): \n\nASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.\n\nFRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.\n\nHOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.\n\nFAKER: Friendly track, object, or entity acting as an exercise hostile.\n\nJOKER: Friendly track, object, or entity acting as an exercise suspect.\n\nNEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.\n\nPENDING: Track object which has not been evaluated.\n\nSUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.\n\nUNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.',
      },
      idEntity: {
        type: 'string',
        description: 'Unique identifier of the parent entity. idEntity is required for Put.',
      },
      idParentSite: {
        type: 'string',
        description: 'Unique identifier of the Parent Site record associated with this Site record.',
      },
      lzUsage: {
        type: 'string',
        description:
          'Indicates the normal usage of the Landing Zone (LZ).  Intended as, but not constrained to MIDB Helocopter Landing Area usage value definitions:\n\nAF - Airfield\n\nFD - Field\n\nHC - High Crop.  1 meter and over.\n\nHY - Highway\n\nLB - Lake Bed\n\nLC - Low Crop.  0-1 meters\n\nO - Other. Explain In Remarks.\n\nPD - Paddy\n\nPK - Park\n\nPS - Pasture\n\nRB - Riverbed\n\nSP - Sport Field\n\nU - Unknown\n\nZ - Inconclusive Analysis.',
      },
      maxRunwayLength: {
        type: 'integer',
        description: 'The length of the longest runway at this site, if applicable, in meters.',
      },
      milGrid: {
        type: 'string',
        description:
          'The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:\n\n4Q (grid zone designator, GZD)\n\nFJ (the 100,000-meter square identifier)\n\n12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).',
      },
      milGridSys: {
        type: 'string',
        description:
          'Indicates the grid system used in the development of the milGrid coordinates. Values are:\n\nUPS - Universal Polar System\n\nUTM - Universal Transverse Mercator.',
      },
      msnPrimary: {
        type: 'string',
        description:
          'Indicates the principal type of mission that an entity is organized and equipped to perform. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.',
      },
      msnPrimarySpec: {
        type: 'string',
        description:
          'Indicates the principal specialty type of mission that an entity is organized and equipped to perform. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.',
      },
      notes: {
        type: 'string',
        description: 'Optional notes/comments for the site.',
      },
      nucCap: {
        type: 'string',
        description:
          'A sites ability to conduct nuclear warfare. Valid Values are:\n\nA - Nuclear Ammo Or Warheads Available\n\nN - No Nuclear Offense\n\nO - Other. Explain in Remarks\n\nU - Unknown\n\nW - Nuclear Weapons Available\n\nY - Nuclear Warfare Offensive Capability\n\nZ - Inconclusive Analysis.',
      },
      operStatus: {
        type: 'string',
        description:
          'The Degree to which an entity is ready to perform the overall operational mission(s) for which it was organized and equipped. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.',
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
      origLzId: {
        type: 'string',
        description: 'Unique identifier of the LZ record from the originating system.',
      },
      origSiteID: {
        type: 'string',
        description: 'Unique identifier of the Site record from the originating system.',
      },
      osuffix: {
        type: 'string',
        description:
          'The O-suffix associated with this site. The O-suffix is a five-character alpha/numeric system used to identify a site, or demographic area, within an installation. The Installation Basic Encyclopedia (beNumber), in conjunction with the O-suffix, uniquely identifies the Site. The Installation beNumber and oSuffix are also used in conjunction with the catCode to classify the function or purpose of the facility.',
      },
      pin: {
        type: 'string',
        description: 'Site number of a specific electronic site or its associated equipment.',
      },
      polSubdiv: {
        type: 'string',
        description:
          'Political subdivision in which the geographic coordinates reside. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.',
      },
      popArea: {
        type: 'boolean',
        description:
          'Indicates whether the facility is in or outside of a populated area. True, the facility is in or within 5 NM of a populated area. False, the facility is outside a populated area.',
      },
      popAreaProx: {
        type: 'number',
        description:
          'Indicates the distance to nearest populated area (over 1,000 people) in nautical miles.',
      },
      recStatus: {
        type: 'string',
        description:
          'Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs.\n\nA - Active\n\nI - Inactive\n\nK - Acknowledged\n\nL - Local\n\nQ - A nominated (NOM) or Data Change Request (DCR) record\n\nR - Production reduced by CMD decision\n\nW - Working Record.',
      },
      referenceDoc: {
        type: 'string',
        description:
          'The reference documentation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.',
      },
      resProd: {
        type: 'string',
        description:
          'Responsible Producer - Organization that is responsible for the maintenance of the record.',
      },
      reviewDate: {
        type: 'string',
        description:
          'Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency, in ISO8601 UTC format. This date cannot be greater than the current date.',
        format: 'date',
      },
      runways: {
        type: 'integer',
        description: 'The number of runways at the site, if applicable.',
      },
      symCode: {
        type: 'string',
        description:
          'A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element ident.',
      },
      type: {
        type: 'string',
        description: 'The type of this site (AIRBASE, AIRFIELD, AIRPORT, NAVAL STATION, etc.).',
      },
      usage: {
        type: 'string',
        description: 'The use authorization type of this site (e.g MILITARY, CIVIL, JOINT-USE, etc.).',
      },
      utm: {
        type: 'string',
        description:
          'Universal Transverse Mercator (UTM) grid coordinates.\n\nPos. 1-2, UTM Zone Column   [01-60\n\nPos. 3, UTM Zone Row   [C-HJ-NP-X]\n\nPos. 4, UTM False Easting   [0-9]\n\nPos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]\n\nPos. 10-11, UTM False Northing    [0-9][0-9]\n\nPos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].',
      },
      vegHt: {
        type: 'number',
        description: 'Maximum expected height of the vegetation in the Landing Zone (LZ), in meters.',
      },
      vegType: {
        type: 'string',
        description:
          'The predominant vegetation found in the Landing Zone (LZ). The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.',
      },
      wac: {
        type: 'string',
        description:
          'World Aeronautical Chart identifier for the area in which a designated place is located.',
      },
    },
    $defs: {
      entity_ingest: {
        type: 'object',
        description:
          'An entity is a generic representation of any object within a space/SSA system such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An entity can have an operating unit, a location (if terrestrial), and statuses.',
        properties: {
          classificationMarking: {
            type: 'string',
            description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
          },
          dataMode: {
            type: 'string',
            description:
              'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
            enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
          },
          name: {
            type: 'string',
            description: 'Unique entity name.',
          },
          source: {
            type: 'string',
            description: 'Source of the data.',
          },
          type: {
            type: 'string',
            description:
              'The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR, LASEREMITTER, NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).',
            enum: [
              'AIRCRAFT',
              'BUS',
              'COMM',
              'IR',
              'LASEREMITTER',
              'NAVIGATION',
              'ONORBIT',
              'RFEMITTER',
              'SCIENTIFIC',
              'SENSOR',
              'SITE',
              'VESSEL',
            ],
          },
          countryCode: {
            type: 'string',
            description:
              'The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.',
          },
          createdAt: {
            type: 'string',
            description: 'Time the row was created in the database, auto-populated by the system.',
            format: 'date-time',
          },
          createdBy: {
            type: 'string',
            description:
              'Application user who created the row in the database, auto-populated by the system.',
          },
          idEntity: {
            type: 'string',
            description: 'Unique identifier of the record.',
          },
          idLocation: {
            type: 'string',
            description: 'Unique identifier of the entity location, if terrestrial/fixed.',
          },
          idOnOrbit: {
            type: 'string',
            description:
              'Onorbit identifier if this entity is part of an on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.',
          },
          idOperatingUnit: {
            type: 'string',
            description: 'Unique identifier of the associated operating unit object.',
          },
          location: {
            $ref: '#/$defs/location_ingest',
          },
          onOrbit: {
            type: 'object',
            description: 'Model object representing on-orbit objects or satellites in the system.',
            properties: {
              classificationMarking: {
                type: 'string',
                description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
              },
              dataMode: {
                type: 'string',
                description:
                  'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
                enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
              },
              satNo: {
                type: 'integer',
                description: 'Satellite/Catalog number of the target on-orbit object.',
              },
              source: {
                type: 'string',
                description: 'Source of the data.',
              },
              altName: {
                type: 'string',
                description: 'Alternate name of the on-orbit object.',
              },
              category: {
                type: 'string',
                description:
                  'Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic, Heliocentric, Interplanetary, Lagrangian, Docked).',
                enum: [
                  'Unknown',
                  'On-Orbit',
                  'Decayed',
                  'Cataloged Without State',
                  'Launch Nominal',
                  'Analyst Satellite',
                  'Cislunar',
                  'Lunar',
                  'Hyperbolic',
                  'Heliocentric',
                  'Interplanetary',
                  'Lagrangian',
                  'Docked',
                ],
              },
              commonName: {
                type: 'string',
                description: 'Common name of the on-orbit object.',
              },
              constellation: {
                type: 'string',
                description: 'Constellation to which this satellite belongs.',
              },
              countryCode: {
                type: 'string',
                description:
                  'The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.',
              },
              createdAt: {
                type: 'string',
                description: 'Time the row was created in the database, auto-populated by the system.',
                format: 'date-time',
              },
              createdBy: {
                type: 'string',
                description:
                  'Application user who created the row in the database, auto-populated by the system.',
              },
              decayDate: {
                type: 'string',
                description: 'Date of decay.',
                format: 'date-time',
              },
              idOnOrbit: {
                type: 'string',
                description:
                  'For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites, auto-generated by the system.',
              },
              intlDes: {
                type: 'string',
                description:
                  'International Designator, typically of the format YYYYLLLAAA, where YYYY is the launch year, LLL is the sequential launch number of that year, and AAA is an optional launch piece designator for the launch.',
              },
              launchDate: {
                type: 'string',
                description: 'Date of launch.',
                format: 'date',
              },
              launchSiteId: {
                type: 'string',
                description: 'Id of the associated launchSite entity.',
              },
              lifetimeYears: {
                type: 'integer',
                description: 'Estimated lifetime of the on-orbit payload, if known.',
              },
              missionNumber: {
                type: 'string',
                description: 'Mission number of the on-orbit object.',
              },
              objectType: {
                type: 'string',
                description:
                  'Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED, UNKNOWN.',
                enum: ['ROCKET BODY', 'DEBRIS', 'PAYLOAD', 'PLATFORM', 'MANNED', 'UNKNOWN'],
              },
              origin: {
                type: 'string',
                description:
                  'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
              },
              origNetwork: {
                type: 'string',
                description:
                  'The originating source network on which this record was created, auto-populated by the system.',
              },
            },
            required: ['classificationMarking', 'dataMode', 'satNo', 'source'],
          },
          origin: {
            type: 'string',
            description:
              'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
          },
          origNetwork: {
            type: 'string',
            description:
              'The originating source network on which this record was created, auto-populated by the system.',
          },
          ownerType: {
            type: 'string',
            description:
              'Type of organization which owns this entity (e.g. Commercial, Government, Academic, Consortium, etc).',
            enum: ['Commercial', 'Government', 'Academic', 'Consortium', 'Other'],
          },
          taskable: {
            type: 'boolean',
            description: 'Boolean indicating if this entity is taskable.',
          },
          urls: {
            type: 'array',
            description: 'List of URLs to additional details/documents for this entity.',
            items: {
              type: 'string',
            },
          },
        },
        required: ['classificationMarking', 'dataMode', 'name', 'source', 'type'],
      },
      location_ingest: {
        type: 'object',
        description:
          'Model representation of a location, which is a specific fixed point on the earth and is used to denote the locations of fixed sensors, operating units, etc.',
        properties: {
          classificationMarking: {
            type: 'string',
            description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
          },
          dataMode: {
            type: 'string',
            description:
              'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
            enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
          },
          name: {
            type: 'string',
            description: 'Location name.',
          },
          source: {
            type: 'string',
            description: 'Source of the data.',
          },
          altitude: {
            type: 'number',
            description: 'Altitude of the location, in kilometers.',
          },
          countryCode: {
            type: 'string',
            description:
              'The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.',
          },
          createdAt: {
            type: 'string',
            description: 'Time the row was created in the database, auto-populated by the system.',
            format: 'date-time',
          },
          createdBy: {
            type: 'string',
            description:
              'Application user who created the row in the database, auto-populated by the system.',
          },
          idLocation: {
            type: 'string',
            description: 'Unique identifier of the location, auto-generated by the system.',
          },
          lat: {
            type: 'number',
            description:
              'WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).',
          },
          lon: {
            type: 'number',
            description:
              'WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).',
          },
          origin: {
            type: 'string',
            description:
              'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
          },
          origNetwork: {
            type: 'string',
            description:
              'The originating source network on which this record was created, auto-populated by the system.',
          },
        },
        required: ['classificationMarking', 'dataMode', 'name', 'source'],
      },
    },
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.site.create(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
