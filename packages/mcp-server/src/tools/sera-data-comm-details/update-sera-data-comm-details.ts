// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'sera_data_comm_details',
  operation: 'write',
  tags: [],
  httpMethod: 'put',
  httpPath: '/udl/seradatacommdetails/{id}',
};

export const tool: Tool = {
  name: 'update_sera_data_comm_details',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to update an SeradataCommDetails. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {}\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      id: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      band: {
        type: 'string',
        description:
          'Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.',
      },
      bandwidth: {
        type: 'number',
        description: 'Comm bandwidth in Mhz.',
      },
      eirp: {
        type: 'number',
        description: 'Effective isotropic radiated power in dB.',
      },
      estHtsTotalCapacity: {
        type: 'number',
        description: 'Comm estimated HtsTotalCapacity in Gbps.',
      },
      estHtsTotalUserDownlinkBandwidthPerBeam: {
        type: 'number',
        description: 'Comm estimated HtsTotalUserDownlinkBandwidthPerBeam in Mhz.',
      },
      estHtsTotalUserUplinkBandwidthPerBeam: {
        type: 'number',
        description: 'Comm estimated HtsTotalUserUplinkBandwidthPerBeam in Mhz.',
      },
      gatewayDownlinkFrom: {
        type: 'number',
        description: 'Comm gatewayDownlinkFrom in Ghz.',
      },
      gatewayDownlinkTo: {
        type: 'number',
        description: 'Comm gatewayDownlinkTo in Ghz.',
      },
      gatewayUplinkFrom: {
        type: 'number',
        description: 'Comm gatewayUplinkFrom in Ghz.',
      },
      gatewayUplinkTo: {
        type: 'number',
        description: 'Comm gatewayUplinkTo in Ghz.',
      },
      hostedForCompanyOrgId: {
        type: 'string',
        description: 'Comm hostedForCompanyOrgId.',
      },
      htsNumUserSpotBeams: {
        type: 'integer',
        description: 'Comm htsNumUserSpotBeams.',
      },
      htsUserDownlinkBandwidthPerBeam: {
        type: 'number',
        description: 'Comm htsUserDownlinkBandwidthPerBeam in Mhz.',
      },
      htsUserUplinkBandwidthPerBeam: {
        type: 'number',
        description: 'Comm htsUserUplinkBandwidthPerBeam in Mhz.',
      },
      idComm: {
        type: 'string',
        description: 'UUID of the parent Comm record.',
      },
      manufacturerOrgId: {
        type: 'string',
        description: 'Comm manufacturerOrgId.',
      },
      num36MhzEquivalentTransponders: {
        type: 'integer',
        description: 'Comm num36MhzEquivalentTransponders.',
      },
      numOperationalTransponders: {
        type: 'integer',
        description: 'Comm numOperationalTransponders.',
      },
      numSpareTransponders: {
        type: 'integer',
        description: 'Comm numSpareTransponders.',
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
      payloadNotes: {
        type: 'string',
        description: 'Payload notes.',
      },
      polarization: {
        type: 'string',
        description: 'Comm polarization.',
      },
      solidStatePowerAmp: {
        type: 'number',
        description: 'Solid state power amplifier, in Watts.',
      },
      spacecraftId: {
        type: 'string',
        description: 'Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).',
      },
      tradeLeaseOrgId: {
        type: 'string',
        description: 'Comm tradeLeaseOrgId.',
      },
      travelingWaveTubeAmplifier: {
        type: 'number',
        description: 'Comm travelingWaveTubeAmplifier in Watts.',
      },
      userDownlinkFrom: {
        type: 'number',
        description: 'Comm userDownlinkFrom in Ghz.',
      },
      userDownlinkTo: {
        type: 'number',
        description: 'Comm userDownlinkTo in Ghz.',
      },
      userUplinkFrom: {
        type: 'number',
        description: 'Comm userUplinkFrom in Ghz.',
      },
      userUplinkTo: {
        type: 'number',
        description: 'Comm userUplinkTo in Ghz.',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { id, ...body } = args as any;
  const response = await client.seraDataCommDetails.update(id, body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
