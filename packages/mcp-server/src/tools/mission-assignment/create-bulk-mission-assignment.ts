// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'mission_assignment',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/missionassignment/createBulk',
};

export const tool: Tool = {
  name: 'create_bulk_mission_assignment',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to take multiple MissionAssignments as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
  inputSchema: {
    type: 'object',
    properties: {
      body: {
        type: 'array',
        items: {
          type: 'object',
          description: 'Platform mission assignment data.',
          properties: {
            classificationMarking: {
              type: 'string',
              description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
            },
            dataMode: {
              type: 'string',
              description:
                'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
              enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
            },
            mad: {
              type: 'string',
              description: 'The mission assignment discrete value.',
            },
            source: {
              type: 'string',
              description: 'Source of the data.',
            },
            ts: {
              type: 'string',
              description: 'The timestamp of the mission data, in ISO 8601 UTC format.',
              format: 'date-time',
            },
            id: {
              type: 'string',
              description: 'Unique identifier of the record, auto-generated by the system.',
            },
            c1associateddmpis: {
              type: 'integer',
              description: 'TARGET POSITION CONTINUATION WORD - number of associated dmpis.',
            },
            c2air: {
              type: 'string',
              description: 'TARGET DATA CONTINUATION WORD - air specific type, see TABLE B-21.',
            },
            c2alt: {
              type: 'integer',
              description: 'TARGET DATA CONTINUATION WORD - altitude, 100 FT, 2047=NS.',
            },
            c2crs: {
              type: 'integer',
              description: 'TARGET DATA CONTINUATION WORD - course in increments of 1 degree.',
            },
            c2exerciseindicator: {
              type: 'string',
              description: 'TARGET DATA CONTINUATION WORD - exercise indicator.',
            },
            c2exercisemof: {
              type: 'string',
              description: 'TARGET DATA CONTINUATION WORD - method of fire.',
            },
            c2id: {
              type: 'string',
              description: 'TARGET DATA CONTINUATION WORD - identity.',
            },
            c2idamplifyingdescriptor: {
              type: 'string',
              description: 'TARGET DATA CONTINUATION WORD - identity amplifying descriptor.',
            },
            c2lnd: {
              type: 'string',
              description: 'TARGET DATA CONTINUATION WORD - land specific type, see TABLE B-21.',
            },
            c2spc: {
              type: 'string',
              description: 'TARGET DATA CONTINUATION WORD - space specific type, see TABLE B-39.',
            },
            c2spd: {
              type: 'integer',
              description: 'TARGET DATA CONTINUATION WORD - speed in 2 DM/HR, 2047=NS.',
            },
            c2specialinterestindicator: {
              type: 'string',
              description: 'TARGET DATA CONTINUATION WORD - special interest indicator.',
            },
            c2sur: {
              type: 'string',
              description: 'TARGET DATA CONTINUATION WORD - surface specific type, see TABLE B-21.',
            },
            c3elv: {
              type: 'number',
              description: 'POINT LOCATION CONTINUATION WORD - elevation, 25 FT, 1023=NS.',
            },
            c3lat: {
              type: 'number',
              description: 'POINT LOCATION CONTINUATION WORD - latitude, 0.0013 MINUTE.',
            },
            c3lon: {
              type: 'number',
              description: 'POINT LOCATION CONTINUATION WORD - longitude, 0.0013 MINUTE.',
            },
            c3ptl: {
              type: 'string',
              description: 'TARGET DATA CONTINUATION WORD - point type 1.',
            },
            c3ptnum: {
              type: 'string',
              description: 'TARGET DATA CONTINUATION WORD - point number.',
            },
            c4colon: {
              type: 'integer',
              description: 'SURFACE ATTACK CONTINUATION WORD - minute.',
            },
            c4def: {
              type: 'string',
              description: 'SURFACE ATTACK CONTINUATION WORD - target defenses.',
            },
            c4egress: {
              type: 'integer',
              description: 'SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.',
            },
            c4mod: {
              type: 'integer',
              description: 'SURFACE ATTACK CONTINUATION WORD - mode of delivery.',
            },
            c4numberofstores: {
              type: 'integer',
              description: 'SURFACE ATTACK CONTINUATION WORD - number of stores, NS=63.',
            },
            c4runin: {
              type: 'integer',
              description: 'SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.',
            },
            c4tgt: {
              type: 'string',
              description: 'SURFACE ATTACK CONTINUATION WORD - target type - see TABLE B-32.',
            },
            c4timediscrete: {
              type: 'string',
              description: 'SURFACE ATTACK CONTINUATION WORD - time discrete.',
            },
            c4tm: {
              type: 'integer',
              description: 'SURFACE ATTACK CONTINUATION WORD - hour.',
            },
            c4typeofstores: {
              type: 'integer',
              description: 'SURFACE ATTACK CONTINUATION WORD - type of stores.',
            },
            c5colon: {
              type: 'integer',
              description: 'SURFACE ATTACK CONTINUATION WORD - seconds in increments of 1 sec.',
            },
            c5elevationlsbs: {
              type: 'integer',
              description: 'CONTINUATION WORD - used with c3_elv to double precision to approx 3 ft.',
            },
            c5haeadj: {
              type: 'integer',
              description: 'CONTINUATION WORD - hae adjustment, measured in 3.125 FT.',
            },
            c5latlsb: {
              type: 'integer',
              description: 'CONTINUATION WORD - used with c3_lat to double precision to approx 4 ft.',
            },
            c5lonlsb: {
              type: 'integer',
              description: 'CONTINUATION WORD - used with c3_lon to double precision to approx 4 ft.',
            },
            c5tgtbrng: {
              type: 'integer',
              description: 'CONTINUATION WORD - target bearing.',
            },
            c5tw: {
              type: 'integer',
              description: 'CONTINUATION WORD - time window.',
            },
            c6dspc: {
              type: 'string',
              description: 'TARGETING CONTINUATION WORD - designator/seeker pulse code.',
            },
            c6dspct: {
              type: 'string',
              description: 'TARGETING CONTINUATION WORD - designator/seeker pulse code type.',
            },
            c6fplpm: {
              type: 'string',
              description: 'TARGETING CONTINUATION WORD - first pulse/last pulse mode.',
            },
            c6intel: {
              type: 'integer',
              description: 'TARGETING CONTINUATION WORD - index number, related, 0=NS.',
            },
            c6laser: {
              type: 'integer',
              description: 'TARGETING CONTINUATION WORD - laser illuminator code.',
            },
            c6longpm: {
              type: 'string',
              description: 'TARGETING CONTINUATION WORD - long pulse mode.',
            },
            c6tnr3: {
              type: 'integer',
              description: 'TARGETING CONTINUATION WORD - track number, related to 3.',
            },
            c7elang2: {
              type: 'number',
              description: 'THIRD PARTY CONTINUATION WORD  - elevation angle, 2.',
            },
            c7in3p: {
              type: 'integer',
              description: 'THIRD PARTY CONTINUATION WORD  - index number, third party.',
            },
            c7tnor: {
              type: 'string',
              description: 'THIRD PARTY CONTINUATION WORD  - track number, index originator.',
            },
            createdAt: {
              type: 'string',
              description: 'Time the row was created in the database, auto-populated by the system.',
              format: 'date-time',
            },
            createdBy: {
              type: 'string',
              description:
                'Application user who created the row in the database, auto-populated by the system.',
            },
            env: {
              type: 'string',
              description: 'Environment.',
            },
            index: {
              type: 'integer',
              description: 'Index number.',
            },
            lat: {
              type: 'number',
              description:
                'WGS84 latitude, in degrees. -90 to 90 degrees (negative values south of equator).',
            },
            lon: {
              type: 'number',
              description:
                'WGS84 longitude, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).',
            },
            orginx: {
              type: 'string',
              description: 'Origin of index number.',
            },
            origin: {
              type: 'string',
              description:
                'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
            },
            origNetwork: {
              type: 'string',
              description:
                'The originating source network on which this record was created, auto-populated by the system.',
            },
            rc: {
              type: 'string',
              description: 'Receipt/Compliance, values from TABLE B-9.',
            },
            rr: {
              type: 'integer',
              description: 'Recurrence rate, receipt/compliance.',
            },
            sz: {
              type: 'string',
              description: 'Strength.',
            },
            tno: {
              type: 'string',
              description: 'Track number objective.',
            },
            trkId: {
              type: 'string',
              description: 'The track ID that the status is referencing, addressee.',
            },
            twenv: {
              type: 'string',
              description: 'Threat warning environment.',
            },
          },
          required: ['classificationMarking', 'dataMode', 'mad', 'source', 'ts'],
        },
      },
    },
    required: ['body'],
  },
  annotations: {},
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.missionAssignment.createBulk(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
