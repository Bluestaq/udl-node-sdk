// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'udl-node-sdk';

export const metadata: Metadata = {
  resource: 'mission_assignment',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/missionassignment/{id}',
};

export const tool: Tool = {
  name: 'get_mission_assignment',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to get a single MissionAssignment record by its unique ID passed as a path parameter.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  description: 'Platform mission assignment data.',\n  properties: {\n    classificationMarking: {\n      type: 'string',\n      description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n    },\n    dataMode: {\n      type: 'string',\n      description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n      enum: [        'REAL',\n        'TEST',\n        'SIMULATED',\n        'EXERCISE'\n      ]\n    },\n    mad: {\n      type: 'string',\n      description: 'The mission assignment discrete value.'\n    },\n    source: {\n      type: 'string',\n      description: 'Source of the data.'\n    },\n    ts: {\n      type: 'string',\n      description: 'The timestamp of the mission data, in ISO 8601 UTC format.',\n      format: 'date-time'\n    },\n    id: {\n      type: 'string',\n      description: 'Unique identifier of the record, auto-generated by the system.'\n    },\n    c1associateddmpis: {\n      type: 'integer',\n      description: 'TARGET POSITION CONTINUATION WORD - number of associated dmpis.'\n    },\n    c2air: {\n      type: 'string',\n      description: 'TARGET DATA CONTINUATION WORD - air specific type, see TABLE B-21.'\n    },\n    c2alt: {\n      type: 'integer',\n      description: 'TARGET DATA CONTINUATION WORD - altitude, 100 FT, 2047=NS.'\n    },\n    c2crs: {\n      type: 'integer',\n      description: 'TARGET DATA CONTINUATION WORD - course in increments of 1 degree.'\n    },\n    c2exerciseindicator: {\n      type: 'string',\n      description: 'TARGET DATA CONTINUATION WORD - exercise indicator.'\n    },\n    c2exercisemof: {\n      type: 'string',\n      description: 'TARGET DATA CONTINUATION WORD - method of fire.'\n    },\n    c2id: {\n      type: 'string',\n      description: 'TARGET DATA CONTINUATION WORD - identity.'\n    },\n    c2idamplifyingdescriptor: {\n      type: 'string',\n      description: 'TARGET DATA CONTINUATION WORD - identity amplifying descriptor.'\n    },\n    c2lnd: {\n      type: 'string',\n      description: 'TARGET DATA CONTINUATION WORD - land specific type, see TABLE B-21.'\n    },\n    c2spc: {\n      type: 'string',\n      description: 'TARGET DATA CONTINUATION WORD - space specific type, see TABLE B-39.'\n    },\n    c2spd: {\n      type: 'integer',\n      description: 'TARGET DATA CONTINUATION WORD - speed in 2 DM/HR, 2047=NS.'\n    },\n    c2specialinterestindicator: {\n      type: 'string',\n      description: 'TARGET DATA CONTINUATION WORD - special interest indicator.'\n    },\n    c2sur: {\n      type: 'string',\n      description: 'TARGET DATA CONTINUATION WORD - surface specific type, see TABLE B-21.'\n    },\n    c3elv: {\n      type: 'number',\n      description: 'POINT LOCATION CONTINUATION WORD - elevation, 25 FT, 1023=NS.'\n    },\n    c3lat: {\n      type: 'number',\n      description: 'POINT LOCATION CONTINUATION WORD - latitude, 0.0013 MINUTE.'\n    },\n    c3lon: {\n      type: 'number',\n      description: 'POINT LOCATION CONTINUATION WORD - longitude, 0.0013 MINUTE.'\n    },\n    c3ptl: {\n      type: 'string',\n      description: 'TARGET DATA CONTINUATION WORD - point type 1.'\n    },\n    c3ptnum: {\n      type: 'string',\n      description: 'TARGET DATA CONTINUATION WORD - point number.'\n    },\n    c4colon: {\n      type: 'integer',\n      description: 'SURFACE ATTACK CONTINUATION WORD - minute.'\n    },\n    c4def: {\n      type: 'string',\n      description: 'SURFACE ATTACK CONTINUATION WORD - target defenses.'\n    },\n    c4egress: {\n      type: 'integer',\n      description: 'SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.'\n    },\n    c4mod: {\n      type: 'integer',\n      description: 'SURFACE ATTACK CONTINUATION WORD - mode of delivery.'\n    },\n    c4numberofstores: {\n      type: 'integer',\n      description: 'SURFACE ATTACK CONTINUATION WORD - number of stores, NS=63.'\n    },\n    c4runin: {\n      type: 'integer',\n      description: 'SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.'\n    },\n    c4tgt: {\n      type: 'string',\n      description: 'SURFACE ATTACK CONTINUATION WORD - target type - see TABLE B-32.'\n    },\n    c4timediscrete: {\n      type: 'string',\n      description: 'SURFACE ATTACK CONTINUATION WORD - time discrete.'\n    },\n    c4tm: {\n      type: 'integer',\n      description: 'SURFACE ATTACK CONTINUATION WORD - hour.'\n    },\n    c4typeofstores: {\n      type: 'integer',\n      description: 'SURFACE ATTACK CONTINUATION WORD - type of stores.'\n    },\n    c5colon: {\n      type: 'integer',\n      description: 'SURFACE ATTACK CONTINUATION WORD - seconds in increments of 1 sec.'\n    },\n    c5elevationlsbs: {\n      type: 'integer',\n      description: 'CONTINUATION WORD - used with c3_elv to double precision to approx 3 ft.'\n    },\n    c5haeadj: {\n      type: 'integer',\n      description: 'CONTINUATION WORD - hae adjustment, measured in 3.125 FT.'\n    },\n    c5latlsb: {\n      type: 'integer',\n      description: 'CONTINUATION WORD - used with c3_lat to double precision to approx 4 ft.'\n    },\n    c5lonlsb: {\n      type: 'integer',\n      description: 'CONTINUATION WORD - used with c3_lon to double precision to approx 4 ft.'\n    },\n    c5tgtbrng: {\n      type: 'integer',\n      description: 'CONTINUATION WORD - target bearing.'\n    },\n    c5tw: {\n      type: 'integer',\n      description: 'CONTINUATION WORD - time window.'\n    },\n    c6dspc: {\n      type: 'string',\n      description: 'TARGETING CONTINUATION WORD - designator/seeker pulse code.'\n    },\n    c6dspct: {\n      type: 'string',\n      description: 'TARGETING CONTINUATION WORD - designator/seeker pulse code type.'\n    },\n    c6fplpm: {\n      type: 'string',\n      description: 'TARGETING CONTINUATION WORD - first pulse/last pulse mode.'\n    },\n    c6intel: {\n      type: 'integer',\n      description: 'TARGETING CONTINUATION WORD - index number, related, 0=NS.'\n    },\n    c6laser: {\n      type: 'integer',\n      description: 'TARGETING CONTINUATION WORD - laser illuminator code.'\n    },\n    c6longpm: {\n      type: 'string',\n      description: 'TARGETING CONTINUATION WORD - long pulse mode.'\n    },\n    c6tnr3: {\n      type: 'integer',\n      description: 'TARGETING CONTINUATION WORD - track number, related to 3.'\n    },\n    c7elang2: {\n      type: 'number',\n      description: 'THIRD PARTY CONTINUATION WORD  - elevation angle, 2.'\n    },\n    c7in3p: {\n      type: 'integer',\n      description: 'THIRD PARTY CONTINUATION WORD  - index number, third party.'\n    },\n    c7tnor: {\n      type: 'string',\n      description: 'THIRD PARTY CONTINUATION WORD  - track number, index originator.'\n    },\n    createdAt: {\n      type: 'string',\n      description: 'Time the row was created in the database, auto-populated by the system.',\n      format: 'date-time'\n    },\n    createdBy: {\n      type: 'string',\n      description: 'Application user who created the row in the database, auto-populated by the system.'\n    },\n    env: {\n      type: 'string',\n      description: 'Environment.'\n    },\n    index: {\n      type: 'integer',\n      description: 'Index number.'\n    },\n    lat: {\n      type: 'number',\n      description: 'WGS84 latitude, in degrees. -90 to 90 degrees (negative values south of equator).'\n    },\n    lon: {\n      type: 'number',\n      description: 'WGS84 longitude, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).'\n    },\n    orginx: {\n      type: 'string',\n      description: 'Origin of index number.'\n    },\n    origin: {\n      type: 'string',\n      description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n    },\n    origNetwork: {\n      type: 'string',\n      description: 'The originating source network on which this record was created, auto-populated by the system.'\n    },\n    rc: {\n      type: 'string',\n      description: 'Receipt/Compliance, values from TABLE B-9.'\n    },\n    rr: {\n      type: 'integer',\n      description: 'Recurrence rate, receipt/compliance.'\n    },\n    sz: {\n      type: 'string',\n      description: 'Strength.'\n    },\n    tno: {\n      type: 'string',\n      description: 'Track number objective.'\n    },\n    trkId: {\n      type: 'string',\n      description: 'The track ID that the status is referencing, addressee.'\n    },\n    twenv: {\n      type: 'string',\n      description: 'Threat warning environment.'\n    },\n    updatedAt: {\n      type: 'string',\n      description: 'Time the row was updated in the database, auto-populated by the system.',\n      format: 'date-time'\n    },\n    updatedBy: {\n      type: 'string',\n      description: 'Application user who updated the row in the database, auto-populated by the system.'\n    }\n  },\n  required: [    'classificationMarking',\n    'dataMode',\n    'mad',\n    'source',\n    'ts'\n  ]\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      id: {
        type: 'string',
      },
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['id'],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { id, ...body } = args as any;
  return asTextContentResult(await maybeFilter(args, await client.missionAssignment.get(id, body)));
};

export default { metadata, tool, handler };
