// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'launch_detection',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/launchdetection',
};

export const tool: Tool = {
  name: 'create_launch_detection',
  description:
    'Service operation to take a single launch detection as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.',
  inputSchema: {
    type: 'object',
    properties: {
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      messageType: {
        type: 'string',
        description: 'Type of message for the data.',
      },
      observationLatitude: {
        type: 'number',
        description:
          'Latitude of launch vehicle at observation time (in Degrees). -90 to 90 degrees (negative values south of equator).',
      },
      observationLongitude: {
        type: 'number',
        description: 'Longitude of launch vehicle at observation time (in Degrees).',
      },
      observationTime: {
        type: 'string',
        description: 'Time of observation.',
        format: 'date-time',
      },
      sequenceNumber: {
        type: 'integer',
        description: 'Integer indicating how messages should be sequenced for a specific event.',
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      id: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      descriptor: {
        type: 'string',
        description: 'Optional source-provided and searchable metadata or descriptor of the data.',
      },
      eventId: {
        type: 'string',
        description: 'Id to be able to correlate different messages to a specific event.',
      },
      highZenithAzimuth: {
        type: 'boolean',
        description: 'Flag indicating that the Launch azimuth is uncertain due to near vertical flight path.',
      },
      inclination: {
        type: 'number',
        description: 'Orbit Inclination (in Degrees).',
      },
      launchAzimuth: {
        type: 'number',
        description: 'Angle measured clockwise from North for the launch heading (in Degrees).',
      },
      launchLatitude: {
        type: 'number',
        description:
          'Geodetic Latitude of launch origin (in Degrees). -90 to 90 degrees (negative values south of equator).',
      },
      launchLongitude: {
        type: 'number',
        description:
          'Geodetic Longitude of launch origin (in Degrees). -180 to 180 degrees (negative values west of Prime Meridian).',
      },
      launchTime: {
        type: 'string',
        description: 'Time of Launch.',
        format: 'date-time',
      },
      observationAltitude: {
        type: 'number',
        description: 'Altitude of launch vehicle at observation time (in KM).',
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
      raan: {
        type: 'number',
        description: 'Orbit Right Ascension of Ascending Node (in Degrees).',
      },
      stereoFlag: {
        type: 'boolean',
        description: 'Flag indicating multiple observers were used.',
      },
      tags: {
        type: 'array',
        description:
          'Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.',
        items: {
          type: 'string',
        },
      },
    },
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.launchDetection.create(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
