// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'engine_details',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/enginedetails',
};

export const tool: Tool = {
  name: 'create_engine_details',
  description:
    'Service operation to take a single EngineDetails as a POST body and ingest into the database. EngineDetails are launch vehicle engine details and performance characteristics/limits compiled by a particular source.  A launch vehicle engine may have several details records from multiple sources. A specific role is required to perform this service operation. Please contact the UDL team for assistance.',
  inputSchema: {
    type: 'object',
    properties: {
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      idEngine: {
        type: 'string',
        description: 'Identifier of the parent engine record.',
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      id: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      burnTime: {
        type: 'number',
        description: 'Launch engine maximum burn time in seconds.',
      },
      chamberPressure: {
        type: 'number',
        description: 'Engine chamber pressure in bars.',
      },
      characteristicType: {
        type: 'string',
        description: 'Engine characteristic type (e.g. Electric, Mono-propellant, Bi-propellant, etc.).',
      },
      cycleType: {
        type: 'string',
        description:
          'Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).',
      },
      family: {
        type: 'string',
        description: 'Engine type or family.',
      },
      manufacturerOrgId: {
        type: 'string',
        description: 'Organization ID of the engine manufacturer.',
      },
      maxFirings: {
        type: 'integer',
        description: 'Engine maximum number of firings.',
      },
      notes: {
        type: 'string',
        description: 'Notes/Description of the engine.',
      },
      nozzleExpansionRatio: {
        type: 'number',
        description: 'Engine nozzle expansion ratio.',
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
      oxidizer: {
        type: 'string',
        description: 'Oxidizer type (e.g. Nitrogen Tetroxide, Liquid Oxygen, etc).',
      },
      propellant: {
        type: 'string',
        description: 'Propellant/fuel type of the engine (e.g. Liquid Hydrogen, Kerosene, Aerozine, etc).',
      },
      seaLevelThrust: {
        type: 'number',
        description: 'Engine maximum thrust at sea level in Kilo-Newtons.',
      },
      specificImpulse: {
        type: 'number',
        description: 'Launch engine specific impulse in seconds.',
      },
      tags: {
        type: 'array',
        description:
          'Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.',
        items: {
          type: 'string',
        },
      },
      vacuumThrust: {
        type: 'number',
        description: 'Engine maximum thrust in a vacuum in Kilo-Newtons.',
      },
    },
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.engineDetails.create(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
