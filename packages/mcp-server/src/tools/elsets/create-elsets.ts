// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'elsets',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/elset',
};

export const tool: Tool = {
  name: 'create_elsets',
  description:
    'Service operation to take a single elset as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.',
  inputSchema: {
    type: 'object',
    properties: {
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      epoch: {
        type: 'string',
        description: 'Elset epoch time in ISO 8601 UTC format, with microsecond precision.',
        format: 'date-time',
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      agom: {
        type: 'number',
        description:
          'AGOM, expressed in m^2/kg, is the value of the (averaged) object Area times the solar radiation pressure coefficient(Gamma) over the object Mass. Applicable only with ephemType4.',
      },
      algorithm: {
        type: 'string',
        description: 'Optional algorithm used to produce this record.',
      },
      apogee: {
        type: 'number',
        description:
          'The orbit point furthest from the center of the earth in kilometers. If not provided, apogee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, apogee = (A * (1 + E)) in km. Note that the calculations are for computing the apogee radius from the center of the earth, to compute apogee altitude the radius of the earth should be subtracted (6378.135 km).',
      },
      argOfPerigee: {
        type: 'number',
        description:
          'The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.',
      },
      ballisticCoeff: {
        type: 'number',
        description: 'Ballistic coefficient, in m^2/kg. Applicable only with ephemType4.',
      },
      bStar: {
        type: 'number',
        description:
          'The drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.',
      },
      descriptor: {
        type: 'string',
        description: 'Optional source-provided and searchable metadata or descriptor of the data.',
      },
      eccentricity: {
        type: 'number',
        description:
          'The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.',
      },
      ephemType: {
        type: 'integer',
        description:
          'The ephemeris type associated with this TLE:\n\n0:&nbsp;SGP (or SGP4 with Kozai mean motion)\n\n1:&nbsp;SGP (Kozai mean motion)\n\n2:&nbsp;SGP4 (Brouver mean motion)\n\n3:&nbsp;SDP4\n\n4:&nbsp;SGP4-XP\n\n5:&nbsp;SDP8\n\n6:&nbsp;SP (osculating mean motion)\n\n',
      },
      idElset: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      idOrbitDetermination: {
        type: 'string',
        description:
          "Unique identifier of the OD solution record that produced this elset. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queried as /udl/orbitdetermination/abc.",
      },
      inclination: {
        type: 'number',
        description:
          'The angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.',
      },
      meanAnomaly: {
        type: 'number',
        description:
          'Where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.',
      },
      meanMotion: {
        type: 'number',
        description:
          'Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.',
      },
      meanMotionDDot: {
        type: 'number',
        description:
          '2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.',
      },
      meanMotionDot: {
        type: 'number',
        description:
          '1st derivative of the mean motion with respect to time. Units are revolutions per day squared.',
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
      origObjectId: {
        type: 'string',
        description:
          'Optional identifier provided by elset source to indicate the target onorbit object of this elset. This may be an internal identifier and not necessarily map to a valid satellite number.',
      },
      perigee: {
        type: 'number',
        description:
          'The orbit point nearest to the center of the earth in kilometers. If not provided, perigee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, perigee = (A * (1 - E)) in km. Note that the calculations are for computing the perigee radius from the center of the earth, to compute perigee altitude the radius of the earth should be subtracted (6378.135 km).',
      },
      period: {
        type: 'number',
        description: 'Period of the orbit equal to inverse of mean motion, in minutes.',
      },
      raan: {
        type: 'number',
        description:
          'Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.',
      },
      rawFileURI: {
        type: 'string',
        description:
          'Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.',
      },
      revNo: {
        type: 'integer',
        description:
          'The current revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.',
      },
      satNo: {
        type: 'integer',
        description: 'Satellite/catalog number of the target on-orbit object.',
      },
      semiMajorAxis: {
        type: 'number',
        description:
          'The sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass. Units are kilometers.',
      },
      sourcedData: {
        type: 'array',
        description:
          'Optional array of UDL data (observation) UUIDs used to build this element set. See the associated sourcedDataTypes array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).',
        items: {
          type: 'string',
        },
      },
      sourcedDataTypes: {
        type: 'array',
        description:
          'Optional array of UDL observation data types used to build this element set (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs of observations for the positionally corresponding data types in this array (the two arrays must match in size).',
        items: {
          type: 'string',
          enum: ['EO', 'RADAR', 'RF', 'DOA', 'ELSET', 'SV'],
        },
      },
      tags: {
        type: 'array',
        description:
          'Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.',
        items: {
          type: 'string',
        },
      },
      transactionId: {
        type: 'string',
        description:
          'Optional identifier to track a commercial or marketplace transaction executed to produce this data.',
      },
      uct: {
        type: 'boolean',
        description:
          "Boolean indicating this Elset was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
      },
    },
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  await client.elsets.create(body);
  return asTextContentResult('Successful tool call');
};

export default { metadata, tool, handler };
