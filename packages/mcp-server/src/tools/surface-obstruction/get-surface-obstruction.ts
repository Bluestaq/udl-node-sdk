// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'surface_obstruction',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/surfaceobstruction/{id}',
};

export const tool: Tool = {
  name: 'get_surface_obstruction',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to get a single surfaceobstruction record by its unique ID passed as a path parameter.\n\n# Response Schema\n```json\n{\n  $ref: '#/$defs/surface_obstruction_get_response',\n  $defs: {\n    surface_obstruction_get_response: {\n      type: 'object',\n      properties: {\n        classificationMarking: {\n          type: 'string',\n          description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n        },\n        dataMode: {\n          type: 'string',\n          description: 'Indicator of whether the data is REAL, TEST, SIMULATED, or EXERCISE data.',\n          enum: [            'REAL',\n            'TEST',\n            'SIMULATED',\n            'EXERCISE'\n          ]\n        },\n        idSurface: {\n          type: 'string',\n          description: 'The unique identifier of the associated surface record. This field is required when posting, updating, or deleting a SurfaceObstruction record.'\n        },\n        source: {\n          type: 'string',\n          description: 'Source of the data.'\n        },\n        id: {\n          type: 'string',\n          description: 'Unique identifier of the record, auto-generated by the system.'\n        },\n        advisoryRequired: {\n          type: 'array',\n          description: 'Array of all vehicles that are affected by this obstruction at the surface end-point, and require an advisory for usage.',\n          items: {\n            type: 'string'\n          }\n        },\n        approvalRequired: {\n          type: 'array',\n          description: 'Array of all vehicles that are affected by this obstruction at the surface end-point, and require an approval for usage.',\n          items: {\n            type: 'string'\n          }\n        },\n        createdAt: {\n          type: 'string',\n          description: 'Time the row was created in the database, auto-populated by the system.',\n          format: 'date-time'\n        },\n        createdBy: {\n          type: 'string',\n          description: 'Application user who created the row in the database, auto-populated by the system.'\n        },\n        distanceFromCenterLine: {\n          type: 'number',\n          description: 'The distance from the surface center line to this obstruction, in feet.'\n        },\n        distanceFromEdge: {\n          type: 'number',\n          description: 'The distance from the surface edge to this obstruction, in feet.'\n        },\n        distanceFromThreshold: {\n          type: 'number',\n          description: 'The distance from the surface threshold to this obstruction, in feet.'\n        },\n        idNavigationalObstruction: {\n          type: 'string',\n          description: 'The unique identifier of the associated NavigationalObstruction record.'\n        },\n        obstructionDesc: {\n          type: 'string',\n          description: 'Description of this surface obstruction.'\n        },\n        obstructionHeight: {\n          type: 'number',\n          description: 'The height above ground level of the surface obstruction, in feet.'\n        },\n        obstructionSideCode: {\n          type: 'string',\n          description: 'A code that indicates which side of the surface end is affected by this obstruction.'\n        },\n        origin: {\n          type: 'string',\n          description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n        },\n        origNetwork: {\n          type: 'string',\n          description: 'The originating source network on which this record was created, auto-populated by the system.'\n        },\n        sourceDL: {\n          type: 'string',\n          description: 'The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.'\n        },\n        updatedAt: {\n          type: 'string',\n          description: 'Time the row was last updated in the database, auto-populated by the system.',\n          format: 'date-time'\n        },\n        updatedBy: {\n          type: 'string',\n          description: 'Application user who updated the row in the database, auto-populated by the system.'\n        }\n      },\n      required: [        'classificationMarking',\n        'dataMode',\n        'idSurface',\n        'source'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      id: {
        type: 'string',
      },
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['id'],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { id, jq_filter, ...body } = args as any;
  return asTextContentResult(await maybeFilter(jq_filter, await client.surfaceObstruction.get(id, body)));
};

export default { metadata, tool, handler };
