// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'surface_obstruction',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/surfaceobstruction',
};

export const tool: Tool = {
  name: 'create_surface_obstruction',
  description:
    'Service operation to take a single surfaceobstruction record as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.',
  inputSchema: {
    type: 'object',
    properties: {
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description: 'Indicator of whether the data is REAL, TEST, SIMULATED, or EXERCISE data.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      idSurface: {
        type: 'string',
        description:
          'The unique identifier of the associated surface record. This field is required when posting, updating, or deleting a SurfaceObstruction record.',
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      id: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      advisoryRequired: {
        type: 'array',
        description:
          'Array of all vehicles that are affected by this obstruction at the surface end-point, and require an advisory for usage.',
        items: {
          type: 'string',
        },
      },
      approvalRequired: {
        type: 'array',
        description:
          'Array of all vehicles that are affected by this obstruction at the surface end-point, and require an approval for usage.',
        items: {
          type: 'string',
        },
      },
      distanceFromCenterLine: {
        type: 'number',
        description: 'The distance from the surface center line to this obstruction, in feet.',
      },
      distanceFromEdge: {
        type: 'number',
        description: 'The distance from the surface edge to this obstruction, in feet.',
      },
      distanceFromThreshold: {
        type: 'number',
        description: 'The distance from the surface threshold to this obstruction, in feet.',
      },
      idNavigationalObstruction: {
        type: 'string',
        description: 'The unique identifier of the associated NavigationalObstruction record.',
      },
      obstructionDesc: {
        type: 'string',
        description: 'Description of this surface obstruction.',
      },
      obstructionHeight: {
        type: 'number',
        description: 'The height above ground level of the surface obstruction, in feet.',
      },
      obstructionSideCode: {
        type: 'string',
        description: 'A code that indicates which side of the surface end is affected by this obstruction.',
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
    },
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.surfaceObstruction.create(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
