// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'h3_geo',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/h3geo',
};

export const tool: Tool = {
  name: 'create_h3_geo',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to take a single H3Geo record as a POST body and ingest into the database. This operation does not persist any H3GeoHexCell points that may be present in the body of the request. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {}\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      cells: {
        type: 'array',
        description:
          'The collection of hex cells contained in this H3 data set. The number of cells is a function of the specified resolution.',
        items: {
          type: 'object',
          description: 'Model representation of a hex cell array containing data for a set of observations.',
          properties: {
            cellId: {
              type: 'string',
              description: 'The H3 index represented as a 16 character hexadecimal string.',
            },
            classificationMarking: {
              type: 'string',
              description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
            },
            dataMode: {
              type: 'string',
              description:
                'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
              enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
            },
            source: {
              type: 'string',
              description: 'Source of the data.',
            },
            id: {
              type: 'string',
              description: 'Unique identifier of the record, auto-generated by the system.',
            },
            altMean: {
              type: 'number',
              description:
                'The mean altitude of the set of observations within this cell, measured in kilometers.',
            },
            altSigma: {
              type: 'number',
              description:
                'The standard deviation of alttitude in the set of observations within this cell, measured in kilometers.',
            },
            anomScoreInterference: {
              type: 'number',
              description:
                'The anomaly score for probable manufactured interference or RF interference; calculated as a ratio of #anomalous obs / #total obs or coverage.',
            },
            anomScoreSpoofing: {
              type: 'number',
              description:
                'The anomaly score for probable spoofing; calculated as a ratio of #anomalous obs / #total obs or coverage.',
            },
            changeScore: {
              type: 'number',
              description:
                'The percentage degree of change in the aggregated observables for a particular H3 bin.',
            },
            coverage: {
              type: 'integer',
              description:
                'The total number of available observations in the H3 cell during the start/end times.',
            },
            createdAt: {
              type: 'string',
              description: 'Time the row was created in the database, auto-populated by the system.',
              format: 'date-time',
            },
            createdBy: {
              type: 'string',
              description:
                'Application user who created the row in the database, auto-populated by the system.',
            },
            idH3Geo: {
              type: 'string',
              description: 'Unique identifier of the parent H3 Geo record containing this hex cell.',
            },
            origin: {
              type: 'string',
              description:
                'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
            },
            origNetwork: {
              type: 'string',
              description:
                'The originating source network on which this record was created, auto-populated by the system.',
            },
            rpmMax: {
              type: 'number',
              description:
                'The max received power monitor (RPM) output value for the set of data contained within this cell.',
            },
            rpmMean: {
              type: 'number',
              description:
                'The mean received power monitor (RPM) output value for the set of data contained within this cell.',
            },
            rpmMedian: {
              type: 'number',
              description:
                'The median received power monitor (RPM) output value for the set of data contained within this cell.',
            },
            rpmMin: {
              type: 'number',
              description:
                'The min received power monitor (RPM) output value for the set of data contained within this cell.',
            },
            rpmSigma: {
              type: 'number',
              description:
                'The standard deviation of the received power monitor (RPM) output value for the set of data contained within this cell.',
            },
            sourceDL: {
              type: 'string',
              description:
                'The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.',
            },
          },
          required: ['cellId', 'classificationMarking', 'dataMode', 'source'],
        },
      },
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      numCells: {
        type: 'integer',
        description:
          'The number of cells associated with this H3 Geo data set. At this time, UDL supports up to 50,000 cells.',
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      startTime: {
        type: 'string',
        description: 'Start time for this H3 Geo data set in ISO 8601 UTC with millisecond precision.',
        format: 'date-time',
      },
      id: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      centerFreq: {
        type: 'number',
        description: 'The center frequency of this H3 Geo data set measured in megahertz.',
      },
      endTime: {
        type: 'string',
        description: 'End time for this H3 Geo data set in ISO 8601 UTC with millisecond precision.',
        format: 'date-time',
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
      resolution: {
        type: 'integer',
        description:
          'H3 resolution (0 â€“ 15) for the data set. At this time, UDL supports a resolution of 3 or less.',
      },
      tags: {
        type: 'array',
        description:
          'Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.',
        items: {
          type: 'string',
        },
      },
      type: {
        type: 'string',
        description:
          'An optional field containing the type of data that is represented by this H3 Geo data set.',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.h3Geo.create(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
