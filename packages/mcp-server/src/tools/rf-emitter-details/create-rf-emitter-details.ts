// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'udl-node-sdk';

export const metadata: Metadata = {
  resource: 'rf_emitter_details',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/rfemitterdetails',
};

export const tool: Tool = {
  name: 'create_rf_emitter_details',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to take a single RFEmitterDetails as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {}\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      idRFEmitter: {
        type: 'string',
        description: 'Unique identifier of the parent RF Emitter.',
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      id: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      alternateFacilityName: {
        type: 'string',
        description: 'Alternate facility name for this RF Emitter.',
      },
      altName: {
        type: 'string',
        description: 'Optional alternate name or alias for this RF Emitter.',
      },
      antennaDiameter: {
        type: 'number',
        description: 'For parabolic/dish antennas, the diameter of the antenna in meters.',
      },
      antennaSize: {
        type: 'array',
        description:
          'Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.',
        items: {
          type: 'number',
        },
      },
      barrageNoiseBandwidth: {
        type: 'number',
        description: 'Barrage noise bandwidth in Mhz.',
      },
      description: {
        type: 'string',
        description: 'Detailed description of the RF Emitter.',
      },
      designator: {
        type: 'string',
        description: 'Designator of this RF Emitter.',
      },
      dopplerNoise: {
        type: 'number',
        description: 'Doppler noise value in Mhz.',
      },
      drfmInstantaneousBandwidth: {
        type: 'number',
        description: 'Digital Form Radio Memory instantaneous bandwidth in Mhz.',
      },
      family: {
        type: 'string',
        description: 'Family of this RF Emitter type.',
      },
      manufacturerOrgId: {
        type: 'string',
        description: 'Unique identifier of the organization which manufactures this RF Emitter.',
      },
      notes: {
        type: 'string',
        description: 'Notes on the RF Emitter.',
      },
      numBits: {
        type: 'integer',
        description: 'Number of bits.',
      },
      numChannels: {
        type: 'integer',
        description: 'Number of channels.',
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
      productionFacilityLocationId: {
        type: 'string',
        description: 'Unique identifier of the location of the production facility for this RF Emitter.',
      },
      productionFacilityName: {
        type: 'string',
        description: 'Name of the production facility for this RF Emitter.',
      },
      receiverBandwidth: {
        type: 'number',
        description: 'Receiver bandwidth in Mhz.',
      },
      receiverSensitivity: {
        type: 'number',
        description: 'Receiver sensitivity in dBm.',
      },
      receiverType: {
        type: 'string',
        description: 'Type or name of receiver.',
      },
      secondaryNotes: {
        type: 'string',
        description: 'Secondary notes on the RF Emitter.',
      },
      systemSensitivityEnd: {
        type: 'number',
        description:
          'Receiver sensitivity is the lowest power level at which the receiver can detect an RF signal and demodulate data. Sensitivity is purely a receiver specification and is independent of the transmitter. End sensitivity range, in dBm.',
      },
      systemSensitivityStart: {
        type: 'number',
        description:
          'Receiver sensitivity is the lowest power level at which the receiver can detect an RF signal and demodulate data. Sensitivity is purely a receiver specification and is independent of the transmitter. Start sensitivity range, in dBm.',
      },
      transmitPower: {
        type: 'number',
        description: 'Transmit power in Watts.',
      },
      transmitterBandwidth: {
        type: 'number',
        description: 'Transmitter bandwidth in Mhz.',
      },
      transmitterFrequency: {
        type: 'number',
        description: 'Transmitter frequency in Mhz.',
      },
      urls: {
        type: 'array',
        description: 'Array of URLs containing additional information on this RF Emitter.',
        items: {
          type: 'string',
        },
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['classificationMarking', 'dataMode', 'idRFEmitter', 'source'],
  },
  annotations: {},
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.rfEmitterDetails.create(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
