// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'airfields',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/airfield/{id}',
};

export const tool: Tool = {
  name: 'retrieve_airfields',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to get a single Airfield by its unique ID passed as a path parameter.\n\n# Response Schema\n```json\n{\n  $ref: '#/$defs/airfield_full',\n  $defs: {\n    airfield_full: {\n      type: 'object',\n      description: 'Properties and characteristics of an airfield, which includes location, airfield codes, suitability codes, and remarks.',\n      properties: {\n        classificationMarking: {\n          type: 'string',\n          description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n        },\n        dataMode: {\n          type: 'string',\n          description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n          enum: [            'REAL',\n            'TEST',\n            'SIMULATED',\n            'EXERCISE'\n          ]\n        },\n        name: {\n          type: 'string',\n          description: 'The name of the airfield.'\n        },\n        source: {\n          type: 'string',\n          description: 'Source of the data.'\n        },\n        type: {\n          type: 'string',\n          description: 'The airfield activity use type (e.g. Commercial, Airport, Heliport, Gliderport, etc.).'\n        },\n        id: {\n          type: 'string',\n          description: 'Unique identifier of the record, auto-generated by the system.'\n        },\n        altAirfieldId: {\n          type: 'string',\n          description: 'Alternate Airfield identifier provided by source.'\n        },\n        alternativeNames: {\n          type: 'array',\n          description: 'Alternative names for this airfield.',\n          items: {\n            type: 'string'\n          }\n        },\n        city: {\n          type: 'string',\n          description: 'The closest city to the location of this airfield.'\n        },\n        countryCode: {\n          type: 'string',\n          description: 'The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.'\n        },\n        countryName: {\n          type: 'string',\n          description: 'The country name where this airfield is located.'\n        },\n        createdAt: {\n          type: 'string',\n          description: 'Time the row was created in the database, auto-populated by the system.',\n          format: 'date-time'\n        },\n        createdBy: {\n          type: 'string',\n          description: 'Application user who created the row in the database, auto-populated by the system.'\n        },\n        dstInfo: {\n          type: 'string',\n          description: 'Information regarding daylight saving time as is relevant to the location and operation of this airfield.'\n        },\n        elevFt: {\n          type: 'number',\n          description: 'Elevation of the airfield above mean sea level, in feet.\\nNote: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.'\n        },\n        elevM: {\n          type: 'number',\n          description: 'Elevation of the airfield above mean sea level, in meters.\\nNote: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.'\n        },\n        faa: {\n          type: 'string',\n          description: 'The Federal Aviation Administration (FAA) location identifier of this airfield.'\n        },\n        geoloc: {\n          type: 'string',\n          description: 'Air Force geographic location code of the airfield.'\n        },\n        gmtOffset: {\n          type: 'string',\n          description: 'Time difference between the location of the airfield and the Greenwich Mean Time (GMT), expressed as +/-HH:MM. Time zones east of Greenwich have positive offsets and time zones west of Greenwich are negative.'\n        },\n        hostNatCode: {\n          type: 'string',\n          description: 'The host nation code of this airfield, used for non-DoD/FAA locations.'\n        },\n        iata: {\n          type: 'string',\n          description: 'The International Aviation Transport Association (IATA) code of the airfield.'\n        },\n        icao: {\n          type: 'string',\n          description: 'The International Civil Aviation Organization (ICAO) code of the airfield.'\n        },\n        idSite: {\n          type: 'string',\n          description: 'The ID of the parent site.'\n        },\n        infoURL: {\n          type: 'string',\n          description: 'The URL link to information about airfield.'\n        },\n        lat: {\n          type: 'number',\n          description: 'WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).'\n        },\n        lon: {\n          type: 'number',\n          description: 'WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).'\n        },\n        magDec: {\n          type: 'number',\n          description: 'The magnetic declination/variation of the airfield\\'s location from true north, in degrees.  Positive values east of true north and negative values west of true north.'\n        },\n        maxRunwayLength: {\n          type: 'integer',\n          description: 'The length of the longest runway at this airfield in feet.'\n        },\n        miscCodes: {\n          type: 'string',\n          description: 'Applicable miscellaneous codes according to the Airfield Suitability and Restrictions Report (ASRR) for this airfield.'\n        },\n        origin: {\n          type: 'string',\n          description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n        },\n        origNetwork: {\n          type: 'string',\n          description: 'The originating source network on which this record was created, auto-populated by the system.'\n        },\n        regionalAuthority: {\n          type: 'string',\n          description: 'The regional authority of the airfield.'\n        },\n        regionName: {\n          type: 'string',\n          description: 'Region where the airfield resides.'\n        },\n        runways: {\n          type: 'integer',\n          description: 'The number of runways at the site.'\n        },\n        secondaryICAO: {\n          type: 'string',\n          description: 'The secondary ICAO code for this airfield. Some airfields have two associated ICAO codes, this can occur in cases when a single airfield supports both military and civilian operations.'\n        },\n        sourceDL: {\n          type: 'string',\n          description: 'The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.'\n        },\n        state: {\n          type: 'string',\n          description: 'State or province of the airfield\\'s location.'\n        },\n        stateProvinceCode: {\n          type: 'string',\n          description: 'The code for the state or province in which this airfield is located. Intended as, but not constrained to, FIPS 10-4 region code designations.'\n        },\n        suitabilityCodeDescs: {\n          type: 'array',\n          description: 'Array of descriptions for given suitability codes. The index of the description corresponds to the position of the letter code in the string provided in the suitabilityCodes field.',\n          items: {\n            type: 'string'\n          }\n        },\n        suitabilityCodes: {\n          type: 'string',\n          description: 'Associated suitability codes according to the Airfield Suitability and Restrictions Report (ASRR) for this airfield.'\n        },\n        updatedAt: {\n          type: 'string',\n          description: 'Time the row was last updated in the database, auto-populated by the system.',\n          format: 'date-time'\n        },\n        updatedBy: {\n          type: 'string',\n          description: 'Application user who updated the row in the database, auto-populated by the system.'\n        },\n        wacINNR: {\n          type: 'string',\n          description: 'The airfield\\'s World Area Code installation number (WAC-INNR).'\n        },\n        zarId: {\n          type: 'string',\n          description: 'Air Mobility Command (AMC) Zone availability Report identifier.'\n        }\n      },\n      required: [        'classificationMarking',\n        'dataMode',\n        'name',\n        'source',\n        'type'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      id: {
        type: 'string',
      },
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['id'],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { id, jq_filter, ...body } = args as any;
  return asTextContentResult(await maybeFilter(jq_filter, await client.airfields.retrieve(id, body)));
};

export default { metadata, tool, handler };
