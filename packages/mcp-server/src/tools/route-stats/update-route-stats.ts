// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'route_stats',
  operation: 'write',
  tags: [],
  httpMethod: 'put',
  httpPath: '/udl/routestats/{id}',
};

export const tool: Tool = {
  name: 'update_route_stats',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to update a single RouteStats. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {}\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      path_id: {
        type: 'string',
      },
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      locationEnd: {
        type: 'string',
        description: 'End location of the vehicle.',
      },
      locationStart: {
        type: 'string',
        description: 'Starting location of the vehicle.',
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      body_id: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      avgDuration: {
        type: 'number',
        description: 'Average travel duration for the indicated distance and type of vehicle in hours.',
      },
      avgSpeed: {
        type: 'number',
        description: 'Average speed during travel in the indicated unit of measurement, speedUnit.',
      },
      dataPtsUsed: {
        type: 'integer',
        description: 'The number of data points used in this travel duration calculation.',
      },
      distance: {
        type: 'number',
        description:
          'Distance between the departure and arrival locations in the indicated unit of measurement, distUnit.',
      },
      distUnit: {
        type: 'string',
        description: 'The unit of measurement used for distance in this calculation.',
      },
      firstPt: {
        type: 'string',
        description:
          'Date of the first data point used in this calculation, in ISO8601 UTC format with millisecond precision.',
        format: 'date-time',
      },
      idealDesc: {
        type: 'string',
        description:
          'Description of the portion of travel used to estimate the value of the idealDuration field.',
      },
      idealDuration: {
        type: 'number',
        description:
          'Estimated ideal travel duration in hours for the full distance using the indicated vehicle type. The field "idealDesc" should be used to describe the ideal travel route.',
      },
      idSiteEnd: {
        type: 'string',
        description:
          "Unique identifier of the Site at the route's end location. This ID can be used to obtain additional information on a Site using the 'get by ID' operation (e.g. /udl/site/{id}). For example, the Site object with idSite = abc would be queried as /udl/site/abc.",
      },
      idSiteStart: {
        type: 'string',
        description:
          "Unique identifier of the Site at the route's starting location. This ID can be used to obtain additional information on a Site using the 'get by ID' operation (e.g. /udl/site/{id}). For example, the Site object with idSite = abc would be queried as /udl/site/abc.",
      },
      lastPt: {
        type: 'string',
        description:
          'Date of the last data point used in this calculation, in ISO8601 UTC format with millisecond precision.',
        format: 'date-time',
      },
      locationType: {
        type: 'string',
        description: 'Type of location used for route start and end points (e.g., ICAO, PORT, etc.).',
      },
      maxDuration: {
        type: 'number',
        description: 'Maximum travel duration for the indicated distance and type of vehicle in hours.',
      },
      maxSpeed: {
        type: 'number',
        description: 'Maximum speed during travel in the indicated unit of measurement, speedUnit.',
      },
      minDuration: {
        type: 'number',
        description: 'Minimum travel duration for the indicated distance and type of vehicle in hours.',
      },
      minSpeed: {
        type: 'number',
        description: 'Minimum speed during travel in the indicated unit of measurement, speedUnit.',
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
      partialDesc: {
        type: 'string',
        description:
          'Description of the portion of travel used to estimate the value of the partialDuration field.',
      },
      partialDuration: {
        type: 'number',
        description:
          'Estimated ideal travel duration in hours for a partial distance using the indicated vehicle type. The field "partialDesc" should be used to specify the intended portion of travel.',
      },
      speedUnit: {
        type: 'string',
        description: 'The unit of measurement used for speed in this calculation.',
      },
      timePeriod: {
        type: 'string',
        description: 'The time period this data was collected.',
      },
      vehicleCategory: {
        type: 'string',
        description:
          'The vehicle category that is the subject of this calculation (e.g., AIRCRAFT, CAR, BOAT, etc.).',
      },
      vehicleType: {
        type: 'string',
        description: 'The vehicle type that is the subject of this calculation (e.g., C-17, F-15, etc.).',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['path_id', 'classificationMarking', 'dataMode', 'locationEnd', 'locationStart', 'source'],
  },
  annotations: {
    idempotentHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { id, ...body } = args as any;
  const response = await client.routeStats.update(id, body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
