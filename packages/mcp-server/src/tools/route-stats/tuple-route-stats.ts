// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'route_stats',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/routestats/tuple',
};

export const tool: Tool = {
  name: 'tuple_route_stats',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    type: 'object',\n    description: 'General statistics applying to navigation routes utilized by vessels, aircraft, ground vehicles, etc.',\n    properties: {\n      classificationMarking: {\n        type: 'string',\n        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n      },\n      dataMode: {\n        type: 'string',\n        description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n        enum: [          'REAL',\n          'TEST',\n          'SIMULATED',\n          'EXERCISE'\n        ]\n      },\n      locationEnd: {\n        type: 'string',\n        description: 'End location of the vehicle.'\n      },\n      locationStart: {\n        type: 'string',\n        description: 'Starting location of the vehicle.'\n      },\n      source: {\n        type: 'string',\n        description: 'Source of the data.'\n      },\n      id: {\n        type: 'string',\n        description: 'Unique identifier of the record, auto-generated by the system.'\n      },\n      avgDuration: {\n        type: 'number',\n        description: 'Average travel duration for the indicated distance and type of vehicle in hours.'\n      },\n      avgSpeed: {\n        type: 'number',\n        description: 'Average speed during travel in the indicated unit of measurement, speedUnit.'\n      },\n      createdAt: {\n        type: 'string',\n        description: 'Time the row was created in the database, auto-populated by the system.',\n        format: 'date-time'\n      },\n      createdBy: {\n        type: 'string',\n        description: 'Application user who created the row in the database, auto-populated by the system.'\n      },\n      dataPtsUsed: {\n        type: 'integer',\n        description: 'The number of data points used in this travel duration calculation.'\n      },\n      distance: {\n        type: 'number',\n        description: 'Distance between the departure and arrival locations in the indicated unit of measurement, distUnit.'\n      },\n      distUnit: {\n        type: 'string',\n        description: 'The unit of measurement used for distance in this calculation.'\n      },\n      firstPt: {\n        type: 'string',\n        description: 'Date of the first data point used in this calculation, in ISO8601 UTC format with millisecond precision.',\n        format: 'date-time'\n      },\n      idealDesc: {\n        type: 'string',\n        description: 'Description of the portion of travel used to estimate the value of the idealDuration field.'\n      },\n      idealDuration: {\n        type: 'number',\n        description: 'Estimated ideal travel duration in hours for the full distance using the indicated vehicle type. The field \"idealDesc\" should be used to describe the ideal travel route.'\n      },\n      idSiteEnd: {\n        type: 'string',\n        description: 'Unique identifier of the Site at the route\\'s end location. This ID can be used to obtain additional information on a Site using the \\'get by ID\\' operation (e.g. /udl/site/{id}). For example, the Site object with idSite = abc would be queried as /udl/site/abc.'\n      },\n      idSiteStart: {\n        type: 'string',\n        description: 'Unique identifier of the Site at the route\\'s starting location. This ID can be used to obtain additional information on a Site using the \\'get by ID\\' operation (e.g. /udl/site/{id}). For example, the Site object with idSite = abc would be queried as /udl/site/abc.'\n      },\n      lastPt: {\n        type: 'string',\n        description: 'Date of the last data point used in this calculation, in ISO8601 UTC format with millisecond precision.',\n        format: 'date-time'\n      },\n      locationType: {\n        type: 'string',\n        description: 'Type of location used for route start and end points (e.g., ICAO, PORT, etc.).'\n      },\n      maxDuration: {\n        type: 'number',\n        description: 'Maximum travel duration for the indicated distance and type of vehicle in hours.'\n      },\n      maxSpeed: {\n        type: 'number',\n        description: 'Maximum speed during travel in the indicated unit of measurement, speedUnit.'\n      },\n      minDuration: {\n        type: 'number',\n        description: 'Minimum travel duration for the indicated distance and type of vehicle in hours.'\n      },\n      minSpeed: {\n        type: 'number',\n        description: 'Minimum speed during travel in the indicated unit of measurement, speedUnit.'\n      },\n      origin: {\n        type: 'string',\n        description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n      },\n      origNetwork: {\n        type: 'string',\n        description: 'The originating source network on which this record was created, auto-populated by the system.'\n      },\n      partialDesc: {\n        type: 'string',\n        description: 'Description of the portion of travel used to estimate the value of the partialDuration field.'\n      },\n      partialDuration: {\n        type: 'number',\n        description: 'Estimated ideal travel duration in hours for a partial distance using the indicated vehicle type. The field \"partialDesc\" should be used to specify the intended portion of travel.'\n      },\n      sourceDL: {\n        type: 'string',\n        description: 'The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.'\n      },\n      speedUnit: {\n        type: 'string',\n        description: 'The unit of measurement used for speed in this calculation.'\n      },\n      timePeriod: {\n        type: 'string',\n        description: 'The time period this data was collected.'\n      },\n      updatedAt: {\n        type: 'string',\n        description: 'Time the row was updated in the database, auto-populated by the system.',\n        format: 'date-time'\n      },\n      updatedBy: {\n        type: 'string',\n        description: 'Application user who updated the row in the database, auto-populated by the system.'\n      },\n      vehicleCategory: {\n        type: 'string',\n        description: 'The vehicle category that is the subject of this calculation (e.g., AIRCRAFT, CAR, BOAT, etc.).'\n      },\n      vehicleType: {\n        type: 'string',\n        description: 'The vehicle type that is the subject of this calculation (e.g., C-17, F-15, etc.).'\n      }\n    },\n    required: [      'classificationMarking',\n      'dataMode',\n      'locationEnd',\n      'locationStart',\n      'source'\n    ]\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      columns: {
        type: 'string',
        description:
          'Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.',
      },
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['columns'],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { jq_filter, ...body } = args as any;
  return asTextContentResult(await maybeFilter(jq_filter, await client.routeStats.tuple(body)));
};

export default { metadata, tool, handler };
