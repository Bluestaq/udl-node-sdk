// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'port',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/port',
};

export const tool: Tool = {
  name: 'list_port',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    type: 'object',\n    description: 'Properties and characteristics of a maritime port, which includes location, port identifiers, and remarks.',\n    properties: {\n      classificationMarking: {\n        type: 'string',\n        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n      },\n      dataMode: {\n        type: 'string',\n        description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n        enum: [          'REAL',\n          'TEST',\n          'SIMULATED',\n          'EXERCISE'\n        ]\n      },\n      source: {\n        type: 'string',\n        description: 'Source of the data.'\n      },\n      id: {\n        type: 'string',\n        description: 'Unique identifier of the record, auto-generated by the system if not provided on create operations.'\n      },\n      avgDuration: {\n        type: 'number',\n        description: 'Average time for a vessel at this port in hours.'\n      },\n      countryCode: {\n        type: 'string',\n        description: 'The country where this port is located.'\n      },\n      createdAt: {\n        type: 'string',\n        description: 'Time the row was created in the database, auto-populated by the system.',\n        format: 'date-time'\n      },\n      createdBy: {\n        type: 'string',\n        description: 'Application user who created the row in the database, auto-populated by the system.'\n      },\n      externalId: {\n        type: 'string',\n        description: 'Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.'\n      },\n      harborSize: {\n        type: 'number',\n        description: 'The size of the harbor for this port measured in square kilometers.'\n      },\n      harborType: {\n        type: 'string',\n        description: 'The type of harbor for this port. The harbor type refers to how a port is physically positioned.\\n\\nCOASTAL BREAKWATER (CB)\\n\\nCOASTAL NATURAL (CN)\\n\\nCOASTAL TIDE GATE  (CT)\\n\\nLAKE OR CANAL (LC)\\n\\nOPEN ROADSTEAD (OR)\\n\\nRIVER BASIN (RB)\\n\\nRIVER NATURAL (RN)\\n\\nRIVER TIDE GATE (RT)\\n\\nTYPHOON HARBOR  (TH).'\n      },\n      idSite: {\n        type: 'string',\n        description: 'Unique identifier of the Site Entity associated with the Port record.'\n      },\n      lat: {\n        type: 'number',\n        description: 'WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).'\n      },\n      locode: {\n        type: 'string',\n        description: 'The five-character United Nations Code for Trade and Transport Locations (UN/LOCODE) of this port.  The first two letters of the code contains the ISO 3166-1 alpha-2 country designation of the port country. The three remaining characters identify a location within that country.  Letters are preferred, but if necessary digits 2 through 9 may be used, excluding \"0\" and \"1\" to avoid confusion with the letters \"O\" and \"I\" respectively.'\n      },\n      lon: {\n        type: 'number',\n        description: 'WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).'\n      },\n      maxDraught: {\n        type: 'number',\n        description: 'Maximum allowed vessel draught. Draught is the principal dimensions of any waterborne vessel defined as the distance between the shipâ€™s keel and the waterline of the vessel measured in meters.'\n      },\n      origin: {\n        type: 'string',\n        description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n      },\n      origNetwork: {\n        type: 'string',\n        description: 'The originating source network on which this record was created, auto-populated by the system.'\n      },\n      pilotReqd: {\n        type: 'boolean',\n        description: 'Flag indicating whether a pilot is required at this port.'\n      },\n      portName: {\n        type: 'string',\n        description: 'The name of this port.'\n      },\n      shelter: {\n        type: 'string',\n        description: 'The shelter afforded from wind, sea, and swell refers to the area where normal port operations are conducted, usually the wharf area. Shelter afforded by the anchorage area may be given for ports where cargo is handled by lighters. Values given are EXCELLENT, FAIR, GOOD, POOR, or NONE.'\n      },\n      tideRange: {\n        type: 'number',\n        description: 'The tide range of this port in meters.'\n      }\n    },\n    required: [      'classificationMarking',\n      'dataMode',\n      'source'\n    ]\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.port.list(body).asResponse();
  return asTextContentResult(await maybeFilter(args, await response.json()));
};

export default { metadata, tool, handler };
