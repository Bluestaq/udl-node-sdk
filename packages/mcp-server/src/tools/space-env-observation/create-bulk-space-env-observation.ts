// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'space_env_observation',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/spaceenvobservation/createBulk',
};

export const tool: Tool = {
  name: 'create_bulk_space_env_observation',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation intended for initial integration only, to take a list of SpaceEnvObservation records as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
  inputSchema: {
    type: 'object',
    properties: {
      body: {
        type: 'array',
        items: {
          type: 'object',
          description: 'SpaceEnvObservation data.',
          properties: {
            classificationMarking: {
              type: 'string',
              description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
            },
            dataMode: {
              type: 'string',
              description:
                'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
              enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
            },
            obTime: {
              type: 'string',
              description: 'Time of the observation, in ISO 8601 UTC format with millisecond precision.',
              format: 'date-time',
            },
            source: {
              type: 'string',
              description: 'Source of the data.',
            },
            id: {
              type: 'string',
              description: 'Unique identifier of the record, auto-generated by the system.',
            },
            alt: {
              type: 'number',
              description:
                'Spacecraft/sensor altitude at observation time, expressed in kilometers above WGS-84 ellipsoid.',
            },
            createdAt: {
              type: 'string',
              description: 'Time the row was created in the database, auto-populated by the system.',
              format: 'date-time',
            },
            createdBy: {
              type: 'string',
              description:
                'Application user who created the row in the database, auto-populated by the system.',
            },
            dataType: {
              type: 'string',
              description:
                'The data type (e.g. AP, AURORAL FLUX, ECP, KINDEX, PROPAGATED SOLAR WIND, XRAY FLUX, etc.) of observations in this record.',
            },
            derived: {
              type: 'boolean',
              description: 'Flag indicating that this record contains derived data.',
            },
            description: {
              type: 'string',
              description: 'Descriptive or additional information associated with this observation record.',
            },
            descriptor: {
              type: 'string',
              description: 'Optional source-provided and searchable metadata or descriptor of the data.',
            },
            externalId: {
              type: 'string',
              description:
                'Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.',
            },
            forecast: {
              type: 'boolean',
              description: 'Flag indicating that this record contains forecast data.',
            },
            genSystem: {
              type: 'string',
              description: 'The external system which generated the message, if applicable.',
            },
            genTime: {
              type: 'string',
              description:
                'The time at which the associated data message was generated, in ISO 8601 UTC format with millisecond precision.',
              format: 'date-time',
            },
            idOnOrbit: {
              type: 'string',
              description:
                'Unique identifier of the on-orbit satellite hosting the sensor which produced this data.',
            },
            idSensor: {
              type: 'string',
              description: 'Unique identifier of the reporting sensor.',
            },
            instrumentType: {
              type: 'string',
              description:
                'The type of instrument from which this data was collected (e.g. ANTENNA, CHANNELTRON, INTERFEROMETER, MAGNETOMETER, RADIOMETER, etc.).',
            },
            lat: {
              type: 'number',
              description:
                'WGS-84 spacecraft/sensor latitude sub-point at observation time, represented as -90 to 90 degrees (negative values south of equator).',
            },
            lon: {
              type: 'number',
              description:
                'WGS-84 spacecraft/sensor longitude sub-point at observation time, represented as -180 to 180 degrees (negative values west of Prime Meridian).',
            },
            measType: {
              type: 'string',
              description: 'The sensor measurement type of the observation data contained in this record.',
            },
            msgType: {
              type: 'string',
              description: 'The type of message associated with this record.',
            },
            observatoryName: {
              type: 'string',
              description: 'The name of the observatory from which this data was collected.',
            },
            observatoryNotes: {
              type: 'string',
              description: 'Additional notes concerning the observatory.',
            },
            observatoryType: {
              type: 'string',
              description:
                'The type of observatory from which this data was collected (e.g. FACILITY, ONORBIT, NETWORK, etc.).',
            },
            obSetId: {
              type: 'string',
              description:
                'A user-defined name or ID of a set of observations, if applicable. Used for identifying multiple observation records as part of one observation set.',
            },
            origin: {
              type: 'string',
              description:
                'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
            },
            origNetwork: {
              type: 'string',
              description:
                'The originating source network on which this record was created, auto-populated by the system.',
            },
            origObjectId: {
              type: 'string',
              description:
                'Optional identifier provided by the record source to indicate the satellite hosting the sensor which produced this data. This may be an internal identifier and not necessarily map to a valid satellite number.',
            },
            origSensorId: {
              type: 'string',
              description:
                'Optional identifier provided by the observation source to indicate the sensor which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.',
            },
            particleType: {
              type: 'string',
              description:
                'The particle type (AEROSOL, ALPHA PARTICLE, ATOM, DUST, ELECTRON, ION, MOLECULE, NEUTRON, POSITRON, PROTON) associated with this measurement.',
            },
            quality: {
              type: 'string',
              description:
                'The quality of the overall data contained in this record. The quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the quality indicator.',
            },
            satNo: {
              type: 'integer',
              description:
                'Satellite/catalog number of the on-orbit satellite hosting the sensor which produced this data.',
            },
            senEnergyLevel: {
              type: 'string',
              description: 'The energy level bin of the sensor associated with this measurement.',
            },
            senPos: {
              type: 'array',
              description:
                'Three element array, expressing the observing spacecraft/sensor position vector components at observation time, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xpos, ypos, zpos].',
              items: {
                type: 'number',
              },
            },
            senReferenceFrame: {
              type: 'string',
              description:
                'The reference frame of the observing spacecraft/sensor state. If the senReferenceFrame is null it is assumed to be J2000.',
              enum: ['J2000', 'EFG/TDR', 'ECR/ECEF', 'TEME', 'ITRF', 'GCRF'],
            },
            senVel: {
              type: 'array',
              description:
                'Three element array, expressing the observing spacecraft/sensor velocity vector components at observation time, in kilometers/second, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xvel, yvel, zvel].',
              items: {
                type: 'number',
              },
            },
            seoList: {
              type: 'array',
              description: 'A collection of individual space environment observations.',
              items: {
                type: 'object',
                description: 'A single space environment observation.',
                properties: {
                  obType: {
                    type: 'string',
                    description: 'The type of observation associated with this record.',
                  },
                  obUoM: {
                    type: 'string',
                    description:
                      'The Unit of Measure associated with this observation. If there are no physical units associated with the measurement, a value of NONE should be specified.',
                  },
                  obArray: {
                    type: 'array',
                    description:
                      'An array of observation values expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.',
                    items: {
                      type: 'number',
                    },
                  },
                  obBool: {
                    type: 'boolean',
                    description:
                      'A Boolean observation. Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.',
                  },
                  obDescription: {
                    type: 'string',
                    description:
                      'Descriptive or additional information associated with this individual observation.',
                  },
                  obQuality: {
                    type: 'string',
                    description:
                      'The quality of this individual observation. The observation quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the observation.',
                  },
                  obString: {
                    type: 'string',
                    description:
                      'A single observation string expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.',
                  },
                  obValue: {
                    type: 'number',
                    description:
                      'A single observation value expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.',
                  },
                },
                required: ['obType', 'obUoM'],
              },
            },
            srcIds: {
              type: 'array',
              description:
                "Array of UUIDs of the UDL data records that are related to this observation record. See the associated 'srcTyps' array for specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element of the data type of the UUID and use the appropriate API operation to retrieve that object.",
              items: {
                type: 'string',
              },
            },
            srcTyps: {
              type: 'array',
              description:
                "Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SGI, SIGACT, SKYIMAGE, SPACEENVOB, SV, TRACK) that are related to this observation record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.",
              items: {
                type: 'string',
              },
            },
          },
          required: ['classificationMarking', 'dataMode', 'obTime', 'source'],
        },
      },
    },
    required: ['body'],
  },
  annotations: {},
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.spaceEnvObservation.createBulk(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
