// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'udl-node-sdk';

export const metadata: Metadata = {
  resource: 'feature_assessment',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/featureassessment/createBulk',
};

export const tool: Tool = {
  name: 'create_bulk_feature_assessment',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation intended for initial integration only, to take a list of FeatureAssessment records as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
  inputSchema: {
    type: 'object',
    properties: {
      body: {
        type: 'array',
        items: {
          type: 'object',
          description:
            'Feature assessments obtained from imagery analysis or other data analytics. Feature assessments are georeferenced terrestrial features such as marine vessels, vehicles, buildings, etc., or contain other types of non terrestrial assessments such as spacecraft structures. Geospatial queries are supported through either the regionText (WKT) or regionGeoJSON fields.',
          properties: {
            classificationMarking: {
              type: 'string',
              description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
            },
            dataMode: {
              type: 'string',
              description:
                'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
              enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
            },
            featureTs: {
              type: 'string',
              description:
                'Datetime type value associated with this record, in ISO 8601 UTC format with millisecond precision.',
              format: 'date-time',
            },
            featureUoM: {
              type: 'string',
              description:
                'The Unit of Measure associated with this feature. If there are no physical units associated with the feature a value of NONE should be specified.',
            },
            idAnalyticImagery: {
              type: 'string',
              description:
                'Unique identifier of the Analytic Imagery associated with this Feature Assessment record.',
            },
            source: {
              type: 'string',
              description: 'Source of the data.',
            },
            id: {
              type: 'string',
              description: 'Unique identifier of the record, auto-generated by the system.',
            },
            agjson: {
              type: 'string',
              description:
                "Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the feature assessment as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.",
            },
            andims: {
              type: 'integer',
              description: 'Number of dimensions of the geometry depicted by region.',
            },
            annLims: {
              type: 'array',
              description:
                'Polygonal annotation limits, specified in pixels, as an array of arrays N x M. Allows the image provider to highlight one or more polygonal area(s) of interest. The array must contain NxM two-element arrays, where N is the number of polygons of interest.  The associated annotation(s) should be included in the annText array.',
              items: {
                type: 'array',
                items: {
                  type: 'integer',
                },
              },
            },
            annText: {
              type: 'array',
              description:
                'Annotation text, a string array of annotation(s) corresponding to the rectangular areas specified in annLims.  This array contains the annotation text associated with the areas of interest indicated in annLims, in order.  This array should contain one annotation per four values of the area (annLims) array.',
              items: {
                type: 'string',
              },
            },
            area: {
              type: 'string',
              description:
                'Optional geographical region or polygon (lat/lon pairs) of the area surrounding the feature assessment as projected on the ground.',
            },
            asrid: {
              type: 'integer',
              description: 'Geographical spatial_ref_sys for region.',
            },
            assessment: {
              type: 'string',
              description: 'Descriptive or additional information associated with this feature/assessment.',
            },
            atext: {
              type: 'string',
              description:
                "Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the feature assessment as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.",
            },
            atype: {
              type: 'string',
              description: 'Type of region as projected on the ground (POLYGON, POINT, LINE).',
            },
            confidence: {
              type: 'number',
              description: 'Analytic confidence of feature accuracy (0 to 1).',
            },
            createdAt: {
              type: 'string',
              description: 'Time the row was created in the database, auto-populated by the system.',
              format: 'date-time',
            },
            createdBy: {
              type: 'string',
              description:
                'Application user who created the row in the database, auto-populated by the system.',
            },
            externalId: {
              type: 'string',
              description:
                'Feature Assessment ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.',
            },
            featureArray: {
              type: 'array',
              description:
                'An array of numeric feature/assessment values expressed in the specified unit of measure (obUoM). Because of the variability of the Feature Assessment data types, each record may employ a numeric observation value (featureValue), a string observation value (featureString), a Boolean observation value (featureBool), an array of numeric observation values (featureArray), or any combination of these.',
              items: {
                type: 'number',
              },
            },
            featureBool: {
              type: 'boolean',
              description:
                'A boolean feature/assessment. Because of the variability of the Feature Assessment data types, each record may employ a numeric observation value (featureValue), a string observation value (featureString), a Boolean observation value (featureBool), an array of numeric observation values (featureArray), or any combination of these.',
            },
            featureString: {
              type: 'string',
              description:
                'A single feature/assessment string expressed in the specified unit of measure (obUoM). Because of the variability of the Feature Assessment data types, each record may employ a numeric observation value (featureValue), a string observation value (featureString), a Boolean observation value (featureBool), an array of numeric observation values (featureArray), or any combination of these.',
            },
            featureStringArray: {
              type: 'array',
              description:
                'An array of string feature/assessment expressions. Because of the variability of the Feature Assessment data types, each record may employ a numeric observation value (featureValue), a string observation value (featureString), a Boolean observation value (featureBool), an array of numeric observation values (featureArray), or any combination of these.',
              items: {
                type: 'string',
              },
            },
            featureValue: {
              type: 'number',
              description:
                'A single feature/assessment value expressed in the specified unit of measure (obUoM). Because of the variability of the Feature Assessment data types, each record may employ a numeric observation value (featureValue), a string observation value (featureString), a Boolean observation value (featureBool), an array of numeric observation values (featureArray), or any combination of these.',
            },
            heading: {
              type: 'number',
              description:
                'The feature object heading, in degrees clockwise from true North at the object location.',
            },
            height: {
              type: 'number',
              description: 'Estimated physical height of the feature, in meters.',
            },
            length: {
              type: 'number',
              description: 'Estimated physical length of the feature, in meters.',
            },
            name: {
              type: 'string',
              description:
                'Source defined name of the feature associated with this record. If an annotation for this feature element exists on the parent image it can be referenced here.',
            },
            origin: {
              type: 'string',
              description:
                'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
            },
            origNetwork: {
              type: 'string',
              description:
                'The originating source network on which this record was created, auto-populated by the system.',
            },
            sourceDL: {
              type: 'string',
              description:
                'The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.',
            },
            speed: {
              type: 'number',
              description: "Feature's speed of travel, in meters per second.",
            },
            srcIds: {
              type: 'array',
              description:
                "Array of UUIDs of the UDL data records that are related to the determination of this activity or event. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps', 'srcIds', and 'srcTs' arrays must contain the same number of elements. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.",
              items: {
                type: 'string',
              },
            },
            srcTs: {
              type: 'array',
              description:
                "Array of the primary timestamps, in ISO 8601 UTC format, with appropriate precision for the datatype of each correspondng srcTyp/srcId record.  See the associated 'srcTyps' and 'srcIds' arrays for the record type and UUID, respectively, positionally corresponding to the record types in this array. The 'srcTyps', 'srcIds', and 'srcTs' arrays must contain the same number of elements.  These timestamps are included to support services which do not include a GET by {id} operation.  If referencing a datatype which does not include a primary timestamp, the corresponding srcTs array element should be included as null.",
              items: {
                type: 'string',
                format: 'date-time',
              },
            },
            srcTyps: {
              type: 'array',
              description:
                "Array of UDL record types (AIS, GROUNDIMAGE, MTI, ONORBIT, POI, SAR, SKYIMAGE, SOI, TRACK) related to this feature assessment. See the associated 'srcIds' and 'srcTs' arrays for the record UUIDs and timetsmps. respectively, positionally corresponding to the record types in this array. The 'srcTyps', 'srcIds', and 'srcTs' arrays must contain the same number of elements.",
              items: {
                type: 'string',
              },
            },
            tags: {
              type: 'array',
              description:
                'Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.',
              items: {
                type: 'string',
              },
            },
            transactionId: {
              type: 'string',
              description:
                'Optional identifier to track a commercial or marketplace transaction executed to produce this data.',
            },
            type: {
              type: 'string',
              description:
                'The type of feature  (e.g. AIRCRAFT, ANTENNA, SOLAR ARRAY, SITE, STRUCTURE, VESSEL, VEHICLE, UNKNOWN, etc.) detailed in this feature assessment record.  This type may be a primary feature within an image, for example a VESSEL, or may be a component or characteristic of a primary feature, for example an ANTENNA mounted on a vessel.',
            },
            width: {
              type: 'number',
              description: 'Estimated physical width of the feature, in meters.',
            },
          },
          required: [
            'classificationMarking',
            'dataMode',
            'featureTs',
            'featureUoM',
            'idAnalyticImagery',
            'source',
          ],
        },
      },
    },
    required: ['body'],
  },
  annotations: {},
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.featureAssessment.createBulk(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
