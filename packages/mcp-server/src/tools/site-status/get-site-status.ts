// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'site_status',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/sitestatus/{id}',
};

export const tool: Tool = {
  name: 'get_site_status',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to get a single SiteStatus record by its unique ID passed as a path parameter.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    classificationMarking: {\n      type: 'string',\n      description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n    },\n    dataMode: {\n      type: 'string',\n      description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n      enum: [        'REAL',\n        'TEST',\n        'SIMULATED',\n        'EXERCISE'\n      ]\n    },\n    idSite: {\n      type: 'string',\n      description: 'The ID of the site, if this status is associated with a fixed site or platform.'\n    },\n    source: {\n      type: 'string',\n      description: 'Source of the data.'\n    },\n    id: {\n      type: 'string',\n      description: 'Unique identifier of the record, auto-generated by the system.'\n    },\n    cat: {\n      type: 'string',\n      description: 'Crisis Action Team (CAT).\\n\\n\\n\\nCOLD - Not in use.\\n\\nWARM - Facility prepped/possible skeleton crew.\\n\\nHOT - Fully active.',\n      enum: [        'COLD',\n        'WARM',\n        'HOT'\n      ]\n    },\n    coldInventory: {\n      type: 'integer',\n      description: 'Estimated number of cold missiles of all types remaining in weapons system inventory.'\n    },\n    commImpairment: {\n      type: 'string',\n      description: 'The communications component causing the platform or system to be less than fully operational.'\n    },\n    cpcon: {\n      type: 'string',\n      description: 'Cyberspace Protection Condition (CPCON).\\n\\n\\n\\n1 - VERY HIGH - Critical functions.\\n\\n2 - HIGH - Critical and essential functions.\\n\\n3 - MEDIUM - Critical, essential, and support functions.\\n\\n4 - LOW - All functions.\\n\\n5 - VERY LOW - All functions.',\n      enum: [        '1',\n        '2',\n        '3',\n        '4',\n        '5'\n      ]\n    },\n    createdAt: {\n      type: 'string',\n      description: 'Time the row was created in the database, auto-populated by the system.',\n      format: 'date-time'\n    },\n    createdBy: {\n      type: 'string',\n      description: 'Application user who created the row in the database, auto-populated by the system.'\n    },\n    eoc: {\n      type: 'string',\n      description: 'Emergency Operations Center (EOC) status.\\n\\n\\n\\nCOLD - Not in use.\\n\\nWARM - Facility prepped/possible skeleton crew.\\n\\nHOT - Fully active.',\n      enum: [        'COLD',\n        'WARM',\n        'HOT'\n      ]\n    },\n    fpcon: {\n      type: 'string',\n      description: 'Force Protection Condition (FPCON).\\n\\n\\n\\nNORMAL - Applies when a general global threat of possible terrorist activity exists and warrants a routine security posture.\\n\\nALPHA - Applies when an increased general threat of possible terrorist activity against personnel or facilities. Nature and extent of threat are unpredictable.\\n\\nBRAVO - Applies when an increased or predictable threat of terrorist activity exists.\\n\\nCHARLIE - Applies when an incident occurs or intelligence is received indicating some form of terrorist action against personnel and facilities is imminent.\\n\\nDELTA - Applies in the immediate area where an attack has occurred or when intelligence is received indicating terrorist action against a location is imminent.',\n      enum: [        'NORMAL',\n        'ALPHA',\n        'BRAVO',\n        'CHARLIE',\n        'DELTA'\n      ]\n    },\n    hotInventory: {\n      type: 'integer',\n      description: 'Estimated number of hot missiles of all types remaining in weapons system inventory.'\n    },\n    hpcon: {\n      type: 'string',\n      description: 'Health Protection Condition (HPCON).\\n\\n\\n\\n0 - Routine, no community transmission.\\n\\nALPHA - Limited, community transmission beginning.\\n\\nBRAVO - Moderate, increased community transmission.\\n\\nCHARLIE - Substantial, sustained community transmission.\\n\\nDELTA - Severe, widespread community transmission.',\n      enum: [        '0',\n        'ALPHA',\n        'BRAVO',\n        'CHARLIE',\n        'DELTA'\n      ]\n    },\n    instStatus: {\n      type: 'string',\n      description: 'The status of the installation.\\n\\nFMC - Fully Mission Capable\\n\\n PMC - Partially Mission Capable\\n\\nNMC - Non Mission Capable\\n\\nUNK - Unknown.',\n      enum: [        'FMC',\n        'PMC',\n        'NMC',\n        'UNK'\n      ]\n    },\n    link: {\n      type: 'array',\n      description: 'Array of Link item(s) for which status is available and reported (ATDL, IJMS,  LINK-1, LINK-11, LINK-11B, LINK-16).  This array must be the same length as the linkStatus array.',\n      items: {\n        type: 'string'\n      }\n    },\n    linkStatus: {\n      type: 'array',\n      description: 'Array of the status (AVAILABLE, DEGRADED, NOT AVAILABLE, etc.) for each links in the link array. This array must be the same length as the link array, and the status must correspond to the appropriate position index in the link array.',\n      items: {\n        type: 'string'\n      }\n    },\n    missile: {\n      type: 'array',\n      description: 'Array of specific missile types for which an estimated inventory count is available (e.g. GMD TYPE A, HARPOON, TOMAHAWK, etc.).  This array must be the same length as the missileInventory array.',\n      items: {\n        type: 'string'\n      }\n    },\n    missileInventory: {\n      type: 'array',\n      description: 'Array of the quantity of each of the missile items.  This array must be the same length as the missile array, and the values must correspond to appropriate position index in the missile array.',\n      items: {\n        type: 'integer'\n      }\n    },\n    mobileAltId: {\n      type: 'string',\n      description: 'Alternate Identifier for a mobile or transportable platform provided by source.'\n    },\n    opsCapability: {\n      type: 'string',\n      description: 'The operational status of the platform (e.g. Fully Operational, Partially Operational, Not Operational, etc.).'\n    },\n    opsImpairment: {\n      type: 'string',\n      description: 'The primary component degrading the operational capability of the platform or system.'\n    },\n    origin: {\n      type: 'string',\n      description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n    },\n    origNetwork: {\n      type: 'string',\n      description: 'The originating source network on which this record was created, auto-populated by the system.'\n    },\n    pes: {\n      type: 'boolean',\n      description: 'Position Engagement Status flag, Indicating whether this platform is initiating multiple simultaneous engagements.  A value of 1/True indicates the platform is initiating multiple simultaneous engagements.'\n    },\n    poiid: {\n      type: 'string',\n      description: 'The POI (point of interest) ID related to this platform, if available.'\n    },\n    radarStatus: {\n      type: 'array',\n      description: 'Array of the status (NON-OPERATIONAL, OPERATIONAL, OFF) for each radar system in the radarSystem array. This array must be the same length as the radarSystem array, and the status must correspond to the appropriate position index in the radarSystem array.',\n      items: {\n        type: 'string'\n      }\n    },\n    radarSystem: {\n      type: 'array',\n      description: 'Array of radar system(s) for which status is available and reported (ACQUISITION, IFFSIF, ILLUMINATING, MODE-4, PRIMARY SURVEILLANCE, SECONDARY SURVEILLANCE, TERTIARY SURVEILLANCE). This array must be the same length as the radarStatus array.',\n      items: {\n        type: 'string'\n      }\n    },\n    radiateMode: {\n      type: 'string',\n      description: 'SAM sensor radar surveillance mode (Active, Passive, Off).'\n    },\n    reportTime: {\n      type: 'string',\n      description: 'Time of report, in ISO8601 UTC format.',\n      format: 'date-time'\n    },\n    samMode: {\n      type: 'string',\n      description: 'The state of a SAM unit (e.g. Initialization, Standby, Reorientation, etc.).'\n    },\n    siteType: {\n      type: 'string',\n      description: 'Optional site type or further detail of type.  Intended for, but not limited to, Link-16 site type specifications (e.g. ADOC, GACC, SOC, TACC, etc.).'\n    },\n    timeFunction: {\n      type: 'string',\n      description: 'Description of the time function associated with the reportTime (e.g. Activation, Deactivation, Arrival, Departure, etc.), if applicable.'\n    },\n    trackId: {\n      type: 'string',\n      description: 'The track ID related to this platform (if mobile or transportable), if available.'\n    },\n    trackRefL16: {\n      type: 'string',\n      description: 'Link-16 specific reference track number.'\n    },\n    updatedAt: {\n      type: 'string',\n      description: 'Time the row was updated in the database, auto-populated by the system.',\n      format: 'date-time'\n    },\n    updatedBy: {\n      type: 'string',\n      description: 'Application user who updated the row in the database, auto-populated by the system.'\n    },\n    weatherMessage: {\n      type: 'string',\n      description: 'Description of the current weather conditions over a site.'\n    }\n  },\n  required: [    'classificationMarking',\n    'dataMode',\n    'idSite',\n    'source'\n  ]\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      id: {
        type: 'string',
      },
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { id, ...body } = args as any;
  return asTextContentResult(await maybeFilter(args, await client.siteStatus.get(id, body)));
};

export default { metadata, tool, handler };
