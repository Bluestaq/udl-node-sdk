// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'site_status',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/sitestatus',
};

export const tool: Tool = {
  name: 'create_site_status',
  description:
    'Service operation to take a single SiteStatus object as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.',
  inputSchema: {
    type: 'object',
    properties: {
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      idSite: {
        type: 'string',
        description: 'The ID of the site, if this status is associated with a fixed site or platform.',
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      id: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      cat: {
        type: 'string',
        description:
          'Crisis Action Team (CAT).\n\n\n\nCOLD - Not in use.\n\nWARM - Facility prepped/possible skeleton crew.\n\nHOT - Fully active.',
        enum: ['COLD', 'WARM', 'HOT'],
      },
      coldInventory: {
        type: 'integer',
        description: 'Estimated number of cold missiles of all types remaining in weapons system inventory.',
      },
      commImpairment: {
        type: 'string',
        description:
          'The communications component causing the platform or system to be less than fully operational.',
      },
      cpcon: {
        type: 'string',
        description:
          'Cyberspace Protection Condition (CPCON).\n\n\n\n1 - VERY HIGH - Critical functions.\n\n2 - HIGH - Critical and essential functions.\n\n3 - MEDIUM - Critical, essential, and support functions.\n\n4 - LOW - All functions.\n\n5 - VERY LOW - All functions.',
        enum: ['1', '2', '3', '4', '5'],
      },
      eoc: {
        type: 'string',
        description:
          'Emergency Operations Center (EOC) status.\n\n\n\nCOLD - Not in use.\n\nWARM - Facility prepped/possible skeleton crew.\n\nHOT - Fully active.',
        enum: ['COLD', 'WARM', 'HOT'],
      },
      fpcon: {
        type: 'string',
        description:
          'Force Protection Condition (FPCON).\n\n\n\nNORMAL - Applies when a general global threat of possible terrorist activity exists and warrants a routine security posture.\n\nALPHA - Applies when an increased general threat of possible terrorist activity against personnel or facilities. Nature and extent of threat are unpredictable.\n\nBRAVO - Applies when an increased or predictable threat of terrorist activity exists.\n\nCHARLIE - Applies when an incident occurs or intelligence is received indicating some form of terrorist action against personnel and facilities is imminent.\n\nDELTA - Applies in the immediate area where an attack has occurred or when intelligence is received indicating terrorist action against a location is imminent.',
        enum: ['NORMAL', 'ALPHA', 'BRAVO', 'CHARLIE', 'DELTA'],
      },
      hotInventory: {
        type: 'integer',
        description: 'Estimated number of hot missiles of all types remaining in weapons system inventory.',
      },
      hpcon: {
        type: 'string',
        description:
          'Health Protection Condition (HPCON).\n\n\n\n0 - Routine, no community transmission.\n\nALPHA - Limited, community transmission beginning.\n\nBRAVO - Moderate, increased community transmission.\n\nCHARLIE - Substantial, sustained community transmission.\n\nDELTA - Severe, widespread community transmission.',
        enum: ['0', 'ALPHA', 'BRAVO', 'CHARLIE', 'DELTA'],
      },
      instStatus: {
        type: 'string',
        description:
          'The status of the installation.\n\nFMC - Fully Mission Capable\n\n PMC - Partially Mission Capable\n\nNMC - Non Mission Capable\n\nUNK - Unknown.',
        enum: ['FMC', 'PMC', 'NMC', 'UNK'],
      },
      link: {
        type: 'array',
        description:
          'Array of Link item(s) for which status is available and reported (ATDL, IJMS,  LINK-1, LINK-11, LINK-11B, LINK-16).  This array must be the same length as the linkStatus array.',
        items: {
          type: 'string',
        },
      },
      linkStatus: {
        type: 'array',
        description:
          'Array of the status (AVAILABLE, DEGRADED, NOT AVAILABLE, etc.) for each links in the link array. This array must be the same length as the link array, and the status must correspond to the appropriate position index in the link array.',
        items: {
          type: 'string',
        },
      },
      missile: {
        type: 'array',
        description:
          'Array of specific missile types for which an estimated inventory count is available (e.g. GMD TYPE A, HARPOON, TOMAHAWK, etc.).  This array must be the same length as the missileInventory array.',
        items: {
          type: 'string',
        },
      },
      missileInventory: {
        type: 'array',
        description:
          'Array of the quantity of each of the missile items.  This array must be the same length as the missile array, and the values must correspond to appropriate position index in the missile array.',
        items: {
          type: 'integer',
        },
      },
      mobileAltId: {
        type: 'string',
        description: 'Alternate Identifier for a mobile or transportable platform provided by source.',
      },
      opsCapability: {
        type: 'string',
        description:
          'The operational status of the platform (e.g. Fully Operational, Partially Operational, Not Operational, etc.).',
      },
      opsImpairment: {
        type: 'string',
        description: 'The primary component degrading the operational capability of the platform or system.',
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
      pes: {
        type: 'boolean',
        description:
          'Position Engagement Status flag, Indicating whether this platform is initiating multiple simultaneous engagements.  A value of 1/True indicates the platform is initiating multiple simultaneous engagements.',
      },
      poiid: {
        type: 'string',
        description: 'The POI (point of interest) ID related to this platform, if available.',
      },
      radarStatus: {
        type: 'array',
        description:
          'Array of the status (NON-OPERATIONAL, OPERATIONAL, OFF) for each radar system in the radarSystem array. This array must be the same length as the radarSystem array, and the status must correspond to the appropriate position index in the radarSystem array.',
        items: {
          type: 'string',
        },
      },
      radarSystem: {
        type: 'array',
        description:
          'Array of radar system(s) for which status is available and reported (ACQUISITION, IFFSIF, ILLUMINATING, MODE-4, PRIMARY SURVEILLANCE, SECONDARY SURVEILLANCE, TERTIARY SURVEILLANCE). This array must be the same length as the radarStatus array.',
        items: {
          type: 'string',
        },
      },
      radiateMode: {
        type: 'string',
        description: 'SAM sensor radar surveillance mode (Active, Passive, Off).',
      },
      reportTime: {
        type: 'string',
        description: 'Time of report, in ISO8601 UTC format.',
        format: 'date-time',
      },
      samMode: {
        type: 'string',
        description: 'The state of a SAM unit (e.g. Initialization, Standby, Reorientation, etc.).',
      },
      siteType: {
        type: 'string',
        description:
          'Optional site type or further detail of type.  Intended for, but not limited to, Link-16 site type specifications (e.g. ADOC, GACC, SOC, TACC, etc.).',
      },
      timeFunction: {
        type: 'string',
        description:
          'Description of the time function associated with the reportTime (e.g. Activation, Deactivation, Arrival, Departure, etc.), if applicable.',
      },
      trackId: {
        type: 'string',
        description: 'The track ID related to this platform (if mobile or transportable), if available.',
      },
      trackRefL16: {
        type: 'string',
        description: 'Link-16 specific reference track number.',
      },
      weatherMessage: {
        type: 'string',
        description: 'Description of the current weather conditions over a site.',
      },
    },
  },
};

export const handler = (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  return client.siteStatus.create(body);
};

export default { metadata, tool, handler };
