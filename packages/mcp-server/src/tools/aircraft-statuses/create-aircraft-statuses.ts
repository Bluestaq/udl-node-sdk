// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'aircraft_statuses',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/aircraftstatus',
};

export const tool: Tool = {
  name: 'create_aircraft_statuses',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to take a single AircraftStatus as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {}\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      idAircraft: {
        type: 'string',
        description: 'Unique identifier of the aircraft.',
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      id: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      additionalSys: {
        type: 'array',
        description:
          'List of additional operational systems on this aircraft beyond what is normally available.',
        items: {
          type: 'string',
        },
      },
      airToAirStatus: {
        type: 'string',
        description:
          'The status of the air-to-air weapon release system (OPERATIONAL, NON-OPERATIONAL, OFF).',
        enum: ['OPERATIONAL', 'NON-OPERATIONAL', 'OFF'],
      },
      airToGroundStatus: {
        type: 'string',
        description:
          'The status of the air-to-ground weapon release system (OPERATIONAL, NON-OPERATIONAL, OFF).',
        enum: ['OPERATIONAL', 'NON-OPERATIONAL', 'OFF'],
      },
      alphaStatusCode: {
        type: 'string',
        description:
          'Aircraft alpha status code that indicates the aircraft maintenance status estimated by the pilot.',
      },
      altAircraftId: {
        type: 'string',
        description: 'Alternate Aircraft Identifier provided by source.',
      },
      contaminationStatus: {
        type: 'string',
        description:
          'The contamination status of the aircraft (e.g. CLEAR, CONTAMINATED, DECONTAMINATED, UNKNOWN, etc.).',
      },
      currentICAO: {
        type: 'string',
        description:
          'The International Civil Aviation Organization (ICAO) code at which this aircraft is currently located or has most recently departed, if airborne.',
      },
      currentState: {
        type: 'string',
        description:
          'The current readiness state of the aircraft (e.g. AIRBORNE, ALERTCOCKED, AVAILABLE, BATTLESTATION, RUNWAY ALERT, SUITUP).',
      },
      earliestTAEndTime: {
        type: 'string',
        description:
          'The earliest time that turnaround of the aircraft may complete, in ISO 8601 UTC format with millisecond precision.',
        format: 'date-time',
      },
      etic: {
        type: 'string',
        description:
          'The Expected Time in Commission (ETIC) for this aircraft, in ISO 8601 UTC format with millisecond precision. This is the estimated time when the issue will be resolved.',
        format: 'date-time',
      },
      flightPhase: {
        type: 'string',
        description: 'Current flight phase (e.g. AIR REFUELING, GROUND, LANDING, etc.) of the aircraft.',
      },
      fuel: {
        type: 'integer',
        description: 'The mass of fuel remaining on the aircraft, in kilograms.',
      },
      fuelFunction: {
        type: 'string',
        description: 'Used in conjunction with the fuel field to indicate either burnable or offload fuel.',
      },
      fuelStatus: {
        type: 'string',
        description:
          'The state of the aircraft fuel status (e.g. DELIVERED, DUMPED, EMPTY, FULL, OTHER, REQUESTED, etc.).',
      },
      geoLoc: {
        type: 'string',
        description: 'US Air Force geographic location code of the airfield where the aircraft is located.',
      },
      groundStatus: {
        type: 'string',
        description:
          'The ground status of the aircraft (e.g. ALERT, CREW READY, ENGINE START, HANGAR, etc.).',
      },
      gunCapable: {
        type: 'boolean',
        description: 'Flag indicating that the aircraft is capable of making at least one gun pass.',
      },
      gunRdsMax: {
        type: 'integer',
        description: 'The upper bound of the estimated number of gun rounds available.',
      },
      gunRdsMin: {
        type: 'integer',
        description: 'The lower bound of the estimated number of gun rounds available.',
      },
      gunRdsType: {
        type: 'string',
        description: 'The type of gun rounds available (e.g. 7.62 MM, 20 MM, 25 MM, etc.).',
      },
      idAirfield: {
        type: 'string',
        description:
          'If not airborne, the unique identifier of the installation currently hosting the aircraft.',
      },
      idPOI: {
        type: 'string',
        description:
          'Unique identifier of the Point of Interest (POI) record related to this aircraft status. This will generally represent the location of an aircraft on the ground.',
      },
      inventory: {
        type: 'array',
        description:
          'Array of inventory item(s) for which estimate(s) are available (e.g. AIM-9 SIDEWINDER, AIM-120 AMRAAM, AIM-92 STINGER, CHAFF DECOY, FLARE TP 400, etc.).  Intended as, but not constrained to, MIL-STD-6016 environment dependent specific/store type designations.  This array must be the same length as inventoryMin and inventoryMax.',
        items: {
          type: 'string',
        },
      },
      inventoryMax: {
        type: 'array',
        description:
          'Array of the upper bound quantity for each of the inventory items. The values in this array must correspond to position index in the inventory array. This array must be the same length as inventory and inventoryMin.',
        items: {
          type: 'integer',
        },
      },
      inventoryMin: {
        type: 'array',
        description:
          'Array of the lower bound quantity for each of the inventory items. The values in this array must correspond to position index in the inventory array. This array must be the same length as inventory and inventoryMax.',
        items: {
          type: 'integer',
        },
      },
      lastInspectionDate: {
        type: 'string',
        description:
          'Date when the military aircraft inspection was last performed, in ISO 8601 UTC format with millisecond precision.',
        format: 'date-time',
      },
      lastUpdatedBy: {
        type: 'string',
        description: 'The name or ID of the external user that updated this status.',
      },
      maintPoc: {
        type: 'string',
        description: 'Military aircraft maintenance point of contact for this aircraft.',
      },
      maintPriority: {
        type: 'string',
        description: 'Indicates the priority of the maintenance effort.',
      },
      maintStatus: {
        type: 'string',
        description: 'The maintenance status of the aircraft.',
      },
      maintStatusDriver: {
        type: 'string',
        description: 'Indicates the maintenance discrepancy that drives the current maintenance status.',
      },
      maintStatusUpdate: {
        type: 'string',
        description:
          'The time of the last maintenance status update, in ISO 8601 UTC format with millisecond precision.',
        format: 'date-time',
      },
      missionReadiness: {
        type: 'string',
        description: 'The Operational Capability of the reported aircraft (ABLE, LOFUEL, UNABLE).',
      },
      mxRemark: {
        type: 'string',
        description: 'Maintenance pacing remarks assocociated with this aircraft.',
      },
      nextICAO: {
        type: 'string',
        description:
          'The International Civil Aviation Organization (ICAO) code of the next destination of this aircraft.',
      },
      notes: {
        type: 'string',
        description: 'Optional notes/comments concerning this aircraft status.',
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
      parkLocation: {
        type: 'string',
        description: 'The parking location of this aircraft.',
      },
      parkLocationSystem: {
        type: 'string',
        description: 'The system that designated the parking location (e.g. EMOC, GDSS, PEX, etc.).',
      },
      previousICAO: {
        type: 'string',
        description:
          'The International Civil Aviation Organization (ICAO) code at which this aircraft was previously located.',
      },
      taStartTime: {
        type: 'string',
        description: 'The turnaround start time, in ISO 8601 UTC format with millisecond precision.',
        format: 'date-time',
      },
      troubleshootEtic: {
        type: 'string',
        description:
          'Estimated Time for Completion (ETIC) of an aircraft issue, in ISO 8601 UTC format with millisecond precision. This is the estimated time when the course of action to resolve the issue will be determined.',
        format: 'date-time',
      },
      unavailableSys: {
        type: 'array',
        description: 'List of unavailable systems that would normally be on this aircraft.',
        items: {
          type: 'string',
        },
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['classificationMarking', 'dataMode', 'idAircraft', 'source'],
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.aircraftStatuses.create(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
