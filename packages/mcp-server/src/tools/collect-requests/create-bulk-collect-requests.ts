// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'udl-node-sdk';

export const metadata: Metadata = {
  resource: 'collect_requests',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/collectrequest/createBulk',
};

export const tool: Tool = {
  name: 'create_bulk_collect_requests',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation intended for initial integration only, to take a list of CollectRequest as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
  inputSchema: {
    type: 'object',
    properties: {
      body: {
        type: 'array',
        items: {
          type: 'object',
          description:
            'Collect Requests support several types of individual requests, or planned/scheduled tasks on sensors and/or orbital objects. Options are provided to accomodate most common sensor contact and collection applications, including single sensor-object tasking, search operations, and TT&C support. Multiple requests originating from a plan or schedule may be associated to a sensor plan if desired.',
          properties: {
            classificationMarking: {
              type: 'string',
              description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
            },
            dataMode: {
              type: 'string',
              description:
                'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
              enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
            },
            source: {
              type: 'string',
              description: 'Source of the data.',
            },
            startTime: {
              type: 'string',
              description:
                'The start time or earliest time of the collect or contact request window, in ISO 8601 UTC format.',
              format: 'date-time',
            },
            type: {
              type: 'string',
              description:
                'The type of this collect or contact request (DIRECTED SEARCH, DWELL, OBJECT, POL, RATE TRACK, SEARCH, SOI, STARE, TTC, VOLUME SEARCH, etc.).',
            },
            id: {
              type: 'string',
              description: 'Unique identifier of the record, auto-generated by the system.',
            },
            alt: {
              type: 'number',
              description:
                'Height above WGS-84 ellipsoid (HAE), in kilometers.  If an accompanying stopAlt is provided, then alt value can be assumed to be the starting altitude of a volume definition.',
            },
            argOfPerigee: {
              type: 'number',
              description:
                'The argument of perigee is the angle, in degrees, formed between the perigee and the ascending node.',
            },
            az: {
              type: 'number',
              description:
                'The expected or directed azimuth angle, in degrees, for search or target acquisition.',
            },
            createdAt: {
              type: 'string',
              description: 'Time the row was created in the database, auto-populated by the system.',
              format: 'date-time',
            },
            createdBy: {
              type: 'string',
              description:
                'Application user who created the row in the database, auto-populated by the system.',
            },
            customer: {
              type: 'string',
              description: 'The customer for this request.',
            },
            dec: {
              type: 'number',
              description:
                'The expected or directed declination angle, in degrees, for search or target acquisition.',
            },
            duration: {
              type: 'integer',
              description:
                'The duration of the collect request, in seconds.  If both duration and endTime are provided, the endTime is assumed to take precedence.',
            },
            dwellId: {
              type: 'string',
              description:
                'The dwell ID associated with this request.  A dwell ID is dwell point specific and a DWELL request consist of many dwell point requests.',
            },
            eccentricity: {
              type: 'number',
              description:
                'The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle.',
            },
            el: {
              type: 'number',
              description:
                'The expected or directed elevation angle, in degrees, for search or target acquisition.',
            },
            elset: {
              type: 'object',
              description:
                'An element set is a collection of Keplerian orbital elements describing an orbit of a particular satellite. The data is used along with an orbit propagator in order to predict the motion of a satellite. The element set, or elset for short, consists of identification data, the classical elements and drag parameters.',
              properties: {
                classificationMarking: {
                  type: 'string',
                  description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
                },
                dataMode: {
                  type: 'string',
                  description:
                    'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
                  enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
                },
                epoch: {
                  type: 'string',
                  description: 'Elset epoch time in ISO 8601 UTC format, with microsecond precision.',
                  format: 'date-time',
                },
                source: {
                  type: 'string',
                  description: 'Source of the data.',
                },
                agom: {
                  type: 'number',
                  description:
                    'AGOM, expressed in m^2/kg, is the value of the (averaged) object Area times the solar radiation pressure coefficient(Gamma) over the object Mass. Applicable only with ephemType4.',
                },
                algorithm: {
                  type: 'string',
                  description: 'Optional algorithm used to produce this record.',
                },
                apogee: {
                  type: 'number',
                  description:
                    'The orbit point furthest from the center of the earth in kilometers. If not provided, apogee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, apogee = (A * (1 + E)) in km. Note that the calculations are for computing the apogee radius from the center of the earth, to compute apogee altitude the radius of the earth should be subtracted (6378.135 km).',
                },
                argOfPerigee: {
                  type: 'number',
                  description:
                    'The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.',
                },
                ballisticCoeff: {
                  type: 'number',
                  description: 'Ballistic coefficient, in m^2/kg. Applicable only with ephemType4.',
                },
                bStar: {
                  type: 'number',
                  description:
                    'The drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.',
                },
                createdAt: {
                  type: 'string',
                  description: 'Time the row was created in the database, auto-populated by the system.',
                  format: 'date-time',
                },
                createdBy: {
                  type: 'string',
                  description:
                    'Application user who created the row in the database, auto-populated by the system.',
                },
                descriptor: {
                  type: 'string',
                  description: 'Optional source-provided and searchable metadata or descriptor of the data.',
                },
                eccentricity: {
                  type: 'number',
                  description:
                    'The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.',
                },
                ephemType: {
                  type: 'integer',
                  description:
                    'The ephemeris type associated with this TLE:\n\n0:&nbsp;SGP (or SGP4 with Kozai mean motion)\n\n1:&nbsp;SGP (Kozai mean motion)\n\n2:&nbsp;SGP4 (Brouver mean motion)\n\n3:&nbsp;SDP4\n\n4:&nbsp;SGP4-XP\n\n5:&nbsp;SDP8\n\n6:&nbsp;SP (osculating mean motion)\n\n',
                },
                idElset: {
                  type: 'string',
                  description: 'Unique identifier of the record, auto-generated by the system.',
                },
                idOnOrbit: {
                  type: 'string',
                  description:
                    'Unique identifier of the satellite on-orbit object, if correlated. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.',
                },
                idOrbitDetermination: {
                  type: 'string',
                  description:
                    "Unique identifier of the OD solution record that produced this elset. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queried as /udl/orbitdetermination/abc.",
                },
                inclination: {
                  type: 'number',
                  description:
                    'The angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.',
                },
                line1: {
                  type: 'string',
                  description:
                    'Read only derived/generated line1 of a legacy TLE (two line element set) format, ignored on create/edit operations.',
                },
                line2: {
                  type: 'string',
                  description:
                    'Read only derived/generated line2 of a legacy TLE (two line element set) format, ignored on create/edit operations.',
                },
                meanAnomaly: {
                  type: 'number',
                  description:
                    'Where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.',
                },
                meanMotion: {
                  type: 'number',
                  description:
                    'Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.',
                },
                meanMotionDDot: {
                  type: 'number',
                  description:
                    '2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.',
                },
                meanMotionDot: {
                  type: 'number',
                  description:
                    '1st derivative of the mean motion with respect to time. Units are revolutions per day squared.',
                },
                origin: {
                  type: 'string',
                  description:
                    'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
                },
                origNetwork: {
                  type: 'string',
                  description:
                    'The originating source network on which this record was created, auto-populated by the system.',
                },
                origObjectId: {
                  type: 'string',
                  description:
                    'Optional identifier provided by elset source to indicate the target onorbit object of this elset. This may be an internal identifier and not necessarily map to a valid satellite number.',
                },
                perigee: {
                  type: 'number',
                  description:
                    'The orbit point nearest to the center of the earth in kilometers. If not provided, perigee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, perigee = (A * (1 - E)) in km. Note that the calculations are for computing the perigee radius from the center of the earth, to compute perigee altitude the radius of the earth should be subtracted (6378.135 km).',
                },
                period: {
                  type: 'number',
                  description: 'Period of the orbit equal to inverse of mean motion, in minutes.',
                },
                raan: {
                  type: 'number',
                  description:
                    'Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.',
                },
                rawFileURI: {
                  type: 'string',
                  description:
                    'Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.',
                },
                revNo: {
                  type: 'integer',
                  description:
                    'The current revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.',
                },
                satNo: {
                  type: 'integer',
                  description: 'Satellite/catalog number of the target on-orbit object.',
                },
                semiMajorAxis: {
                  type: 'number',
                  description:
                    'The sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass. Units are kilometers.',
                },
                sourcedData: {
                  type: 'array',
                  description:
                    'Optional array of UDL data (observation) UUIDs used to build this element set. See the associated sourcedDataTypes array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).',
                  items: {
                    type: 'string',
                  },
                },
                sourcedDataTypes: {
                  type: 'array',
                  description:
                    'Optional array of UDL observation data types used to build this element set (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs of observations for the positionally corresponding data types in this array (the two arrays must match in size).',
                  items: {
                    type: 'string',
                    enum: ['EO', 'RADAR', 'RF', 'DOA', 'ELSET', 'SV'],
                  },
                },
                sourceDL: {
                  type: 'string',
                  description:
                    'The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.',
                },
                tags: {
                  type: 'array',
                  description:
                    'Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.',
                  items: {
                    type: 'string',
                  },
                },
                transactionId: {
                  type: 'string',
                  description:
                    'Optional identifier to track a commercial or marketplace transaction executed to produce this data.',
                },
                uct: {
                  type: 'boolean',
                  description:
                    "Boolean indicating this Elset was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
                },
              },
              required: ['classificationMarking', 'dataMode', 'epoch', 'source'],
            },
            endTime: {
              type: 'string',
              description:
                'The end time of the collect or contact request window, in ISO 8601 UTC format.  If no endTime or duration is provided it is assumed the request is either ongoing or that the request is for a specified number of tracks (numTracks).  If both duration and endTime are provided, the endTime is assumed to take precedence.',
              format: 'date-time',
            },
            epoch: {
              type: 'string',
              description: 'Epoch time, in ISO 8601 UTC format, of the orbital elements.',
              format: 'date-time',
            },
            esId: {
              type: 'string',
              description: 'ID of the UDL Ephemeris Set of the object associated with this request.',
            },
            extentAz: {
              type: 'number',
              description:
                'The extent of the azimuth angle, in degrees, from center azimuth to define a spatial volume.',
            },
            extentEl: {
              type: 'number',
              description:
                'The extent of the elevation angle, in degrees, from center elevation to define a spatial volume.',
            },
            extentRange: {
              type: 'number',
              description: 'The extent of the range, in km, from center range to define a spatial volume.',
            },
            externalId: {
              type: 'string',
              description:
                'Optional ID from external systems.  This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.',
            },
            frameRate: {
              type: 'number',
              description: 'For optical sensors, the frame rate of the camera, in Hz.',
            },
            freq: {
              type: 'number',
              description: 'The estimated or expected emission frequency of the target, in MHz.',
            },
            freqMax: {
              type: 'number',
              description: 'The maximum frequency of interest, in MHz.',
            },
            freqMin: {
              type: 'number',
              description:
                'The minimum frequency of interest, in MHz.  If only minimum frequency is provided it is assumed to be minimum reportable frequency.',
            },
            idElset: {
              type: 'string',
              description: 'ID of the UDL Elset of the object associated with this request.',
            },
            idManifold: {
              type: 'string',
              description:
                "ID of the UDL Manifold Elset of the object associated with this request.  A Manifold Elset provides theoretical Keplerian orbital elements belonging to an object of interest's manifold describing a possible/theoretical orbit for an object of interest for tasking purposes.",
            },
            idOnOrbit: {
              type: 'string',
              description: 'Unique identifier of the target on-orbit object for this request.',
            },
            idParentReq: {
              type: 'string',
              description:
                'The unique ID of the collect request record from which this request originated. This may be used for cases of sensor-to-sensor tasking, such as tip/cue operations.',
            },
            idPlan: {
              type: 'string',
              description:
                'Unique identifier of the parent plan or schedule associated with this request.  If null, this request is assumed not associated with a plan or schedule.',
            },
            idSensor: {
              type: 'string',
              description:
                'Unique identifier of the requested/scheduled/planned sensor associated with this request.  If both idSensor and origSensorId are null then the request is assumed to be a general request for observations or contact on an object, if specified, or an area/volume.  In this case, the requester may specify a desired obType.',
            },
            idStateVector: {
              type: 'string',
              description:
                'ID of the UDL State Vector of the object or central vector associated with this request.',
            },
            inclination: {
              type: 'number',
              description:
                'The angle, in degrees, between the equator and the orbit plane when looking from the center of the Earth. Inclination ranges from 0-180 degrees, with 0-90 representing posigrade orbits and 90-180 representing retrograde orbits.',
            },
            integrationTime: {
              type: 'number',
              description: 'For optical sensors, the integration time per camera frame, in milliseconds.',
            },
            iron: {
              type: 'integer',
              description:
                'Inter-Range Operations Number.  Four-digit identifier used to schedule and identify AFSCN contact support for booster, launch, and on-orbit operations.',
            },
            irradiance: {
              type: 'number',
              description: 'The target object irradiance value.',
            },
            lat: {
              type: 'number',
              description:
                'WGS-84 latitude, in degrees. -90 to 90 degrees (negative values south of equator).  If an accompanying stopLat is provided, then the lat value can be assumed to be the starting latitude of a volume definition.',
            },
            lon: {
              type: 'number',
              description:
                'WGS-84 longitude, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).  If an accompanying stopLon is provided, then lon value can be assumed to be the starting longitude of a volume definition.',
            },
            msgCreateDate: {
              type: 'string',
              description:
                'The timestamp of the external message from which this request originated, if applicable, in ISO8601 UTC format with millisecond precision.',
              format: 'date-time',
            },
            msgType: {
              type: 'string',
              description: 'The type of external message from which this request originated.',
            },
            notes: {
              type: 'string',
              description: 'Notes or comments associated with this request.',
            },
            numFrames: {
              type: 'integer',
              description:
                'For optical sensors, the requested number of frames to capture at each sensor step.',
            },
            numObs: {
              type: 'integer',
              description: 'The number of requested observations on the target.',
            },
            numTracks: {
              type: 'integer',
              description:
                'The number of requested tracks on the target.  If numTracks is not provided it is assumed to indicate all possible observations every pass over the request duration or within the request start/end window.',
            },
            obType: {
              type: 'string',
              description:
                'Optional type of observation (EO, IR, RADAR, RF-ACTIVE, RF-PASSIVE, OTHER) requested.  This field may correspond to a request of a specific sensor, or to a general non sensor specific request.',
            },
            orbitRegime: {
              type: 'string',
              description: 'The orbit regime of the target (GEO, HEO, LAUNCH, LEO, MEO, OTHER).',
            },
            orientAngle: {
              type: 'number',
              description:
                'The magnitude of rotation, in degrees, between the xAngle direction and locally defined equinoctial plane.  A positive value indicates clockwise rotation about the sensor boresight vector.',
            },
            origin: {
              type: 'string',
              description:
                'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
            },
            origNetwork: {
              type: 'string',
              description:
                'The originating source network on which this record was created, auto-populated by the system.',
            },
            origObjectId: {
              type: 'string',
              description:
                'Optional identifier provided by the data source to indicate the target object of this request. This may be an internal identifier and not necessarily map to a valid satellite number.',
            },
            origSensorId: {
              type: 'string',
              description:
                'Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request. This may be an internal identifier and not necessarily a valid sensor ID.  If both idSensor and origSensorId are null then the request is assumed to be a general request for observations or contact on an object, if specified, or an area/volume.  In this case, the requester may specify a desired obType.',
            },
            planIndex: {
              type: 'integer',
              description: 'Index number (integer) for records within a collection plan or schedule.',
            },
            polarization: {
              type: 'string',
              description: 'The RF polarization (H, LHC, RHC, V).',
            },
            priority: {
              type: 'string',
              description:
                'The priority of the collect request  (EMERGENCY, FLASH, IMMEDIATE, PRIORITY, ROUTINE).',
            },
            ra: {
              type: 'number',
              description:
                'The expected or directed right ascension angle, in degrees, for search or target acquisition.',
            },
            raan: {
              type: 'number',
              description:
                'Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node.',
            },
            range: {
              type: 'number',
              description: 'The expected acquisition range or defined center range, in km.',
            },
            rcs: {
              type: 'number',
              description: 'The Radar Cross-Section of the target, in m^2.',
            },
            rcsMax: {
              type: 'number',
              description: 'The maximum Radar Cross-Section of the target, in m^2.',
            },
            rcsMin: {
              type: 'number',
              description:
                'The minimum Radar Cross-Section of the target, in m^2.  If only minimum RCS is provided it is assumed to be minimum reportable RCS.',
            },
            reflectance: {
              type: 'number',
              description: 'The fraction of solar energy reflected from target.',
            },
            satNo: {
              type: 'integer',
              description: 'Satellite/catalog number of the target on-orbit object for this request.',
            },
            scenario: {
              type: 'string',
              description:
                'Pre-coordinated code, direction, or configuration to be executed by the sensor or site for this collect or contact.',
            },
            semiMajorAxis: {
              type: 'number',
              description:
                'The average of the periapsis and apoapsis distances, in kilometers. For circular orbits, the semimajor axis is the distance between the centers of the bodies.',
            },
            spectralModel: {
              type: 'string',
              description: 'The spectral model used for the irradiance calculation.',
            },
            srchInc: {
              type: 'number',
              description: 'The maximum inclination, in degrees, to be used in search operations.',
            },
            srchPattern: {
              type: 'string',
              description:
                'The search pattern to be executed for this request (e.g. PICKET-FENCE, SCAN, etc.).',
            },
            stateVector: {
              type: 'object',
              description:
                "This service provides operations for querying and manipulation of state vectors for OnOrbit objects. State vectors are cartesian vectors of position (r) and velocity (v) that, together with their time (epoch) (t), uniquely determine the trajectory of the orbiting body in space. J2000 is the preferred coordinate frame for all state vector positions/velocities in UDL, but in some cases data may be in another frame depending on the provider and/or datatype. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.",
              properties: {
                classificationMarking: {
                  type: 'string',
                  description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
                },
                dataMode: {
                  type: 'string',
                  description:
                    'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
                  enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
                },
                epoch: {
                  type: 'string',
                  description:
                    'Time of validity for state vector in ISO 8601 UTC datetime format, with microsecond precision.',
                  format: 'date-time',
                },
                source: {
                  type: 'string',
                  description: 'Source of the data.',
                },
                actualODSpan: {
                  type: 'number',
                  description: 'The actual time span used for the OD of the object, expressed in days.',
                },
                algorithm: {
                  type: 'string',
                  description: 'Optional algorithm used to produce this record.',
                },
                alt1ReferenceFrame: {
                  type: 'string',
                  description: 'The reference frame of the alternate1 (Alt1) cartesian orbital state.',
                },
                alt2ReferenceFrame: {
                  type: 'string',
                  description: 'The reference frame of the alternate2 (Alt2) cartesian orbital state.',
                },
                area: {
                  type: 'number',
                  description:
                    "The actual area of the object at it's largest cross-section, expressed in meters^2.",
                },
                bDot: {
                  type: 'number',
                  description: 'First derivative of drag/ballistic coefficient (m2/kg-s).',
                },
                cmOffset: {
                  type: 'number',
                  description: 'Model parameter value for center of mass offset (m).',
                },
                cov: {
                  type: 'array',
                  description:
                    "Covariance matrix, in kilometer and second based units, in the specified covReferenceFrame.  If the covReferenceFrame is null it is assumed to be J2000.\nThe array values (1-21) represent the lower triangular half of the position-velocity covariance matrix. The size of the covariance matrix is dynamic, depending on whether the covariance for position only or position & velocity. The covariance elements are position dependent within the array with values ordered as follows:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR&nbsp;&nbsp;\n\nx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1\n\ny&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;3\n\nz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;6\n\nx'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;10\n\ny'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15\n\nz'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;\n\nThe cov array should contain only the lower left triangle values from top left down to bottom right, in order.\n\nIf additional covariance terms are included for DRAG, SRP, and/or THRUST, the matrix can be extended with the following order of elements:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR\n\nDRG&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;23&nbsp;&nbsp;24&nbsp;&nbsp;25&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;\n\nSRP&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;30&nbsp;&nbsp;31&nbsp;&nbsp;32&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;\n\nTHR&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;38&nbsp;&nbsp;39&nbsp;&nbsp;40&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;44&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45&nbsp;\n\n\n",
                  items: {
                    type: 'number',
                  },
                },
                covMethod: {
                  type: 'string',
                  description:
                    'The method used to generate the covariance during the orbit determination (OD) that produced the state vector, or whether an arbitrary, non-calculated default value was used (CALCULATED, DEFAULT).',
                },
                covReferenceFrame: {
                  type: 'string',
                  description:
                    'The reference frame of the covariance matrix elements. If the covReferenceFrame is null it is assumed to be J2000.',
                  enum: ['J2000', 'UVW', 'EFG/TDR', 'TEME', 'GCRF'],
                },
                createdAt: {
                  type: 'string',
                  description: 'Time the row was created in the database, auto-populated by the system.',
                  format: 'date-time',
                },
                createdBy: {
                  type: 'string',
                  description:
                    'Application user who created the row in the database, auto-populated by the system.',
                },
                descriptor: {
                  type: 'string',
                  description: 'Optional source-provided and searchable metadata or descriptor of the data.',
                },
                dragArea: {
                  type: 'number',
                  description:
                    'The effective area of the object exposed to atmospheric drag, expressed in meters^2.',
                },
                dragCoeff: {
                  type: 'number',
                  description: 'Area-to-mass ratio coefficient for atmospheric ballistic drag (m2/kg).',
                },
                dragModel: {
                  type: 'string',
                  description:
                    'The Drag Model used for this vector (e.g. HARRIS-PRIESTER, JAC70, JBH09, MSIS90, NONE, etc.).',
                },
                edr: {
                  type: 'number',
                  description: 'Model parameter value for energy dissipation rate (EDR) (w/kg).',
                },
                eqCov: {
                  type: 'array',
                  description:
                    'The covariance matrix values represent the lower triangular half of the covariance matrix in terms of equinoctial elements.&nbsp; The size of the covariance matrix is dynamic.&nbsp; The values are outputted in order across each row, i.e.:\n\n1&nbsp;&nbsp; 2&nbsp;&nbsp; 3&nbsp;&nbsp; 4&nbsp;&nbsp; 5\n\n6&nbsp;&nbsp; 7&nbsp;&nbsp; 8&nbsp;&nbsp; 9&nbsp; 10\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n51&nbsp; 52&nbsp; 53&nbsp; 54&nbsp; 55\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n\n\n\nThe ordering of values is as follows:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Af&nbsp;&nbsp; Ag&nbsp;&nbsp; L&nbsp;&nbsp;&nbsp; N&nbsp;&nbsp; Chi&nbsp; Psi&nbsp;&nbsp; B&nbsp;&nbsp; BDOT AGOM&nbsp; T&nbsp;&nbsp; C1&nbsp;&nbsp; C2&nbsp; ...\n\nAf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1\n\nAg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp; 3\n\nL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp; 6\n\nN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp; 10\n\nChi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11&nbsp;&nbsp; 12&nbsp;&nbsp; 13&nbsp;&nbsp; 14&nbsp;&nbsp; 15\n\nPsi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 16&nbsp;&nbsp; 17&nbsp;&nbsp; 18&nbsp;&nbsp; 19&nbsp;&nbsp; 20&nbsp;&nbsp; 21\n\nB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 22&nbsp;&nbsp; 23&nbsp;&nbsp; 24 &nbsp;&nbsp;25&nbsp;&nbsp; 26&nbsp;&nbsp; 27&nbsp;&nbsp; 28\n\nBDOT&nbsp;&nbsp; 29&nbsp;&nbsp; 30&nbsp;&nbsp; 31&nbsp;&nbsp; 32&nbsp;&nbsp; 33&nbsp;&nbsp; 34&nbsp;&nbsp; 35&nbsp;&nbsp; 36\n\nAGOM&nbsp; 37&nbsp;&nbsp; 38&nbsp;&nbsp; 39&nbsp;&nbsp; 40&nbsp;&nbsp; 41&nbsp;&nbsp; 42&nbsp;&nbsp; 43&nbsp;&nbsp; 44&nbsp;&nbsp; 45\n\nT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 46&nbsp;&nbsp; 47&nbsp;&nbsp; 48&nbsp;&nbsp; 49&nbsp;&nbsp; 50&nbsp;&nbsp; 51&nbsp;&nbsp; 52&nbsp;&nbsp; 53&nbsp;&nbsp; 54&nbsp;&nbsp; 55\n\nC1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 56&nbsp;&nbsp; 57&nbsp;&nbsp; 58&nbsp;&nbsp; 59&nbsp;&nbsp; 60&nbsp;&nbsp; 61&nbsp;&nbsp; 62&nbsp;&nbsp; 63&nbsp;&nbsp; 64&nbsp;&nbsp; 65&nbsp;&nbsp; 66\n\nC2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 67&nbsp;&nbsp; 68&nbsp;&nbsp; 69&nbsp;&nbsp; 70&nbsp;&nbsp; 71&nbsp; &nbsp;72&nbsp;&nbsp; 73&nbsp;&nbsp; 74&nbsp;&nbsp; 75&nbsp;&nbsp; 76&nbsp;&nbsp; 77&nbsp;&nbsp; 78\n\n:\n\n:\n\nwhere C1, C2, etc, are the "consider parameters" that may be added to the covariance matrix.&nbsp; The covariance matrix will be as large as the last element/model parameter needed.&nbsp; In other words, if the DC solved for all 6 elements plus AGOM, the covariance matrix will be 9x9 (and the rows for B and BDOT will be all zeros).&nbsp; If the covariance matrix is unavailable, the size will be set to 0x0, and no data will follow.&nbsp; The cov field should contain only the lower left triangle values from top left down to bottom right, in order.',
                  items: {
                    type: 'number',
                  },
                },
                errorControl: {
                  type: 'number',
                  description: 'Integrator error control.',
                },
                fixedStep: {
                  type: 'boolean',
                  description: 'Boolean indicating use of fixed step size for this vector.',
                },
                geopotentialModel: {
                  type: 'string',
                  description:
                    'Geopotential model used for this vector (e.g. EGM-96, WGS-84, WGS-72, JGM-2, or GEM-T3), including mm degree zonals, nn degree/order tesserals. E.g. EGM-96 24Z,24T.',
                },
                iau1980Terms: {
                  type: 'integer',
                  description: 'Number of terms used in the IAU 1980 nutation model (4, 50, or 106).',
                },
                idOnOrbit: {
                  type: 'string',
                  description:
                    'Unique identifier of the satellite on-orbit object, if correlated. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.',
                },
                idOrbitDetermination: {
                  type: 'string',
                  description:
                    "Unique identifier of the OD solution record that produced this state vector. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queries as /udl/orbitdetermination/abc.",
                },
                idStateVector: {
                  type: 'string',
                  description: 'Unique identifier of the record, auto-generated by the system.',
                },
                integratorMode: {
                  type: 'string',
                  description: 'Integrator Mode.',
                },
                inTrackThrust: {
                  type: 'boolean',
                  description: 'Boolean indicating use of in-track thrust perturbations for this vector.',
                },
                lastObEnd: {
                  type: 'string',
                  description:
                    'The end of the time interval containing the time of the last accepted observation, in ISO 8601 UTC format with microsecond precision.  For an exact observation time, the firstObTime and lastObTime are the same.',
                  format: 'date-time',
                },
                lastObStart: {
                  type: 'string',
                  description:
                    'The start of the time interval containing the time of the last accepted observation, in ISO 8601 UTC format with microsecond precision.  For an exact observation time, the firstObTime and lastObTime are the same.',
                  format: 'date-time',
                },
                leapSecondTime: {
                  type: 'string',
                  description:
                    'Time of the next leap second after epoch in ISO 8601 UTC time. If the next leap second is not known, the time of the previous leap second is used.',
                  format: 'date-time',
                },
                lunarSolar: {
                  type: 'boolean',
                  description: 'Boolean indicating use of lunar/solar perturbations for this vector.',
                },
                mass: {
                  type: 'number',
                  description: 'The mass of the object, in kilograms.',
                },
                obsAvailable: {
                  type: 'integer',
                  description: 'The number of observations available for the OD of the object.',
                },
                obsUsed: {
                  type: 'integer',
                  description: 'The number of observations accepted for the OD of the object.',
                },
                origin: {
                  type: 'string',
                  description:
                    'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
                },
                origNetwork: {
                  type: 'string',
                  description:
                    'The originating source network on which this record was created, auto-populated by the system.',
                },
                origObjectId: {
                  type: 'string',
                  description:
                    'Optional identifier provided by state vector source to indicate the target onorbit object of this state vector. This may be an internal identifier and not necessarily map to a valid satellite number.',
                },
                partials: {
                  type: 'string',
                  description: 'Type of partial derivatives used (ANALYTIC, FULL NUM, or FAST NUM).',
                },
                pedigree: {
                  type: 'string',
                  description:
                    'The pedigree of state vector, or methods used for its generation to include state update/orbit determination, propagation from another state, or a state from a calibration satellite (e.g. ORBIT_UPDATE, PROPAGATION, CALIBRATION, CONJUNCTION, FLIGHT_PLAN).',
                },
                polarMotionX: {
                  type: 'number',
                  description: 'Polar Wander Motion X (arc seconds).',
                },
                polarMotionY: {
                  type: 'number',
                  description: 'Polar Wander Motion Y (arc seconds).',
                },
                posUnc: {
                  type: 'number',
                  description: 'One sigma position uncertainty, in kilometers.',
                },
                rawFileURI: {
                  type: 'string',
                  description:
                    'Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.',
                },
                recODSpan: {
                  type: 'number',
                  description: 'The recommended OD time span calculated for the object, expressed in days.',
                },
                referenceFrame: {
                  type: 'string',
                  description:
                    'The reference frame of the cartesian orbital states. If the referenceFrame is null it is assumed to be J2000.',
                  enum: ['J2000', 'EFG/TDR', 'ECR/ECEF', 'TEME', 'ITRF', 'GCRF'],
                },
                residualsAcc: {
                  type: 'number',
                  description: 'The percentage of residuals accepted in the OD of the object.',
                },
                revNo: {
                  type: 'integer',
                  description: 'Epoch revolution number.',
                },
                rms: {
                  type: 'number',
                  description:
                    'The Weighted Root Mean Squared (RMS) of the differential correction on the target object that produced this vector.  WRMS is a quality indicator of the state vector update, with a value of 1.00 being optimal.  WRMS applies to Batch Least Squares (BLS) processes.',
                },
                satNo: {
                  type: 'integer',
                  description: 'Satellite/Catalog number of the target OnOrbit object.',
                },
                sigmaPosUVW: {
                  type: 'array',
                  description:
                    'Array containing the standard deviation of error in target object position, U, V and W direction respectively (km).',
                  items: {
                    type: 'number',
                  },
                },
                sigmaVelUVW: {
                  type: 'array',
                  description:
                    'Array containing the standard deviation of error in target object velocity, U, V and W direction respectively (km/sec).',
                  items: {
                    type: 'number',
                  },
                },
                solarFluxAPAvg: {
                  type: 'number',
                  description: 'Average solar flux geomagnetic index.',
                },
                solarFluxF10: {
                  type: 'number',
                  description: 'F10 (10.7 cm) solar flux value.',
                },
                solarFluxF10Avg: {
                  type: 'number',
                  description: 'F10 (10.7 cm) solar flux 81-day average value.',
                },
                solarRadPress: {
                  type: 'boolean',
                  description:
                    'Boolean indicating use of solar radiation pressure perturbations for this vector.',
                },
                solarRadPressCoeff: {
                  type: 'number',
                  description: 'Area-to-mass ratio coefficient for solar radiation pressure.',
                },
                solidEarthTides: {
                  type: 'boolean',
                  description: 'Boolean indicating use of solid earth tide perturbations for this vector.',
                },
                sourcedData: {
                  type: 'array',
                  description:
                    'Optional array of UDL data (observation) UUIDs used to build this state vector. See the associated sourcedDataTypes array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).',
                  items: {
                    type: 'string',
                  },
                },
                sourcedDataTypes: {
                  type: 'array',
                  description:
                    'Optional array of UDL observation data types used to build this state vector (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs of observations for the positionally corresponding data types in this array (the two arrays must match in size).',
                  items: {
                    type: 'string',
                    enum: ['EO', 'RADAR', 'RF', 'DOA', 'ELSET', 'SV'],
                  },
                },
                sourceDL: {
                  type: 'string',
                  description:
                    'The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.',
                },
                srpArea: {
                  type: 'number',
                  description:
                    'The effective area of the object exposed to solar radiation pressure, expressed in meters^2.',
                },
                stepMode: {
                  type: 'string',
                  description: 'Integrator step mode (AUTO, TIME, or S).',
                },
                stepSize: {
                  type: 'number',
                  description: 'Initial integration step size (seconds).',
                },
                stepSizeSelection: {
                  type: 'string',
                  description: 'Initial step size selection (AUTO or MANUAL).',
                },
                tags: {
                  type: 'array',
                  description:
                    'Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.',
                  items: {
                    type: 'string',
                  },
                },
                taiUtc: {
                  type: 'number',
                  description:
                    'TAI (Temps Atomique International) minus UTC (Universal Time Coordinates) offset in seconds.',
                },
                thrustAccel: {
                  type: 'number',
                  description: 'Model parameter value for thrust acceleration (m/s2).',
                },
                tracksAvail: {
                  type: 'integer',
                  description: 'The number of sensor tracks available for the OD of the object.',
                },
                tracksUsed: {
                  type: 'integer',
                  description: 'The number of sensor tracks accepted for the OD of the object.',
                },
                transactionId: {
                  type: 'string',
                  description:
                    'Optional identifier to track a commercial or marketplace transaction executed to produce this data.',
                },
                uct: {
                  type: 'boolean',
                  description:
                    "Boolean indicating this state vector was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an OnOrbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
                },
                ut1Rate: {
                  type: 'number',
                  description: 'Rate of change of UT1 (milliseconds/day) - first derivative of ut1Utc.',
                },
                ut1Utc: {
                  type: 'number',
                  description: 'Universal Time-1 (UT1) minus UTC offset, in seconds.',
                },
                velUnc: {
                  type: 'number',
                  description: 'One sigma velocity uncertainty, in kilometers/second.',
                },
                xaccel: {
                  type: 'number',
                  description:
                    'Cartesian X acceleration of target, in kilometers/second^2, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.',
                },
                xpos: {
                  type: 'number',
                  description:
                    'Cartesian X position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.',
                },
                xposAlt1: {
                  type: 'number',
                  description:
                    'Cartesian X position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.',
                },
                xposAlt2: {
                  type: 'number',
                  description:
                    'Cartesian X position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.',
                },
                xvel: {
                  type: 'number',
                  description:
                    'Cartesian X velocity of target, in kilometers/second, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.',
                },
                xvelAlt1: {
                  type: 'number',
                  description:
                    'Cartesian X velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.',
                },
                xvelAlt2: {
                  type: 'number',
                  description:
                    'Cartesian X velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.',
                },
                yaccel: {
                  type: 'number',
                  description:
                    'Cartesian Y acceleration of target, in kilometers/second^2, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.',
                },
                ypos: {
                  type: 'number',
                  description:
                    'Cartesian Y position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.',
                },
                yposAlt1: {
                  type: 'number',
                  description:
                    'Cartesian Y position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.',
                },
                yposAlt2: {
                  type: 'number',
                  description:
                    'Cartesian Y position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.',
                },
                yvel: {
                  type: 'number',
                  description:
                    'Cartesian Y velocity of target, in kilometers/second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.',
                },
                yvelAlt1: {
                  type: 'number',
                  description:
                    'Cartesian Y velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.',
                },
                yvelAlt2: {
                  type: 'number',
                  description:
                    'Cartesian Y velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.',
                },
                zaccel: {
                  type: 'number',
                  description:
                    'Cartesian Z acceleration of target, in kilometers/second^2, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.',
                },
                zpos: {
                  type: 'number',
                  description:
                    'Cartesian Z position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.',
                },
                zposAlt1: {
                  type: 'number',
                  description:
                    'Cartesian Z position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.',
                },
                zposAlt2: {
                  type: 'number',
                  description:
                    'Cartesian Z position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.',
                },
                zvel: {
                  type: 'number',
                  description:
                    'Cartesian Z velocity of target, in kilometers/second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.',
                },
                zvelAlt1: {
                  type: 'number',
                  description:
                    'Cartesian Z velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.',
                },
                zvelAlt2: {
                  type: 'number',
                  description:
                    'Cartesian Z velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.',
                },
              },
              required: ['classificationMarking', 'dataMode', 'epoch', 'source'],
            },
            stopAlt: {
              type: 'number',
              description:
                'The stopping HAE WGS-84 height above ellipsoid (HAE), of a volume definition, in kilometers.  The stopAlt value is only meaningful if a (starting) alt value is provided.',
            },
            stopLat: {
              type: 'number',
              description:
                'The stopping WGS-84 latitude of a volume definition, in degrees.  -90 to 90 degrees (negative values south of equator).  The stopLat value is only meaningful if a (starting) lat value is provided.',
            },
            stopLon: {
              type: 'number',
              description:
                'The stopping WGS-84 longitude of a volume definition, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).  The stopLon value is only meaningful if a (starting) lon value is provided.',
            },
            suffix: {
              type: 'string',
              description:
                'The (SSN) tasking suffix (A-Z) associated with this request.  The suffix defines the amount of observational data and the frequency of collection.  Note that suffix definitions are sensor type specific.',
            },
            tags: {
              type: 'array',
              description:
                'Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.',
              items: {
                type: 'string',
              },
            },
            targetSize: {
              type: 'number',
              description: 'The minimum object (diameter) size, in meters, to be reported.',
            },
            taskCategory: {
              type: 'integer',
              description:
                'The (SSN) tasking category (1-5) associated with this request.  The tasking category defines the priority of gathering and transmitting the requested observational data.  Note that category definitions are sensor type specific.',
            },
            taskGroup: {
              type: 'string',
              description: 'The tasking group to which the target object is assigned.',
            },
            taskId: {
              type: 'string',
              description:
                'Task ID associated with this request.  A task ID may be associated with a single collect request or may be used to tie together the sub-requests of a full collect, for example a DWELL consisting of many dwell points.',
            },
            transactionId: {
              type: 'string',
              description:
                'Optional identifier to track a commercial or marketplace transaction executed to produce this data.',
            },
            trueAnomoly: {
              type: 'number',
              description:
                "The true anomaly defines the angular position, in degrees, of the object on it's orbital path as measured from the orbit focal point at epoch.  The true anomaly is referenced from perigee.",
            },
            uctFollowUp: {
              type: 'boolean',
              description: 'Boolean indicating that this collect request is UCT follow-up.',
            },
            visMag: {
              type: 'number',
              description: 'The estimated or expected visual magnitude of the target, in Magnitudes (M).',
            },
            visMagMax: {
              type: 'number',
              description:
                'The maximum estimated or expected visual magnitude of the target, in Magnitudes (M).',
            },
            visMagMin: {
              type: 'number',
              description:
                'The minimum estimated or expected visual magnitude of the target, in Magnitudes (M).  If only minimum vismag is provided it is assumed to be minimum reportable vismag.',
            },
            xAngle: {
              type: 'number',
              description:
                'The angular distance, in degrees, in the sensor-x direction from scan center defined by the central vector.  The specification of xAngle and yAngle defines a rectangle of width 2*xAngle and height 2*yAngle centered about the central vector.',
            },
            yAngle: {
              type: 'number',
              description:
                'The angular distance, in degrees, in the sensor-y direction from scan center defined by the central vector.  The specification of xAngle and yAngle defines a rectangle of width 2*xAngle and height 2*yAngle centered about the central vector.',
            },
          },
          required: ['classificationMarking', 'dataMode', 'source', 'startTime', 'type'],
        },
      },
    },
    required: ['body'],
  },
  annotations: {},
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.collectRequests.createBulk(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
