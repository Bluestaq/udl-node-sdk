// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'launch_event',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/launchevent/createBulk',
};

export const tool: Tool = {
  name: 'create_bulk_launch_event',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation intended for initial integration only, to take a list of LaunchEvent as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {}\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      body: {
        type: 'array',
        items: {
          type: 'object',
          description: 'Information on known launch events.',
          properties: {
            classificationMarking: {
              type: 'string',
              description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
            },
            dataMode: {
              type: 'string',
              description:
                'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
              enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
            },
            msgCreateDate: {
              type: 'string',
              description: 'Timestamp of the originating message in ISO8601 UTC format.',
              format: 'date-time',
            },
            source: {
              type: 'string',
              description: 'Source of the data.',
            },
            id: {
              type: 'string',
              description: 'Unique identifier of the record, auto-generated by the system.',
            },
            beNumber: {
              type: 'string',
              description: 'The Basic Encyclopedia Number, if applicable.',
            },
            createdAt: {
              type: 'string',
              description: 'Time the row was created in the database, auto-populated by the system.',
              format: 'date-time',
            },
            createdBy: {
              type: 'string',
              description:
                'Application user who created the row in the database, auto-populated by the system.',
            },
            declassificationDate: {
              type: 'string',
              description: 'The declassification date of this data, in ISO 8601 UTC format.',
              format: 'date-time',
            },
            declassificationString: {
              type: 'string',
              description: 'Declassification string of this data.',
            },
            derivedFrom: {
              type: 'string',
              description:
                'The sources or SCG references from which the classification of this data is derived.',
            },
            idOnOrbit: {
              type: 'string',
              description: 'Unique identifier of the target on-orbit object, if correlated.',
            },
            launchDate: {
              type: 'string',
              description: 'The launch date, in ISO8601 UTC format.',
              format: 'date-time',
            },
            launchFacilityName: {
              type: 'string',
              description: 'The Launch facility name.',
            },
            launchFailureCode: {
              type: 'string',
              description: 'The DISOB launch Failure Code, if applicable.',
            },
            origin: {
              type: 'string',
              description:
                'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
            },
            origNetwork: {
              type: 'string',
              description:
                'The originating source network on which this record was created, auto-populated by the system.',
            },
            origObjectId: {
              type: 'string',
              description: 'Optional target-id, if missing in UDL.',
            },
            oSuffix: {
              type: 'string',
              description: 'The OSuffix, if applicable.',
            },
            satNo: {
              type: 'integer',
              description: 'Satellite/catalog number of the target on-orbit object.',
            },
          },
          required: ['classificationMarking', 'dataMode', 'msgCreateDate', 'source'],
        },
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.launchEvent.createBulk(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
