// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'launch_event',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/launchevent',
};

export const tool: Tool = {
  name: 'create_launch_event',
  description:
    'Service operation to take a single LaunchEvent as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.',
  inputSchema: {
    type: 'object',
    properties: {
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      msgCreateDate: {
        type: 'string',
        description: 'Timestamp of the originating message in ISO8601 UTC format.',
        format: 'date-time',
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      id: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      beNumber: {
        type: 'string',
        description: 'The Basic Encyclopedia Number, if applicable.',
      },
      declassificationDate: {
        type: 'string',
        description: 'The declassification date of this data, in ISO 8601 UTC format.',
        format: 'date-time',
      },
      declassificationString: {
        type: 'string',
        description: 'Declassification string of this data.',
      },
      derivedFrom: {
        type: 'string',
        description: 'The sources or SCG references from which the classification of this data is derived.',
      },
      launchDate: {
        type: 'string',
        description: 'The launch date, in ISO8601 UTC format.',
        format: 'date-time',
      },
      launchFacilityName: {
        type: 'string',
        description: 'The Launch facility name.',
      },
      launchFailureCode: {
        type: 'string',
        description: 'The DISOB launch Failure Code, if applicable.',
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
      origObjectId: {
        type: 'string',
        description: 'Optional target-id, if missing in UDL.',
      },
      oSuffix: {
        type: 'string',
        description: 'The OSuffix, if applicable.',
      },
      satNo: {
        type: 'integer',
        description: 'Satellite/catalog number of the target on-orbit object.',
      },
    },
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  await client.launchEvent.create(body);
  return asTextContentResult('Successful tool call');
};

export default { metadata, tool, handler };
