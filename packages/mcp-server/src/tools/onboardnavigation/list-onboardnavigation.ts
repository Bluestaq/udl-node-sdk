// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'onboardnavigation',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/onboardnavigation',
};

export const tool: Tool = {
  name: 'list_onboardnavigation',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    type: 'object',\n    description: 'These services provide spacecraft positional data derived from on-board navigational sensors.  Navigational points are provided in kilometers and in a user specified reference frame, with ECI J2K being preferred.',\n    properties: {\n      classificationMarking: {\n        type: 'string',\n        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n      },\n      dataMode: {\n        type: 'string',\n        description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n        enum: [          'REAL',\n          'TEST',\n          'SIMULATED',\n          'EXERCISE'\n        ]\n      },\n      source: {\n        type: 'string',\n        description: 'Source of the data.'\n      },\n      startTime: {\n        type: 'string',\n        description: 'Start time of the sensor data, in ISO 8601 UTC format.',\n        format: 'date-time'\n      },\n      id: {\n        type: 'string',\n        description: 'Unique identifier of the record, auto-generated by the system.'\n      },\n      createdAt: {\n        type: 'string',\n        description: 'Time the row was created in the database, auto-populated by the system.',\n        format: 'date-time'\n      },\n      createdBy: {\n        type: 'string',\n        description: 'Application user who created the row in the database, auto-populated by the system.'\n      },\n      deltaPos: {\n        type: 'array',\n        description: 'Arrays of spacecraft delta position (X, Y, Z), in km, in the specified referenceFrame, between the onboard state and the last accepted sensor position.',\n        items: {\n          type: 'array',\n          items: {\n            type: 'number'\n          }\n        }\n      },\n      endTime: {\n        type: 'string',\n        description: 'End time of the sensor data, in ISO 8601 UTC format.',\n        format: 'date-time'\n      },\n      esId: {\n        type: 'string',\n        description: 'Unique identifier of the parent EphemerisSet, if this data is correlated with an Ephemeris.  If multiple nav sensor records are required, this ID may be associated with each of those records if each is synced to the ephemeris points.'\n      },\n      idOnOrbit: {\n        type: 'string',\n        description: 'Unique identifier of the primary satellite on-orbit object.'\n      },\n      idStateVector: {\n        type: 'string',\n        description: 'Unique identifier of the last onboard state vector.'\n      },\n      mag: {\n        type: 'array',\n        description: 'Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard magnetometer, at each epoch.',\n        items: {\n          type: 'array',\n          items: {\n            type: 'number'\n          }\n        }\n      },\n      origin: {\n        type: 'string',\n        description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n      },\n      origNetwork: {\n        type: 'string',\n        description: 'The originating source network on which this record was created, auto-populated by the system.'\n      },\n      origObjectId: {\n        type: 'string',\n        description: 'Optional identifier provided by the data source to indicate the target object of this record. This may be an internal identifier and not necessarily map to a valid satellite number.'\n      },\n      referenceFrame: {\n        type: 'string',\n        description: 'The reference frame in which the sensor derived positions are provided. If the referenceFrame is null it is assumed to be J2000.  Note that this frame is assumed to apply to all of the sensor data in this record.  If onboard sensors process positional estimates in different frames then separate records should be generated.',\n        enum: [          'J2000',\n          'EFG/TDR',\n          'ECR/ECEF',\n          'TEME',\n          'ITRF',\n          'GCRF'\n        ]\n      },\n      satNo: {\n        type: 'integer',\n        description: 'Satellite/catalog number of the target on-orbit object.'\n      },\n      starCatLoadTime: {\n        type: 'string',\n        description: 'The last load time of the current star catalog onboard this spacecraft.',\n        format: 'date-time'\n      },\n      starCatName: {\n        type: 'string',\n        description: 'The name or identifier the star catalog in use.'\n      },\n      starTracker: {\n        type: 'array',\n        description: 'Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard star tracker, at each epoch.',\n        items: {\n          type: 'array',\n          items: {\n            type: 'number'\n          }\n        }\n      },\n      sunSensor: {\n        type: 'array',\n        description: 'Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard sun sensor, at each epoch.',\n        items: {\n          type: 'array',\n          items: {\n            type: 'number'\n          }\n        }\n      },\n      ts: {\n        type: 'array',\n        description: 'Array of epochs of the observations, in ISO 8601 UTC format.  The epochs are assumed to correspond to all sensor data in this record.  If sensors do not share a common epoch then separate records should be generated.',\n        items: {\n          type: 'string',\n          format: 'date-time'\n        }\n      }\n    },\n    required: [      'classificationMarking',\n      'dataMode',\n      'source',\n      'startTime'\n    ]\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      startTime: {
        type: 'string',
        description: 'Start time of the sensor data, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)',
        format: 'date-time',
      },
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.onboardnavigation.list(body).asResponse();
  return asTextContentResult(await maybeFilter(args, await response.json()));
};

export default { metadata, tool, handler };
