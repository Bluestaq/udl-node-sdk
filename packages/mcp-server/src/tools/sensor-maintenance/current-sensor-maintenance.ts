// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'sensor_maintenance',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/sensormaintenance/current',
};

export const tool: Tool = {
  name: 'current_sensor_maintenance',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to get current Sensor Maintenance records using any number of additional parameters.\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    type: 'object',\n    description: 'Maintenance schedule and operational status of Sensor.',\n    properties: {\n      classificationMarking: {\n        type: 'string',\n        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n      },\n      dataMode: {\n        type: 'string',\n        description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n        enum: [          'REAL',\n          'TEST',\n          'SIMULATED',\n          'EXERCISE'\n        ]\n      },\n      endTime: {\n        type: 'string',\n        description: 'The planned outage end time in ISO8601 UTC format.',\n        format: 'date-time'\n      },\n      siteCode: {\n        type: 'string',\n        description: 'The site to which this item applies.  NOTE - this site code is COLT specific and may not identically correspond to other UDL site IDs.'\n      },\n      source: {\n        type: 'string',\n        description: 'Source of the data.'\n      },\n      startTime: {\n        type: 'string',\n        description: 'The planned outage start time in ISO8601 UTC format.',\n        format: 'date-time'\n      },\n      id: {\n        type: 'string',\n        description: 'Unique identifier of the record, auto-generated by the system.'\n      },\n      activity: {\n        type: 'string',\n        description: 'Description of the activity taking place during this outage.'\n      },\n      approver: {\n        type: 'string',\n        description: 'The name of the approver.'\n      },\n      changer: {\n        type: 'string',\n        description: 'The name of the changer, if applicable.'\n      },\n      createdAt: {\n        type: 'string',\n        description: 'Time the row was created in the database, auto-populated by the system.',\n        format: 'date-time'\n      },\n      createdBy: {\n        type: 'string',\n        description: 'Application user who created the row in the database, auto-populated by the system.'\n      },\n      duration: {\n        type: 'string',\n        description: 'The duration of the planned outage, expressed as ddd:hh:mm.'\n      },\n      eowId: {\n        type: 'string',\n        description: 'COLT EOWID.'\n      },\n      equipStatus: {\n        type: 'string',\n        description: 'The mission capability status of the equipment (e.g. FMC, NMC, PMC, UNK, etc.).'\n      },\n      idSensor: {\n        type: 'string',\n        description: 'UUID of the sensor.'\n      },\n      impactedFaces: {\n        type: 'string',\n        description: 'The sensor face(s) to which this COLT maintenance item applies, if applicable.'\n      },\n      inactiveDate: {\n        type: 'string',\n        description: 'The date that this item became inactive in ISO8601 UTC format.',\n        format: 'date-time'\n      },\n      lineNumber: {\n        type: 'string',\n        description: 'The internal COLT line number assigned to this item.'\n      },\n      mdOpsCap: {\n        type: 'string',\n        description: 'The Missile Defense operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.'\n      },\n      mwOpsCap: {\n        type: 'string',\n        description: 'The Missile Warning operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.'\n      },\n      origin: {\n        type: 'string',\n        description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n      },\n      origNetwork: {\n        type: 'string',\n        description: 'The originating source network on which this record was created, auto-populated by the system.'\n      },\n      priority: {\n        type: 'string',\n        description: 'The priority of this maintenance item.'\n      },\n      recall: {\n        type: 'string',\n        description: 'The minimum time required to recall this activity, expressed as ddd:hh:mm.'\n      },\n      rel: {\n        type: 'string',\n        description: 'Release.'\n      },\n      remark: {\n        type: 'string',\n        description: 'Remarks concerning this outage.'\n      },\n      requestor: {\n        type: 'string',\n        description: 'The name of the requestor.'\n      },\n      resource: {\n        type: 'string',\n        description: 'The name of the resource(s) affected by this maintenance item.'\n      },\n      rev: {\n        type: 'string',\n        description: 'The revision number for this maintenance item.'\n      },\n      ssOpsCap: {\n        type: 'string',\n        description: 'The Space Surveillance operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.'\n      },\n      updatedAt: {\n        type: 'string',\n        description: 'Time the row was last updated in the database, auto-populated by the system.',\n        format: 'date-time'\n      },\n      updatedBy: {\n        type: 'string',\n        description: 'Application user who updated the row in the database, auto-populated by the system.'\n      }\n    },\n    required: [      'classificationMarking',\n      'dataMode',\n      'endTime',\n      'siteCode',\n      'source',\n      'startTime'\n    ]\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  return asTextContentResult(await maybeFilter(args, await client.sensorMaintenance.current(body)));
};

export default { metadata, tool, handler };
