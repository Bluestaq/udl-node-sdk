// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'udl-node-sdk';

export const metadata: Metadata = {
  resource: 'diff_of_arrival',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/filedrop/udl-diffofarrival',
  operationId: 'filedrop_udl_diffofarrival_post_id',
};

export const tool: Tool = {
  name: 'unvalidated_publish_diff_of_arrival',
  description:
    'Service operation to take multiple TDOA/FDOA records as a POST body and ingest into the database. This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n',
  inputSchema: {
    type: 'object',
    properties: {
      body: {
        type: 'array',
        items: {
          type: 'object',
          description:
            'Model representation of Signal time and frequency difference of arrival (TDOA/FDOA) information obtained by using passive RF based sensor phenomenologies and sensor triangulation.',
          properties: {
            classificationMarking: {
              type: 'string',
              description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
            },
            dataMode: {
              type: 'string',
              description:
                'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
              enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
            },
            obTime: {
              type: 'string',
              description: 'Ob detection time in ISO 8601 UTC with microsecond precision.',
              format: 'date-time',
            },
            source: {
              type: 'string',
              description: 'Source of the data.',
            },
            id: {
              type: 'string',
              description: 'Unique identifier of the record, auto-generated by the system.',
            },
            bandwidth: {
              type: 'number',
              description: 'Bandwidth of the signal in Hz.',
            },
            collectionMode: {
              type: 'string',
              description:
                'Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).',
            },
            createdAt: {
              type: 'string',
              description: 'Time the row was created in the database, auto-populated by the system.',
              format: 'date-time',
            },
            createdBy: {
              type: 'string',
              description:
                'Application user who created the row in the database, auto-populated by the system.',
            },
            deltaRange: {
              type: 'number',
              description: 'Delta range, in km. Delta range calculation convention is (sensor2 - sensor1).',
            },
            deltaRangeRate: {
              type: 'number',
              description:
                'Delta range rate, in km/sec. Delta range rate calculation convention is (sensor2 - sensor1).',
            },
            deltaRangeRateUnc: {
              type: 'number',
              description: 'One sigma uncertainty in the delta range rate, in km/sec.',
            },
            deltaRangeUnc: {
              type: 'number',
              description: 'One sigma uncertainty in delta range, in km.',
            },
            descriptor: {
              type: 'string',
              description: 'Optional source-provided and searchable metadata or descriptor of the data.',
            },
            fdoa: {
              type: 'number',
              description:
                'Frequency difference of arrival of the center frequency signal, in Hz.  FDOA calculation convention is (sensor2 - sensor1).',
            },
            fdoaUnc: {
              type: 'number',
              description:
                'One sigma uncertainty in frequency difference of arrival of the center frequency signal, in Hz.',
            },
            frequency: {
              type: 'number',
              description: 'Center frequency of the collect in Hz.',
            },
            idOnOrbit: {
              type: 'string',
              description: 'Unique identifier of the target on-orbit object, if correlated.',
            },
            idSensor1: {
              type: 'string',
              description: 'Sensor ID of the primary/1st sensor used for this measurement.',
            },
            idSensor2: {
              type: 'string',
              description: 'Sensor ID of the secondary/2nd sensor used for this measurement.',
            },
            origin: {
              type: 'string',
              description:
                'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
            },
            origNetwork: {
              type: 'string',
              description:
                'The originating source network on which this record was created, auto-populated by the system.',
            },
            origObjectId: {
              type: 'string',
              description:
                'Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.',
            },
            origSensorId1: {
              type: 'string',
              description:
                'Optional identifier provided by DOA source to indicate the primary/1st sensor identifier used for this measurement. This may be an internal identifier and not necessarily a valid sensor ID.',
            },
            origSensorId2: {
              type: 'string',
              description:
                'Optional identifier provided by DOA source to indicate the secondary/2nd sensor identifier used for this this observation. This may be an internal identifier and not necessarily a valid sensor ID.',
            },
            rawFileURI: {
              type: 'string',
              description:
                'Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.',
            },
            satNo: {
              type: 'integer',
              description: 'Catalog number of the target on-orbit object.',
            },
            sen2alt: {
              type: 'number',
              description:
                'Sensor 2 altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.',
            },
            sen2lat: {
              type: 'number',
              description:
                'Sensor 2 WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info.',
            },
            sen2lon: {
              type: 'number',
              description:
                'Sensor 2 WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info.',
            },
            senalt: {
              type: 'number',
              description:
                'Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.',
            },
            senlat: {
              type: 'number',
              description:
                'Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).',
            },
            senlon: {
              type: 'number',
              description:
                'Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).',
            },
            sensor1Delay: {
              type: 'number',
              description: 'The signal arrival delay relative to sensor 1 in seconds.',
            },
            sensor2Delay: {
              type: 'number',
              description: 'The signal arrival delay relative to sensor 2 in seconds.',
            },
            snr: {
              type: 'number',
              description: 'Signal to noise ratio, in dB.',
            },
            sourceDL: {
              type: 'string',
              description:
                'The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.',
            },
            tags: {
              type: 'array',
              description:
                'Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.',
              items: {
                type: 'string',
              },
            },
            taskId: {
              type: 'string',
              description:
                'Optional identifier to indicate the specific tasking which produced this observation.',
            },
            tdoa: {
              type: 'number',
              description:
                'Time difference of arrival of the center frequency signal, in seconds.  TDOA calculation convention is (sensor2 - sensor1).',
            },
            tdoaUnc: {
              type: 'number',
              description:
                'One sigma uncertainty in time difference of arrival of the center frequency signal, in seconds.',
            },
            transactionId: {
              type: 'string',
              description:
                'Optional identifier to track a commercial or marketplace transaction executed to produce this data.',
            },
            uct: {
              type: 'boolean',
              description:
                "Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
            },
          },
          required: ['classificationMarking', 'dataMode', 'obTime', 'source'],
        },
      },
    },
    required: ['body'],
  },
  annotations: {},
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.diffOfArrival.unvalidatedPublish(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
