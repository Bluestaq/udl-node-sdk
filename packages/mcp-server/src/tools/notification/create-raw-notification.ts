// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'notification',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/notification/createRaw',
};

export const tool: Tool = {
  name: 'create_raw_notification',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to push a Notification/Alert message into the UDL. This operation uses query parameters to pass UDL-required fields such as classificationMarking, msgType, etc and takes a raw string payload which can be XML, JSON, or plain text. The preferred mechanism for posting notifications is to use the standard POST which takes the proper UDL JSON Notification schema as this service may convert the message in an undesirable manner. The service will wrap the passed payload with the appropriate UDL JSON schema, using escape characters as necessary for the payload to produce a valid JSON document. XML payloads (not recommended) are automatically converted to JSON. Messages pushed through this service may be pulled via Secure Messaging and historical REST services. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {}\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE: Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL: Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED: Synthetic data generated by a model to mimic real-world datasets.\n\nTEST: Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n',
      },
      msgType: {
        type: 'string',
        description: 'Source provided message type.',
      },
      origin: {
        type: 'string',
        description: 'Origin of the data.',
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      body: {
        type: 'string',
      },
      msgId: {
        type: 'string',
        description: 'Optional message identifier...if not provided an id will be automatically created.',
      },
      tags: {
        type: 'array',
        description: 'Optional list of provider/source specific tags for this data.',
        items: {
          type: 'string',
        },
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['classificationMarking', 'dataMode', 'msgType', 'origin', 'source', 'body'],
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.notification.createRaw(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
