// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'laseremitter.staging',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/laseremitterstaging',
};

export const tool: Tool = {
  name: 'list_laseremitter_staging',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    $ref: '#/$defs/staging_list_response'\n  },\n  $defs: {\n    staging_list_response: {\n      type: 'object',\n      description: 'Model representation of a nominal laser emitter.  This entity contains minimal information used to stage laser emitter entities.',\n      properties: {\n        classificationMarking: {\n          type: 'string',\n          description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n        },\n        laserName: {\n          type: 'string',\n          description: 'Unique name of this Laser Emitter.'\n        },\n        source: {\n          type: 'string',\n          description: 'Source of the data.'\n        },\n        id: {\n          type: 'string',\n          description: 'Unique identifier of the record, auto-generated by the system.'\n        },\n        altitude: {\n          type: 'number',\n          description: 'Emitter altitude relative to WGS-84 ellipsoid, in kilometers. Positive values indicate an emitter height above ellipsoid, and negative values indicate an emitter height below ellipsoid.'\n        },\n        createdAt: {\n          type: 'string',\n          description: 'Time the row was created in the database, auto-populated by the system.',\n          format: 'date-time'\n        },\n        createdBy: {\n          type: 'string',\n          description: 'Application user who created the row in the database, auto-populated by the system.'\n        },\n        laserType: {\n          type: 'string',\n          description: 'The type of laser (e.g. CONTINUOUS WAVE, PULSED, etc.).'\n        },\n        lat: {\n          type: 'number',\n          description: 'WGS-84 latitude of the emitter, in degrees. -90 to 90 degrees (negative values south of equator).'\n        },\n        locationCountry: {\n          type: 'string',\n          description: 'The DoD Standard Country Code designator for the country or political entity to which the Laser Emitter equipment geographic coordinates reside. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.'\n        },\n        lon: {\n          type: 'number',\n          description: 'WGS-84 longitude of the emitter, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).'\n        },\n        ownerCountry: {\n          type: 'string',\n          description: 'The DoD Standard Country Code designator for the country or political entity owning the Laser Emitter. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.'\n        }\n      },\n      required: [        'classificationMarking',\n        'laserName',\n        'source'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: [],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { jq_filter, ...body } = args as any;
  const response = await client.laseremitter.staging.list(body).asResponse();
  return asTextContentResult(await maybeFilter(jq_filter, await response.json()));
};

export default { metadata, tool, handler };
