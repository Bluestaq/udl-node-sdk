// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'laseremitter',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/laseremitter',
};

export const tool: Tool = {
  name: 'list_laseremitter',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    $ref: '#/$defs/laseremitter_list_response'\n  },\n  $defs: {\n    laseremitter_list_response: {\n      type: 'object',\n      description: 'Model representation of a laser beam emitter/director which represents a source of directed energy.',\n      properties: {\n        classificationMarking: {\n          type: 'string',\n          description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n        },\n        dataMode: {\n          type: 'string',\n          description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n          enum: [            'REAL',\n            'TEST',\n            'SIMULATED',\n            'EXERCISE'\n          ]\n        },\n        laserName: {\n          type: 'string',\n          description: 'The name of this laser within the laser system or facility.'\n        },\n        laserType: {\n          type: 'string',\n          description: 'The type of laser (e.g. CONTINUOUS WAVE, PULSED, etc.).'\n        },\n        source: {\n          type: 'string',\n          description: 'Source of the data.'\n        },\n        id: {\n          type: 'string',\n          description: 'Unique identifier of the record, auto-generated by the system if not provided on create operations.'\n        },\n        atmosphericTransmission: {\n          type: 'number',\n          description: 'Maximum possible laser-to-space atmospheric transmission (a value between zero and one, usually assumed to be unity for all lasers except for lasers with wavelengths heavily absorbed by the atmosphere).'\n        },\n        beamOutputPower: {\n          type: 'number',\n          description: 'The beam director aperture average (equivalent CW) output power is the total laser average power that is transmitted away from the final exit aperture of the optical system. For a CW laser, this is equivalent to the laser device CW power multiplied by the throughput of the optical system, including the beam director telescope. For a pulsed laser, this is equivalent to the laser device energy per pulse multiplied by the pulse repetition frequency (PRF) multiplied by the throughput of the optical system including the beam director telescope. Measured in Watts.'\n        },\n        beamWaist: {\n          type: 'number',\n          description: 'The beam waist (radius) of this laser at the exit aperture, in centimeters.'\n        },\n        createdAt: {\n          type: 'string',\n          description: 'Time the row was created in the database, auto-populated by the system.',\n          format: 'date-time'\n        },\n        createdBy: {\n          type: 'string',\n          description: 'Application user who created the row in the database, auto-populated by the system.'\n        },\n        divergence: {\n          type: 'number',\n          description: 'Minimum possible divergence half-angle of this laser, referenced from the optical axis to the 1/e point of the beam\\'s far field irradiance profile, measured in microradians.'\n        },\n        idEntity: {\n          type: 'string',\n          description: 'Unique identifier of the parent entity. idEntity is required for PUT.'\n        },\n        isOperational: {\n          type: 'boolean',\n          description: 'A Boolean indicating whether or not this laser emitter is operational. False indicates that the laser specified in this record is no longer available and can be considered defunct. This field is true by default.'\n        },\n        maxDuration: {\n          type: 'number',\n          description: 'The maximum time that the laser would be \"on\" for a given test(s) for laser activity, in seconds.'\n        },\n        maxFocusRange: {\n          type: 'number',\n          description: 'The maximum possible focus range of this laser, measured in kilometers.'\n        },\n        minFocusRange: {\n          type: 'number',\n          description: 'The minimum possible focus range of this laser, measured in kilometers.'\n        },\n        origin: {\n          type: 'string',\n          description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n        },\n        origNetwork: {\n          type: 'string',\n          description: 'The originating source network on which this record was created, auto-populated by the system.'\n        },\n        pulseFluence: {\n          type: 'number',\n          description: 'The amount of energy in each laser pulse exiting from the beam director/telescope, measured in Joules.'\n        },\n        pulsePeakPower: {\n          type: 'number',\n          description: 'The instantaneous single pulse peak power exiting from the laser device, measured in Watts.'\n        },\n        pulseRepFreq: {\n          type: 'number',\n          description: 'The pulse repetition frequency of this laser, measured in kilohertz.'\n        },\n        pulseShape: {\n          type: 'string',\n          description: 'The pulse shape (waveform) of this laser, e.g. \"RECTANGULAR,\" \"SAWTOOTH,\" \"GAUSSIAN,\" etc.'\n        },\n        pulseWidth: {\n          type: 'number',\n          description: 'The laser device pulse duration, measured in seconds.'\n        },\n        sourceDL: {\n          type: 'string',\n          description: 'The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.'\n        },\n        wavelength: {\n          type: 'number',\n          description: 'The center wavelength of this laser, in micrometers.'\n        }\n      },\n      required: [        'classificationMarking',\n        'dataMode',\n        'laserName',\n        'laserType',\n        'source'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: [],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { jq_filter, ...body } = args as any;
  const response = await client.laseremitter.list(body).asResponse();
  return asTextContentResult(await maybeFilter(jq_filter, await response.json()));
};

export default { metadata, tool, handler };
