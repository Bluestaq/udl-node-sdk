// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'seradata_spacecraft_details',
  operation: 'write',
  tags: [],
  httpMethod: 'put',
  httpPath: '/udl/seradataspacecraftdetails/{id}',
};

export const tool: Tool = {
  name: 'update_seradata_spacecraft_details',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to update an SeradataSpacecraftDetails. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
  inputSchema: {
    type: 'object',
    properties: {
      path_id: {
        type: 'string',
      },
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      name: {
        type: 'string',
        description: 'Spacecraft name.',
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      body_id: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      additionalMissionsGroups: {
        type: 'string',
        description: 'Spacecraft additional missions and groups.',
      },
      altitude: {
        type: 'number',
        description: 'Spacecraft latest altitude in km.',
      },
      annualInsuredDepreciationFactor: {
        type: 'number',
        description: 'Annual insured depreciaion factor as a percent fraction.',
      },
      annualInsuredDepreciationFactorEstimated: {
        type: 'boolean',
        description: 'Boolean indicating if the spacecraft annualInsuredDepreciationFactor is estimated.',
      },
      apogee: {
        type: 'number',
        description: 'Apogee in km.',
      },
      busId: {
        type: 'string',
        description: 'Spacecraft Bus ID.',
      },
      capabilityLost: {
        type: 'number',
        description: 'Total capability lost as a percent fraction.',
      },
      capacityLost: {
        type: 'number',
        description: 'Total capacity lost as a percent fraction.',
      },
      catalogNumber: {
        type: 'integer',
        description: 'NORAD satellite number if available.',
      },
      collisionRiskCM: {
        type: 'number',
        description: 'Spacecraft collision risk 1cm sqm latest.',
      },
      collisionRiskMM: {
        type: 'number',
        description: 'Spacecraft collision risk 1mm sqm latest.',
      },
      combinedCostEstimated: {
        type: 'boolean',
        description: 'Boolean indicating if the spacecraft combined new cost is estimated.',
      },
      combinedNewCost: {
        type: 'number',
        description: 'Combined cost of spacecraft at new in M USD.',
      },
      commercialLaunch: {
        type: 'boolean',
        description: 'Boolean indicating if the launch was commercial.',
      },
      constellation: {
        type: 'string',
        description: 'Spacecraft constellation.',
      },
      costEstimated: {
        type: 'boolean',
        description: 'Boolean indicating if the spacecraft cost is estimated.',
      },
      cubesatDispenserType: {
        type: 'string',
        description: 'Cubesat dispenser type.',
      },
      currentAge: {
        type: 'number',
        description: 'Current age in years.',
      },
      dateOfObservation: {
        type: 'string',
        description: 'Spacecraft date of observation.',
        format: 'date-time',
      },
      description: {
        type: 'string',
        description: 'Description associated with the spacecraft.',
      },
      designLife: {
        type: 'integer',
        description: 'Spacecraft design life in days.',
      },
      dryMass: {
        type: 'number',
        description: 'Mass dry in kg.',
      },
      expectedLife: {
        type: 'integer',
        description: 'Spacecraft expected life in days.',
      },
      geoPosition: {
        type: 'number',
        description:
          'WGS84 longitude of the spacecraftâ€™s latest GEO position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).',
      },
      idOnOrbit: {
        type: 'string',
        description: 'UUID of the parent Onorbit record, if available.',
      },
      inclination: {
        type: 'number',
        description: 'Seradata provided inclination in degrees.',
      },
      insuranceLossesTotal: {
        type: 'number',
        description: 'Spacecraft total insurance losses as a fraction.',
      },
      insuranceNotes: {
        type: 'string',
        description: 'Insurance notes for the spacecraft.',
      },
      insurancePremiumAtLaunch: {
        type: 'number',
        description: 'Insurance premium at launch in M USD.',
      },
      insurancePremiumAtLaunchEstimated: {
        type: 'boolean',
        description: 'Boolean indicating if the spacecraft insurancePremiumAtLaunch is estimated.',
      },
      insuredAtLaunch: {
        type: 'boolean',
        description: 'Boolean indicating if the spacecraft was insured at launch.',
      },
      insuredValueAtLaunch: {
        type: 'number',
        description: 'Insured value of spacecraft at launch in M USD.',
      },
      insuredValueLaunchEstimated: {
        type: 'boolean',
        description: 'Boolean indicating if the spacecraft insured value at launch is estimated.',
      },
      intlNumber: {
        type: 'string',
        description: 'Seradata international number.',
      },
      lat: {
        type: 'number',
        description: 'Spacecraft latest latitude in degrees.',
      },
      launchArranger: {
        type: 'string',
        description: 'Spacecraft launch arranger.',
      },
      launchArrangerCountry: {
        type: 'string',
        description: 'Spacecraft launch arranger country.',
      },
      launchCharacteristic: {
        type: 'string',
        description: 'Seradata launch characteristic (e.g. Expendable, Reusable (New), etc).',
      },
      launchCost: {
        type: 'number',
        description: 'Cost of launch in M USD.',
      },
      launchCostEstimated: {
        type: 'boolean',
        description: 'Boolean indicating if the spacecraft launch cost is estimated.',
      },
      launchCountry: {
        type: 'string',
        description: 'Seradata launch country.',
      },
      launchDate: {
        type: 'string',
        description: 'Launch date.',
        format: 'date-time',
      },
      launchDateRemarks: {
        type: 'string',
        description: 'Seradata remarks on launch date.',
      },
      launchId: {
        type: 'string',
        description: 'Seradata launch ID.',
      },
      launchMass: {
        type: 'number',
        description: 'Mass at launch in kg.',
      },
      launchNotes: {
        type: 'string',
        description: 'Insurance notes for the spacecraft.',
      },
      launchNumber: {
        type: 'string',
        description: 'Seradata launch number.',
      },
      launchProvider: {
        type: 'string',
        description: 'Seradata launch provider.',
      },
      launchProviderCountry: {
        type: 'string',
        description: 'Seradata launch provider country.',
      },
      launchProviderFlightNumber: {
        type: 'string',
        description: 'Seradata launch vehicle family.',
      },
      launchSiteId: {
        type: 'string',
        description: 'Seradata Launch Site ID.',
      },
      launchSiteName: {
        type: 'string',
        description: 'Launch Site Name.',
      },
      launchType: {
        type: 'string',
        description: 'Seradata launch type (e.g. Launched, Future, etc).',
      },
      launchVehicleId: {
        type: 'string',
        description: 'Seradata launch ID.',
      },
      leased: {
        type: 'boolean',
        description: 'Boolean indicating if the spacecraft was leased.',
      },
      lifeLost: {
        type: 'number',
        description: 'Spacecraft life lost as a percent fraction.',
      },
      lon: {
        type: 'number',
        description: 'Spacecraft latest longitude in degrees.',
      },
      massCategory: {
        type: 'string',
        description:
          'Mass category (e.g.  2500 - 3500kg  - Large Satellite, 10 - 100 kg - Microsatellite, etc).',
      },
      nameAtLaunch: {
        type: 'string',
        description: 'Spacecraft name at launch.',
      },
      newCost: {
        type: 'number',
        description: 'Cost of spacecraft at new in M USD.',
      },
      notes: {
        type: 'string',
        description: 'Notes on the spacecraft.',
      },
      numHumans: {
        type: 'integer',
        description: 'Number of humans carried on spacecraft.',
      },
      operator: {
        type: 'string',
        description: 'Spacecraft operator name.',
      },
      operatorCountry: {
        type: 'string',
        description: 'Spacecraft operator country.',
      },
      orbitCategory: {
        type: 'string',
        description: 'Spacecraft orbit category (e.g GEO, LEO, etc).',
      },
      orbitSubCategory: {
        type: 'string',
        description: 'Spacecraft sub orbit category (e.g LEO - Sun-synchronous, Geostationary, etc).',
      },
      orderDate: {
        type: 'string',
        description: 'Spacecraft order date.',
        format: 'date-time',
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
      owner: {
        type: 'string',
        description: 'Spacecraft owner name.',
      },
      ownerCountry: {
        type: 'string',
        description: 'Spacecraft owner country.',
      },
      perigee: {
        type: 'number',
        description: 'Perigee in km.',
      },
      period: {
        type: 'number',
        description: 'Spacecraft period in minutes.',
      },
      primaryMissionGroup: {
        type: 'string',
        description: 'Spacecraft primary mission and group.',
      },
      primeManufacturerOrgId: {
        type: 'string',
        description: 'UUID of the prime manufacturer organization, if available.',
      },
      programName: {
        type: 'string',
        description: 'Spacecraft program name.',
      },
      quantity: {
        type: 'integer',
        description: 'Spacecraft quantity.',
      },
      reusableFlights: {
        type: 'string',
        description: 'Spacecraft reusable flights.',
      },
      reusedHullName: {
        type: 'string',
        description: 'Spacecraft reused hull name.',
      },
      sector: {
        type: 'string',
        description: 'Seradata sector (e.g. Commercial, Military, Civil/Other).',
      },
      serialNumber: {
        type: 'string',
        description: 'Spacecraft serial number.',
      },
      stabilizer: {
        type: 'string',
        description: 'Spacecraft stabilizer (e.g. 3-Axis, Gravity Gradiant, etc).',
      },
      status: {
        type: 'string',
        description: 'Spacecraft status (e.g. Inactive - Retired, Inactive - Re-entered, Active, etc).',
      },
      totalClaims: {
        type: 'integer',
        description: 'Number of insurance claims for this spacecraft.',
      },
      totalFatalities: {
        type: 'integer',
        description: 'Number of fatalities related to this spacecraft.',
      },
      totalInjuries: {
        type: 'integer',
        description: 'Number of injuries related to this spacecraft.',
      },
      totalPayloadPower: {
        type: 'number',
        description: 'Mass dry in kg.',
      },
      youtubeLaunchLink: {
        type: 'string',
        description: 'Youtube link of launch.',
      },
    },
    required: ['path_id', 'classificationMarking', 'dataMode', 'name', 'source'],
  },
  annotations: {
    idempotentHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { id, ...body } = args as any;
  const response = await client.seradataSpacecraftDetails.update(id, body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
