// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'udl-node-sdk';

export const metadata: Metadata = {
  resource: 'dropzone',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/dropzone/{id}',
};

export const tool: Tool = {
  name: 'retrieve_dropzone',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to get a single dropzone record by its unique ID passed as a path parameter.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  description: 'Properties and characteristics of a Drop Zone, including name, location, shape, type code, survey date, and remarks.',\n  properties: {\n    classificationMarking: {\n      type: 'string',\n      description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n    },\n    dataMode: {\n      type: 'string',\n      description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n      enum: [        'REAL',\n        'TEST',\n        'SIMULATED',\n        'EXERCISE'\n      ]\n    },\n    lat: {\n      type: 'number',\n      description: 'WGS84 latitude of the drop zone, in degrees. -90 to 90 degrees (negative values south of equator).'\n    },\n    lon: {\n      type: 'number',\n      description: 'WGS84 longitude of the drop zone, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).'\n    },\n    name: {\n      type: 'string',\n      description: 'The name of the drop zone.'\n    },\n    source: {\n      type: 'string',\n      description: 'Source of the data.'\n    },\n    id: {\n      type: 'string',\n      description: 'Unique identifier of the record, auto-generated by the system.'\n    },\n    altCountryCode: {\n      type: 'string',\n      description: 'Specifies an alternate country code for the drop zone if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.'\n    },\n    altCountryName: {\n      type: 'string',\n      description: 'Specifies the country name associated with the source provided alternate country code.'\n    },\n    approvalDate: {\n      type: 'string',\n      description: 'The date the drop zone survey was approved, in ISO 8601 UTC format with millisecond precision.',\n      format: 'date-time'\n    },\n    code: {\n      type: 'string',\n      description: 'The type code for the drop zone.'\n    },\n    countryCode: {\n      type: 'string',\n      description: 'The Country Code where the drop zone is located. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.'\n    },\n    countryName: {\n      type: 'string',\n      description: 'The country name of the location for the drop zone.'\n    },\n    createdAt: {\n      type: 'string',\n      description: 'Time the row was created in the database, auto-populated by the system.',\n      format: 'date-time'\n    },\n    createdBy: {\n      type: 'string',\n      description: 'Application user who created the row in the database, auto-populated by the system.'\n    },\n    expirationDate: {\n      type: 'string',\n      description: 'The survey expiration date of the drop zone, in ISO 8601 UTC format with millisecond precision.',\n      format: 'date-time'\n    },\n    extIdentifier: {\n      type: 'string',\n      description: 'The external identifier assigned to the drop zone.'\n    },\n    idSite: {\n      type: 'string',\n      description: 'The ID of the site associated with the drop zone.'\n    },\n    lastUpdate: {\n      type: 'string',\n      description: 'Last time the drop zone information was updated, in ISO 8601 UTC format with millisecond precision.',\n      format: 'date-time'\n    },\n    length: {\n      type: 'number',\n      description: 'The length dimension of the drop zone in meters for non-circular drop zones.'\n    },\n    majcom: {\n      type: 'string',\n      description: 'The Major Command (MAJCOM) responsible for management of the drop zone.'\n    },\n    nearestLoc: {\n      type: 'string',\n      description: 'The nearest reference location to the drop zone.'\n    },\n    operationalApprovalDate: {\n      type: 'string',\n      description: 'The approval date for the drop zone by an air drop authority certifying operational usage, in ISO 8601 UTC format with millisecond precision.',\n      format: 'date-time'\n    },\n    origin: {\n      type: 'string',\n      description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n    },\n    origNetwork: {\n      type: 'string',\n      description: 'The originating source network on which this record was created, auto-populated by the system.'\n    },\n    pointName: {\n      type: 'string',\n      description: 'The name assigned to the drop zone point.'\n    },\n    radius: {\n      type: 'number',\n      description: 'The radius dimension of the drop zone in meters for circular drop zones.'\n    },\n    recertDate: {\n      type: 'string',\n      description: 'The date the drop zone was recertified, in ISO 8601 UTC format with millisecond precision.',\n      format: 'date-time'\n    },\n    remark: {\n      type: 'string',\n      description: 'Remarks concerning the drop zone.'\n    },\n    sourceDL: {\n      type: 'string',\n      description: 'The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.'\n    },\n    stateAbbr: {\n      type: 'string',\n      description: 'The US alphabetical code for the state where the drop zone is located.'\n    },\n    stateName: {\n      type: 'string',\n      description: 'The name of the state where the drop zone is located.'\n    },\n    surveyDate: {\n      type: 'string',\n      description: 'The date the drop zone survey was performed, in ISO 8601 UTC format with millisecond precision.',\n      format: 'date-time'\n    },\n    updatedAt: {\n      type: 'string',\n      description: 'Time the row was last updated in the database, auto-populated by the system.',\n      format: 'date-time'\n    },\n    updatedBy: {\n      type: 'string',\n      description: 'Application user who updated the row in the database, auto-populated by the system.'\n    },\n    width: {\n      type: 'number',\n      description: 'The width dimension of the drop zone in meters for non-circular drop zones.'\n    },\n    zarId: {\n      type: 'string',\n      description: 'The identifier of the Zone Availability Report (ZAR) for the drop zone.'\n    }\n  },\n  required: [    'classificationMarking',\n    'dataMode',\n    'lat',\n    'lon',\n    'name',\n    'source'\n  ]\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      id: {
        type: 'string',
      },
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['id'],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { id, ...body } = args as any;
  return asTextContentResult(await maybeFilter(args, await client.dropzone.retrieve(id, body)));
};

export default { metadata, tool, handler };
