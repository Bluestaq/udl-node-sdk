// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'transponder',
  operation: 'write',
  tags: [],
  httpMethod: 'put',
  httpPath: '/udl/transponder/{id}',
};

export const tool: Tool = {
  name: 'update_transponder',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to update a single Transponder. A specific role is required to perform this service operation. Please contact the UDL team for assistance. A Comm payload may have multiple transponders and a transponder may have many channels.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {}\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      id: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      idComm: {
        type: 'string',
        description: 'ID of the parent Comm object for this transponder.',
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      fec: {
        type: 'integer',
        description:
          'Forward error correction, e.g. 0=Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.',
      },
      format: {
        type: 'string',
        description: 'Format.',
      },
      modulation: {
        type: 'string',
        description: 'Transponder modulation, e.g. Auto, QPSK, 8PSK.',
      },
      name: {
        type: 'string',
        description: 'Optional name of the transponder.',
      },
      nid: {
        type: 'string',
        description: 'Optional external network id as provided data source.',
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
      symbolRate: {
        type: 'number',
        description:
          'Symbol rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per time unit using a digitally modulated signal or a line code. Also measured in Hz.',
      },
      system: {
        type: 'string',
        description: 'Transponder system, e.g. DVB-S, DVB-S2.',
      },
      tid: {
        type: 'string',
        description: 'Optional external transponder id as provided data source.',
      },
      ttf: {
        type: 'number',
        description:
          'Transponder Translation Factor. This is the frequency difference between the uplink received by a satellite, and the downlink transmitted back. It varies satellite to satellite dependent on the mission.',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { id, ...body } = args as any;
  const response = await client.transponder.update(id, body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
