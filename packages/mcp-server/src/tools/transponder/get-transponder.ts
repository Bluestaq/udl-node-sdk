// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'transponder',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/transponder/{id}',
};

export const tool: Tool = {
  name: 'get_transponder',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to get a single Transponder record by its unique ID passed as a path parameter. A Comm payload may have multiple transponders and a transponder may have many channels.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  description: 'A transponder receives and transmits radio signals at a prescribed frequency range. A communications satellite\\'s transponder is the series of interconnected units that form a communications channel between the receiving and the transmitting antennas. It is mainly used in satellite communication to transfer the received signals.',\n  properties: {\n    classificationMarking: {\n      type: 'string',\n      description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n    },\n    dataMode: {\n      type: 'string',\n      description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n      enum: [        'REAL',\n        'TEST',\n        'SIMULATED',\n        'EXERCISE'\n      ]\n    },\n    idComm: {\n      type: 'string',\n      description: 'ID of the parent Comm object for this transponder.'\n    },\n    source: {\n      type: 'string',\n      description: 'Source of the data.'\n    },\n    id: {\n      type: 'string',\n      description: 'Unique identifier of the record, auto-generated by the system.'\n    },\n    channels: {\n      type: 'array',\n      description: 'Collection of Channels for this Transponder.',\n      items: {\n        $ref: '#/$defs/channel_full'\n      }\n    },\n    createdAt: {\n      type: 'string',\n      description: 'Time the row was created in the database, auto-populated by the system.',\n      format: 'date-time'\n    },\n    createdBy: {\n      type: 'string',\n      description: 'Application user who created the row in the database, auto-populated by the system.'\n    },\n    fec: {\n      type: 'integer',\n      description: 'Forward error correction, e.g. 0=Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.'\n    },\n    format: {\n      type: 'string',\n      description: 'Format.'\n    },\n    modulation: {\n      type: 'string',\n      description: 'Transponder modulation, e.g. Auto, QPSK, 8PSK.'\n    },\n    name: {\n      type: 'string',\n      description: 'Optional name of the transponder.'\n    },\n    nid: {\n      type: 'string',\n      description: 'Optional external network id as provided data source.'\n    },\n    origin: {\n      type: 'string',\n      description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n    },\n    origNetwork: {\n      type: 'string',\n      description: 'The originating source network on which this record was created, auto-populated by the system.'\n    },\n    symbolRate: {\n      type: 'number',\n      description: 'Symbol rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per time unit using a digitally modulated signal or a line code. Also measured in Hz.'\n    },\n    system: {\n      type: 'string',\n      description: 'Transponder system, e.g. DVB-S, DVB-S2.'\n    },\n    tid: {\n      type: 'string',\n      description: 'Optional external transponder id as provided data source.'\n    },\n    ttf: {\n      type: 'number',\n      description: 'Transponder Translation Factor. This is the frequency difference between the uplink received by a satellite, and the downlink transmitted back. It varies satellite to satellite dependent on the mission.'\n    },\n    updatedAt: {\n      type: 'string',\n      description: 'Time the row was last updated in the database, auto-populated by the system.',\n      format: 'date-time'\n    },\n    updatedBy: {\n      type: 'string',\n      description: 'Application user who updated the row in the database, auto-populated by the system.'\n    }\n  },\n  required: [    'classificationMarking',\n    'dataMode',\n    'idComm',\n    'source'\n  ],\n  $defs: {\n    channel_full: {\n      type: 'object',\n      description: 'Channel information on a particular transponder.',\n      properties: {\n        classificationMarking: {\n          type: 'string',\n          description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n        },\n        dataMode: {\n          type: 'string',\n          description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n          enum: [            'REAL',\n            'TEST',\n            'SIMULATED',\n            'EXERCISE'\n          ]\n        },\n        idTransponder: {\n          type: 'string',\n          description: 'ID of the parent transponder object for this Channel.'\n        },\n        name: {\n          type: 'string',\n          description: 'Channel name.'\n        },\n        source: {\n          type: 'string',\n          description: 'Source of the data.'\n        },\n        id: {\n          type: 'string',\n          description: 'Unique identifier of the record, auto-generated by the system.'\n        },\n        apid: {\n          type: 'string',\n          description: 'Channel aPid.'\n        },\n        beamName: {\n          type: 'string',\n          description: 'The antenna beam ID of the particular beam for this channel.  beamName is not unique across payloads.'\n        },\n        compression: {\n          type: 'string',\n          description: 'Channel compression.'\n        },\n        createdAt: {\n          type: 'string',\n          description: 'Time the row was created in the database, auto-populated by the system.',\n          format: 'date-time'\n        },\n        createdBy: {\n          type: 'string',\n          description: 'Application user who created the row in the database, auto-populated by the system.'\n        },\n        encryption: {\n          type: 'string',\n          description: 'Channel encryption.'\n        },\n        idBeam: {\n          type: 'string',\n          description: 'Identifier of the particular beam for this channel.'\n        },\n        idRFBand: {\n          type: 'string',\n          description: 'ID of the RF Band object for this channel.'\n        },\n        origin: {\n          type: 'string',\n          description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n        },\n        origNetwork: {\n          type: 'string',\n          description: 'The originating source network on which this record was created, auto-populated by the system.'\n        },\n        owner: {\n          type: 'string',\n          description: 'Owner.'\n        },\n        pkg: {\n          type: 'string',\n          description: 'Pkg.'\n        },\n        res: {\n          type: 'string',\n          description: 'Res.'\n        },\n        sid: {\n          type: 'string',\n          description: 'SID.'\n        },\n        type: {\n          type: 'string',\n          description: 'Channel type.'\n        },\n        updatedAt: {\n          type: 'string',\n          description: 'Time the row was last updated in the database, auto-populated by the system.',\n          format: 'date-time'\n        },\n        updatedBy: {\n          type: 'string',\n          description: 'Application user who updated the row in the database, auto-populated by the system.'\n        },\n        vpid: {\n          type: 'string',\n          description: 'Channel vPid.'\n        }\n      },\n      required: [        'classificationMarking',\n        'dataMode',\n        'idTransponder',\n        'name',\n        'source'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      id: {
        type: 'string',
      },
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { id, ...body } = args as any;
  return asTextContentResult(await maybeFilter(args, await client.transponder.get(id, body)));
};

export default { metadata, tool, handler };
