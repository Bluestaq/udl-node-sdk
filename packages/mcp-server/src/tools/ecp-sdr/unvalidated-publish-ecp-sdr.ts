// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'ecp_sdr',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/filedrop/udl-ecpsdr',
  operationId: 'filedrop_udl_ecpsdr_post_id',
};

export const tool: Tool = {
  name: 'unvalidated_publish_ecp_sdr',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to take multiple ECPSDR as a POST body and ingest into the database. This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n",
  inputSchema: {
    type: 'object',
    properties: {
      body: {
        type: 'array',
        items: {
          type: 'object',
          description:
            'Supports Sensor Data Records (SDR) from space-borne Energetic Charged Particle (ECP) Sensors.  SDR contains sensor status telemetry and raw dosimeter measurements of the space environment.',
          properties: {
            classificationMarking: {
              type: 'string',
              description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
            },
            dataMode: {
              type: 'string',
              description:
                'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
              enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
            },
            msgTime: {
              type: 'string',
              description:
                'Time stamp of time packet receipt on ground, in ISO 8601 UTC format with millisecond precision.',
              format: 'date-time',
            },
            source: {
              type: 'string',
              description: 'Source of the data.',
            },
            type: {
              type: 'string',
              description: 'The type of data associated with this record (STANDARD, TRANSIENT).',
            },
            id: {
              type: 'string',
              description: 'Unique identifier of the record, auto-generated by the system.',
            },
            asl5VCurrMon: {
              type: 'integer',
              description:
                'Internal 5V current monitor for analog supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.',
            },
            cdsPlateVMon: {
              type: 'integer',
              description: 'CDS Charge Plate voltage monitor.  See vRef for conversion factor to Volts.',
            },
            cdsRefVMon: {
              type: 'integer',
              description: 'CDS reference voltage monitor.  See vRef for conversion factor to Volts.',
            },
            cdsThreshold: {
              type: 'integer',
              description:
                'CDS Threshold setting for ESD detection threshold.  The CDS Threshold is the adjustable sensitivity of recording/digitizing an ESD as a transient packet.',
            },
            cdsThrottle: {
              type: 'integer',
              description: 'CDS throttle number of seconds between CDS transient capture readouts.',
            },
            checksum: {
              type: 'integer',
              description: 'Two byte CRC-16-CCITT checksum (ordered as first byte, second byte).',
            },
            createdAt: {
              type: 'string',
              description: 'Time the row was created in the database, auto-populated by the system.',
              format: 'date-time',
            },
            createdBy: {
              type: 'string',
              description:
                'Application user who created the row in the database, auto-populated by the system.',
            },
            dosBias: {
              type: 'integer',
              description:
                'Unitless dosimeter detector bias for MedLET and HiLET.  MedLET (Linear Energy Transfer) and HiLET subsensors detect particles above LET thresholds, 300keV and 1MeV, respectively.',
            },
            dsl5VCurrMon: {
              type: 'integer',
              description:
                'Internal 5V current monitor for digital supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.',
            },
            esdTrigCountH: {
              type: 'integer',
              description: 'Number of ESD triggers, high byte of 2-byte counter.',
            },
            esdTrigCountL: {
              type: 'integer',
              description: 'Number of ESD triggers, low byte of 2-byte counter.',
            },
            hiLetL: {
              type: 'integer',
              description: 'HiLET dosimeter low range output.  Low byte of scaler (HiLET) dosimeter output.',
            },
            hiLetM: {
              type: 'integer',
              description:
                'Unitless HiLET dosimeter medium range output.  Medium byte of (HiLET) dosimeter output.',
            },
            idOnOrbit: {
              type: 'string',
              description: 'Unique identifier of the on-orbit satellite hosting the sensor.',
            },
            idSensor: {
              type: 'string',
              description: 'Unique identifier of the reporting sensor.',
            },
            lowLetL: {
              type: 'integer',
              description: 'LowLET dosimeter low range output.  Low byte of (LowLET) dosimeter output.',
            },
            lowLetM: {
              type: 'integer',
              description: 'LowLET dosimeter medium range output.  Medium byte of (LowLET) dosimeter output.',
            },
            medLet1L: {
              type: 'integer',
              description:
                'MedLET1 dosimeter low range output.   Low byte of the 1st (MedLET) dosimeter output.',
            },
            medLet1M: {
              type: 'integer',
              description:
                'MedLET1 dosimeter medium range output.  Medium byte of the 1st (MedLET) dosimeter output.',
            },
            medLet2L: {
              type: 'integer',
              description:
                'MedLET2 dosimeter low range output.  Low byte of the 2nd (MedLET) dosimeter output.',
            },
            medLet2M: {
              type: 'integer',
              description:
                'MedLET2 dosimeter medium range output.  Medium byte of the 2nd (MedLET) dosimeter output.',
            },
            medLet3L: {
              type: 'integer',
              description:
                'MedLET3 dosimeter low range output.  Low byte of the 3rd (MedLET) dosimeter output.',
            },
            medLet3M: {
              type: 'integer',
              description:
                'MedLET3 dosimeter medium range output.  Medium byte of the 3rd (MedLET) dosimeter output.',
            },
            medLet4L: {
              type: 'integer',
              description:
                'MedLET4 dosimeter low range output.  Low byte of the 4th (MedLET) dosimeter output.',
            },
            medLet4M: {
              type: 'integer',
              description:
                'MedLET4 dosimeter medium range output.  Medium byte of the 4th (MedLET) dosimeter output.',
            },
            mpTemp: {
              type: 'integer',
              description: 'Unitless sensor mounting plate temperature.',
            },
            obTime: {
              type: 'string',
              description: 'Time of the observation, in ISO 8601 UTC format with millisecond precision.',
              format: 'date-time',
            },
            origin: {
              type: 'string',
              description:
                'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
            },
            origNetwork: {
              type: 'string',
              description:
                'The originating source network on which this record was created, auto-populated by the system.',
            },
            origObjectId: {
              type: 'string',
              description:
                'Optional identifier provided by the record source to indicate the satellite hosting the sensor.  This may be an internal identifier and not necessarily map to a valid satellite number.',
            },
            origSensorId: {
              type: 'string',
              description:
                'Optional identifier provided by the record source to indicate the sensor identifier which produced this data.  This may be an internal identifier and not necessarily a valid sensor ID.',
            },
            pd1SigLev: {
              type: 'integer',
              description: 'Photodiode 1 signal level.',
            },
            pd2SigLev: {
              type: 'integer',
              description: 'Photodiode 2 signal level.',
            },
            psTempMon: {
              type: 'integer',
              description: 'Power supply temperature monitor.  This is sensor status telemetry.',
            },
            retransmit: {
              type: 'boolean',
              description:
                'Flag indicating whether this record is an original or re-transmitted dataset (TRUE indicates a retransmit from the host).',
            },
            satNo: {
              type: 'integer',
              description: 'Satellite/catalog number of the on-orbit satellite hosting the sensor.',
            },
            senMode: {
              type: 'string',
              description: 'The sensor mode associated with this measurements (NORMAL, TEST).',
            },
            surfDosChargeH: {
              type: 'integer',
              description:
                'Surface dosimeter charge rate high output (converts to pico-amps/bit).   High byte of 2 bytes.',
            },
            surfDosChargeL: {
              type: 'integer',
              description:
                'Surface dosimeter charge rate low output (converts to pico-amps/bit).  Low byte of 2 bytes.',
            },
            surfDosH: {
              type: 'integer',
              description:
                'Surface dosimeter high range output (converts to pico-coulombs/bit).  High byte of 3 bytes.',
            },
            surfDosL: {
              type: 'integer',
              description:
                'Surface dosimeter low range output (converts to pico-coulombs/bit).   Low byte of 3 bytes.',
            },
            surfDosM: {
              type: 'integer',
              description:
                'Surface dosimeter medium range output (converts to pico-coulombs/bit).  Middle byte of 3 bytes.',
            },
            surfDosStat: {
              type: 'integer',
              description: 'Surface dosimeter status byte.',
            },
            transientData: {
              type: 'array',
              description: 'Array of 144 digitized samples of ESD waveform for transient packets.',
              items: {
                type: 'integer',
              },
            },
            vRef: {
              type: 'integer',
              description:
                'Reference voltage (volts/bit).  Conversion factor used to convert analog V monitor data from bytes to volts.',
            },
          },
          required: ['classificationMarking', 'dataMode', 'msgTime', 'source', 'type'],
        },
      },
    },
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.ecpSdr.unvalidatedPublish(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
