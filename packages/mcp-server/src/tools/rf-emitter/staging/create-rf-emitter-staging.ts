// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'rf_emitter.staging',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/rfemitterstaging',
};

export const tool: Tool = {
  name: 'create_rf_emitter_staging',
  description:
    'Service operation to take a single RFEmitterStaging record as a POST body and ingest into the staging database. This API allows users to create, manage, and review RFEmitter records in a staging environment before their incorporation into the production UDL. It supports workflows involving validation, review, and approval of emitter data to ensure consistency, compliance, and data quality. A specific role is required to perform this service operation. Please contact the UDL team for assistance.',
  inputSchema: {
    type: 'object',
    properties: {
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      name: {
        type: 'string',
        description: 'Unique name of this RF Emitter.',
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      id: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      altitude: {
        type: 'number',
        description:
          'Emitter altitude relative to WGS-84 ellipsoid, in kilometers. Positive values indicate an emitter height above ellipsoid, and negative values indicate an emitter height below ellipsoid.',
      },
      extSysId: {
        type: 'string',
        description: 'The originating system ID for the RF Emitter.',
      },
      lat: {
        type: 'number',
        description:
          'WGS-84 latitude of the emitter, in degrees. -90 to 90 degrees (negative values south of equator).',
      },
      locationCountry: {
        type: 'string',
        description:
          'The DoD Standard Country Code designator for the country or political entity to which the RF Emitter equipment geographic coordinates reside. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.',
      },
      lon: {
        type: 'number',
        description:
          'WGS-84 longitude of the emitter, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).',
      },
      ownerCountry: {
        type: 'string',
        description:
          'The DoD Standard Country Code designator for the country or political entity owning the RF Emitter. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.',
      },
      subtype: {
        type: 'string',
        description:
          'The RF Emitter subtype, which can distinguish specialized deployments (e.g. BLOCK_0_AVL, BLOCK_0_DS1, BLOCK_0_TEST, BLOCK_1, BLOCK_1_TEST, NONE).',
      },
      type: {
        type: 'string',
        description: 'Type of this RF Emitter.',
      },
    },
    required: ['classificationMarking', 'name', 'source'],
  },
  annotations: {},
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.rfEmitter.staging.create(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
