// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'rf_emitter.details',
  operation: 'write',
  tags: [],
  httpMethod: 'put',
  httpPath: '/udl/rfemitterdetails/{id}',
};

export const tool: Tool = {
  name: 'update_rf_emitter_details',
  description:
    'Service operation to update a single RFEmitterDetails record. A specific role is required to perform this service operation. Please contact the UDL team for assistance.',
  inputSchema: {
    type: 'object',
    properties: {
      path_id: {
        type: 'string',
      },
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      idRFEmitter: {
        type: 'string',
        description: 'Unique identifier of the parent RF Emitter.',
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      body_id: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      alternateFacilityName: {
        type: 'string',
        description: 'Alternate facility name for this RF Emitter.',
      },
      altName: {
        type: 'string',
        description: 'Optional alternate name or alias for this RF Emitter.',
      },
      amplifier: {
        type: 'object',
        description: 'An RF Amplifier associated with an RF Emitter Details.',
        properties: {
          deviceIdentifier: {
            type: 'string',
            description: 'The device identifier of the amplifier.',
          },
          manufacturer: {
            type: 'string',
            description: 'The manufacturer of the amplifier.',
          },
          modelName: {
            type: 'string',
            description: 'The model name of the amplifier.',
          },
          power: {
            type: 'number',
            description: 'The amplifier power level, in watts.',
          },
        },
      },
      antennas: {
        type: 'array',
        description: 'The set of antennas hosted on this EW Emitter system.',
        items: {
          type: 'object',
          description: 'An RF Antenna associated with an RF Emitter Details.',
          properties: {
            antennaDiameter: {
              type: 'number',
              description: 'For parabolic/dish antennas, the diameter of the antenna in meters.',
            },
            antennaSize: {
              type: 'array',
              description:
                'Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.',
              items: {
                type: 'number',
              },
            },
            azElFixed: {
              type: 'boolean',
              description: 'A flag to indicate whether the antenna points at a fixed azimuth/elevation.',
            },
            feeds: {
              type: 'array',
              description: 'The set of antenna feeds for this antenna.',
              items: {
                type: 'object',
                description: 'An RF Antenna Feed associated with an RF Antenna.',
                properties: {
                  freqMax: {
                    type: 'number',
                    description: 'Maximum frequency, in megahertz.',
                  },
                  freqMin: {
                    type: 'number',
                    description: 'Minimum frequency, in megahertz.',
                  },
                  name: {
                    type: 'string',
                    description: 'The feed name.',
                  },
                  polarization: {
                    type: 'string',
                    description:
                      'The antenna feed linear/circular polarization (e.g. HORIZONTAL, VERTICAL, LEFT_HAND_CIRCULAR, RIGHT_HAND_CIRCULAR).',
                  },
                },
              },
            },
            fixedAzimuth: {
              type: 'number',
              description: 'Antenna azimuth, in degrees clockwise from true North, for a fixed antenna.',
            },
            fixedElevation: {
              type: 'number',
              description: 'Antenna elevation, in degrees, for a fixed antenna.',
            },
            maxAzimuths: {
              type: 'array',
              description: 'Array of maximum azimuths, in degrees.',
              items: {
                type: 'number',
              },
            },
            maxElevation: {
              type: 'number',
              description: 'Maximum elevation, in degrees.',
            },
            minAzimuths: {
              type: 'array',
              description: 'Array of minimum azimuths, in degrees.',
              items: {
                type: 'number',
              },
            },
            minElevation: {
              type: 'number',
              description: 'Minimum elevation, in degrees.',
            },
            name: {
              type: 'string',
              description: 'The name of the antenna.',
            },
            receiverChannels: {
              type: 'array',
              description: 'The set of receiver channels for this antenna.',
              items: {
                type: 'object',
                description: 'An RF Antenna Receiver Channel associated with an RF Antenna.',
                properties: {
                  bandwidth: {
                    type: 'number',
                    description:
                      'The receiver bandwidth, in megahertz, must satisfy the constraint: minBandwidth ≤ bandwidth ≤ maxBandwidth.',
                  },
                  channelNum: {
                    type: 'string',
                    description: 'The receive channel number.',
                  },
                  deviceIdentifier: {
                    type: 'string',
                    description: 'The receive channel device identifier.',
                  },
                  freqMax: {
                    type: 'number',
                    description: 'Maximum frequency, in megahertz.',
                  },
                  freqMin: {
                    type: 'number',
                    description: 'Minimum frequency, in megahertz.',
                  },
                  maxBandwidth: {
                    type: 'number',
                    description:
                      'The maximum receiver bandwidth, in megahertz, must satisfy the constraint: minBandwidth ≤ bandwidth ≤ maxBandwidth.',
                  },
                  minBandwidth: {
                    type: 'number',
                    description:
                      'The receiver bandwidth, in megahertz, must satisfy the constraint: minBandwidth ≤ bandwidth ≤ maxBandwidth.',
                  },
                  sensitivity: {
                    type: 'number',
                    description: 'Receiver sensitivity, in decibel-milliwatts.',
                  },
                },
              },
            },
            transmitChannels: {
              type: 'array',
              description: 'The set of transmit channels for this antenna.',
              items: {
                type: 'object',
                description: 'An RF Antenna Transmit Channel associated with an RF Antenna.',
                properties: {
                  power: {
                    type: 'number',
                    description: 'Transmit power, in watts.',
                  },
                  bandwidth: {
                    type: 'number',
                    description:
                      'The transmitter bandwidth, in megahertz, must satisfy the constraint: minBandwidth ≤ bandwidth ≤ maxBandwidth.',
                  },
                  channelNum: {
                    type: 'string',
                    description: 'The transmit channel number.',
                  },
                  deviceIdentifier: {
                    type: 'string',
                    description: 'The transmit channel device identifier.',
                  },
                  freq: {
                    type: 'number',
                    description:
                      'The transmitter frequency, in megahertz, must satisfy the constraint: freqMin <= freq <= freqMax.',
                  },
                  freqMax: {
                    type: 'number',
                    description:
                      'The maximum transmitter frequency, in megahertz, must satisfy the constraint: freqMin ≤ freq ≤ freqMax.',
                  },
                  freqMin: {
                    type: 'number',
                    description:
                      'The minimum transmitter frequency, in megahertz, must satisfy the constraint: freqMin ≤ freq ≤ freqMax.',
                  },
                  hardwareSampleRate: {
                    type: 'integer',
                    description: 'The hardware sample rate, in bits per second for this transmit channel.',
                  },
                  maxBandwidth: {
                    type: 'number',
                    description:
                      'The maximum transmitter bandwidth, in megahertz, must satisfy the constraint: minBandwidth ≤ bandwidth ≤ maxBandwidth.',
                  },
                  maxGain: {
                    type: 'number',
                    description: 'Maximum gain, in decibels.',
                  },
                  minBandwidth: {
                    type: 'number',
                    description:
                      'The minimum transmitter bandwidth, in megahertz, must satisfy the constraint: minBandwidth ≤ bandwidth ≤ maxBandwidth.',
                  },
                  minGain: {
                    type: 'number',
                    description: 'Minimum gain, in decibels.',
                  },
                  sampleRates: {
                    type: 'array',
                    description:
                      'The set of sample rates supported by this transmit channel, in bits per second.',
                    items: {
                      type: 'number',
                    },
                  },
                },
                required: ['power'],
              },
            },
          },
        },
      },
      barrageNoiseBandwidth: {
        type: 'number',
        description: 'Barrage noise bandwidth, in megahertz.',
      },
      bitRunTime: {
        type: 'number',
        description: 'The length of time, in seconds, for the RF Emitter built-in test to run to completion.',
      },
      description: {
        type: 'string',
        description: 'Detailed description of the RF Emitter.',
      },
      designator: {
        type: 'string',
        description: 'Designator of this RF Emitter.',
      },
      dopplerNoise: {
        type: 'number',
        description: 'Doppler noise value, in megahertz.',
      },
      drfmInstantaneousBandwidth: {
        type: 'number',
        description: 'Digital Form Radio Memory instantaneous bandwidth in megahertz.',
      },
      family: {
        type: 'string',
        description: 'Family of this RF Emitter type.',
      },
      fixedAttenuation: {
        type: 'number',
        description:
          'A fixed attenuation value to be set on the SRF Emitter HPA when commanding an Electronic Attack/Techniques Tactics and Procedures task, in decibels.',
      },
      idManufacturerOrg: {
        type: 'string',
        description: 'Unique identifier of the organization which manufactured this RF Emitter.',
      },
      idProductionFacilityLocation: {
        type: 'string',
        description: 'Unique identifier of the location of the production facility for this RF Emitter.',
      },
      loanedToCocom: {
        type: 'string',
        description:
          'COCOM that has temporary responsibility for scheduling and management of the RF Emitter (e.g. SPACEFOR-CENT, SPACEFOR-EURAF, SPACEFOR-INDOPAC, SPACEFOR-KOR, SPACEFOR-STRATNORTH, SPACESOC, NONE).',
      },
      notes: {
        type: 'string',
        description: 'Notes on the RF Emitter.',
      },
      numBits: {
        type: 'integer',
        description: 'Number of bits.',
      },
      numChannels: {
        type: 'integer',
        description: 'Number of channels.',
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
      powerOffsets: {
        type: 'array',
        description:
          'A set of system/frequency band adjustments to the power offset commanded in an EA/TTP task.',
        items: {
          type: 'object',
          description: 'An RF Emitter Power Offset associated with an RF Emitter Details.',
          properties: {
            frequencyBand: {
              type: 'string',
              description: 'The RF frequency band (e.g. HF, VHF, P, UHF, L, S, C, X, KU, K, KA, V, W, MM).',
            },
            powerOffset: {
              type: 'number',
              description: 'Power offset, in decibels.',
            },
          },
        },
      },
      prepTime: {
        type: 'number',
        description:
          'The length of time, in seconds, for the RF Emitter to prepare for a task, including sufficient time to slew the antenna and configure the equipment.',
      },
      primaryCocom: {
        type: 'string',
        description:
          'Primary COCOM that is responsible for scheduling and management of the RF Emitter (e.g. SPACEFOR-CENT, SPACEFOR-EURAF, SPACEFOR-INDOPAC, SPACEFOR-KOR, SPACEFOR-STRATNORTH, SPACESOC, NONE).',
      },
      productionFacilityName: {
        type: 'string',
        description: 'Name of the production facility for this RF Emitter.',
      },
      receiverType: {
        type: 'string',
        description: 'Type or name of receiver.',
      },
      secondaryNotes: {
        type: 'string',
        description: 'Secondary notes on the RF Emitter.',
      },
      services: {
        type: 'array',
        description: 'The set of software services running on this EW Emitter system.',
        items: {
          type: 'object',
          description: 'An RF Emitter SW Service associated with an RF Emitter Details.',
          properties: {
            name: {
              type: 'string',
              description: 'The name for this software service.',
            },
            version: {
              type: 'string',
              description: 'The version for this software service.',
            },
          },
        },
      },
      systemSensitivityEnd: {
        type: 'number',
        description:
          'Receiver sensitivity is the lowest power level at which the receiver can detect an RF signal and demodulate data. Sensitivity is purely a receiver specification and is independent of the transmitter. End sensitivity range, in decibel-milliwatts.',
      },
      systemSensitivityStart: {
        type: 'number',
        description:
          'Receiver sensitivity is the lowest power level at which the receiver can detect an RF signal and demodulate data. Sensitivity is purely a receiver specification and is independent of the transmitter. Start sensitivity range, in decibel-milliwatts.',
      },
      ttps: {
        type: 'array',
        description: 'The set of EA/TTP techniques that are supported by this EW Emitter system.',
        items: {
          type: 'object',
          description: 'An RF Emitter TTP associated with an RF Emitter Details.',
          properties: {
            outputSignalName: {
              type: 'string',
              description: 'The name of the output signal.',
            },
            techniqueDefinitions: {
              type: 'array',
              description: 'The set of TTPs affected by this signal.',
              items: {
                type: 'object',
                description: 'An RF Emitter Technique Definition associated with an RF Emitter TTP.',
                properties: {
                  name: {
                    type: 'string',
                    description: 'The EW Emitter system technique name.',
                  },
                  paramDefinitions: {
                    type: 'array',
                    description: 'The set of required/optional parameters for this technique.',
                    items: {
                      type: 'object',
                      description:
                        'An RF Emitter Technique Parameter Definition associated with an RF Emitter Technique Definition.',
                      properties: {
                        defaultValue: {
                          type: 'string',
                          description:
                            'Default parameter value used if not overridden in a SEW task definition.',
                        },
                        max: {
                          type: 'number',
                          description: 'Maximum allowable value for a numeric parameter.',
                        },
                        min: {
                          type: 'number',
                          description: 'Minimum allowable value for a numeric parameter.',
                        },
                        name: {
                          type: 'string',
                          description: 'The name of the parameter.',
                        },
                        optional: {
                          type: 'boolean',
                          description: 'A flag to specify that a parameter is optional.',
                        },
                        type: {
                          type: 'string',
                          description: 'The type of parameter (e.g. STRING, DOUBLE, INT, LIST).',
                        },
                        units: {
                          type: 'string',
                          description: 'Units (degrees, seconds, decibels, etc.) for a numeric parameter.',
                        },
                        validValues: {
                          type: 'array',
                          description: 'Valid values for strictly defined parameters.',
                          items: {
                            type: 'string',
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
      urls: {
        type: 'array',
        description: 'Array of URLs containing additional information on this RF Emitter.',
        items: {
          type: 'string',
        },
      },
    },
    required: ['path_id', 'classificationMarking', 'dataMode', 'idRFEmitter', 'source'],
  },
  annotations: {
    idempotentHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { id, ...body } = args as any;
  const response = await client.rfEmitter.details.update(id, body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
