// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'poi',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/poi/createBulk',
};

export const tool: Tool = {
  name: 'create_bulk_poi',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation intended for initial integration only, to take a list of POIs as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
  inputSchema: {
    type: 'object',
    properties: {
      body: {
        type: 'array',
        items: {
          type: 'object',
          description:
            'A Point of Interest is loosely based on the MITRE CoT (Cursor on Target) schema (https://www.mitre.org/publications/technical-papers/cursorontarget-message-router-users-guide) and provides a simple way to specify a point on the earth for a variety of purposes (tasking, targeting, etc).',
          properties: {
            classificationMarking: {
              type: 'string',
              description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
            },
            dataMode: {
              type: 'string',
              description:
                'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
              enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
            },
            name: {
              type: 'string',
              description: 'Name of the POI target object.',
            },
            poiid: {
              type: 'string',
              description:
                'Identifier of the actual Point of Interest or target object, which should remain the same on subsequent POI records of the same Point of Interest.',
            },
            source: {
              type: 'string',
              description: 'Source of the data.',
            },
            ts: {
              type: 'string',
              description: 'Activity/POI timestamp in ISO8601 UTC format.',
              format: 'date-time',
            },
            id: {
              type: 'string',
              description: 'Unique identifier of the record, auto-generated by the system.',
            },
            activity: {
              type: 'string',
              description:
                'The activity in which the POI subject is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 30/LAND) or as the descriptive enumeration (e.g. TRAINING), which are equivalent.',
            },
            agjson: {
              type: 'string',
              description:
                "Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.",
            },
            alt: {
              type: 'number',
              description: 'Point height above ellipsoid (WGS-84), in meters.',
            },
            andims: {
              type: 'integer',
              description: 'Number of dimensions of the geometry depicted by region.',
            },
            area: {
              type: 'string',
              description:
                'Optional geographical region or polygon (lat/lon pairs) of the area surrounding the Point of Interest as projected on the ground.',
            },
            asrid: {
              type: 'integer',
              description: 'Geographical spatial_ref_sys for region.',
            },
            asset: {
              type: 'string',
              description: 'ID/name of the platform or entity providing the POI data.',
            },
            atext: {
              type: 'string',
              description:
                "Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.",
            },
            atype: {
              type: 'string',
              description: 'Type of region as projected on the ground.',
            },
            az: {
              type: 'number',
              description:
                'Target object pointing azimuth angle, in degrees (for target with sensing or emitting capability).',
            },
            beNumber: {
              type: 'string',
              description: 'The Basic Encyclopedia Number associated with the POI, if applicable.',
            },
            ce: {
              type: 'number',
              description:
                'Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).',
            },
            cntct: {
              type: 'string',
              description:
                'Contact information for assets reporting PPLI (Precise Participant Location and Identification). PPLI is a Link 16 message that is used by units to transmit complete location, identification, and limited status information.',
            },
            conf: {
              type: 'number',
              description:
                'POI confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence.',
            },
            createdAt: {
              type: 'string',
              description: 'Time the row was created in the database.',
              format: 'date-time',
            },
            createdBy: {
              type: 'string',
              description: 'Application user who created the row in the database.',
            },
            desc: {
              type: 'string',
              description: 'Description of the POI target object.',
            },
            el: {
              type: 'number',
              description:
                'Target object pointing elevation angle, in degrees (for target with sensing or emitting capability).',
            },
            elle: {
              type: 'array',
              description:
                'Elliptical area about the lat/lon point, specified as [semi-major axis (m), semi-minor axis (m), orientation (deg) off true North at POI].',
              items: {
                type: 'number',
              },
            },
            env: {
              type: 'string',
              description: 'POI environment type (e.g., LAND, SURFACE, SUBSURFACE, UNKNOWN, etc.).',
            },
            groups: {
              type: 'array',
              description:
                'Optional array of groups used when a POI msg originates from a TAK server. Each group must be no longer than 256 characters. Groups identify a set of users targeted by the cot/poi msg.',
              items: {
                type: 'string',
              },
            },
            how: {
              type: 'string',
              description:
                'How the event point was generated, in CoT object heirarchy notation (optional, CoT).',
            },
            ident: {
              type: 'string',
              description:
                'Estimated identity of the point/object (e.g., FRIEND, HOSTILE, SUSPECT, ASSUMED_FRIEND, UNKNOWN, etc.).',
            },
            idWeatherReport: {
              type: 'array',
              description:
                'Array of one or more unique identifiers of weather records associated with this POI. Each element in array must be 36 characters or less in length.',
              items: {
                type: 'string',
              },
            },
            lat: {
              type: 'number',
              description: 'WGS-84 latitude of the POI, in degrees (+N, -S), -90 to 90.',
            },
            le: {
              type: 'number',
              description: 'Height above lat/lon point, in meters (1-sigma, if representing linear error).',
            },
            lon: {
              type: 'number',
              description: 'WGS-84 longitude of the POI, in degrees (+E, -W), -180 to 180.',
            },
            msnid: {
              type: 'string',
              description: 'Optional mission ID related to the POI.',
            },
            orientation: {
              type: 'number',
              description:
                'The orientation of a vehicle, platform or other entity described by the POI. The orientation is defined as the pointing direction of the front/nose of the object in degrees clockwise from true North at the object point.',
            },
            origin: {
              type: 'string',
              description:
                'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
            },
            origNetwork: {
              type: 'string',
              description:
                'The originating source network on which this record was created, auto-populated by the system.',
            },
            plat: {
              type: 'string',
              description: 'POI/object platform type (e.g., 14/GROUND, COMBAT_VEHICLE, etc.).',
            },
            pps: {
              type: 'string',
              description:
                'The purpose of this Point of Interest record (e.g., BDA, EQPT, EVENT, GEOL, HZRD, PPLI, SHOTBOX, SURVL, TGT, TSK, WTHR).',
            },
            pri: {
              type: 'integer',
              description: 'Priority of the  POI target object.',
            },
            sourceDL: {
              type: 'string',
              description:
                'The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.',
            },
            spec: {
              type: 'string',
              description: 'Specific point/object type (e.g., 82/GROUND, LIGHT_TANK, etc.).',
            },
            srcIds: {
              type: 'array',
              description:
                "Array of UUIDs of the UDL data records that are related to the determination of this Point of Interest. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size.  See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/rfobservation/{uuid}).",
              items: {
                type: 'string',
              },
            },
            srcTyps: {
              type: 'array',
              description:
                "Array of UDL record types (GROUNDIMAGE, RFOBS) that are related to the determination of this Point of Interest. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.",
              items: {
                type: 'string',
              },
            },
            stale: {
              type: 'string',
              description: 'Stale timestamp (optional), in ISO8601 UTC format.',
              format: 'date-time',
            },
            start: {
              type: 'string',
              description: 'Start time of event validity (optional), in ISO8601 UTC format.',
              format: 'date-time',
            },
            tags: {
              type: 'array',
              description:
                'Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.',
              items: {
                type: 'string',
              },
            },
            transactionId: {
              type: 'string',
              description:
                'Optional identifier to track a commercial or marketplace transaction executed to produce this data.',
            },
            trkid: {
              type: 'string',
              description:
                'Optional ID of an associated track related to the POI object, if applicable. This track ID should correlate the Point of Interest to a track from the Track service.',
            },
            type: {
              type: 'string',
              description: 'Event type, in CoT object heirarchy notation (optional, CoT).',
            },
            urls: {
              type: 'array',
              description: 'List of URLs to before/after images of this Point of Interest entity.',
              items: {
                type: 'string',
              },
            },
          },
          required: ['classificationMarking', 'dataMode', 'name', 'poiid', 'source', 'ts'],
        },
      },
    },
    required: ['body'],
  },
  annotations: {},
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.poi.createBulk(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
