// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'effect_requests.history',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/effectrequest/history',
};

export const tool: Tool = {
  name: 'list_effect_requests_history',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to dynamically query historical data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    $ref: '#/$defs/history_list_response'\n  },\n  $defs: {\n    history_list_response: {\n      type: 'object',\n      description: 'A request for various effects on a target.',\n      properties: {\n        classificationMarking: {\n          type: 'string',\n          description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n        },\n        dataMode: {\n          type: 'string',\n          description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n          enum: [            'REAL',\n            'TEST',\n            'SIMULATED',\n            'EXERCISE'\n          ]\n        },\n        effectList: {\n          type: 'array',\n          description: 'List of effects to be achieved on the target (e.g. COVER, DECEIVE, DEGRADE, DENY, DESTROY, DISRUPT, DIVERSION, DIVERT, FIX, INSPECT, INTERCEPT, ISOLATE, MANIPULATE, NEUTRALIZE, SHADOW, SUPPRESS, etc.).  The effects included in this list are connected by implied AND.',\n          items: {\n            type: 'string'\n          }\n        },\n        source: {\n          type: 'string',\n          description: 'Source of the data.'\n        },\n        id: {\n          type: 'string',\n          description: 'Unique identifier of the record, auto-generated by the system.'\n        },\n        context: {\n          type: 'string',\n          description: 'Specific descriptive instantiation of the effect, e.g., playbook to be used.'\n        },\n        createdAt: {\n          type: 'string',\n          description: 'Time the row was created in the database, auto-populated by the system.',\n          format: 'date-time'\n        },\n        createdBy: {\n          type: 'string',\n          description: 'Application user who created the row in the database, auto-populated by the system.'\n        },\n        deadlineType: {\n          type: 'string',\n          description: 'The indicator of deadline of the bid request (e.g. BETWEEN, IMMEDIATE, NOEARLIERTHAN, NOLATERTHAN, etc.):\\nBETWEEN:&nbsp;Produce effect any time between the given start and end times, equal penalty for being early or late\\nIMMEDIATE:&nbsp;Start as soon as possible, earlier is always better\\nNOEARLIERTHAN:&nbsp;Produce effect at this time or later. Large penalty for being earlier, no reward for being later\\nNOLATERTHAN:&nbsp;Produce effect no later than the given startTime. Large penalty for being later, no reward for being even earlier as long as the effect starts by the given time.'\n        },\n        endTime: {\n          type: 'string',\n          description: 'The time the effect should end, in ISO8601 UTC format.',\n          format: 'date-time'\n        },\n        externalRequestId: {\n          type: 'string',\n          description: 'The extenal system identifier of this request. A human readable unique id.'\n        },\n        metricTypes: {\n          type: 'array',\n          description: 'Array of the the metric classes to be evaluated (e.g. Cost, GoalAchievement, OpportunityCost, Risk, Timeliness, Unavailable, etc.).  See the associated \\'metricWeights\\' array for the weighting values, positionally corresponding to these types.  The \\'metricTypes\\' and \\'metricWeights\\' arrays must match in size.',\n          items: {\n            type: 'string'\n          }\n        },\n        metricWeights: {\n          type: 'array',\n          description: 'Array of the weights for the metric in the final evaluation score. Normalized (0 to 1).  See the associated \\'metricTypes\\' array for the metric classes, positionally corresponding to these values.  The \\'metricTypes\\' and \\'metricWeights\\' arrays must match in size.',\n          items: {\n            type: 'number'\n          }\n        },\n        modelClass: {\n          type: 'string',\n          description: 'The type or class of the preference model used to evaluate this offer.'\n        },\n        origin: {\n          type: 'string',\n          description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n        },\n        origNetwork: {\n          type: 'string',\n          description: 'The originating source network on which this record was created, auto-populated by the system.'\n        },\n        priority: {\n          type: 'string',\n          description: 'The priority (LOW, MEDIUM, HIGH) of this request.'\n        },\n        startTime: {\n          type: 'string',\n          description: 'The time the effect should start, in ISO8601 UTC format.',\n          format: 'date-time'\n        },\n        state: {\n          type: 'string',\n          description: 'State of this effect request (e.g. CREATED, UPDATED, DELETED, etc.).'\n        },\n        targetSrcId: {\n          type: 'string',\n          description: 'The record ID, depending on the type identified in targetSrcType, of the requested target. This identifier corresponds to either poi.poiid or track.trkId from their respective schemas.'\n        },\n        targetSrcType: {\n          type: 'string',\n          description: 'The source type of the targetId identifier (POI, TRACK).'\n        }\n      },\n      required: [        'classificationMarking',\n        'dataMode',\n        'effectList',\n        'source'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      createdAt: {
        type: 'string',
        description:
          'Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)',
        format: 'date',
      },
      columns: {
        type: 'string',
        description:
          'optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.',
      },
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['createdAt'],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { jq_filter, ...body } = args as any;
  const response = await client.effectRequests.history.list(body).asResponse();
  return asTextContentResult(await maybeFilter(jq_filter, await response.json()));
};

export default { metadata, tool, handler };
