// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'airfield_slot_consumptions',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/airfieldslotconsumption/tuple',
};

export const tool: Tool = {
  name: 'tuple_airfield_slot_consumptions',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    $ref: '#/$defs/airfieldslotconsumption_full'\n  },\n  $defs: {\n    airfieldslotconsumption_full: {\n      type: 'object',\n      description: 'Airfield slot use data. Contains the dynamic data associated with the status and use of specific airfield slots.',\n      properties: {\n        classificationMarking: {\n          type: 'string',\n          description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n        },\n        dataMode: {\n          type: 'string',\n          description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n          enum: [            'REAL',\n            'TEST',\n            'SIMULATED',\n            'EXERCISE'\n          ]\n        },\n        idAirfieldSlot: {\n          type: 'string',\n          description: 'Unique identifier of the airfield slot for which this slot consumption record is referencing.'\n        },\n        numAircraft: {\n          type: 'integer',\n          description: 'Number of aircraft using this slot for this time.'\n        },\n        source: {\n          type: 'string',\n          description: 'Source of the data.'\n        },\n        startTime: {\n          type: 'string',\n          description: 'The start of the slot window, in ISO 8601 UTC format.',\n          format: 'date-time'\n        },\n        id: {\n          type: 'string',\n          description: 'Unique identifier of the record, auto-generated by the system.'\n        },\n        altArrSortieId: {\n          type: 'string',\n          description: 'Alternate identifier of the sortie arriving at the slot start time provided by the source.'\n        },\n        altDepSortieId: {\n          type: 'string',\n          description: 'Alternate identifier of the sortie departing at the slot end time provided by the source.'\n        },\n        appComment: {\n          type: 'string',\n          description: 'Comments from the approver.'\n        },\n        appInitials: {\n          type: 'string',\n          description: 'Initials of the person approving the use of this slot. Use SYSTEM if auto-approved without human involvement.'\n        },\n        appOrg: {\n          type: 'string',\n          description: 'Short name of the organization approving the use of this slot.'\n        },\n        callSigns: {\n          type: 'array',\n          description: 'Array of call signs of the aircraft using this slot.',\n          items: {\n            type: 'string'\n          }\n        },\n        consumer: {\n          type: 'string',\n          description: 'Identifying name of the aircraft using this slot. Names are often Prior Permission Required (PPR) numbers or other similar human-readable identifiers.'\n        },\n        createdAt: {\n          type: 'string',\n          description: 'Time the row was created in the database, auto-populated by the system.',\n          format: 'date-time'\n        },\n        createdBy: {\n          type: 'string',\n          description: 'Application user who created the row in the database, auto-populated by the system.'\n        },\n        endTime: {\n          type: 'string',\n          description: 'The end of the slot window, in ISO 8601 UTC format.',\n          format: 'date-time'\n        },\n        idArrSortie: {\n          type: 'string',\n          description: 'Unique identifier of the sortie arriving at the slot start time.'\n        },\n        idDepSortie: {\n          type: 'string',\n          description: 'Unique identifier of the sortie departing at the slot end time.'\n        },\n        missionId: {\n          type: 'string',\n          description: 'Mission identifier using this slot according to Mobility Air Forces (MAF) Encode/Decode procedures.'\n        },\n        occAircraftMDS: {\n          type: 'string',\n          description: 'The aircraft Model Design Series designation of the aircraft occupying this slot.'\n        },\n        occStartTime: {\n          type: 'string',\n          description: 'Time the aircraft began occupying this slot, in ISO 8601 UTC format with millisecond precision.',\n          format: 'date-time'\n        },\n        occTailNumber: {\n          type: 'string',\n          description: 'The tail number of the aircraft occupying this slot.'\n        },\n        occupied: {\n          type: 'boolean',\n          description: 'Flag indicating if the slot is occupied.'\n        },\n        origin: {\n          type: 'string',\n          description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n        },\n        origNetwork: {\n          type: 'string',\n          description: 'The originating source network on which this record was created, auto-populated by the system.'\n        },\n        reqComment: {\n          type: 'string',\n          description: 'Comments from the requester.'\n        },\n        reqInitials: {\n          type: 'string',\n          description: 'Initials of the person requesting the use of this slot. Use SYSTEM if this request is auto-generated by an auto-planning system.'\n        },\n        reqOrg: {\n          type: 'string',\n          description: 'Short name of the organization requesting use of this slot.'\n        },\n        resAircraftMDS: {\n          type: 'string',\n          description: 'The aircraft Model Design Series designation of the aircraft this slot is reserved for.'\n        },\n        resMissionId: {\n          type: 'string',\n          description: 'Mission identifier reserving this slot according to Mobility Air Forces (MAF) Encode/Decode procedures.'\n        },\n        resReason: {\n          type: 'string',\n          description: 'The reason the slot reservation was made.'\n        },\n        resTailNumber: {\n          type: 'string',\n          description: 'The tail number of the aircraft this slot is reserved for.'\n        },\n        resType: {\n          type: 'string',\n          description: 'Indicates the type of reservation (e.g. M for Mission, A for Aircraft, O for Other).'\n        },\n        sourceDL: {\n          type: 'string',\n          description: 'The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.'\n        },\n        status: {\n          type: 'string',\n          description: 'Current status of this slot (REQUESTED / APPROVED / DENIED / BLOCKED / OTHER).',\n          enum: [            'REQUESTED',\n            'APPROVED',\n            'DENIED',\n            'BLOCKED',\n            'OTHER'\n          ]\n        },\n        targetTime: {\n          type: 'string',\n          description: 'The desired time for aircraft action such as landing, take off, parking, etc., in ISO 8601 UTC format.',\n          format: 'date-time'\n        },\n        updatedAt: {\n          type: 'string',\n          description: 'Time the row was last updated in the database, auto-populated by the system.',\n          format: 'date-time'\n        },\n        updatedBy: {\n          type: 'string',\n          description: 'Application user who updated the row in the database, auto-populated by the system.'\n        }\n      },\n      required: [        'classificationMarking',\n        'dataMode',\n        'idAirfieldSlot',\n        'numAircraft',\n        'source',\n        'startTime'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      columns: {
        type: 'string',
        description:
          'Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.',
      },
      startTime: {
        type: 'string',
        description: 'The start of the slot window, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.sssZ)',
        format: 'date-time',
      },
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['columns', 'startTime'],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { jq_filter, ...body } = args as any;
  return asTextContentResult(await maybeFilter(jq_filter, await client.airfieldSlotConsumptions.tuple(body)));
};

export default { metadata, tool, handler };
