// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'udl-node-sdk';

export const metadata: Metadata = {
  resource: 'airfield_slot_consumptions',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/airfieldslotconsumption',
};

export const tool: Tool = {
  name: 'create_airfield_slot_consumptions',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to take a single airfieldslotconsumption record as a POST body and ingest into the database.  A specific role is required to perform this service operation.  Please contact the UDL team for assistance.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {}\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      idAirfieldSlot: {
        type: 'string',
        description:
          'Unique identifier of the airfield slot for which this slot consumption record is referencing.',
      },
      numAircraft: {
        type: 'integer',
        description: 'Number of aircraft using this slot for this time.',
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      startTime: {
        type: 'string',
        description: 'The start of the slot window, in ISO 8601 UTC format.',
        format: 'date-time',
      },
      id: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      altArrSortieId: {
        type: 'string',
        description:
          'Alternate identifier of the sortie arriving at the slot start time provided by the source.',
      },
      altDepSortieId: {
        type: 'string',
        description:
          'Alternate identifier of the sortie departing at the slot end time provided by the source.',
      },
      appComment: {
        type: 'string',
        description: 'Comments from the approver.',
      },
      appInitials: {
        type: 'string',
        description:
          'Initials of the person approving the use of this slot. Use SYSTEM if auto-approved without human involvement.',
      },
      appOrg: {
        type: 'string',
        description: 'Short name of the organization approving the use of this slot.',
      },
      callSigns: {
        type: 'array',
        description: 'Array of call signs of the aircraft using this slot.',
        items: {
          type: 'string',
        },
      },
      consumer: {
        type: 'string',
        description:
          'Identifying name of the aircraft using this slot. Names are often Prior Permission Required (PPR) numbers or other similar human-readable identifiers.',
      },
      endTime: {
        type: 'string',
        description: 'The end of the slot window, in ISO 8601 UTC format.',
        format: 'date-time',
      },
      idArrSortie: {
        type: 'string',
        description: 'Unique identifier of the sortie arriving at the slot start time.',
      },
      idDepSortie: {
        type: 'string',
        description: 'Unique identifier of the sortie departing at the slot end time.',
      },
      missionId: {
        type: 'string',
        description:
          'Mission identifier using this slot according to Mobility Air Forces (MAF) Encode/Decode procedures.',
      },
      occAircraftMDS: {
        type: 'string',
        description: 'The aircraft Model Design Series designation of the aircraft occupying this slot.',
      },
      occStartTime: {
        type: 'string',
        description:
          'Time the aircraft began occupying this slot, in ISO 8601 UTC format with millisecond precision.',
        format: 'date-time',
      },
      occTailNumber: {
        type: 'string',
        description: 'The tail number of the aircraft occupying this slot.',
      },
      occupied: {
        type: 'boolean',
        description: 'Flag indicating if the slot is occupied.',
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
      reqComment: {
        type: 'string',
        description: 'Comments from the requester.',
      },
      reqInitials: {
        type: 'string',
        description:
          'Initials of the person requesting the use of this slot. Use SYSTEM if this request is auto-generated by an auto-planning system.',
      },
      reqOrg: {
        type: 'string',
        description: 'Short name of the organization requesting use of this slot.',
      },
      resAircraftMDS: {
        type: 'string',
        description:
          'The aircraft Model Design Series designation of the aircraft this slot is reserved for.',
      },
      resMissionId: {
        type: 'string',
        description:
          'Mission identifier reserving this slot according to Mobility Air Forces (MAF) Encode/Decode procedures.',
      },
      resReason: {
        type: 'string',
        description: 'The reason the slot reservation was made.',
      },
      resTailNumber: {
        type: 'string',
        description: 'The tail number of the aircraft this slot is reserved for.',
      },
      resType: {
        type: 'string',
        description: 'Indicates the type of reservation (e.g. M for Mission, A for Aircraft, O for Other).',
      },
      status: {
        type: 'string',
        description: 'Current status of this slot (REQUESTED / APPROVED / DENIED / BLOCKED / OTHER).',
        enum: ['REQUESTED', 'APPROVED', 'DENIED', 'BLOCKED', 'OTHER'],
      },
      targetTime: {
        type: 'string',
        description:
          'The desired time for aircraft action such as landing, take off, parking, etc., in ISO 8601 UTC format.',
        format: 'date-time',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['classificationMarking', 'dataMode', 'idAirfieldSlot', 'numAircraft', 'source', 'startTime'],
  },
  annotations: {},
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.airfieldSlotConsumptions.create(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
