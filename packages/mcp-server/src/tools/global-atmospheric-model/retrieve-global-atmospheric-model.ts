// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'global_atmospheric_model',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/globalatmosphericmodel/{id}',
};

export const tool: Tool = {
  name: 'retrieve_global_atmospheric_model',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to get a single GlobalAtmosphericModel record by its unique ID passed as a path parameter.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  description: 'The GlobalAtmosphericModel service provides atmospheric model output data for use in space situational awareness such as the Global Total Electron Content (2D) data, Global Total Electron Density (3D) data, etc.',\n  properties: {\n    classificationMarking: {\n      type: 'string',\n      description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n    },\n    dataMode: {\n      type: 'string',\n      description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n      enum: [        'REAL',\n        'TEST',\n        'SIMULATED',\n        'EXERCISE'\n      ]\n    },\n    source: {\n      type: 'string',\n      description: 'Source of the data.'\n    },\n    ts: {\n      type: 'string',\n      description: 'Target time of the model in ISO 8601 UTC format with millisecond precision.',\n      format: 'date-time'\n    },\n    type: {\n      type: 'string',\n      description: 'Type of data associated with this record (e.g. Global Total Electron Density, Global Total Electron Content).'\n    },\n    id: {\n      type: 'string',\n      description: 'Unique identifier of the record, auto-generated by the system.'\n    },\n    cadence: {\n      type: 'integer',\n      description: 'Model execution cadence, in minutes.'\n    },\n    checksumValue: {\n      type: 'string',\n      description: 'MD5 value of the data file. If not provided, the ingest/create operation will automatically generate the value.'\n    },\n    createdAt: {\n      type: 'string',\n      description: 'Time the row was created in the database, auto-populated by the system.',\n      format: 'date-time'\n    },\n    createdBy: {\n      type: 'string',\n      description: 'Application user who created the row in the database, auto-populated by the system.'\n    },\n    endAlt: {\n      type: 'number',\n      description: 'Ending altitude of model outputs, in kilometers.'\n    },\n    endLat: {\n      type: 'number',\n      description: 'WGS-84 ending latitude of model output, in degrees. -90 to 90 degrees (negative values south of equator).'\n    },\n    endLon: {\n      type: 'number',\n      description: 'WGS-84 ending longitude of model output, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).'\n    },\n    filename: {\n      type: 'string',\n      description: 'The file name of the uploaded file.'\n    },\n    filesize: {\n      type: 'integer',\n      description: 'The uploaded file size, in bytes. The maximum file size for this service is 104857600 bytes (100MB). Files exceeding the maximum size will be rejected.'\n    },\n    numAlt: {\n      type: 'integer',\n      description: 'Number of altitude points.'\n    },\n    numLat: {\n      type: 'integer',\n      description: 'Number of latitude points.'\n    },\n    numLon: {\n      type: 'integer',\n      description: 'Number of longitude points.'\n    },\n    origin: {\n      type: 'string',\n      description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n    },\n    origNetwork: {\n      type: 'string',\n      description: 'The originating source network on which this record was created, auto-populated by the system.'\n    },\n    reportTime: {\n      type: 'string',\n      description: 'The time that this record was created, in ISO 8601 UTC format with millisecond precision.',\n      format: 'date-time'\n    },\n    sourceDL: {\n      type: 'string',\n      description: 'The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.'\n    },\n    startAlt: {\n      type: 'number',\n      description: 'Starting altitude of model outputs, in kilometers.'\n    },\n    startLat: {\n      type: 'number',\n      description: 'WGS-84 starting latitude of model output, in degrees. -90 to 90 degrees (negative values south of equator).'\n    },\n    startLon: {\n      type: 'number',\n      description: 'WGS-84 starting longitude of model output, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).'\n    },\n    state: {\n      type: 'string',\n      description: 'State value indicating whether the values in this record are PREDICTED or OBSERVED.'\n    },\n    stepLat: {\n      type: 'number',\n      description: 'Separation in latitude between subsequent model outputs, in degrees.'\n    },\n    stepLon: {\n      type: 'number',\n      description: 'Separation in longitude between subsequent model outputs, in degrees.'\n    }\n  },\n  required: [    'classificationMarking',\n    'dataMode',\n    'source',\n    'ts',\n    'type'\n  ]\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      id: {
        type: 'string',
      },
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['id'],
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { id, ...body } = args as any;
  return asTextContentResult(await maybeFilter(args, await client.globalAtmosphericModel.retrieve(id, body)));
};

export default { metadata, tool, handler };
