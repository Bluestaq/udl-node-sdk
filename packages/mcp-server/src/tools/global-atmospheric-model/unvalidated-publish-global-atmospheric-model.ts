// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'global_atmospheric_model',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/filedrop/udl-globalatmosphericmodel',
  operationId: 'filedrop_udl_globalatmosphericmodel_post_id',
};

export const tool: Tool = {
  name: 'unvalidated_publish_global_atmospheric_model',
  description:
    'Upload a file with its metadata.\n\nThe request body requires a zip file containing exactly two files:\\\n1\\) A file with the `.json` file extension whose content conforms to the `GlobalAtmosphericModel_Ingest` schema.\\\n2\\) A file with the `.geojson` file extension.\n\nThe JSON and GEOJSON files will be associated with each other other via the `id` field. Query the metadata via `GET /udl/globalatmosphericmodel` and use `GET /udl/globalatmosphericmodel/getFile/{id}` to retrieve the compressed GEOJSON file as `.gz` extension.\n\nThis operation only accepts application/zip media. The application/json request body is documented to provide a convenient reference to the ingest schema.\n\nThis operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.',
  inputSchema: {
    type: 'object',
    properties: {
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      ts: {
        type: 'string',
        description: 'Target time of the model in ISO 8601 UTC format with millisecond precision.',
        format: 'date-time',
      },
      type: {
        type: 'string',
        description:
          'Type of data associated with this record (e.g. Global Total Electron Density, Global Total Electron Content).',
      },
      id: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      cadence: {
        type: 'integer',
        description: 'Model execution cadence, in minutes.',
      },
      endAlt: {
        type: 'number',
        description: 'Ending altitude of model outputs, in kilometers.',
      },
      endLat: {
        type: 'number',
        description:
          'WGS-84 ending latitude of model output, in degrees. -90 to 90 degrees (negative values south of equator).',
      },
      endLon: {
        type: 'number',
        description:
          'WGS-84 ending longitude of model output, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).',
      },
      filename: {
        type: 'string',
        description: 'The file name of the uploaded file.',
      },
      filesize: {
        type: 'integer',
        description:
          'The uploaded file size, in bytes. The maximum file size for this service is 104857600 bytes (100MB). Files exceeding the maximum size will be rejected.',
      },
      numAlt: {
        type: 'integer',
        description: 'Number of altitude points.',
      },
      numLat: {
        type: 'integer',
        description: 'Number of latitude points.',
      },
      numLon: {
        type: 'integer',
        description: 'Number of longitude points.',
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
      reportTime: {
        type: 'string',
        description:
          'The time that this record was created, in ISO 8601 UTC format with millisecond precision.',
        format: 'date-time',
      },
      startAlt: {
        type: 'number',
        description: 'Starting altitude of model outputs, in kilometers.',
      },
      startLat: {
        type: 'number',
        description:
          'WGS-84 starting latitude of model output, in degrees. -90 to 90 degrees (negative values south of equator).',
      },
      startLon: {
        type: 'number',
        description:
          'WGS-84 starting longitude of model output, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).',
      },
      state: {
        type: 'string',
        description: 'State value indicating whether the values in this record are PREDICTED or OBSERVED.',
      },
      stepLat: {
        type: 'number',
        description: 'Separation in latitude between subsequent model outputs, in degrees.',
      },
      stepLon: {
        type: 'number',
        description: 'Separation in longitude between subsequent model outputs, in degrees.',
      },
    },
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  await client.globalAtmosphericModel.unvalidatedPublish(body);
  return asTextContentResult('Successful tool call');
};

export default { metadata, tool, handler };
