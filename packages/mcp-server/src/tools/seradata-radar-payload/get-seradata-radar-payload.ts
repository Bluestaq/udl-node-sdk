// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'seradata_radar_payload',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/seradataradarpayload/{id}',
};

export const tool: Tool = {
  name: 'get_seradata_radar_payload',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to get a single SeradataRadarPayload by its unique ID passed as a path parameter.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  description: 'Details for an radar payload from  Seradata.',\n  properties: {\n    classificationMarking: {\n      type: 'string',\n      description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n    },\n    dataMode: {\n      type: 'string',\n      description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n      enum: [        'REAL',\n        'TEST',\n        'SIMULATED',\n        'EXERCISE'\n      ]\n    },\n    source: {\n      type: 'string',\n      description: 'Source of the data.'\n    },\n    spacecraftId: {\n      type: 'string',\n      description: 'Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).'\n    },\n    id: {\n      type: 'string',\n      description: 'Unique identifier of the record, auto-generated by the system.'\n    },\n    bandwidth: {\n      type: 'number',\n      description: 'Radar bandwidth in mega hertz.'\n    },\n    bestResolution: {\n      type: 'number',\n      description: 'Best resolution in meters.'\n    },\n    category: {\n      type: 'string',\n      description: 'Radar category, e.g. SAR, Surface Search, etc.'\n    },\n    constellationInterferometricCapability: {\n      type: 'string',\n      description: 'Constellation interferometric capability.'\n    },\n    createdAt: {\n      type: 'string',\n      description: 'Time the row was created in the database, auto-populated by the system.',\n      format: 'date-time'\n    },\n    createdBy: {\n      type: 'string',\n      description: 'Application user who created the row in the database, auto-populated by the system.'\n    },\n    dutyCycle: {\n      type: 'string',\n      description: 'Duty cycle.'\n    },\n    fieldOfRegard: {\n      type: 'number',\n      description: 'Field of regard of this radar in degrees.'\n    },\n    fieldOfView: {\n      type: 'number',\n      description: 'Field of view of this radar in kilometers.'\n    },\n    frequency: {\n      type: 'number',\n      description: 'Frequency in giga hertz.'\n    },\n    frequencyBand: {\n      type: 'string',\n      description: 'Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.'\n    },\n    groundStationLocations: {\n      type: 'string',\n      description: 'Ground Station Locations for this payload.'\n    },\n    groundStations: {\n      type: 'string',\n      description: 'Ground Station info for this payload.'\n    },\n    hostedForCompanyOrgId: {\n      type: 'string',\n      description: 'Hosted for company/Organization Id.'\n    },\n    idSensor: {\n      type: 'string',\n      description: 'UUID of the Sensor record.'\n    },\n    manufacturerOrgId: {\n      type: 'string',\n      description: 'Manufacturer Organization Id.'\n    },\n    name: {\n      type: 'string',\n      description: 'Sensor name from Seradata, e.g. ALT (Radar Altimeter), COSI (Corea SAR Instrument), etc.'\n    },\n    notes: {\n      type: 'string',\n      description: 'Payload notes.'\n    },\n    origin: {\n      type: 'string',\n      description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n    },\n    origNetwork: {\n      type: 'string',\n      description: 'The originating source network on which this record was created, auto-populated by the system.'\n    },\n    partnerSpacecraft: {\n      type: 'string',\n      description: 'Partner seradata-spacecraft.'\n    },\n    pointingMethod: {\n      type: 'string',\n      description: 'Point method for this radar, e.g. Spacecraft.'\n    },\n    receivePolarization: {\n      type: 'string',\n      description: 'Receive polarization, e.g. Lin Dual, Lin vert, etc.'\n    },\n    recorderSize: {\n      type: 'string',\n      description: 'Recorder size, e.g. 256.'\n    },\n    swathWidth: {\n      type: 'number',\n      description: 'Swath width in kilometers.'\n    },\n    transmitPolarization: {\n      type: 'string',\n      description: 'Transmit polarization, e.g. Lin Dual, Lin vert, etc.'\n    },\n    updatedAt: {\n      type: 'string',\n      description: 'Time the row was last updated in the database, auto-populated by the system.',\n      format: 'date-time'\n    },\n    updatedBy: {\n      type: 'string',\n      description: 'Application user who updated the row in the database, auto-populated by the system.'\n    },\n    waveLength: {\n      type: 'number',\n      description: 'Wave length in meters.'\n    }\n  },\n  required: [    'classificationMarking',\n    'dataMode',\n    'source',\n    'spacecraftId'\n  ]\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      id: {
        type: 'string',
      },
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { id, ...body } = args as any;
  return asTextContentResult(await maybeFilter(args, await client.seradataRadarPayload.get(id, body)));
};

export default { metadata, tool, handler };
