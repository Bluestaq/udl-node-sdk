// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'observations.obscorrelation',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/filedrop/udl-obscorrelation',
  operationId: 'filedrop_udl_obscorrelation_post_id',
};

export const tool: Tool = {
  name: 'unvalidated_publish_observations_obscorrelation',
  description:
    'Service operation to take multiple ObsCorrelation records as a POST body and ingest into the database. This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n',
  inputSchema: {
    type: 'object',
    properties: {
      body: {
        type: 'array',
        items: {
          type: 'object',
          description:
            'Model representation supporting post-pass correlation of UCTs and re-correlation of mis-tagged electro-optical (EO), radar, RF, and DOA track/observations.',
          properties: {
            classificationMarking: {
              type: 'string',
              description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
            },
            corrType: {
              type: 'string',
              description:
                'Indicator of whether the type of correlation is OBSERVATION or TRACK:\nOBSERVATION: Identifies an observation is being correlated.\nTRACK: Identifies the entire track of observations is being correlated.',
              enum: ['OBSERVATION', 'TRACK'],
            },
            dataMode: {
              type: 'string',
              description:
                'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
              enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
            },
            msgTs: {
              type: 'string',
              description:
                'Correlation message generation time, in ISO 8601 UTC format with millisecond precision.',
              format: 'date-time',
            },
            obId: {
              type: 'string',
              description:
                "Identifier of the Observation associated with this Correlation. If corrType=TRACK then this field should reference the first Observation in the track. Note: To retrieve all remaining Observations in the track, the GET query should include this Observation's source and origin field values, along with the trackId.",
            },
            obType: {
              type: 'string',
              description:
                'Indicator of whether the type of Observation(s) being correlated is DOA, EO, PASSIVE_RADAR, RADAR, RF, SAR, or SOISET:\nDOA: The observation type being correlated is Difference of Arrival.\nEO: The observation type being correlated is Electro-Optical.\nPASSIVE_RADAR: The observation type being correlated is Passive Radar.\nRADAR: The observation type being correlated is Radar.\nRF: The observation type being correlated is Radio Frequency.\nSAR: The observation type being correlated is Synthetic Aperture Radar.\nSOISET: The observation type being correlated is Space Object Identification Observation Set.',
              enum: ['DOA', 'EO', 'PASSIVE_RADAR', 'RADAR', 'RF', 'SAR', 'SOISET'],
            },
            referenceOrbitId: {
              type: 'string',
              description: 'Identifier of the orbit state used for correlation.',
            },
            referenceOrbitType: {
              type: 'string',
              description:
                'Indicator of whether the reference orbit type used for correlation is an ELSET, ESID, or SV:\nELSET: The reference orbit type is an Element Set.\nESID: The reference orbit type is an Ephemeris Set.\nSV: The reference orbit type is a State Vector.',
              enum: ['ELSET', 'ESID', 'SV'],
            },
            source: {
              type: 'string',
              description: 'Source of the data.',
            },
            id: {
              type: 'string',
              description: 'Unique identifier of the record, auto-generated by the system.',
            },
            algorithmCorrType: {
              type: 'string',
              description:
                'Type of algorithm used for this correlation (e.g. ROTAS, GEOMETRIC, STATISTICAL, MAHALANOBIS, AI/ML, OTHER).',
            },
            altCatalog: {
              type: 'string',
              description: 'Name of the alternate catalog.',
            },
            altNamespace: {
              type: 'string',
              description:
                'Associates one or more alternate catalogs with a source provider or system. Namespaces may be defined by their respective data providers or systems (e.g. JCO, 18SDS, EOSSS, EXO, KBR, KRTL, LeoLabs, NorthStar, SAFRAN, Slingshot).',
            },
            altObjectId: {
              type: 'string',
              description: 'Alternate unique object ID within the namespace.',
            },
            altUct: {
              type: 'boolean',
              description:
                "Boolean indicating whether the observation or track can be correlated to the alternate object specified under altObjectId. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
            },
            astat: {
              type: 'integer',
              description:
                'Astrostandard ROTAS correlation result (0 - 4), if applicable.  Refer to ROTAS documentation for an explanation of ASTAT values.',
            },
            corrQuality: {
              type: 'number',
              description:
                'Correlation score ranging from 0.0 to 1.0. A score of 1.0 represents perfect correlation to the orbit of the corresponding satellite, such as when all observation residuals equal 0.',
            },
            createdAt: {
              type: 'string',
              description: 'Time the row was created in the database, auto-populated by the system.',
              format: 'date-time',
            },
            createdBy: {
              type: 'string',
              description:
                'Application user who created the row in the database, auto-populated by the system.',
            },
            idOnOrbit: {
              type: 'string',
              description:
                'Identifier of the correlated target on-orbit object, if associated with a valid satNo.',
            },
            idParentCorrelation: {
              type: 'string',
              description:
                'Identifier of the ObsCorrelation record from which this ObsCorrelation record originated. This behavior allows for different source providers/systems to make changes to a given correlation and maintain traceability back to the original correlation.',
            },
            origin: {
              type: 'string',
              description:
                'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
            },
            origNetwork: {
              type: 'string',
              description:
                'The originating source network on which this record was created, auto-populated by the system.',
            },
            origObjectId: {
              type: 'string',
              description:
                'Optional identifier indicates the target on-orbit object being correlated. This may be an internal identifier and not necessarily a valid satellite number.',
            },
            satNo: {
              type: 'integer',
              description:
                'Current 18th SDS satellite/catalog number of the target on-orbit object. Useful to know in the case where an observation is correlated to another satellite/catalog number.',
            },
            sourceDL: {
              type: 'string',
              description:
                'The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.',
            },
            tags: {
              type: 'array',
              description:
                'Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.',
              items: {
                type: 'string',
              },
            },
            trackId: {
              type: 'string',
              description: 'Identifier of the Track associated with this ObsCorrelation.',
            },
            transactionId: {
              type: 'string',
              description:
                'Optional identifier to track a commercial or marketplace transaction executed to produce this data.',
            },
          },
          required: [
            'classificationMarking',
            'corrType',
            'dataMode',
            'msgTs',
            'obId',
            'obType',
            'referenceOrbitId',
            'referenceOrbitType',
            'source',
          ],
        },
      },
    },
    required: ['body'],
  },
  annotations: {},
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.observations.obscorrelation.unvalidatedPublish(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
