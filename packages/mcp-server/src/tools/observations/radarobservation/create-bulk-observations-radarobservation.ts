// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'udl-node-sdk';

export const metadata: Metadata = {
  resource: 'observations.radarobservation',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/radarobservation/createBulk',
};

export const tool: Tool = {
  name: 'create_bulk_observations_radarobservation',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation intended for initial integration only, to take a list of radar observations as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
  inputSchema: {
    type: 'object',
    properties: {
      body: {
        type: 'array',
        items: {
          type: 'object',
          description:
            "Model representation of observation data for radar based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.",
          properties: {
            classificationMarking: {
              type: 'string',
              description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
            },
            dataMode: {
              type: 'string',
              description:
                'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
              enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
            },
            obTime: {
              type: 'string',
              description: 'Ob detection time in ISO 8601 UTC with microsecond precision.',
              format: 'date-time',
            },
            source: {
              type: 'string',
              description: 'Source of the data.',
            },
            id: {
              type: 'string',
              description: 'Unique identifier of the record, auto-generated by the system.',
            },
            azimuth: {
              type: 'number',
              description: 'azimuth angle in degrees and topocentric frame.',
            },
            azimuthBias: {
              type: 'number',
              description: 'Sensor azimuth angle bias in degrees.',
            },
            azimuthMeasured: {
              type: 'boolean',
              description:
                'Optional flag indicating whether the azimuth value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.',
            },
            azimuthRate: {
              type: 'number',
              description: 'Rate of change of the line of sight azimuth in degrees per second.',
            },
            azimuthUnc: {
              type: 'number',
              description:
                'One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.',
            },
            beam: {
              type: 'number',
              description: 'ID of the beam that produced this observation.',
            },
            createdAt: {
              type: 'string',
              description: 'Time the row was created in the database, auto-populated by the system.',
              format: 'date-time',
            },
            createdBy: {
              type: 'string',
              description:
                'Application user who created the row in the database, auto-populated by the system.',
            },
            declination: {
              type: 'number',
              description: 'Line of sight declination angle in degrees and J2000 coordinate frame.',
            },
            declinationMeasured: {
              type: 'boolean',
              description:
                'Optional flag indicating whether the declination value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.',
            },
            descriptor: {
              type: 'string',
              description: 'Optional source-provided and searchable metadata or descriptor of the data.',
            },
            doppler: {
              type: 'number',
              description: 'Corrected doppler measurement in meters per second.',
            },
            dopplerUnc: {
              type: 'number',
              description: 'One sigma uncertainty in the corrected doppler measurement, in meters/second.',
            },
            elevation: {
              type: 'number',
              description: 'Line of sight elevation in degrees and topocentric frame.',
            },
            elevationBias: {
              type: 'number',
              description: 'Sensor elevation bias in degrees.',
            },
            elevationMeasured: {
              type: 'boolean',
              description:
                'Optional flag indicating whether the elevation value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.',
            },
            elevationRate: {
              type: 'number',
              description: 'Rate of change of the line of sight elevation in degrees per second.',
            },
            elevationUnc: {
              type: 'number',
              description:
                'One sigma uncertainty in the line of sight elevation angle measurement, in degrees.',
            },
            idOnOrbit: {
              type: 'string',
              description: 'Unique identifier of the target on-orbit object, if correlated.',
            },
            idSensor: {
              type: 'string',
              description: 'Unique identifier of the reporting sensor.',
            },
            obPosition: {
              type: 'string',
              description:
                'The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.',
            },
            origin: {
              type: 'string',
              description:
                'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
            },
            origNetwork: {
              type: 'string',
              description:
                'The originating source network on which this record was created, auto-populated by the system.',
            },
            origObjectId: {
              type: 'string',
              description:
                'Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.',
            },
            origSensorId: {
              type: 'string',
              description:
                'Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.',
            },
            orthogonalRcs: {
              type: 'number',
              description: 'Radar cross section in meters squared for orthogonal polarization.',
            },
            orthogonalRcsUnc: {
              type: 'number',
              description:
                'one sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.',
            },
            ra: {
              type: 'number',
              description: 'Line of sight right ascension in degrees and J2000 coordinate frame.',
            },
            raMeasured: {
              type: 'boolean',
              description:
                'Optional flag indicating whether the ra value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.',
            },
            range: {
              type: 'number',
              description: 'Target range in km.',
            },
            rangeAccel: {
              type: 'number',
              description: 'Range accelaration in km/s2.',
            },
            rangeAccelUnc: {
              type: 'number',
              description:
                'One sigma uncertainty in the range acceleration measurement, in kilometers/(second^2).',
            },
            rangeBias: {
              type: 'number',
              description: 'Sensor range bias in km.',
            },
            rangeMeasured: {
              type: 'boolean',
              description:
                'Optional flag indicating whether the range value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.',
            },
            rangeRate: {
              type: 'number',
              description: 'Rate of change of the line of sight range in km/sec.',
            },
            rangeRateMeasured: {
              type: 'boolean',
              description:
                'Optional flag indicating whether the rangeRate value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.',
            },
            rangeRateUnc: {
              type: 'number',
              description: 'One sigma uncertainty in the range rate measurement, in kilometers/second.',
            },
            rangeUnc: {
              type: 'number',
              description: 'One sigma uncertainty in the range measurement, in kilometers.',
            },
            rawFileURI: {
              type: 'string',
              description:
                'Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.',
            },
            rcs: {
              type: 'number',
              description: 'Radar cross section in meters squared for polarization principal.',
            },
            rcsUnc: {
              type: 'number',
              description:
                'one sigma uncertainty in principal polarization Radar Cross Section, in meters^2.',
            },
            satNo: {
              type: 'integer',
              description: 'Satellite/Catalog number of the target on-orbit object.',
            },
            senReferenceFrame: {
              type: 'string',
              description:
                'The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.',
              enum: ['J2000', 'EFG/TDR', 'ECR/ECEF', 'TEME', 'ITRF', 'GCRF'],
            },
            senx: {
              type: 'number',
              description:
                'Sensor x position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.',
            },
            seny: {
              type: 'number',
              description:
                'Sensor y position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.',
            },
            senz: {
              type: 'number',
              description:
                'Sensor z position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.',
            },
            snr: {
              type: 'number',
              description: 'Signal to noise ratio, in dB.',
            },
            sourceDL: {
              type: 'string',
              description:
                'The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.',
            },
            tags: {
              type: 'array',
              description:
                'Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.',
              items: {
                type: 'string',
              },
            },
            taskId: {
              type: 'string',
              description:
                'Optional identifier to indicate the specific tasking which produced this observation.',
            },
            timingBias: {
              type: 'number',
              description: 'Sensor timing bias in seconds.',
            },
            trackId: {
              type: 'string',
              description: 'Optional identifier of the track to which this observation belongs.',
            },
            trackingState: {
              type: 'string',
              description:
                'The beam type (or tracking state) in use at the time of collection of this observation. Values include:\n\nINIT ACQ WITH INIT VALUES: Initial acquisition based on predefined initial values such as position, velocity, or other specific parameters.\n\nINIT ACQ: Initial acquisition when no prior information or initial values such as position or velocity are available.\n\nTRACKING SINGLE BEAM: Continuously tracks and monitors a single target using one specific radar beam.\n\nTRACKING SEQUENTIAL ROVING:  Sequentially tracks different targets or areas by "roving" from one sector to the next in a systematic order.\n\nSELF ACQ WITH INIT VALUES: Autonomously acquires targets using predefined starting parameters or initial values.\n\nSELF ACQ: Automatically detects and locks onto targets without the need for predefined initial settings.\n\nNON-TRACKING: Non-tracking.',
            },
            transactionId: {
              type: 'string',
              description:
                'Optional identifier to track a commercial or marketplace transaction executed to produce this data.',
            },
            type: {
              type: 'string',
              description:
                'Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).',
            },
            uct: {
              type: 'boolean',
              description:
                "Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
            },
            x: {
              type: 'number',
              description: 'X position of target in km in J2000 coordinate frame.',
            },
            xvel: {
              type: 'number',
              description: 'X velocity of target in km/sec in J2000 coordinate frame.',
            },
            y: {
              type: 'number',
              description: 'Y position of target in km in J2000 coordinate frame.',
            },
            yvel: {
              type: 'number',
              description: 'Y velocity of target in km/sec in J2000 coordinate frame.',
            },
            z: {
              type: 'number',
              description: 'Z position of target in km in J2000 coordinate frame.',
            },
            zvel: {
              type: 'number',
              description: 'Z velocity of target in km/sec in J2000 coordinate frame.',
            },
          },
          required: ['classificationMarking', 'dataMode', 'obTime', 'source'],
        },
      },
    },
    required: ['body'],
  },
  annotations: {},
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.observations.radarobservation.createBulk(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
