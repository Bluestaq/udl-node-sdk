// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'observations.rf_observation',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/rfobservation/createBulk',
};

export const tool: Tool = {
  name: 'create_bulk_observations_rf_observation',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation intended for initial integration only, to take a list of RF observations as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
  inputSchema: {
    type: 'object',
    properties: {
      body: {
        type: 'array',
        items: {
          type: 'object',
          description:
            "Model representation of observation data for active/passive radio frequency (RF) based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider. RF observations include several optional ordered arrays which are used to provide detailed information on recorded signals such as power spectral density lists or active signals (code taps/fills, etc). In these cases, the sizes of the arrays must match and can be assumed to have consistent indexing across arrays (e.g. powers[0] is the measured power at frequencies[0]).",
          properties: {
            classificationMarking: {
              type: 'string',
              description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
            },
            dataMode: {
              type: 'string',
              description:
                'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
              enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
            },
            obTime: {
              type: 'string',
              description: 'Ob detection time in ISO 8601 UTC with microsecond precision.',
              format: 'date-time',
            },
            source: {
              type: 'string',
              description: 'Source of the data.',
            },
            type: {
              type: 'string',
              description: 'Type of RF ob (e.g. RF, RF-SOSI, PSD, RFI, SPOOF, etc).',
            },
            id: {
              type: 'string',
              description: 'Unique identifier of the record, auto-generated by the system.',
            },
            antennaName: {
              type: 'string',
              description: 'Antenna name of the RFObservation record.',
            },
            azimuth: {
              type: 'number',
              description: 'azimuth angle in degrees and J2000 coordinate frame.',
            },
            azimuthMeasured: {
              type: 'boolean',
              description:
                'Optional flag indicating whether the azimuth value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.',
            },
            azimuthRate: {
              type: 'number',
              description: 'Rate of change of the azimuth in degrees per second.',
            },
            azimuthUnc: {
              type: 'number',
              description: 'One sigma uncertainty in the azimuth angle measurement, in degrees.',
            },
            bandwidth: {
              type: 'number',
              description: 'Measured bandwidth in Hz.',
            },
            baudRate: {
              type: 'number',
              description:
                'Baud rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per second.',
            },
            baudRates: {
              type: 'array',
              description: 'Array of measured signal baud rates.',
              items: {
                type: 'number',
              },
            },
            bitErrorRate: {
              type: 'number',
              description: 'The ratio of bit errors per number of received bits.',
            },
            carrierStandard: {
              type: 'string',
              description: 'Carrier standard (e.g. DVB-S2, 802.11g, etc.).',
            },
            channel: {
              type: 'integer',
              description: 'Channel of the RFObservation record.',
            },
            chipRates: {
              type: 'array',
              description: 'Array of chipRates.',
              items: {
                type: 'number',
              },
            },
            codeFills: {
              type: 'array',
              description: 'Array of code fills.',
              items: {
                type: 'string',
              },
            },
            codeLengths: {
              type: 'array',
              description: 'Array of code lengths.',
              items: {
                type: 'number',
              },
            },
            codeTaps: {
              type: 'array',
              description: 'Array of code taps.',
              items: {
                type: 'string',
              },
            },
            collectionMode: {
              type: 'string',
              description:
                'Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).',
            },
            confidence: {
              type: 'number',
              description: 'Confidence in the signal and its measurements and characterization.',
            },
            confidences: {
              type: 'array',
              description: 'Array of measurement confidences.',
              items: {
                type: 'number',
              },
            },
            constellationXPoints: {
              type: 'array',
              description:
                'Array of individual x-coordinates for demodulated signal constellation. This array should correspond with the same-sized array of constellationYPoints.',
              items: {
                type: 'number',
              },
            },
            constellationYPoints: {
              type: 'array',
              description:
                'Array of individual y-coordinates for demodulated signal constellation. This array should correspond with the same-sized array of constellationXPoints.',
              items: {
                type: 'number',
              },
            },
            createdAt: {
              type: 'string',
              description: 'Time the row was created in the database, auto-populated by the system.',
              format: 'date-time',
            },
            createdBy: {
              type: 'string',
              description:
                'Application user who created the row in the database, auto-populated by the system.',
            },
            descriptor: {
              type: 'string',
              description: 'Optional source-provided and searchable metadata or descriptor of the data.',
            },
            detectionStatus: {
              type: 'string',
              description:
                'Detection status (e.g. DETECTED, CARRIER_ACQUIRING, CARRIER_DETECTED, NOT_DETECTED, etc).',
            },
            detectionStatuses: {
              type: 'array',
              description:
                'Array of detection statuses (e.g. DETECTED, CARRIER_DETECTED, NOT_DETECTED) for each measured signal.',
              items: {
                type: 'string',
              },
            },
            eirp: {
              type: 'number',
              description: 'Measured Equivalent Isotopically Radiated Power in dBW.',
            },
            elevation: {
              type: 'number',
              description: 'elevation in degrees and J2000 coordinate frame.',
            },
            elevationMeasured: {
              type: 'boolean',
              description:
                'Optional flag indicating whether the elevation value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.',
            },
            elevationRate: {
              type: 'number',
              description: 'Rate of change of the elevation in degrees per second.',
            },
            elevationUnc: {
              type: 'number',
              description: 'One sigma uncertainty in the elevation angle measurement, in degrees.',
            },
            elnot: {
              type: 'string',
              description: 'ELINT notation.',
            },
            endFrequency: {
              type: 'number',
              description: 'End carrier frequency in Hz.',
            },
            frequencies: {
              type: 'array',
              description:
                'Array of individual PSD frequencies of the signal in Hz. This array should correspond with the same-sized array of powers.',
              items: {
                type: 'number',
              },
            },
            frequency: {
              type: 'number',
              description: 'Center carrier frequency in Hz.',
            },
            frequencyShift: {
              type: 'number',
              description: 'Frequency Shift of the RFObservation record.',
            },
            idOnOrbit: {
              type: 'string',
              description: 'Unique identifier of the target on-orbit object, if correlated.',
            },
            idSensor: {
              type: 'string',
              description: 'Unique identifier of the reporting sensor.',
            },
            incoming: {
              type: 'boolean',
              description: 'True if the signal is incoming, false if outgoing.',
            },
            innerCodingRate: {
              type: 'integer',
              description:
                'Inner forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.',
            },
            maxPSD: {
              type: 'number',
              description: 'Maximum measured PSD value of the trace in dBW.',
            },
            minPSD: {
              type: 'number',
              description: 'Minimum measured PSD value of the trace in dBW.',
            },
            modulation: {
              type: 'string',
              description: 'Transponder modulation (e.g. Auto, QPSK, 8PSK, etc).',
            },
            noisePwrDensity: {
              type: 'number',
              description: 'Noise power density, in dBW-Hz.',
            },
            nominalBandwidth: {
              type: 'number',
              description: 'Expected bandwidth in Hz.',
            },
            nominalEirp: {
              type: 'number',
              description: 'Expected Equivalent Isotopically Radiated Power in dBW.',
            },
            nominalFrequency: {
              type: 'number',
              description: 'Nominal or expected center carrier frequency in Hz.',
            },
            nominalPowerOverNoise: {
              type: 'number',
              description: 'Expected carrier power over noise (dBW/Hz).',
            },
            nominalSnr: {
              type: 'number',
              description: 'Nominal or expected signal to noise ratio, in dB.',
            },
            origin: {
              type: 'string',
              description:
                'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
            },
            origNetwork: {
              type: 'string',
              description:
                'The originating source network on which this record was created, auto-populated by the system.',
            },
            origObjectId: {
              type: 'string',
              description:
                'Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.',
            },
            origSensorId: {
              type: 'string',
              description:
                'Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.',
            },
            outerCodingRate: {
              type: 'integer',
              description:
                'Outer forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.',
            },
            peak: {
              type: 'boolean',
              description: 'Peak of the RFObservation record.',
            },
            pgri: {
              type: 'number',
              description:
                'A pulse group repetition interval (PGRI) is a pulse train in which there are groups of closely spaced pulses separated by much longer times between these pulse groups.',
            },
            pnOrders: {
              type: 'array',
              description: 'Array of pnOrder.',
              items: {
                type: 'integer',
              },
            },
            polarity: {
              type: 'number',
              description: 'The antenna pointing dependent polarizer angle, in degrees.',
            },
            polarityType: {
              type: 'string',
              description:
                "Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.",
              enum: ['H', 'V', 'R', 'L'],
            },
            powerOverNoise: {
              type: 'number',
              description: 'Measured carrier power over noise (dBW/Hz).',
            },
            powers: {
              type: 'array',
              description:
                'Array of individual measured PSD powers of the signal in dBW. This array should correspond with the same-sized array of frequencies.',
              items: {
                type: 'number',
              },
            },
            range: {
              type: 'number',
              description: 'Target range in km.',
            },
            rangeMeasured: {
              type: 'boolean',
              description:
                'Optional flag indicating whether the range value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.',
            },
            rangeRate: {
              type: 'number',
              description: 'Rate of change of the range in km/sec.',
            },
            rangeRateMeasured: {
              type: 'boolean',
              description:
                'Optional flag indicating whether the rangeRate value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.',
            },
            rangeRateUnc: {
              type: 'number',
              description: 'One sigma uncertainty in the range rate measurement, in kilometers/second.',
            },
            rangeUnc: {
              type: 'number',
              description: 'One sigma uncertainty in the range measurement, in kilometers.',
            },
            rawFileURI: {
              type: 'string',
              description:
                'Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.',
            },
            referenceLevel: {
              type: 'number',
              description: 'Reference signal level, in dBW.',
            },
            relativeCarrierPower: {
              type: 'number',
              description: 'Measured power of the center carrier frequency in dBW.',
            },
            relativeNoiseFloor: {
              type: 'number',
              description:
                'The measure of the signal created from the sum of all the noise sources and unwanted signals within the measurement system, in dBW.',
            },
            resolutionBandwidth: {
              type: 'number',
              description: 'Resolution bandwidth in Hz.',
            },
            satNo: {
              type: 'integer',
              description: 'Satellite/Catalog number of the target on-orbit object.',
            },
            senalt: {
              type: 'number',
              description:
                'Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.',
            },
            senlat: {
              type: 'number',
              description:
                'Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).',
            },
            senlon: {
              type: 'number',
              description:
                'Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).',
            },
            signalIds: {
              type: 'array',
              description: 'Array of optional source provided identifiers of the measurements/signals.',
              items: {
                type: 'string',
              },
            },
            snr: {
              type: 'number',
              description: 'Signal to noise ratio, in dB.',
            },
            snrs: {
              type: 'array',
              description: 'Array of signal to noise ratios of the signals, in dB.',
              items: {
                type: 'number',
              },
            },
            sourceDL: {
              type: 'string',
              description:
                'The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.',
            },
            spectrumAnalyzerPower: {
              type: 'number',
              description: 'Measured spectrum analyzer power of the center carrier frequency in dBW.',
            },
            startFrequency: {
              type: 'number',
              description: 'Start carrier frequency in Hz.',
            },
            switchPoint: {
              type: 'integer',
              description: 'Switch Point of the RFObservation record.',
            },
            symbolToNoiseRatio: {
              type: 'number',
              description: 'Symbol to noise ratio, in dB.',
            },
            tags: {
              type: 'array',
              description:
                'Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.',
              items: {
                type: 'string',
              },
            },
            taskId: {
              type: 'string',
              description:
                'Optional identifier to indicate the specific tasking which produced this observation.',
            },
            telemetryIds: {
              type: 'array',
              description:
                'Array of optional source provided telemetry identifiers of the measurements/signals.',
              items: {
                type: 'string',
              },
            },
            trackId: {
              type: 'string',
              description: 'Optional identifier of the track to which this observation belongs.',
            },
            trackRange: {
              type: 'number',
              description: 'Target track or apparent range in km.',
            },
            transactionId: {
              type: 'string',
              description:
                'Optional identifier to track a commercial or marketplace transaction executed to produce this data.',
            },
            transmitFilterRollOff: {
              type: 'number',
              description: 'Transmit pulse shaping filter roll-off value.',
            },
            transmitFilterType: {
              type: 'string',
              description: 'Transmit pulse shaping filter typ (e.g. RRC).',
            },
            transponder: {
              type: 'string',
              description:
                'Optional identifier provided by observation source to indicate the transponder used for this measurement.',
            },
            uct: {
              type: 'boolean',
              description:
                "Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
            },
            url: {
              type: 'string',
              description: 'Optional URL containing additional information on this observation.',
            },
            videoBandwidth: {
              type: 'number',
              description: 'Video bandwidth in Hz.',
            },
          },
          required: ['classificationMarking', 'dataMode', 'obTime', 'source', 'type'],
        },
      },
    },
    required: ['body'],
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.observations.rfObservation.createBulk(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
