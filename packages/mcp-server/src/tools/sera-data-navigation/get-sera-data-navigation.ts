// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'sera_data_navigation',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/seradatanavigation/{id}',
};

export const tool: Tool = {
  name: 'get_sera_data_navigation',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to get a single SeradataNavigation by its unique ID passed as a path parameter.\n\n# Response Schema\n```json\n{\n  $ref: '#/$defs/sera_data_navigation_get_response',\n  $defs: {\n    sera_data_navigation_get_response: {\n      type: 'object',\n      description: 'Details for a navigation payload from  Seradata.',\n      properties: {\n        classificationMarking: {\n          type: 'string',\n          description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n        },\n        dataMode: {\n          type: 'string',\n          description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n          enum: [            'REAL',\n            'TEST',\n            'SIMULATED',\n            'EXERCISE'\n          ]\n        },\n        source: {\n          type: 'string',\n          description: 'Source of the data.'\n        },\n        spacecraftId: {\n          type: 'string',\n          description: 'Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).'\n        },\n        id: {\n          type: 'string',\n          description: 'Unique identifier of the record, auto-generated by the system.'\n        },\n        areaCoverage: {\n          type: 'string',\n          description: 'Area of coverage, e.g. Worldwide, India, etc.'\n        },\n        clockType: {\n          type: 'string',\n          description: 'Type of clock, e.g. Rubidium, Hydrogen Maser, etc.'\n        },\n        createdAt: {\n          type: 'string',\n          description: 'Time the row was created in the database, auto-populated by the system.',\n          format: 'date-time'\n        },\n        createdBy: {\n          type: 'string',\n          description: 'Application user who created the row in the database, auto-populated by the system.'\n        },\n        hostedForCompanyOrgId: {\n          type: 'string',\n          description: 'Hosted for company/Organization Id.'\n        },\n        idNavigation: {\n          type: 'string',\n          description: 'UUID of the parent Navigation record.'\n        },\n        locationAccuracy: {\n          type: 'number',\n          description: 'Location accuracy in meters.'\n        },\n        manufacturerOrgId: {\n          type: 'string',\n          description: 'Manufacturer Organization Id.'\n        },\n        modeFrequency: {\n          type: 'string',\n          description: 'Frequency for this payload.'\n        },\n        modes: {\n          type: 'string',\n          description: 'Modes of operation.'\n        },\n        name: {\n          type: 'string',\n          description: 'Sensor name from Seradata, e.g. WAAS GEO-5, etc.'\n        },\n        notes: {\n          type: 'string',\n          description: 'Payload notes.'\n        },\n        origin: {\n          type: 'string',\n          description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n        },\n        origNetwork: {\n          type: 'string',\n          description: 'The originating source network on which this record was created, auto-populated by the system.'\n        },\n        partnerSpacecraftId: {\n          type: 'string',\n          description: 'Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).'\n        },\n        payloadType: {\n          type: 'string',\n          description: 'Navigation payload type, e.g. WAAS, GAGAN, etc.'\n        },\n        updatedAt: {\n          type: 'string',\n          description: 'Time the row was last updated in the database, auto-populated by the system.',\n          format: 'date-time'\n        },\n        updatedBy: {\n          type: 'string',\n          description: 'Application user who updated the row in the database, auto-populated by the system.'\n        }\n      },\n      required: [        'classificationMarking',\n        'dataMode',\n        'source',\n        'spacecraftId'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      id: {
        type: 'string',
      },
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['id'],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { id, jq_filter, ...body } = args as any;
  return asTextContentResult(await maybeFilter(jq_filter, await client.seraDataNavigation.get(id, body)));
};

export default { metadata, tool, handler };
