// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'udl-node-sdk';

export const metadata: Metadata = {
  resource: 'sera_data_navigation',
  operation: 'write',
  tags: [],
  httpMethod: 'put',
  httpPath: '/udl/seradatanavigation/{id}',
};

export const tool: Tool = {
  name: 'update_sera_data_navigation',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to update an SeradataNavigation. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {}\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      path_id: {
        type: 'string',
      },
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      spacecraftId: {
        type: 'string',
        description: 'Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).',
      },
      body_id: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      areaCoverage: {
        type: 'string',
        description: 'Area of coverage, e.g. Worldwide, India, etc.',
      },
      clockType: {
        type: 'string',
        description: 'Type of clock, e.g. Rubidium, Hydrogen Maser, etc.',
      },
      hostedForCompanyOrgId: {
        type: 'string',
        description: 'Hosted for company/Organization Id.',
      },
      idNavigation: {
        type: 'string',
        description: 'UUID of the parent Navigation record.',
      },
      locationAccuracy: {
        type: 'number',
        description: 'Location accuracy in meters.',
      },
      manufacturerOrgId: {
        type: 'string',
        description: 'Manufacturer Organization Id.',
      },
      modeFrequency: {
        type: 'string',
        description: 'Frequency for this payload.',
      },
      modes: {
        type: 'string',
        description: 'Modes of operation.',
      },
      name: {
        type: 'string',
        description: 'Sensor name from Seradata, e.g. WAAS GEO-5, etc.',
      },
      notes: {
        type: 'string',
        description: 'Payload notes.',
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
      partnerSpacecraftId: {
        type: 'string',
        description: 'Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).',
      },
      payloadType: {
        type: 'string',
        description: 'Navigation payload type, e.g. WAAS, GAGAN, etc.',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['path_id', 'classificationMarking', 'dataMode', 'source', 'spacecraftId'],
  },
  annotations: {
    idempotentHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { id, ...body } = args as any;
  const response = await client.seraDataNavigation.update(id, body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
