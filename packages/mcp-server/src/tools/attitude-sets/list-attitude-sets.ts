// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'attitude_sets',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/attitudeset',
};

export const tool: Tool = {
  name: 'list_attitude_sets',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    $ref: '#/$defs/attitudeset_abridged'\n  },\n  $defs: {\n    attitudeset_abridged: {\n      type: 'object',\n      description: 'AttitudeSet represents a wrapper or collection of Onorbit Attitude \\'points\\' and meta data indicating the specifics of the orientation of an on-orbit object.  Attitude is typically distributed in a flat file containing details of the attitude generation as well as a large collection of individual points at varying time steps. AttitudeSet is analogous to this flat file.',\n      properties: {\n        classificationMarking: {\n          type: 'string',\n          description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n        },\n        dataMode: {\n          type: 'string',\n          description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n          enum: [            'REAL',\n            'TEST',\n            'SIMULATED',\n            'EXERCISE'\n          ]\n        },\n        endTime: {\n          type: 'string',\n          description: 'The end time of the attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single epoch attitude message then endTime should match the startTime.',\n          format: 'date-time'\n        },\n        frame1: {\n          type: 'string',\n          description: 'Reference frame 1 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).'\n        },\n        frame2: {\n          type: 'string',\n          description: 'Reference frame 2 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).'\n        },\n        numPoints: {\n          type: 'integer',\n          description: 'Number of attitude records contained in this set.'\n        },\n        source: {\n          type: 'string',\n          description: 'Source of the data.'\n        },\n        startTime: {\n          type: 'string',\n          description: 'The epoch or start time of the attitude parameter or attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single attitude parameter message then startTime is the epoch.',\n          format: 'date-time'\n        },\n        type: {\n          type: 'string',\n          description: 'The type of attitude message or messages associated with this set.\\n\\nAEM = Attitude Ephemeris Message, specifying the attitude state of a single object at multiple epochs.\\n\\nAPM = Attitude Parameters Message, specifying the attitude state of a single object at a single epoch.'\n        },\n        id: {\n          type: 'string',\n          description: 'Unique identifier of the record, auto-generated by the system.'\n        },\n        createdAt: {\n          type: 'string',\n          description: 'Time the row was created in the database, auto-populated by the system.',\n          format: 'date-time'\n        },\n        createdBy: {\n          type: 'string',\n          description: 'Application user who created the row in the database, auto-populated by the system.'\n        },\n        esId: {\n          type: 'string',\n          description: 'Unique identifier of the parent (positional) Ephemeris Set, if this data is correlated with an Ephemeris.'\n        },\n        eulerRotSeq: {\n          type: 'string',\n          description: 'The rotation sequence of the Euler angles in which attitude reference frame transformation occurs (from left to right). One, two, or three axis rotations are supported and are represented by one, two, or three characters respectively.  Repeated axis rotations are also supported, however, these rotations should not be sequential.  The numeric sequence values correspond to the body angles/rates as follows: 1 - xAngle/xRate, 2 - yAngle/yRate, and 3 - zAngle/zRate.  Valid sequences are: 123, 132, 213, 231, 312, 321, 121, 131, 212, 232, 313, 323, 12, 13, 21, 23, 31, 32, 1, 2, and 3. \\n\\n\\n\\nThe following represent examples of possible rotation sequences:  A single rotation about the Y-axis can be expressed as \\'2\\', a double rotation with X-Z sequence can be expressed as \\'13\\', and a triple rotation with Z-X-Y sequence can be expressed as \\'312\\'.'\n        },\n        idOnOrbit: {\n          type: 'string',\n          description: 'Unique identifier of the on-orbit satellite to which this attitude set applies.'\n        },\n        idSensor: {\n          type: 'string',\n          description: 'Unique identifier of the sensor to which this attitude set applies IF this set is reporting a single sensor orientation.'\n        },\n        interpolator: {\n          type: 'string',\n          description: 'Recommended interpolation method for estimating attitude ephemeris data.'\n        },\n        interpolatorDegree: {\n          type: 'integer',\n          description: 'Recommended polynomial interpolation degree.'\n        },\n        notes: {\n          type: 'string',\n          description: 'Optional notes/comments for this attitude set.'\n        },\n        origin: {\n          type: 'string',\n          description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n        },\n        origNetwork: {\n          type: 'string',\n          description: 'The originating source network on which this record was created, auto-populated by the system.'\n        },\n        origObjectId: {\n          type: 'string',\n          description: 'Optional identifier provided by the record source to indicate the target object of this attitude set. This may be an internal identifier and not necessarily map to a valid satellite number.'\n        },\n        origSensorId: {\n          type: 'string',\n          description: 'Optional identifier provided by the record source to indicate the sensor identifier to which this attitude set applies IF this set is reporting a single sensor orientation. This may be an internal identifier and not necessarily a valid sensor ID.'\n        },\n        precAngleInit: {\n          type: 'number',\n          description: 'Initial precession angle (ECI J2000 frame) in degrees.'\n        },\n        satNo: {\n          type: 'integer',\n          description: 'Satellite/catalog number of the on-orbit object to which this attitude set applies.'\n        },\n        spinAngleInit: {\n          type: 'number',\n          description: 'Initial spin angle (ECI J2000 frame) in degrees.'\n        },\n        stepSize: {\n          type: 'integer',\n          description: 'Attitude ephemeris step size, in seconds. This applies to Attitude Ephemeris Messages (AEM) that employ a fixed step size.'\n        }\n      },\n      required: [        'classificationMarking',\n        'dataMode',\n        'endTime',\n        'frame1',\n        'frame2',\n        'numPoints',\n        'source',\n        'startTime',\n        'type'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      startTime: {
        type: 'string',
        description:
          'The epoch or start time of the attitude parameter or attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single attitude parameter message then startTime is the epoch. (YYYY-MM-DDTHH:MM:SS.ssssssZ)',
        format: 'date-time',
      },
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['startTime'],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { jq_filter, ...body } = args as any;
  const response = await client.attitudeSets.list(body).asResponse();
  return asTextContentResult(await maybeFilter(jq_filter, await response.json()));
};

export default { metadata, tool, handler };
