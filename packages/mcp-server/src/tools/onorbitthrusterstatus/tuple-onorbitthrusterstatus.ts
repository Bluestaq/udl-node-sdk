// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'udl-node-sdk';

export const metadata: Metadata = {
  resource: 'onorbitthrusterstatus',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/onorbitthrusterstatus/tuple',
};

export const tool: Tool = {
  name: 'tuple_onorbitthrusterstatus',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    $ref: '#/$defs/onorbitthrusterstatus_full'\n  },\n  $defs: {\n    onorbitthrusterstatus_full: {\n      type: 'object',\n      description: 'Status information for OnorbitThruster objects.',\n      properties: {\n        classificationMarking: {\n          type: 'string',\n          description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n        },\n        dataMode: {\n          type: 'string',\n          description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n          enum: [            'REAL',\n            'TEST',\n            'SIMULATED',\n            'EXERCISE'\n          ]\n        },\n        idOnorbitThruster: {\n          type: 'string',\n          description: 'ID of the associated OnorbitThruster record. This ID can be used to obtain additional information on an onorbit thruster object using the \\'get  by ID\\' operation (e.g. /udl/onorbitthruster/{id}). For example, the OnorbitThruster object with idOnorbitThruster = abc would be queried as /udl/onorbitthruster/abc.'\n        },\n        source: {\n          type: 'string',\n          description: 'Source of the data.'\n        },\n        statusTime: {\n          type: 'string',\n          description: 'Datetime of the thruster status observation in ISO 8601 UTC datetime format with millisecond precision.',\n          format: 'date-time'\n        },\n        id: {\n          type: 'string',\n          description: 'Unique identifier of the record, auto-generated by the system.'\n        },\n        createdAt: {\n          type: 'string',\n          description: 'Time the row was created in the database, auto-populated by the system.',\n          format: 'date-time'\n        },\n        createdBy: {\n          type: 'string',\n          description: 'Application user who created the row in the database, auto-populated by the system.'\n        },\n        estDeltaV: {\n          type: 'number',\n          description: 'Estimated available delta-velocity for this thruster, in meters per second.'\n        },\n        fuelMass: {\n          type: 'number',\n          description: 'Total fuel mass available for this thruster\\'s type, in kilograms.'\n        },\n        fuelMassUnc: {\n          type: 'number',\n          description: '1-sigma uncertainty of the total fuel mass available for this thruster type, in kilograms.'\n        },\n        isp: {\n          type: 'number',\n          description: 'Specific impulse for this thruster, in seconds.'\n        },\n        maxDeltaV: {\n          type: 'number',\n          description: 'Maximum available delta-velocity for this thruster, in meters per second.'\n        },\n        minDeltaV: {\n          type: 'number',\n          description: 'Minimum available delta-velocity for this thruster, in meters per second.'\n        },\n        name: {\n          type: 'string',\n          description: 'Identifier of this thruster.'\n        },\n        operational: {\n          type: 'boolean',\n          description: 'Flag indicating if this thruster is operational.'\n        },\n        origin: {\n          type: 'string',\n          description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n        },\n        origNetwork: {\n          type: 'string',\n          description: 'The originating source network on which this record was created, auto-populated by the system.'\n        },\n        propMassAvg: {\n          type: 'number',\n          description: 'Average available propellant mass for this thruster\\'s type, in kilograms.'\n        },\n        propMassMax: {\n          type: 'number',\n          description: 'Maximum available propellant mass for this thruster\\'s type, in kilograms.'\n        },\n        propMassMedian: {\n          type: 'number',\n          description: 'Median available propellant mass for this thruster\\'s type, in kilograms.'\n        },\n        propMassMin: {\n          type: 'number',\n          description: 'Minimum available propellant mass for this thruster\\'s type, in kilograms.'\n        },\n        thrustMax: {\n          type: 'number',\n          description: 'Maximum available thrust for this thruster, in newtons.'\n        },\n        totalDeltaV: {\n          type: 'number',\n          description: 'Total delta-velocity available for this thruster\\'s type, in meters per second.'\n        }\n      },\n      required: [        'classificationMarking',\n        'dataMode',\n        'idOnorbitThruster',\n        'source',\n        'statusTime'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      columns: {
        type: 'string',
        description:
          'Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.',
      },
      firstResult: {
        type: 'integer',
      },
      idOnorbitThruster: {
        type: 'string',
        description:
          "(One or more of fields 'idOnorbitThruster, statusTime' are required.) ID of the associated OnorbitThruster record. This ID can be used to obtain additional information on an onorbit thruster object using the 'get  by ID' operation (e.g. /udl/onorbitthruster/{id}). For example, the OnorbitThruster object with idOnorbitThruster = abc would be queried as /udl/onorbitthruster/abc.",
      },
      maxResults: {
        type: 'integer',
      },
      statusTime: {
        type: 'string',
        description:
          "(One or more of fields 'idOnorbitThruster, statusTime' are required.) Datetime of the thruster status observation in ISO 8601 UTC datetime format with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)",
        format: 'date-time',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['columns'],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  return asTextContentResult(await maybeFilter(args, await client.onorbitthrusterstatus.tuple(body)));
};

export default { metadata, tool, handler };
