// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'onorbitthrusterstatus',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/onorbitthrusterstatus/createBulk',
};

export const tool: Tool = {
  name: 'create_bulk_onorbitthrusterstatus',
  description:
    'Service operation intended for initial integration only, to take a list of onorbitthrusterstatus records as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.',
  inputSchema: {
    type: 'object',
    properties: {
      body: {
        type: 'array',
        items: {
          type: 'object',
          description: 'Status information for OnorbitThruster objects.',
          properties: {
            classificationMarking: {
              type: 'string',
              description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
            },
            dataMode: {
              type: 'string',
              description:
                'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
              enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
            },
            idOnorbitThruster: {
              type: 'string',
              description:
                "ID of the associated OnorbitThruster record. This ID can be used to obtain additional information on an onorbit thruster object using the 'get  by ID' operation (e.g. /udl/onorbitthruster/{id}). For example, the OnorbitThruster object with idOnorbitThruster = abc would be queried as /udl/onorbitthruster/abc.",
            },
            source: {
              type: 'string',
              description: 'Source of the data.',
            },
            statusTime: {
              type: 'string',
              description:
                'Datetime of the thruster status observation in ISO 8601 UTC datetime format with millisecond precision.',
              format: 'date-time',
            },
            id: {
              type: 'string',
              description: 'Unique identifier of the record, auto-generated by the system.',
            },
            createdAt: {
              type: 'string',
              description: 'Time the row was created in the database, auto-populated by the system.',
              format: 'date-time',
            },
            createdBy: {
              type: 'string',
              description:
                'Application user who created the row in the database, auto-populated by the system.',
            },
            estDeltaV: {
              type: 'number',
              description: 'Estimated available delta-velocity for this thruster, in meters per second.',
            },
            fuelMass: {
              type: 'number',
              description: "Total fuel mass available for this thruster's type, in kilograms.",
            },
            fuelMassUnc: {
              type: 'number',
              description:
                '1-sigma uncertainty of the total fuel mass available for this thruster type, in kilograms.',
            },
            isp: {
              type: 'number',
              description: 'Specific impulse for this thruster, in seconds.',
            },
            maxDeltaV: {
              type: 'number',
              description: 'Maximum available delta-velocity for this thruster, in meters per second.',
            },
            minDeltaV: {
              type: 'number',
              description: 'Minimum available delta-velocity for this thruster, in meters per second.',
            },
            name: {
              type: 'string',
              description: 'Identifier of this thruster.',
            },
            operational: {
              type: 'boolean',
              description: 'Flag indicating if this thruster is operational.',
            },
            origin: {
              type: 'string',
              description:
                'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
            },
            origNetwork: {
              type: 'string',
              description:
                'The originating source network on which this record was created, auto-populated by the system.',
            },
            propMassAvg: {
              type: 'number',
              description: "Average available propellant mass for this thruster's type, in kilograms.",
            },
            propMassMax: {
              type: 'number',
              description: "Maximum available propellant mass for this thruster's type, in kilograms.",
            },
            propMassMedian: {
              type: 'number',
              description: "Median available propellant mass for this thruster's type, in kilograms.",
            },
            propMassMin: {
              type: 'number',
              description: "Minimum available propellant mass for this thruster's type, in kilograms.",
            },
            thrustMax: {
              type: 'number',
              description: 'Maximum available thrust for this thruster, in newtons.',
            },
            totalDeltaV: {
              type: 'number',
              description: "Total delta-velocity available for this thruster's type, in meters per second.",
            },
          },
          required: ['classificationMarking', 'dataMode', 'idOnorbitThruster', 'source', 'statusTime'],
        },
      },
    },
  },
};

export const handler = (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  return client.onorbitthrusterstatus.createBulk(body);
};

export default { metadata, tool, handler };
