// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'geo_status',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/geostatus',
};

export const tool: Tool = {
  name: 'list_geo_status',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    type: 'object',\n    description: 'Information for the specified on-orbit GEO spacecraft, including status, expected longitude limits, and drift rates.',\n    properties: {\n      classificationMarking: {\n        type: 'string',\n        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n      },\n      dataMode: {\n        type: 'string',\n        description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n        enum: [          'REAL',\n          'TEST',\n          'SIMULATED',\n          'EXERCISE'\n        ]\n      },\n      source: {\n        type: 'string',\n        description: 'Source of the data.'\n      },\n      id: {\n        type: 'string',\n        description: 'Unique identifier of the record, auto-generated by the system.'\n      },\n      confidenceLevel: {\n        type: 'string',\n        description: 'Indicates the confidence level in the entry.  (Low, Medium, High).'\n      },\n      createdAt: {\n        type: 'string',\n        description: 'Time the row was created in the database, auto-populated by the system.',\n        format: 'date-time'\n      },\n      createdBy: {\n        type: 'string',\n        description: 'Application user who created the row in the database, auto-populated by the system.'\n      },\n      idOnOrbit: {\n        type: 'string',\n        description: 'Unique identifier of the object on-orbit object.'\n      },\n      longitudeMax: {\n        type: 'number',\n        description: 'Maximum longitude for this object. WGS-84 longitude of the spacecraft position, in degrees. 0 to 360 degrees.'\n      },\n      longitudeMin: {\n        type: 'number',\n        description: 'Minimum longitude for this object.  WGS-84 longitude of the spacecraft position, in degrees. 0 to 360 degrees.'\n      },\n      longitudeRate: {\n        type: 'number',\n        description: 'Corrective or overriding long term trend for longitudinal change in degrees/day.'\n      },\n      lostFlag: {\n        type: 'boolean',\n        description: 'Lost space object indicator.  (True or False).'\n      },\n      objectStatus: {\n        type: 'string',\n        description: 'Space object status.  (Active, Dead, Unknown).'\n      },\n      origin: {\n        type: 'string',\n        description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n      },\n      origNetwork: {\n        type: 'string',\n        description: 'The originating source network on which this record was created, auto-populated by the system.'\n      },\n      origObjectId: {\n        type: 'string',\n        description: 'Optional identifier provided to indicate the target onorbit. This may be an internal identifier and not necessarily map to a valid satellite number.'\n      },\n      planeChangeStatus: {\n        type: 'string',\n        description: 'Geosynchronous plane changing status.  (Current, Never, Former, Future).'\n      },\n      rawFileURI: {\n        type: 'string',\n        description: 'Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.'\n      },\n      relativeEnergy: {\n        type: 'number',\n        description: 'Objects displacement from geostationary orbit in deg^2/day^2.'\n      },\n      satNo: {\n        type: 'integer',\n        description: 'Satellite/catalog number of the target on-orbit object.'\n      },\n      sc: {\n        type: 'number',\n        description: 'Sine of inclination times the cosine of right ascension.'\n      },\n      semiAnnualCorrFlag: {\n        type: 'boolean',\n        description: 'Semi-annual correction.  (True or False).'\n      },\n      ss: {\n        type: 'number',\n        description: 'Sine of inclination times the sine of right ascension.'\n      },\n      troughType: {\n        type: 'string',\n        description: 'Indicates the trough (gravity well) or drift direction of a space object:\\n\\n255 - Influenced by 255° longitude trough. \\n\\n75 - Influenced by 75° longitude trough. \\n\\nBoth - Oscillating between both 255 and 75 troughs. \\n\\nEast - Drifting eastward; large relative energy and a period less than 1436.1 minutes. \\n\\nWest - Drifting westward; large relative energy and a period greater than 1436.2 minutes.'\n      }\n    },\n    required: [      'classificationMarking',\n      'dataMode',\n      'source'\n    ]\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      createdAt: {
        type: 'string',
        description:
          'Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)',
        format: 'date',
      },
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.geoStatus.list(body).asResponse();
  return asTextContentResult(await maybeFilter(args, await response.json()));
};

export default { metadata, tool, handler };
