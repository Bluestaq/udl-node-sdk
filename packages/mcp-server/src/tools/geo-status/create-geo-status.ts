// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'geo_status',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/geostatus',
};

export const tool: Tool = {
  name: 'create_geo_status',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to take a single GEOStatus record as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {}\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      id: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      confidenceLevel: {
        type: 'string',
        description: 'Indicates the confidence level in the entry.  (Low, Medium, High).',
      },
      longitudeMax: {
        type: 'number',
        description:
          'Maximum longitude for this object. WGS-84 longitude of the spacecraft position, in degrees. 0 to 360 degrees.',
      },
      longitudeMin: {
        type: 'number',
        description:
          'Minimum longitude for this object.  WGS-84 longitude of the spacecraft position, in degrees. 0 to 360 degrees.',
      },
      longitudeRate: {
        type: 'number',
        description: 'Corrective or overriding long term trend for longitudinal change in degrees/day.',
      },
      lostFlag: {
        type: 'boolean',
        description: 'Lost space object indicator.  (True or False).',
      },
      objectStatus: {
        type: 'string',
        description: 'Space object status.  (Active, Dead, Unknown).',
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
      origObjectId: {
        type: 'string',
        description:
          'Optional identifier provided to indicate the target onorbit. This may be an internal identifier and not necessarily map to a valid satellite number.',
      },
      planeChangeStatus: {
        type: 'string',
        description: 'Geosynchronous plane changing status.  (Current, Never, Former, Future).',
      },
      rawFileURI: {
        type: 'string',
        description:
          'Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.',
      },
      relativeEnergy: {
        type: 'number',
        description: 'Objects displacement from geostationary orbit in deg^2/day^2.',
      },
      satNo: {
        type: 'integer',
        description: 'Satellite/catalog number of the target on-orbit object.',
      },
      sc: {
        type: 'number',
        description: 'Sine of inclination times the cosine of right ascension.',
      },
      semiAnnualCorrFlag: {
        type: 'boolean',
        description: 'Semi-annual correction.  (True or False).',
      },
      ss: {
        type: 'number',
        description: 'Sine of inclination times the sine of right ascension.',
      },
      troughType: {
        type: 'string',
        description:
          'Indicates the trough (gravity well) or drift direction of a space object:\n\n255 - Influenced by 255° longitude trough. \n\n75 - Influenced by 75° longitude trough. \n\nBoth - Oscillating between both 255 and 75 troughs. \n\nEast - Drifting eastward; large relative energy and a period less than 1436.1 minutes. \n\nWest - Drifting westward; large relative energy and a period greater than 1436.2 minutes.',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['classificationMarking', 'dataMode', 'source'],
  },
  annotations: {},
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.geoStatus.create(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
