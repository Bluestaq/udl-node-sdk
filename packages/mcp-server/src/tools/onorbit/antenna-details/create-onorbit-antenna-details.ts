// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../../';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'onorbit.antenna_details',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/antennadetails',
};

export const tool: Tool = {
  name: 'create_onorbit_antenna_details',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to take a single AntennaDetails as a POST body and ingest into the database. An antenna may have multiple details records compiled by various sources. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {}\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      idAntenna: {
        type: 'string',
        description: 'Unique identifier of the parent Antenna.',
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      id: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      beamForming: {
        type: 'boolean',
        description: 'Boolean indicating if this is a beam forming antenna.',
      },
      beamwidth: {
        type: 'number',
        description:
          'Array of angles between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.',
      },
      description: {
        type: 'string',
        description: 'Antenna description.',
      },
      diameter: {
        type: 'number',
        description: 'Antenna diameter in meters.',
      },
      endFrequency: {
        type: 'number',
        description: 'Antenna end of frequency range in Mhz.',
      },
      gain: {
        type: 'number',
        description: 'Antenna maximum gain in dBi.',
      },
      gainTolerance: {
        type: 'number',
        description: 'Antenna gain tolerance in dB.',
      },
      manufacturerOrgId: {
        type: 'string',
        description: 'ID of the organization that manufactures the antenna.',
      },
      mode: {
        type: 'string',
        description: 'Antenna mode (e.g. TX,RX).',
        enum: ['TX', 'RX'],
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
      polarization: {
        type: 'number',
        description: 'Antenna polarization in degrees.',
      },
      position: {
        type: 'string',
        description: 'Antenna position (e.g. Top, Nadir, Side).',
      },
      size: {
        type: 'array',
        description:
          'Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.',
        items: {
          type: 'number',
        },
      },
      startFrequency: {
        type: 'number',
        description: 'Antenna start of frequency range in Mhz.',
      },
      steerable: {
        type: 'boolean',
        description: 'Boolean indicating if this antenna is steerable.',
      },
      tags: {
        type: 'array',
        description:
          'Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.',
        items: {
          type: 'string',
        },
      },
      type: {
        type: 'string',
        description:
          'Type of antenna (e.g. Reflector, Double Reflector, Shaped Reflector, Horn, Parabolic, etc.).',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.onorbit.antennaDetails.create(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
