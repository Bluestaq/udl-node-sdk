// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'onorbit',
  operation: 'write',
  tags: [],
  httpMethod: 'put',
  httpPath: '/udl/onorbit/{id}',
};

export const tool: Tool = {
  name: 'update_onorbit',
  description:
    'Service operation to update a single OnOrbit object. A specific role is required to perform this service operation. Please contact the UDL team for assistance.',
  inputSchema: {
    type: 'object',
    properties: {
      id: {
        type: 'string',
      },
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      satNo: {
        type: 'integer',
        description: 'Satellite/Catalog number of the target on-orbit object.',
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      altName: {
        type: 'string',
        description: 'Alternate name of the on-orbit object.',
      },
      category: {
        type: 'string',
        description:
          'Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic, Heliocentric, Interplanetary, Lagrangian, Docked).',
        enum: [
          'Unknown',
          'On-Orbit',
          'Decayed',
          'Cataloged Without State',
          'Launch Nominal',
          'Analyst Satellite',
          'Cislunar',
          'Lunar',
          'Hyperbolic',
          'Heliocentric',
          'Interplanetary',
          'Lagrangian',
          'Docked',
        ],
      },
      commonName: {
        type: 'string',
        description: 'Common name of the on-orbit object.',
      },
      constellation: {
        type: 'string',
        description: 'Constellation to which this satellite belongs.',
      },
      countryCode: {
        type: 'string',
        description:
          'The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.',
      },
      decayDate: {
        type: 'string',
        description: 'Date of decay.',
        format: 'date-time',
      },
      idOnOrbit: {
        type: 'string',
        description:
          'For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites, auto-generated by the system.',
      },
      intlDes: {
        type: 'string',
        description:
          'International Designator, typically of the format YYYYLLLAAA, where YYYY is the launch year, LLL is the sequential launch number of that year, and AAA is an optional launch piece designator for the launch.',
      },
      launchDate: {
        type: 'string',
        description: 'Date of launch.',
        format: 'date',
      },
      launchSiteId: {
        type: 'string',
        description: 'Id of the associated launchSite entity.',
      },
      lifetimeYears: {
        type: 'integer',
        description: 'Estimated lifetime of the on-orbit payload, if known.',
      },
      missionNumber: {
        type: 'string',
        description: 'Mission number of the on-orbit object.',
      },
      objectType: {
        type: 'string',
        description: 'Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED, UNKNOWN.',
        enum: ['ROCKET BODY', 'DEBRIS', 'PAYLOAD', 'PLATFORM', 'MANNED', 'UNKNOWN'],
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
    },
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { id, ...body } = args as any;
  const response = await client.onorbit.update(id, body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
