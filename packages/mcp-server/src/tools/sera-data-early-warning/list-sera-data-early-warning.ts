// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'sera_data_early_warning',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/seradataearlywarning',
};

export const tool: Tool = {
  name: 'list_sera_data_early_warning',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    type: 'object',\n    description: 'Details for an early warning payload from  Seradata.',\n    properties: {\n      classificationMarking: {\n        type: 'string',\n        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n      },\n      dataMode: {\n        type: 'string',\n        description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n        enum: [          'REAL',\n          'TEST',\n          'SIMULATED',\n          'EXERCISE'\n        ]\n      },\n      source: {\n        type: 'string',\n        description: 'Source of the data.'\n      },\n      spacecraftId: {\n        type: 'string',\n        description: 'Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).'\n      },\n      id: {\n        type: 'string',\n        description: 'Unique identifier of the record, auto-generated by the system.'\n      },\n      bestResolution: {\n        type: 'number',\n        description: 'Best resolution for this IR in meters.'\n      },\n      createdAt: {\n        type: 'string',\n        description: 'Time the row was created in the database, auto-populated by the system.',\n        format: 'date-time'\n      },\n      createdBy: {\n        type: 'string',\n        description: 'Application user who created the row in the database, auto-populated by the system.'\n      },\n      earthPointing: {\n        type: 'boolean',\n        description: 'Is the sensor Earth Pointing.'\n      },\n      frequencyLimits: {\n        type: 'string',\n        description: 'Frequency Limits for this IR.'\n      },\n      groundStationLocations: {\n        type: 'string',\n        description: 'Ground Station Locations for this IR.'\n      },\n      groundStations: {\n        type: 'string',\n        description: 'Ground Station info for this IR.'\n      },\n      hostedForCompanyOrgId: {\n        type: 'string',\n        description: 'Hosted for company/Organization Id.'\n      },\n      idIR: {\n        type: 'string',\n        description: 'UUID of the parent IR record.'\n      },\n      manufacturerOrgId: {\n        type: 'string',\n        description: 'Manufacturer Organization Id.'\n      },\n      missileLaunchPhaseDetectionAbility: {\n        type: 'string',\n        description: 'Missile Launch Phase Detection Ability.'\n      },\n      name: {\n        type: 'string',\n        description: 'Sensor name from Seradata, e.g. Infra red telescope, Schmidt Telescope, etc.'\n      },\n      origin: {\n        type: 'string',\n        description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n      },\n      origNetwork: {\n        type: 'string',\n        description: 'The originating source network on which this record was created, auto-populated by the system.'\n      },\n      partnerSpacecraftId: {\n        type: 'string',\n        description: 'Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).'\n      },\n      payloadNotes: {\n        type: 'string',\n        description: 'Payload notes.'\n      },\n      spectralBands: {\n        type: 'string',\n        description: 'Spectral Bands, e.g. Infra-Red.'\n      }\n    },\n    required: [      'classificationMarking',\n      'dataMode',\n      'source',\n      'spacecraftId'\n    ]\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.seraDataEarlyWarning.list(body).asResponse();
  return asTextContentResult(await maybeFilter(args, await response.json()));
};

export default { metadata, tool, handler };
