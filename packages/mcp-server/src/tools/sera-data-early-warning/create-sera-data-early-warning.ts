// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'sera_data_early_warning',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/seradataearlywarning',
};

export const tool: Tool = {
  name: 'create_sera_data_early_warning',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to take a single SeradataEarlyWarning as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {}\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      spacecraftId: {
        type: 'string',
        description: 'Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).',
      },
      id: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      bestResolution: {
        type: 'number',
        description: 'Best resolution for this IR in meters.',
      },
      earthPointing: {
        type: 'boolean',
        description: 'Is the sensor Earth Pointing.',
      },
      frequencyLimits: {
        type: 'string',
        description: 'Frequency Limits for this IR.',
      },
      groundStationLocations: {
        type: 'string',
        description: 'Ground Station Locations for this IR.',
      },
      groundStations: {
        type: 'string',
        description: 'Ground Station info for this IR.',
      },
      hostedForCompanyOrgId: {
        type: 'string',
        description: 'Hosted for company/Organization Id.',
      },
      idIR: {
        type: 'string',
        description: 'UUID of the parent IR record.',
      },
      manufacturerOrgId: {
        type: 'string',
        description: 'Manufacturer Organization Id.',
      },
      missileLaunchPhaseDetectionAbility: {
        type: 'string',
        description: 'Missile Launch Phase Detection Ability.',
      },
      name: {
        type: 'string',
        description: 'Sensor name from Seradata, e.g. Infra red telescope, Schmidt Telescope, etc.',
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
      partnerSpacecraftId: {
        type: 'string',
        description: 'Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).',
      },
      payloadNotes: {
        type: 'string',
        description: 'Payload notes.',
      },
      spectralBands: {
        type: 'string',
        description: 'Spectral Bands, e.g. Infra-Red.',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['classificationMarking', 'dataMode', 'source', 'spacecraftId'],
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.seraDataEarlyWarning.create(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
