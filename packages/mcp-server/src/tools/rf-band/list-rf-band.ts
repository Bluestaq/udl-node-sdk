// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'rf_band',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/rfband',
};

export const tool: Tool = {
  name: 'list_rf_band',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    $ref: '#/$defs/rf_band_list_response'\n  },\n  $defs: {\n    rf_band_list_response: {\n      type: 'object',\n      description: 'Details on a particular Radio Frequency (RF) band, also known as a carrier, which may be in use by any type of Entity for communications or operations.',\n      properties: {\n        classificationMarking: {\n          type: 'string',\n          description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n        },\n        dataMode: {\n          type: 'string',\n          description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n          enum: [            'REAL',\n            'TEST',\n            'SIMULATED',\n            'EXERCISE'\n          ]\n        },\n        idEntity: {\n          type: 'string',\n          description: 'Unique identifier of the parent Entity which uses this band.'\n        },\n        name: {\n          type: 'string',\n          description: 'RF Band name.'\n        },\n        source: {\n          type: 'string',\n          description: 'Source of the data.'\n        },\n        id: {\n          type: 'string',\n          description: 'Unique identifier of the record, auto-generated by the system.'\n        },\n        band: {\n          type: 'string',\n          description: 'Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.'\n        },\n        bandwidth: {\n          type: 'number',\n          description: 'RF Band frequency range bandwidth in megahertz.'\n        },\n        bandwidthSettings: {\n          type: 'array',\n          description: 'Array of frequency range bandwidth settings, in megahertz for this RFBand. If this array is specified then it must  be the same size as the frequencySettings array. A null value may be used for one or more of the frequencies in the frequencySettings array if there is no corresponding value for a given frequency.',\n          items: {\n            type: 'number'\n          }\n        },\n        beamwidth: {\n          type: 'number',\n          description: 'Angle between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.'\n        },\n        beamwidthSettings: {\n          type: 'array',\n          description: 'Array of beamwidth settings, in degrees for this RFBand. If this array is specified then it must  be the same size as the frequencySettings array. A null value may be used for one or more of the frequencies in the frequencySettings array if there is no corresponding value for a given frequency.',\n          items: {\n            type: 'number'\n          }\n        },\n        centerFreq: {\n          type: 'number',\n          description: 'Center frequency of RF frequency range, if applicable, in megahertz.'\n        },\n        createdAt: {\n          type: 'string',\n          description: 'Time the row was created in the database, auto-populated by the system.',\n          format: 'date-time'\n        },\n        createdBy: {\n          type: 'string',\n          description: 'Application user who created the row in the database, auto-populated by the system.'\n        },\n        delaySettings: {\n          type: 'array',\n          description: 'Array of delay settings, in seconds for this RFBand. If this array is specified then it must  be the same size as the frequencySettings array. A null value may be used for one or more of the frequencies in the frequencySettings array if there is no corresponding value for a given frequency.',\n          items: {\n            type: 'number'\n          }\n        },\n        edgeGain: {\n          type: 'number',\n          description: 'RF Range edge gain, in decibel relative to isotrope.'\n        },\n        eirp: {\n          type: 'number',\n          description: 'EIRP is defined as the RMS power input in decibel watts required to a lossless half-wave dipole antenna to give the same maximum power density far from the antenna as the actual transmitter. It is equal to the power input to the transmitter\\'s antenna multiplied by the antenna gain relative to a half-wave dipole. Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the main lobe) of its radiation pattern.'\n        },\n        erp: {\n          type: 'number',\n          description: 'Effective Radiated Power (ERP) is the total power in decibel watts radiated by an actual antenna relative to a half-wave dipole rather than a theoretical isotropic antenna. A half-wave dipole has a gain of 2.15 dB compared to an isotropic antenna. EIRP(dB) = ERP (dB)+2.15 dB or EIRP (W) = 1.64*ERP(W). Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the main lobe) of its radiation pattern.'\n        },\n        freqMax: {\n          type: 'number',\n          description: 'End/maximum of transmit RF frequency range, if applicable, in megahertz.'\n        },\n        freqMin: {\n          type: 'number',\n          description: 'Start/minimum of transmit RF frequency range, if applicable, in megahertz.'\n        },\n        frequencySettings: {\n          type: 'array',\n          description: 'Array of frequency settings, in megahertz for this RFBand. This array and the settings arrays must match in size.',\n          items: {\n            type: 'number'\n          }\n        },\n        gainSettings: {\n          type: 'array',\n          description: 'Array of gain settings, in decibels for this RFBand. If this array is specified then it must  be the same size as the frequencySettings array. A null value may be used for one or more of the frequencies in the frequencySettings array if there is no corresponding value for a given frequency.',\n          items: {\n            type: 'number'\n          }\n        },\n        mode: {\n          type: 'string',\n          description: 'RF Band mode (e.g. TX, RX).',\n          enum: [            'TX',\n            'RX'\n          ]\n        },\n        noiseSettings: {\n          type: 'array',\n          description: 'Array of signal noise settings, in decibels for this RFBand. If this array is specified then it must  be the same size as the frequencySettings array. A null value may be used for one or more of the frequencies in the frequencySettings array if there is no corresponding value for a given frequency.',\n          items: {\n            type: 'number'\n          }\n        },\n        origin: {\n          type: 'string',\n          description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n        },\n        origNetwork: {\n          type: 'string',\n          description: 'The originating source network on which this record was created, auto-populated by the system.'\n        },\n        peakGain: {\n          type: 'number',\n          description: 'RF Range maximum gain, in decibel relative to isotrope.'\n        },\n        polarization: {\n          type: 'string',\n          description: 'Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth\\'s surface, V - (Vertically Polarized) Parallel to Earth\\'s surface, L - (Left Hand Circularly Polarized) Rotating left relative to the Earth\\'s surface, R - (Right Hand Circularly Polarized) Rotating right relative to the Earth\\'s surface.',\n          enum: [            'H',\n            'V',\n            'R',\n            'L'\n          ]\n        },\n        purpose: {\n          type: 'string',\n          description: 'Purpose or use of the RF Band -- COMM = communications, TTC = Telemetry/Tracking/Control, OPS = Operations, OTHER = Other.',\n          enum: [            'COMM',\n            'TTC',\n            'OPS',\n            'OTHER'\n          ]\n        }\n      },\n      required: [        'classificationMarking',\n        'dataMode',\n        'idEntity',\n        'name',\n        'source'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: [],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { jq_filter, ...body } = args as any;
  const response = await client.rfBand.list(body).asResponse();
  return asTextContentResult(await maybeFilter(jq_filter, await response.json()));
};

export default { metadata, tool, handler };
