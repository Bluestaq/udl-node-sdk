// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'video',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/video/getStreamFile',
};

export const tool: Tool = {
  name: 'get_stream_file_video',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to retrieve a static pre-configured SRT or UDP streamfile URL for given stream name and source.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  description: 'The table captures metadata associated with the published videos in UDL.',\n  properties: {\n    classificationMarking: {\n      type: 'string',\n      description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n    },\n    dataMode: {\n      type: 'string',\n      description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n      enum: [        'REAL',\n        'TEST',\n        'SIMULATED',\n        'EXERCISE'\n      ]\n    },\n    description: {\n      type: 'string',\n      description: 'Description/notes associated with the video stream.'\n    },\n    name: {\n      type: 'string',\n      description: 'Name of the video stream.'\n    },\n    source: {\n      type: 'string',\n      description: 'Source of the data.'\n    },\n    tokenValue: {\n      type: 'string',\n      description: 'Video Publisher Token.'\n    },\n    id: {\n      type: 'string',\n      description: 'Unique identifier of the record, auto-generated by the system.'\n    },\n    createdAt: {\n      type: 'string',\n      description: 'Time the row was created in the database.',\n      format: 'date-time'\n    },\n    createdBy: {\n      type: 'string',\n      description: 'Application user who created the row in the database, auto-populated by the system.'\n    },\n    origin: {\n      type: 'string'\n    },\n    origNetwork: {\n      type: 'string',\n      description: 'The originating source network on which this record was created, auto-populated by the system.'\n    },\n    startTime: {\n      type: 'string',\n      description: 'The timestamp when the stream is available from. The unit is ISO 8601 format.',\n      format: 'date-time'\n    },\n    stopTime: {\n      type: 'string',\n      description: 'The timestamp when the stream is available until. The unit is ISO 8601 format.',\n      format: 'date-time'\n    },\n    videoUrls: {\n      type: 'array',\n      description: 'Video Streaming Support URLs.',\n      items: {\n        type: 'string'\n      }\n    }\n  },\n  required: [    'classificationMarking',\n    'dataMode',\n    'description',\n    'name',\n    'source',\n    'tokenValue'\n  ]\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      sourceName: {
        type: 'string',
        description: 'The video source name.',
      },
      streamName: {
        type: 'string',
        description: 'The video stream name.',
      },
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['sourceName', 'streamName'],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { jq_filter, ...body } = args as any;
  return asTextContentResult(await maybeFilter(jq_filter, await client.video.getStreamFile(body)));
};

export default { metadata, tool, handler };
