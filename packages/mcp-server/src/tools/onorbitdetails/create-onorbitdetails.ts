// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'onorbitdetails',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/onorbitdetails',
};

export const tool: Tool = {
  name: 'create_onorbitdetails',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to take a single OnorbitDetails as a POST body and ingest into the database. An OnorbitDetails is a collection of additional characteristics on an on-orbit object. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {}\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      idOnOrbit: {
        type: 'string',
        description: 'UUID of the parent Onorbit record.',
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      id: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      additionalMass: {
        type: 'number',
        description: 'Mass of fuel and disposables at launch time in kilograms.',
      },
      adeptRadius: {
        type: 'number',
        description:
          'The radius used for long-term debris environment projection analyses that is not as conservative as COLA Radius, in meters.',
      },
      bolDeltaV: {
        type: 'number',
        description: 'The total beginning of life delta V of the spacecraft, in meters per second.',
      },
      bolFuelMass: {
        type: 'number',
        description: 'Spacecraft beginning of life fuel mass, in orbit, in kilograms.',
      },
      busCrossSection: {
        type: 'number',
        description: 'Average cross sectional area of the bus in meters squared.',
      },
      busType: {
        type: 'string',
        description: 'Type of the bus on the spacecraft.',
      },
      colaRadius: {
        type: 'number',
        description:
          'Maximum dimension of the box circumscribing the spacecraft (d = sqrt(a*a + b*b + c*c) where a is the tip-to-tip dimension, b and c are perpendicular to that.) in meters.',
      },
      crossSection: {
        type: 'number',
        description: 'Average cross sectional area in meters squared.',
      },
      currentMass: {
        type: 'number',
        description: 'The estimated total current mass of the spacecraft, in kilograms.',
      },
      deltaVUnc: {
        type: 'number',
        description: 'The 1-sigma uncertainty of the total spacecraft delta V, in meters per second.',
      },
      depEstMasses: {
        type: 'array',
        description:
          'Array of the estimated mass of each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.',
        items: {
          type: 'number',
        },
      },
      depMassUncs: {
        type: 'array',
        description:
          'Array of the 1-sigma uncertainty of the mass for each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.',
        items: {
          type: 'number',
        },
      },
      depNames: {
        type: 'array',
        description:
          'Array of satellite deployable objects. Must contain the same number of elements as the value of numDeployable.',
        items: {
          type: 'string',
        },
      },
      driftRate: {
        type: 'number',
        description: 'GEO drift rate, if applicable in degrees per day.',
      },
      dryMass: {
        type: 'number',
        description: 'Spacecraft dry mass (without fuel or disposables) in kilograms.',
      },
      estDeltaVDuration: {
        type: 'number',
        description: 'Estimated maximum burn duration for the object, in seconds.',
      },
      fuelRemaining: {
        type: 'number',
        description: 'Estimated remaining fuel for the object in kilograms.',
      },
      geoSlot: {
        type: 'number',
        description:
          'GEO slot if applicable, in degrees. -180 (West of Prime Meridian) to 180 degrees (East of Prime Meridian). Prime Meridian is 0.',
      },
      lastObSource: {
        type: 'string',
        description: 'The name of the source who last provided an observation for this idOnOrbit.',
      },
      lastObTime: {
        type: 'string',
        description:
          'Time of last reported observation for this object in ISO 8601 UTC with microsecond precision.',
        format: 'date-time',
      },
      launchMass: {
        type: 'number',
        description: 'Nominal mass of spacecraft and fuel at launch time, in kilograms.',
      },
      launchMassMax: {
        type: 'number',
        description: 'Maximum (estimated) mass of spacecraft and fuel at launch time, in kilograms.',
      },
      launchMassMin: {
        type: 'number',
        description: 'Minimum (estimated) mass of spacecraft and fuel at launch time, in kilograms.',
      },
      maneuverable: {
        type: 'boolean',
        description:
          'Boolean indicating whether a spacecraft is maneuverable. Note that a spacecraft may have propulsion capability but may not be maneuverable due to lack of fuel, anomalous condition, or other operational constraints.',
      },
      maxDeltaV: {
        type: 'number',
        description: 'Maximum delta V available for this on-orbit spacecraft, in meters per second.',
      },
      maxRadius: {
        type: 'number',
        description:
          'Maximum dimension across the spacecraft (e.g., tip-to-tip across the solar panel arrays) in meters.',
      },
      missionTypes: {
        type: 'array',
        description:
          'Array of the type of missions the spacecraft performs. Must contain the same number of elements as the value of numMission.',
        items: {
          type: 'string',
        },
      },
      numDeployable: {
        type: 'integer',
        description: 'The number of sub-satellites or deployable objects on the spacecraft.',
      },
      numMission: {
        type: 'integer',
        description: 'The number of distinct missions the spacecraft performs.',
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
      rcs: {
        type: 'number',
        description: 'Current/latest radar cross section in meters squared.',
      },
      rcsMax: {
        type: 'number',
        description: 'Maximum radar cross section in meters squared.',
      },
      rcsMean: {
        type: 'number',
        description: 'Mean radar cross section in meters squared.',
      },
      rcsMin: {
        type: 'number',
        description: 'Minimum radar cross section in meters squared.',
      },
      refSource: {
        type: 'string',
        description: 'The reference source, sources, or URL from which the data in this record was obtained.',
      },
      solarArrayArea: {
        type: 'number',
        description: 'Spacecraft deployed area of solar array in meters squared.',
      },
      totalMassUnc: {
        type: 'number',
        description: 'The 1-sigma uncertainty of the total spacecraft mass, in kilograms.',
      },
      vismag: {
        type: 'number',
        description: 'Current/latest visual magnitude in M.',
      },
      vismagMax: {
        type: 'number',
        description: 'Maximum visual magnitude in M.',
      },
      vismagMean: {
        type: 'number',
        description: 'Mean visual magnitude in M.',
      },
      vismagMin: {
        type: 'number',
        description: 'Minimum visual magnitude in M.',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['classificationMarking', 'dataMode', 'idOnOrbit', 'source'],
  },
  annotations: {},
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.onorbitdetails.create(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
