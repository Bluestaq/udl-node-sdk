// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'udl-node-sdk';

export const metadata: Metadata = {
  resource: 'onorbitdetails',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/onorbitdetails',
};

export const tool: Tool = {
  name: 'list_onorbitdetails',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    type: 'object',\n    description: 'Contains details of the OnOrbit object.',\n    properties: {\n      classificationMarking: {\n        type: 'string',\n        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n      },\n      dataMode: {\n        type: 'string',\n        description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n        enum: [          'REAL',\n          'TEST',\n          'SIMULATED',\n          'EXERCISE'\n        ]\n      },\n      idOnOrbit: {\n        type: 'string',\n        description: 'UUID of the parent Onorbit record.'\n      },\n      source: {\n        type: 'string',\n        description: 'Source of the data.'\n      },\n      id: {\n        type: 'string',\n        description: 'Unique identifier of the record, auto-generated by the system.'\n      },\n      additionalMass: {\n        type: 'number',\n        description: 'Mass of fuel and disposables at launch time in kilograms.'\n      },\n      adeptRadius: {\n        type: 'number',\n        description: 'The radius used for long-term debris environment projection analyses that is not as conservative as COLA Radius, in meters.'\n      },\n      bolDeltaV: {\n        type: 'number',\n        description: 'The total beginning of life delta V of the spacecraft, in meters per second.'\n      },\n      bolFuelMass: {\n        type: 'number',\n        description: 'Spacecraft beginning of life fuel mass, in orbit, in kilograms.'\n      },\n      busCrossSection: {\n        type: 'number',\n        description: 'Average cross sectional area of the bus in meters squared.'\n      },\n      busType: {\n        type: 'string',\n        description: 'Type of the bus on the spacecraft.'\n      },\n      colaRadius: {\n        type: 'number',\n        description: 'Maximum dimension of the box circumscribing the spacecraft (d = sqrt(a*a + b*b + c*c) where a is the tip-to-tip dimension, b and c are perpendicular to that.) in meters.'\n      },\n      createdAt: {\n        type: 'string',\n        description: 'Time the row was created in the database, auto-populated by the system.',\n        format: 'date-time'\n      },\n      createdBy: {\n        type: 'string',\n        description: 'Application user who created the row in the database, auto-populated by the system.'\n      },\n      crossSection: {\n        type: 'number',\n        description: 'Average cross sectional area in meters squared.'\n      },\n      currentMass: {\n        type: 'number',\n        description: 'The estimated total current mass of the spacecraft, in kilograms.'\n      },\n      deltaVUnc: {\n        type: 'number',\n        description: 'The 1-sigma uncertainty of the total spacecraft delta V, in meters per second.'\n      },\n      depEstMasses: {\n        type: 'array',\n        description: 'Array of the estimated mass of each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.',\n        items: {\n          type: 'number'\n        }\n      },\n      depMassUncs: {\n        type: 'array',\n        description: 'Array of the 1-sigma uncertainty of the mass for each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.',\n        items: {\n          type: 'number'\n        }\n      },\n      depNames: {\n        type: 'array',\n        description: 'Array of satellite deployable objects. Must contain the same number of elements as the value of numDeployable.',\n        items: {\n          type: 'string'\n        }\n      },\n      driftRate: {\n        type: 'number',\n        description: 'GEO drift rate, if applicable in degrees per day.'\n      },\n      dryMass: {\n        type: 'number',\n        description: 'Spacecraft dry mass (without fuel or disposables) in kilograms.'\n      },\n      estDeltaVDuration: {\n        type: 'number',\n        description: 'Estimated maximum burn duration for the object, in seconds.'\n      },\n      fuelRemaining: {\n        type: 'number',\n        description: 'Estimated remaining fuel for the object in kilograms.'\n      },\n      geoSlot: {\n        type: 'number',\n        description: 'GEO slot if applicable, in degrees. -180 (West of Prime Meridian) to 180 degrees (East of Prime Meridian). Prime Meridian is 0.'\n      },\n      lastObSource: {\n        type: 'string',\n        description: 'The name of the source who last provided an observation for this idOnOrbit.'\n      },\n      lastObTime: {\n        type: 'string',\n        description: 'Time of last reported observation for this object in ISO 8601 UTC with microsecond precision.',\n        format: 'date-time'\n      },\n      launchMass: {\n        type: 'number',\n        description: 'Nominal mass of spacecraft and fuel at launch time, in kilograms.'\n      },\n      launchMassMax: {\n        type: 'number',\n        description: 'Maximum (estimated) mass of spacecraft and fuel at launch time, in kilograms.'\n      },\n      launchMassMin: {\n        type: 'number',\n        description: 'Minimum (estimated) mass of spacecraft and fuel at launch time, in kilograms.'\n      },\n      maneuverable: {\n        type: 'boolean',\n        description: 'Boolean indicating whether a spacecraft is maneuverable. Note that a spacecraft may have propulsion capability but may not be maneuverable due to lack of fuel, anomalous condition, or other operational constraints.'\n      },\n      maxDeltaV: {\n        type: 'number',\n        description: 'Maximum delta V available for this on-orbit spacecraft, in meters per second.'\n      },\n      maxRadius: {\n        type: 'number',\n        description: 'Maximum dimension across the spacecraft (e.g., tip-to-tip across the solar panel arrays) in meters.'\n      },\n      missionTypes: {\n        type: 'array',\n        description: 'Array of the type of missions the spacecraft performs. Must contain the same number of elements as the value of numMission.',\n        items: {\n          type: 'string'\n        }\n      },\n      numDeployable: {\n        type: 'integer',\n        description: 'The number of sub-satellites or deployable objects on the spacecraft.'\n      },\n      numMission: {\n        type: 'integer',\n        description: 'The number of distinct missions the spacecraft performs.'\n      },\n      origin: {\n        type: 'string',\n        description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n      },\n      origNetwork: {\n        type: 'string',\n        description: 'The originating source network on which this record was created, auto-populated by the system.'\n      },\n      rcs: {\n        type: 'number',\n        description: 'Current/latest radar cross section in meters squared.'\n      },\n      rcsMax: {\n        type: 'number',\n        description: 'Maximum radar cross section in meters squared.'\n      },\n      rcsMean: {\n        type: 'number',\n        description: 'Mean radar cross section in meters squared.'\n      },\n      rcsMin: {\n        type: 'number',\n        description: 'Minimum radar cross section in meters squared.'\n      },\n      refSource: {\n        type: 'string',\n        description: 'The reference source, sources, or URL from which the data in this record was obtained.'\n      },\n      solarArrayArea: {\n        type: 'number',\n        description: 'Spacecraft deployed area of solar array in meters squared.'\n      },\n      totalMassUnc: {\n        type: 'number',\n        description: 'The 1-sigma uncertainty of the total spacecraft mass, in kilograms.'\n      },\n      vismag: {\n        type: 'number',\n        description: 'Current/latest visual magnitude in M.'\n      },\n      vismagMax: {\n        type: 'number',\n        description: 'Maximum visual magnitude in M.'\n      },\n      vismagMean: {\n        type: 'number',\n        description: 'Mean visual magnitude in M.'\n      },\n      vismagMin: {\n        type: 'number',\n        description: 'Minimum visual magnitude in M.'\n      }\n    },\n    required: [      'classificationMarking',\n      'dataMode',\n      'idOnOrbit',\n      'source'\n    ]\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: [],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.onorbitdetails.list(body).asResponse();
  return asTextContentResult(await maybeFilter(args, await response.json()));
};

export default { metadata, tool, handler };
