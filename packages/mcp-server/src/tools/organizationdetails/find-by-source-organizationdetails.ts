// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'organizationdetails',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/organizationdetails/findBySource',
};

export const tool: Tool = {
  name: 'find_by_source_organizationdetails',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to get a single OrganizationDetails by a source passed as a query parameter. OrganizationDetails represent details of organizations such as a corporation, manufacturer, consortium, government, etc. An organization can have detail records from several sources.\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    type: 'object',\n    description: 'Model representation of additional detailed organization data as collected by a particular source.',\n    properties: {\n      classificationMarking: {\n        type: 'string',\n        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n      },\n      dataMode: {\n        type: 'string',\n        description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n        enum: [          'REAL',\n          'TEST',\n          'SIMULATED',\n          'EXERCISE'\n        ]\n      },\n      idOrganization: {\n        type: 'string',\n        description: 'Unique identifier of the parent organization.'\n      },\n      name: {\n        type: 'string',\n        description: 'Organization details name.'\n      },\n      source: {\n        type: 'string',\n        description: 'Source of the data.'\n      },\n      id: {\n        type: 'string',\n        description: 'Unique identifier of the record, auto-generated by the system.'\n      },\n      address1: {\n        type: 'string',\n        description: 'Street number of the organization.'\n      },\n      address2: {\n        type: 'string',\n        description: 'Field for additional organization address information such as PO Box and unit number.'\n      },\n      address3: {\n        type: 'string',\n        description: 'Contains the third line of address information for an organization.'\n      },\n      broker: {\n        type: 'string',\n        description: 'Designated broker for this organization.'\n      },\n      ceo: {\n        type: 'string',\n        description: 'For organizations of type CORPORATION, the name of the Chief Executive Officer.'\n      },\n      cfo: {\n        type: 'string',\n        description: 'For organizations of type CORPORATION, the name of the Chief Financial Officer.'\n      },\n      createdAt: {\n        type: 'string',\n        description: 'Time the row was created in the database, auto-populated by the system.',\n        format: 'date-time'\n      },\n      createdBy: {\n        type: 'string',\n        description: 'Application user who created the row in the database, auto-populated by the system.'\n      },\n      cto: {\n        type: 'string',\n        description: 'For organizations of type CORPORATION, the name of the Chief Technology Officer.'\n      },\n      description: {\n        type: 'string',\n        description: 'Organization description.'\n      },\n      ebitda: {\n        type: 'number',\n        description: 'For organizations of type CORPORATION, the company EBITDA value as of financialYearEndDate in US Dollars.'\n      },\n      email: {\n        type: 'string',\n        description: 'Listed contact email address for the organization.'\n      },\n      financialNotes: {\n        type: 'string',\n        description: 'For organizations of type CORPORATION, notes on company financials.'\n      },\n      financialYearEndDate: {\n        type: 'string',\n        description: 'For organizations of type CORPORATION, the effective financial year end date for revenue, EBITDA, and profit values.',\n        format: 'date-time'\n      },\n      fleetPlanNotes: {\n        type: 'string',\n        description: 'Satellite fleet planning notes for this organization.'\n      },\n      formerOrgId: {\n        type: 'string',\n        description: 'Former organization ID (if this organization previously existed as another organization).'\n      },\n      ftes: {\n        type: 'integer',\n        description: 'Total number of FTEs in this organization.'\n      },\n      geoAdminLevel1: {\n        type: 'string',\n        description: 'Administrative boundaries of the first sub-national level. Level 1 is simply the largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a state or province.'\n      },\n      geoAdminLevel2: {\n        type: 'string',\n        description: 'Administrative boundaries of the second sub-national level. Level 2 is simply the second largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a county or district.'\n      },\n      geoAdminLevel3: {\n        type: 'string',\n        description: 'Administrative boundaries of the third sub-national level. Level 3 is simply the third largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a city or township.'\n      },\n      massRanking: {\n        type: 'integer',\n        description: 'Mass ranking for this organization.'\n      },\n      origin: {\n        type: 'string',\n        description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n      },\n      origNetwork: {\n        type: 'string',\n        description: 'The originating source network on which this record was created, auto-populated by the system.'\n      },\n      parentOrgId: {\n        type: 'string',\n        description: 'Parent organization ID of this organization if it is a child organization.'\n      },\n      postalCode: {\n        type: 'string',\n        description: 'A postal code, such as PIN or ZIP Code, is a series of letters or digits or both included in the postal address of the organization.'\n      },\n      profit: {\n        type: 'number',\n        description: 'For organizations of type CORPORATION, total annual profit as of financialYearEndDate in US Dollars.'\n      },\n      revenue: {\n        type: 'number',\n        description: 'For organizations of type CORPORATION, total annual revenue as of financialYearEndDate in US Dollars.'\n      },\n      revenueRanking: {\n        type: 'integer',\n        description: 'Revenue ranking for this organization.'\n      },\n      riskManager: {\n        type: 'string',\n        description: 'The name of the risk manager for the organization.'\n      },\n      servicesNotes: {\n        type: 'string',\n        description: 'Notes on the services provided by the organization.'\n      }\n    },\n    required: [      'classificationMarking',\n      'dataMode',\n      'idOrganization',\n      'name',\n      'source'\n    ]\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      name: {
        type: 'string',
        description: 'Organization details name.',
      },
      source: {
        type: 'string',
        description: 'The source of the OrganizationDetails records to find.',
      },
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['name', 'source'],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { jq_filter, ...body } = args as any;
  return asTextContentResult(
    await maybeFilter(jq_filter, await client.organizationdetails.findBySource(body)),
  );
};

export default { metadata, tool, handler };
