// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'udl-node-sdk';

export const metadata: Metadata = {
  resource: 'organizationdetails',
  operation: 'write',
  tags: [],
  httpMethod: 'put',
  httpPath: '/udl/organizationdetails/{id}',
};

export const tool: Tool = {
  name: 'update_organizationdetails',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to update an OrganizationDetails object. OrganizationDetails represent details of organizations such as a corporation, manufacturer, consortium, government, etc. An organization can have detail records from several sources. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {}\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      path_id: {
        type: 'string',
      },
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      idOrganization: {
        type: 'string',
        description: 'Unique identifier of the parent organization.',
      },
      name: {
        type: 'string',
        description: 'Organization details name.',
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      body_id: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      address1: {
        type: 'string',
        description: 'Street number of the organization.',
      },
      address2: {
        type: 'string',
        description: 'Field for additional organization address information such as PO Box and unit number.',
      },
      address3: {
        type: 'string',
        description: 'Contains the third line of address information for an organization.',
      },
      broker: {
        type: 'string',
        description: 'Designated broker for this organization.',
      },
      ceo: {
        type: 'string',
        description: 'For organizations of type CORPORATION, the name of the Chief Executive Officer.',
      },
      cfo: {
        type: 'string',
        description: 'For organizations of type CORPORATION, the name of the Chief Financial Officer.',
      },
      cto: {
        type: 'string',
        description: 'For organizations of type CORPORATION, the name of the Chief Technology Officer.',
      },
      description: {
        type: 'string',
        description: 'Organization description.',
      },
      ebitda: {
        type: 'number',
        description:
          'For organizations of type CORPORATION, the company EBITDA value as of financialYearEndDate in US Dollars.',
      },
      email: {
        type: 'string',
        description: 'Listed contact email address for the organization.',
      },
      financialNotes: {
        type: 'string',
        description: 'For organizations of type CORPORATION, notes on company financials.',
      },
      financialYearEndDate: {
        type: 'string',
        description:
          'For organizations of type CORPORATION, the effective financial year end date for revenue, EBITDA, and profit values.',
        format: 'date-time',
      },
      fleetPlanNotes: {
        type: 'string',
        description: 'Satellite fleet planning notes for this organization.',
      },
      formerOrgId: {
        type: 'string',
        description:
          'Former organization ID (if this organization previously existed as another organization).',
      },
      ftes: {
        type: 'integer',
        description: 'Total number of FTEs in this organization.',
      },
      geoAdminLevel1: {
        type: 'string',
        description:
          'Administrative boundaries of the first sub-national level. Level 1 is simply the largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a state or province.',
      },
      geoAdminLevel2: {
        type: 'string',
        description:
          'Administrative boundaries of the second sub-national level. Level 2 is simply the second largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a county or district.',
      },
      geoAdminLevel3: {
        type: 'string',
        description:
          'Administrative boundaries of the third sub-national level. Level 3 is simply the third largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a city or township.',
      },
      massRanking: {
        type: 'integer',
        description: 'Mass ranking for this organization.',
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
      parentOrgId: {
        type: 'string',
        description: 'Parent organization ID of this organization if it is a child organization.',
      },
      postalCode: {
        type: 'string',
        description:
          'A postal code, such as PIN or ZIP Code, is a series of letters or digits or both included in the postal address of the organization.',
      },
      profit: {
        type: 'number',
        description:
          'For organizations of type CORPORATION, total annual profit as of financialYearEndDate in US Dollars.',
      },
      revenue: {
        type: 'number',
        description:
          'For organizations of type CORPORATION, total annual revenue as of financialYearEndDate in US Dollars.',
      },
      revenueRanking: {
        type: 'integer',
        description: 'Revenue ranking for this organization.',
      },
      riskManager: {
        type: 'string',
        description: 'The name of the risk manager for the organization.',
      },
      servicesNotes: {
        type: 'string',
        description: 'Notes on the services provided by the organization.',
      },
      tags: {
        type: 'array',
        description:
          'Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.',
        items: {
          type: 'string',
        },
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['path_id', 'classificationMarking', 'dataMode', 'idOrganization', 'name', 'source'],
  },
  annotations: {
    idempotentHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { id, ...body } = args as any;
  const response = await client.organizationdetails.update(id, body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
