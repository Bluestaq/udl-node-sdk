// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'sensor_plan',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/sensorplan',
};

export const tool: Tool = {
  name: 'list_sensor_plan',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    type: 'object',\n    description: 'A Plan is used to aggregate two or more of the same type of record to a parent entity, with the planId (UUID) being included in all of the subordinate records, enabling resolution back to the parent.',\n    properties: {\n      classificationMarking: {\n        type: 'string',\n        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n      },\n      dataMode: {\n        type: 'string',\n        description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n        enum: [          'REAL',\n          'TEST',\n          'SIMULATED',\n          'EXERCISE'\n        ]\n      },\n      recType: {\n        type: 'string',\n        description: 'The type of records that comprise this parent set (COLLECT, CONTACT).'\n      },\n      source: {\n        type: 'string',\n        description: 'Source of the data.'\n      },\n      startTime: {\n        type: 'string',\n        description: 'The start time of the plan or schedule, in ISO 8601 UTC format.',\n        format: 'date-time'\n      },\n      type: {\n        type: 'string',\n        description: 'The type of this sensor plan/schedule (PLAN, REQUEST, SCHEDULE).'\n      },\n      id: {\n        type: 'string',\n        description: 'Unique identifier of the record, auto-generated by the system.'\n      },\n      createdAt: {\n        type: 'string',\n        description: 'Time the row was created in the database, auto-populated by the system.',\n        format: 'date-time'\n      },\n      createdBy: {\n        type: 'string',\n        description: 'Application user who created the row in the database, auto-populated by the system.'\n      },\n      customer: {\n        type: 'string',\n        description: 'The customer for this plan or schedule.'\n      },\n      endTime: {\n        type: 'string',\n        description: 'The end time of the plan or schedule, in ISO 8601 UTC format.',\n        format: 'date-time'\n      },\n      idSensor: {\n        type: 'string',\n        description: 'Unique identifier of the requested/schedule/planned sensor associated with this request.'\n      },\n      name: {\n        type: 'string',\n        description: 'Name associated with this plan or schedule.'\n      },\n      origin: {\n        type: 'string',\n        description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n      },\n      origNetwork: {\n        type: 'string',\n        description: 'The originating source network on which this record was created, auto-populated by the system.'\n      },\n      origSensorId: {\n        type: 'string',\n        description: 'Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request. This may be an internal identifier and not necessarily a valid sensor ID.'\n      },\n      purpose: {\n        type: 'string',\n        description: 'The purpose/description of this plan or schedule.'\n      },\n      reqTotal: {\n        type: 'integer',\n        description: 'The total number of requests contained in this plan or schedule. Value of this field must match the size of collectRequest list if the list is provided and can be null or any value otherwise.'\n      },\n      senNetwork: {\n        type: 'string',\n        description: 'The sensor or ground network associated with this plan or schedule.'\n      },\n      status: {\n        type: 'string',\n        description: 'The status of this plan or schedule (ACCEPTED, APPROVED, COMPLETED, PROPOSED, REJECTED, REQUESTED, SCHEDULED).'\n      }\n    },\n    required: [      'classificationMarking',\n      'dataMode',\n      'recType',\n      'source',\n      'startTime',\n      'type'\n    ]\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      startTime: {
        type: 'string',
        description:
          'The start time of the plan or schedule, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)',
        format: 'date-time',
      },
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['startTime'],
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.sensorPlan.list(body).asResponse();
  return asTextContentResult(await maybeFilter(args, await response.json()));
};

export default { metadata, tool, handler };
