// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'ecpedr',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/ecpedr',
};

export const tool: Tool = {
  name: 'create_ecpedr',
  description:
    'Service operation to take a single ECPEDR record as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.',
  inputSchema: {
    type: 'object',
    properties: {
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      ecpedrMeasurements: {
        type: 'array',
        description: 'Collection of measurements associated with this ECP EDR record.',
        items: {
          type: 'object',
          description: 'Collection of measurements associated with this ECP EDR record.',
          properties: {
            obType: {
              type: 'string',
              description: 'The type of observation associated with this record. (e.g., FLUX, CHARGE, etc.).',
            },
            obUoM: {
              type: 'string',
              description:
                'The Unit of Measure associated with this observation. If there are no physical units associated with the measurement, a value of NONE should be specified.',
            },
            chanEnergyHigh: {
              type: 'number',
              description: 'Higher energy threshold of the channel for event detection and data collection.',
            },
            chanEnergyLow: {
              type: 'number',
              description: 'Lower energy threshold of the channel for event detection and data collection.',
            },
            chanId: {
              type: 'string',
              description: 'Identifier of the channel based on energy levels and particle species.',
            },
            chanType: {
              type: 'string',
              description:
                'Type of channel based on the measurement method (e.g., INTEGRAL, DIFFERENTIAL, etc.).',
            },
            chanUnit: {
              type: 'string',
              description: 'Units used for defining channel energy boundaries (e.g., eV, keV, MeV, etc.).',
            },
            msgNumber: {
              type: 'integer',
              description: 'Designates a specific group of measurements made.',
            },
            obValue: {
              type: 'number',
              description: 'A single observation value expressed in the specified unit of measure (obUoM).',
            },
            species: {
              type: 'string',
              description:
                'Type of particle species being measured by a channel (e.g., ELECTRON, PROTON, etc.).',
            },
          },
          required: ['obType', 'obUoM'],
        },
      },
      obTime: {
        type: 'string',
        description: 'Time of the observation, in ISO 8601 UTC format with microsecond precision.',
        format: 'date-time',
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      id: {
        type: 'string',
        description:
          'Unique identifier of the record, auto-generated by the system if not provided on create operations.',
      },
      genSystem: {
        type: 'string',
        description: 'System which generated the message.',
      },
      genTime: {
        type: 'string',
        description: 'Time when message was generated in ISO 8601 UTC format with millisecond precision.',
        format: 'date-time',
      },
      idSensor: {
        type: 'string',
        description:
          "Unique identifier of the reporting sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.",
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
      origObjectId: {
        type: 'string',
        description:
          'Optional identifier provided by the record source to indicate the satellite hosting the sensor. This may be an internal identifier and not necessarily map to a valid satellite number.',
      },
      origSensorId: {
        type: 'string',
        description:
          'Optional identifier provided by the observation source to indicate the sensor which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.',
      },
      satNo: {
        type: 'integer',
        description: 'Satellite/catalog number of the on-orbit satellite hosting the sensor.',
      },
      senPos: {
        type: 'array',
        description:
          'Three element array, expressing the observing spacecraft/sensor position vector components at observation time, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xpos, ypos, zpos].',
        items: {
          type: 'number',
        },
      },
      senReferenceFrame: {
        type: 'string',
        description:
          'The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.',
        enum: ['J2000', 'EFG/TDR', 'ECR/ECEF', 'TEME', 'ITRF', 'GCRF'],
      },
      tags: {
        type: 'array',
        description:
          'Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.',
        items: {
          type: 'string',
        },
      },
      transactionId: {
        type: 'string',
        description:
          'Optional identifier to track a commercial or marketplace transaction executed to produce this data.',
      },
    },
    required: ['classificationMarking', 'dataMode', 'ecpedrMeasurements', 'obTime', 'source'],
  },
  annotations: {},
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.ecpedr.create(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
