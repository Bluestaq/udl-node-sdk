// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'deconflictset',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/deconflictset',
};

export const tool: Tool = {
  name: 'list_deconflictset',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    $ref: '#/$defs/deconflictset_list_response'\n  },\n  $defs: {\n    deconflictset_list_response: {\n      type: 'object',\n      description: 'The DeconflictSet service provides access to a set of DeconflictWindows and metadata about those data. A DeconflictWindow describes a time window during which an action, such as target engagement, may either occur or is prohibited from occurring. The DeconflictWindow model includes information about the spatial details for specific target types. A flag is provided to specify whether the window should be associated with taking action (OPEN), or if no action should occur (CLOSED).',\n      properties: {\n        classificationMarking: {\n          type: 'string',\n          description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n        },\n        dataMode: {\n          type: 'string',\n          description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n          enum: [            'REAL',\n            'TEST',\n            'SIMULATED',\n            'EXERCISE'\n          ]\n        },\n        eventStartTime: {\n          type: 'string',\n          description: 'The start time of the event associated with the set of DeconflictWindow records, in ISO 8601 UTC format with millisecond precision.',\n          format: 'date-time'\n        },\n        numWindows: {\n          type: 'integer',\n          description: 'The number of windows provided by this DeconflictSet record.'\n        },\n        source: {\n          type: 'string',\n          description: 'Source of the data.'\n        },\n        id: {\n          type: 'string',\n          description: 'Unique identifier of the record, auto-generated by the system if not provided on create operations.'\n        },\n        calculationEndTime: {\n          type: 'string',\n          description: 'The time at which the window calculations completed, in ISO 8601 UTC format with millisecond precision.',\n          format: 'date-time'\n        },\n        calculationId: {\n          type: 'string',\n          description: 'The algorithm execution id associated with the generation of this DeconflictSet.'\n        },\n        calculationStartTime: {\n          type: 'string',\n          description: 'The time at which the window calculations started, in ISO 8601 UTC format with millisecond precision.',\n          format: 'date-time'\n        },\n        createdAt: {\n          type: 'string',\n          description: 'Time the row was created in the database, auto-populated by the system.',\n          format: 'date-time'\n        },\n        createdBy: {\n          type: 'string',\n          description: 'Application user who created the row in the database, auto-populated by the system.'\n        },\n        errors: {\n          type: 'array',\n          description: 'Array of error messages that potentially contain information about the reasons this deconflict response calculation may be inaccurate, or why it failed.',\n          items: {\n            type: 'string'\n          }\n        },\n        eventEndTime: {\n          type: 'string',\n          description: 'The end time of the event associated with the set of DeconflictWindow records, in ISO 8601 UTC format with millisecond precision.',\n          format: 'date-time'\n        },\n        eventType: {\n          type: 'string',\n          description: 'The type of event associated with this DeconflictSet record.'\n        },\n        idLaserDeconflictRequest: {\n          type: 'string',\n          description: 'The id of the LaserDeconflictRequest record used as input in the generation of this DeconflictSet, if applicable.'\n        },\n        origin: {\n          type: 'string',\n          description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n        },\n        origNetwork: {\n          type: 'string',\n          description: 'The originating source network on which this record was created, auto-populated by the system.'\n        },\n        referenceFrame: {\n          type: 'string',\n          description: 'The reference frame of the cartesian orbital states. If the referenceFrame is null it is assumed to be J2000.'\n        },\n        sourceDL: {\n          type: 'string',\n          description: 'The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.'\n        },\n        tags: {\n          type: 'array',\n          description: 'Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.',\n          items: {\n            type: 'string'\n          }\n        },\n        transactionId: {\n          type: 'string',\n          description: 'Optional identifier to track a commercial or marketplace transaction executed to produce this data.'\n        },\n        warnings: {\n          type: 'array',\n          description: 'Array of warning messages that potentially contain information about the reasons this deconflict response calculation may be inaccurate, or why it failed.',\n          items: {\n            type: 'string'\n          }\n        }\n      },\n      required: [        'classificationMarking',\n        'dataMode',\n        'eventStartTime',\n        'numWindows',\n        'source'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      eventStartTime: {
        type: 'string',
        description:
          'The start time of the event associated with the set of DeconflictWindow records, in ISO 8601 UTC format with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)',
        format: 'date-time',
      },
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['eventStartTime'],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { jq_filter, ...body } = args as any;
  const response = await client.deconflictset.list(body).asResponse();
  return asTextContentResult(await maybeFilter(jq_filter, await response.json()));
};

export default { metadata, tool, handler };
