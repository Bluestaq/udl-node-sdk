// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'batterydetails',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/batterydetails',
};

export const tool: Tool = {
  name: 'create_batterydetails',
  description:
    'Service operation to take a single BatteryDetails as a POST body and ingest into the database. A Battery record may have multiple details records from several sources. A specific role is required to perform this service operation. Please contact the UDL team for assistance.',
  inputSchema: {
    type: 'object',
    properties: {
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      idBattery: {
        type: 'string',
        description: 'Identifier of the parent battery type record.',
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      id: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      capacity: {
        type: 'number',
        description: 'Battery capacity in Ah.',
      },
      description: {
        type: 'string',
        description: 'Battery description/notes.',
      },
      dischargeDepth: {
        type: 'number',
        description: 'Depth of discharge as a percentage/fraction.',
      },
      manufacturerOrgId: {
        type: 'string',
        description: 'ID of the organization that manufactures the battery.',
      },
      model: {
        type: 'string',
        description: 'Battery model number or name.',
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
      tags: {
        type: 'array',
        description:
          'Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.',
        items: {
          type: 'string',
        },
      },
      technology: {
        type: 'string',
        description: 'Type of battery technology (e.g. Ni-Cd, Ni-H2, Li-ion, etc.).',
      },
    },
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  await client.batterydetails.create(body);
  return asTextContentResult('Successful tool call');
};

export default { metadata, tool, handler };
