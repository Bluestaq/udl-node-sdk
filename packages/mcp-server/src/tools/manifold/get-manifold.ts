// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'manifold',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/manifold/{id}',
};

export const tool: Tool = {
  name: 'get_manifold',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to get a single Manifold record by its unique ID passed as a path parameter.  A manifold represents a set of possible/theoretical orbits for an object of interest based on a delta V and delta T.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  description: 'A manifold represents a set of possible/theoretical orbits for an object of interest based on a delta V and delta T.',\n  properties: {\n    classificationMarking: {\n      type: 'string',\n      description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n    },\n    dataMode: {\n      type: 'string',\n      description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n      enum: [        'REAL',\n        'TEST',\n        'SIMULATED',\n        'EXERCISE'\n      ]\n    },\n    idObjectOfInterest: {\n      type: 'string',\n      description: 'ID of the parent object of interest.'\n    },\n    source: {\n      type: 'string',\n      description: 'Source of the data.'\n    },\n    id: {\n      type: 'string',\n      description: 'Unique identifier of the record, auto-generated by the system.'\n    },\n    createdAt: {\n      type: 'string',\n      description: 'Time the row was created in the database, auto-populated by the system.',\n      format: 'date-time'\n    },\n    createdBy: {\n      type: 'string',\n      description: 'Application user who created the row in the database, auto-populated by the system.'\n    },\n    deltaT: {\n      type: 'number',\n      description: 'Applied delta V duration for this manifold\\'s calculations in seconds.'\n    },\n    deltaV: {\n      type: 'number',\n      description: 'Applied delta V for this manifold\\'s calculations, in km/sec.'\n    },\n    origin: {\n      type: 'string',\n      description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n    },\n    origNetwork: {\n      type: 'string',\n      description: 'The originating source network on which this record was created, auto-populated by the system.'\n    },\n    status: {\n      type: 'string',\n      description: 'Status of the manifold and its associated ManifoldElsets (e.g. PENDING, COMPLETE). PENDING status means element set generation is in progress and COMPLETE indicates all ManifoldElsets have been generated.'\n    },\n    updatedAt: {\n      type: 'string',\n      description: 'Read-only time the row was updated in the database, set automatically by the system on update.',\n      format: 'date-time'\n    },\n    updatedBy: {\n      type: 'string',\n      description: 'Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.'\n    },\n    weight: {\n      type: 'number',\n      description: 'Weight or probability of this manifold for prioritization purposes, between 0 and 1.'\n    }\n  },\n  required: [    'classificationMarking',\n    'dataMode',\n    'idObjectOfInterest',\n    'source'\n  ]\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      id: {
        type: 'string',
      },
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['id'],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { id, jq_filter, ...body } = args as any;
  return asTextContentResult(await maybeFilter(jq_filter, await client.manifold.get(id, body)));
};

export default { metadata, tool, handler };
