// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'manifold',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/manifold/createBulk',
};

export const tool: Tool = {
  name: 'create_bulk_manifold',
  description:
    'Service operation to take multiple Manifolds as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.',
  inputSchema: {
    type: 'object',
    properties: {
      body: {
        type: 'array',
        items: {
          type: 'object',
          description:
            'A manifold represents a set of possible/theoretical orbits for an object of interest based on a delta V and delta T.',
          properties: {
            classificationMarking: {
              type: 'string',
              description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
            },
            dataMode: {
              type: 'string',
              description:
                'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
              enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
            },
            idObjectOfInterest: {
              type: 'string',
              description: 'ID of the parent object of interest.',
            },
            source: {
              type: 'string',
              description: 'Source of the data.',
            },
            id: {
              type: 'string',
              description: 'Unique identifier of the record, auto-generated by the system.',
            },
            createdAt: {
              type: 'string',
              description: 'Time the row was created in the database, auto-populated by the system.',
              format: 'date-time',
            },
            createdBy: {
              type: 'string',
              description:
                'Application user who created the row in the database, auto-populated by the system.',
            },
            deltaT: {
              type: 'number',
              description: "Applied delta V duration for this manifold's calculations in seconds.",
            },
            deltaV: {
              type: 'number',
              description: "Applied delta V for this manifold's calculations, in km/sec.",
            },
            origin: {
              type: 'string',
              description:
                'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
            },
            origNetwork: {
              type: 'string',
              description:
                'The originating source network on which this record was created, auto-populated by the system.',
            },
            status: {
              type: 'string',
              description:
                'Status of the manifold and its associated ManifoldElsets (e.g. PENDING, COMPLETE). PENDING status means element set generation is in progress and COMPLETE indicates all ManifoldElsets have been generated.',
            },
            weight: {
              type: 'number',
              description:
                'Weight or probability of this manifold for prioritization purposes, between 0 and 1.',
            },
          },
          required: ['classificationMarking', 'dataMode', 'idObjectOfInterest', 'source'],
        },
      },
    },
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  await client.manifold.createBulk(body);
  return asTextContentResult('Successful tool call');
};

export default { metadata, tool, handler };
