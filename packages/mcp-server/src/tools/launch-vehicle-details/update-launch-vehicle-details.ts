// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'launch_vehicle_details',
  operation: 'write',
  tags: [],
  httpMethod: 'put',
  httpPath: '/udl/launchvehicledetails/{id}',
};

export const tool: Tool = {
  name: 'update_launch_vehicle_details',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to update a single LaunchVehicleDetails. LaunchVehicleDetails represents launch vehicle details and characteristics, compiled by a particular source. A vehicle may have multiple details records from various sources. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {}\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      path_id: {
        type: 'string',
      },
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      idLaunchVehicle: {
        type: 'string',
        description: 'Identifier of the parent launch vehicle record.',
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      body_id: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      attitudeAccuracy: {
        type: 'number',
        description: 'Launch vehicle attitude accuracy (degrees).',
      },
      category: {
        type: 'string',
        description: 'Vehicle category.',
      },
      deploymentRotationRate: {
        type: 'number',
        description: 'Launch vehicle deployment rotation rate in RPM.',
      },
      diameter: {
        type: 'number',
        description: 'Vehicle diameter in meters.',
      },
      estLaunchPrice: {
        type: 'number',
        description: 'Launch vehicle estimated launch price in US dollars.',
      },
      estLaunchPriceTypical: {
        type: 'number',
        description: 'Launch vehicle typical estimated launch price in US dollars.',
      },
      fairingExternalDiameter: {
        type: 'number',
        description: 'Vehicle fairing maximum external diameter in meters.',
      },
      fairingInternalDiameter: {
        type: 'number',
        description: 'Vehicle fairing maximum internal diameter in meters.',
      },
      fairingLength: {
        type: 'number',
        description: 'Vehicle fairing length in meters.',
      },
      fairingMass: {
        type: 'number',
        description: 'Vehicle fairing mass in kg.',
      },
      fairingMaterial: {
        type: 'string',
        description: 'Fairing material.',
      },
      fairingName: {
        type: 'string',
        description: 'Name of the fairing.',
      },
      fairingNotes: {
        type: 'string',
        description: 'Notes/Description of the launch vehicle fairing.',
      },
      family: {
        type: 'string',
        description: 'Vehicle family.',
      },
      geoPayloadMass: {
        type: 'number',
        description: 'Maximum vehicle payload mass to GEO orbit in kg.',
      },
      gtoInj3SigAccuracyApogeeMargin: {
        type: 'number',
        description: 'Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Margin (degrees).',
      },
      gtoInj3SigAccuracyApogeeTarget: {
        type: 'number',
        description: 'Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Target (degrees).',
      },
      gtoInj3SigAccuracyInclinationMargin: {
        type: 'number',
        description: 'Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Margin (degrees).',
      },
      gtoInj3SigAccuracyInclinationTarget: {
        type: 'number',
        description: 'Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Target (degrees).',
      },
      gtoInj3SigAccuracyPerigeeMargin: {
        type: 'number',
        description: 'Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Margin (degrees).',
      },
      gtoInj3SigAccuracyPerigeeTarget: {
        type: 'number',
        description: 'Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Target (degrees).',
      },
      gtoPayloadMass: {
        type: 'number',
        description: 'Max vehicle payload mass to Geo-Transfer Orbit in kg.',
      },
      launchMass: {
        type: 'number',
        description: 'Vehicle total mass at launch time in kg (including all boosters).',
      },
      launchPrefix: {
        type: 'string',
        description: 'Vehicle launch prefix.',
      },
      length: {
        type: 'number',
        description: 'Vehicle length in meters.',
      },
      leoPayloadMass: {
        type: 'number',
        description: 'Max vehicle payload mass to LEO orbit in kg.',
      },
      manufacturerOrgId: {
        type: 'string',
        description: 'ID of the organization that manufactures the launch vehicle.',
      },
      maxAccelLoad: {
        type: 'number',
        description: 'Vehicle maximum acceleration load in g.',
      },
      maxAcousticLevel: {
        type: 'number',
        description: 'Vehicle maximum acoustic level in dB.',
      },
      maxAcousticLevelRange: {
        type: 'number',
        description: 'Vehicle maximum acoustic level range in Hz.',
      },
      maxFairingPressureChange: {
        type: 'number',
        description: 'Vehicle fairing maximum pressure change in kPa/sec.',
      },
      maxFlightShockForce: {
        type: 'number',
        description: 'Vehicle maximum flight shock force in g.',
      },
      maxFlightShockFreq: {
        type: 'number',
        description: 'Vehicle maximum flight shock frequency in Hz.',
      },
      maxPayloadFreqLat: {
        type: 'number',
        description: 'Vehicle maximum payload lateral frequency in Hz.',
      },
      maxPayloadFreqLon: {
        type: 'number',
        description: 'Vehicle maximum payload longitudinal frequency in Hz.',
      },
      minorVariant: {
        type: 'string',
        description: 'Vehicle minor variant.',
      },
      notes: {
        type: 'string',
        description: 'Notes/Description of the launch vehicle.',
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
      oxidizer: {
        type: 'string',
        description: 'Oxidizer type.',
      },
      payloadNotes: {
        type: 'string',
        description: 'Notes/Description of the launch vehicle payload.',
      },
      payloadSeparationRate: {
        type: 'number',
        description: 'Launch vehicle payload separation rate in m/s.',
      },
      propellant: {
        type: 'string',
        description: 'Propellant type.',
      },
      soundPressureLevel: {
        type: 'number',
        description: 'Vehicle overall sound pressure level in dB.',
      },
      sourceURL: {
        type: 'string',
        description: 'Optional URL for additional information on the vehicle.',
      },
      ssoPayloadMass: {
        type: 'number',
        description: 'Max vehicle payload mass to Sun-Synchronous Orbit in kg.',
      },
      tags: {
        type: 'array',
        description:
          'Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.',
        items: {
          type: 'string',
        },
      },
      variant: {
        type: 'string',
        description: 'Vehicle variant.',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['path_id', 'classificationMarking', 'dataMode', 'idLaunchVehicle', 'source'],
  },
  annotations: {
    idempotentHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { id, ...body } = args as any;
  const response = await client.launchVehicleDetails.update(id, body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
