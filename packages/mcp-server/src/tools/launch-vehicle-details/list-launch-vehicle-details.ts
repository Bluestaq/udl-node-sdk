// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'launch_vehicle_details',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/launchvehicledetails',
};

export const tool: Tool = {
  name: 'list_launch_vehicle_details',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    type: 'object',\n    description: 'Model representation of launch vehicle details and characteristics, compiled by a particular source. A vehicle may have multiple details records from various sources.',\n    properties: {\n      classificationMarking: {\n        type: 'string',\n        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n      },\n      dataMode: {\n        type: 'string',\n        description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n        enum: [          'REAL',\n          'TEST',\n          'SIMULATED',\n          'EXERCISE'\n        ]\n      },\n      idLaunchVehicle: {\n        type: 'string',\n        description: 'Identifier of the parent launch vehicle record.'\n      },\n      source: {\n        type: 'string',\n        description: 'Source of the data.'\n      },\n      id: {\n        type: 'string',\n        description: 'Unique identifier of the record, auto-generated by the system.'\n      },\n      attitudeAccuracy: {\n        type: 'number',\n        description: 'Launch vehicle attitude accuracy (degrees).'\n      },\n      category: {\n        type: 'string',\n        description: 'Vehicle category.'\n      },\n      createdAt: {\n        type: 'string',\n        description: 'Time the row was created in the database, auto-populated by the system.',\n        format: 'date-time'\n      },\n      createdBy: {\n        type: 'string',\n        description: 'Application user who created the row in the database, auto-populated by the system.'\n      },\n      deploymentRotationRate: {\n        type: 'number',\n        description: 'Launch vehicle deployment rotation rate in RPM.'\n      },\n      diameter: {\n        type: 'number',\n        description: 'Vehicle diameter in meters.'\n      },\n      estLaunchPrice: {\n        type: 'number',\n        description: 'Launch vehicle estimated launch price in US dollars.'\n      },\n      estLaunchPriceTypical: {\n        type: 'number',\n        description: 'Launch vehicle typical estimated launch price in US dollars.'\n      },\n      fairingExternalDiameter: {\n        type: 'number',\n        description: 'Vehicle fairing maximum external diameter in meters.'\n      },\n      fairingInternalDiameter: {\n        type: 'number',\n        description: 'Vehicle fairing maximum internal diameter in meters.'\n      },\n      fairingLength: {\n        type: 'number',\n        description: 'Vehicle fairing length in meters.'\n      },\n      fairingMass: {\n        type: 'number',\n        description: 'Vehicle fairing mass in kg.'\n      },\n      fairingMaterial: {\n        type: 'string',\n        description: 'Fairing material.'\n      },\n      fairingName: {\n        type: 'string',\n        description: 'Name of the fairing.'\n      },\n      fairingNotes: {\n        type: 'string',\n        description: 'Notes/Description of the launch vehicle fairing.'\n      },\n      family: {\n        type: 'string',\n        description: 'Vehicle family.'\n      },\n      geoPayloadMass: {\n        type: 'number',\n        description: 'Maximum vehicle payload mass to GEO orbit in kg.'\n      },\n      gtoInj3SigAccuracyApogeeMargin: {\n        type: 'number',\n        description: 'Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Margin (degrees).'\n      },\n      gtoInj3SigAccuracyApogeeTarget: {\n        type: 'number',\n        description: 'Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Target (degrees).'\n      },\n      gtoInj3SigAccuracyInclinationMargin: {\n        type: 'number',\n        description: 'Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Margin (degrees).'\n      },\n      gtoInj3SigAccuracyInclinationTarget: {\n        type: 'number',\n        description: 'Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Target (degrees).'\n      },\n      gtoInj3SigAccuracyPerigeeMargin: {\n        type: 'number',\n        description: 'Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Margin (degrees).'\n      },\n      gtoInj3SigAccuracyPerigeeTarget: {\n        type: 'number',\n        description: 'Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Target (degrees).'\n      },\n      gtoPayloadMass: {\n        type: 'number',\n        description: 'Max vehicle payload mass to Geo-Transfer Orbit in kg.'\n      },\n      launchMass: {\n        type: 'number',\n        description: 'Vehicle total mass at launch time in kg (including all boosters).'\n      },\n      launchPrefix: {\n        type: 'string',\n        description: 'Vehicle launch prefix.'\n      },\n      length: {\n        type: 'number',\n        description: 'Vehicle length in meters.'\n      },\n      leoPayloadMass: {\n        type: 'number',\n        description: 'Max vehicle payload mass to LEO orbit in kg.'\n      },\n      manufacturerOrgId: {\n        type: 'string',\n        description: 'ID of the organization that manufactures the launch vehicle.'\n      },\n      maxAccelLoad: {\n        type: 'number',\n        description: 'Vehicle maximum acceleration load in g.'\n      },\n      maxAcousticLevel: {\n        type: 'number',\n        description: 'Vehicle maximum acoustic level in dB.'\n      },\n      maxAcousticLevelRange: {\n        type: 'number',\n        description: 'Vehicle maximum acoustic level range in Hz.'\n      },\n      maxFairingPressureChange: {\n        type: 'number',\n        description: 'Vehicle fairing maximum pressure change in kPa/sec.'\n      },\n      maxFlightShockForce: {\n        type: 'number',\n        description: 'Vehicle maximum flight shock force in g.'\n      },\n      maxFlightShockFreq: {\n        type: 'number',\n        description: 'Vehicle maximum flight shock frequency in Hz.'\n      },\n      maxPayloadFreqLat: {\n        type: 'number',\n        description: 'Vehicle maximum payload lateral frequency in Hz.'\n      },\n      maxPayloadFreqLon: {\n        type: 'number',\n        description: 'Vehicle maximum payload longitudinal frequency in Hz.'\n      },\n      minorVariant: {\n        type: 'string',\n        description: 'Vehicle minor variant.'\n      },\n      notes: {\n        type: 'string',\n        description: 'Notes/Description of the launch vehicle.'\n      },\n      origin: {\n        type: 'string',\n        description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n      },\n      origNetwork: {\n        type: 'string',\n        description: 'The originating source network on which this record was created, auto-populated by the system.'\n      },\n      oxidizer: {\n        type: 'string',\n        description: 'Oxidizer type.'\n      },\n      payloadNotes: {\n        type: 'string',\n        description: 'Notes/Description of the launch vehicle payload.'\n      },\n      payloadSeparationRate: {\n        type: 'number',\n        description: 'Launch vehicle payload separation rate in m/s.'\n      },\n      propellant: {\n        type: 'string',\n        description: 'Propellant type.'\n      },\n      soundPressureLevel: {\n        type: 'number',\n        description: 'Vehicle overall sound pressure level in dB.'\n      },\n      sourceURL: {\n        type: 'string',\n        description: 'Optional URL for additional information on the vehicle.'\n      },\n      ssoPayloadMass: {\n        type: 'number',\n        description: 'Max vehicle payload mass to Sun-Synchronous Orbit in kg.'\n      },\n      variant: {\n        type: 'string',\n        description: 'Vehicle variant.'\n      }\n    },\n    required: [      'classificationMarking',\n      'dataMode',\n      'idLaunchVehicle',\n      'source'\n    ]\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: [],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.launchVehicleDetails.list(body).asResponse();
  return asTextContentResult(await maybeFilter(args, await response.json()));
};

export default { metadata, tool, handler };
