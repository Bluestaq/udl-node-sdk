// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'beam',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/beam/{id}',
};

export const tool: Tool = {
  name: 'retrieve_beam',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to get a single Beam record by its unique ID passed as a path parameter.\n\n# Response Schema\n```json\n{\n  $ref: '#/$defs/beam_full',\n  $defs: {\n    beam_full: {\n      type: 'object',\n      description: 'Describes a satellite antenna beam.',\n      properties: {\n        beamName: {\n          type: 'string',\n          description: 'The antenna beam ID of the particular beam for this channel.  beamName is not unique across payloads.'\n        },\n        classificationMarking: {\n          type: 'string',\n          description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n        },\n        dataMode: {\n          type: 'string',\n          description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n          enum: [            'REAL',\n            'TEST',\n            'SIMULATED',\n            'EXERCISE'\n          ]\n        },\n        source: {\n          type: 'string',\n          description: 'Source of the data.'\n        },\n        id: {\n          type: 'string',\n          description: 'Unique identifier of the record, auto-generated by the system.'\n        },\n        beamContours: {\n          type: 'array',\n          description: 'Read-only collection of beamContours, ignored on create/update. These details must be created separately via the /udl/beamcontour operations.',\n          items: {\n            $ref: '#/$defs/beamcontour_full'\n          }\n        },\n        createdAt: {\n          type: 'string',\n          description: 'Time the row was created in the database, auto-populated by the system.',\n          format: 'date-time'\n        },\n        createdBy: {\n          type: 'string',\n          description: 'Application user who created the row in the database, auto-populated by the system.'\n        },\n        notes: {\n          type: 'string',\n          description: 'Optional notes/comments on this beam.'\n        },\n        origin: {\n          type: 'string',\n          description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n        },\n        origNetwork: {\n          type: 'string',\n          description: 'The originating source network on which this record was created, auto-populated by the system.'\n        },\n        updatedAt: {\n          type: 'string',\n          description: 'Time the row was updated in the database, auto-populated by the system.',\n          format: 'date-time'\n        },\n        updatedBy: {\n          type: 'string',\n          description: 'Application user who updated the row in the database, auto-populated by the system.'\n        }\n      },\n      required: [        'beamName',\n        'classificationMarking',\n        'dataMode',\n        'source'\n      ]\n    },\n    beamcontour_full: {\n      type: 'object',\n      description: 'Describes the beam contour associated with a beam entity. Beam contours are the geographic representation of the relative gain levels of beam power off of the maximum gain boresight points.',\n      properties: {\n        classificationMarking: {\n          type: 'string',\n          description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n        },\n        dataMode: {\n          type: 'string',\n          description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n          enum: [            'REAL',\n            'TEST',\n            'SIMULATED',\n            'EXERCISE'\n          ]\n        },\n        idBeam: {\n          type: 'string',\n          description: 'ID of the beam.'\n        },\n        source: {\n          type: 'string',\n          description: 'Source of the data.'\n        },\n        type: {\n          type: 'string',\n          description: 'The type of object represented in this record (BORESIGHT, CONTOUR, SVC AREA).  Boresight refers to the point of maximum/peak gain, and should not be confused with the \\'aim point\\' of the related beam.  Gain contours are regions of  coverage referenced to the relative gain of the related beam.  Service Areas are composed of one or more service regions, with each region being either discrete point(s) or a continuous contour.',\n          enum: [            'BORESIGHT',\n            'CONTOUR',\n            'SVC AREA'\n          ]\n        },\n        id: {\n          type: 'string',\n          description: 'Unique identifier of the record, auto-generated by the system.'\n        },\n        contourIdx: {\n          type: 'integer',\n          description: 'The index number of this contour. The value is required if type = CONTOUR.'\n        },\n        createdAt: {\n          type: 'string',\n          description: 'Time the row was created in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.',\n          format: 'date-time'\n        },\n        createdBy: {\n          type: 'string',\n          description: 'Application user who created the row in the database, auto-populated by the system.'\n        },\n        gain: {\n          type: 'number',\n          description: 'The relative gain level in dB associated with this boresight or contour.  Gain does not apply to service area records. The value is required if type = BORESIGHT or CONTOUR.'\n        },\n        geography: {\n          type: 'string',\n          description: 'GeoJSON or Well Known Text expression of the boresight point, service area point or region, or the gain contour region in geographic longitude, latitude pairs. Boresight and service area point(s) are represented as a \\'Point\\' or \\'MultiPoint\\', service areas and closed gain contours as \\'Polygon\\', and open contours as \\'LineString\\'. This is an optional convenience field only used for create operations. The system will auto-detect the format (Well Known Text or GeoJSON) and populate both geographyText and geographyJson fields appropriately. A create request must contain one of the geography, geographyText, or geographyJson.'\n        },\n        geographyJson: {\n          type: 'string',\n          description: 'Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid \\'area\\' or \\'atext\\' field.'\n        },\n        geographyNdims: {\n          type: 'integer',\n          description: 'Number of dimensions of the geometry depicted by region.'\n        },\n        geographySrid: {\n          type: 'integer',\n          description: 'Geographical spatial_ref_sys for region.'\n        },\n        geographyText: {\n          type: 'string',\n          description: 'Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid \\'area\\' field.'\n        },\n        geographyType: {\n          type: 'string',\n          description: 'Type of region as projected.'\n        },\n        origin: {\n          type: 'string',\n          description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n        },\n        origNetwork: {\n          type: 'string',\n          description: 'The originating source network on which this record was created, auto-populated by the system.'\n        },\n        regionName: {\n          type: 'string',\n          description: 'The region name within the service area.'\n        },\n        updatedAt: {\n          type: 'string',\n          description: 'Time the row was updated in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.',\n          format: 'date-time'\n        },\n        updatedBy: {\n          type: 'string',\n          description: 'Application user who updated the row in the database, auto-populated by the system.'\n        }\n      },\n      required: [        'classificationMarking',\n        'dataMode',\n        'idBeam',\n        'source',\n        'type'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      id: {
        type: 'string',
      },
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { id, ...body } = args as any;
  return asTextContentResult(await maybeFilter(args, await client.beam.retrieve(id, body)));
};

export default { metadata, tool, handler };
