// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'state_vector',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/statevector',
};

export const tool: Tool = {
  name: 'create_state_vector',
  description:
    'Service operation to take a single state vector as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.',
  inputSchema: {
    type: 'object',
    properties: {
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      epoch: {
        type: 'string',
        description:
          'Time of validity for state vector in ISO 8601 UTC datetime format, with microsecond precision.',
        format: 'date-time',
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      actualODSpan: {
        type: 'number',
        description: 'The actual time span used for the OD of the object, expressed in days.',
      },
      algorithm: {
        type: 'string',
        description: 'Optional algorithm used to produce this record.',
      },
      alt1ReferenceFrame: {
        type: 'string',
        description: 'The reference frame of the alternate1 (Alt1) cartesian orbital state.',
      },
      alt2ReferenceFrame: {
        type: 'string',
        description: 'The reference frame of the alternate2 (Alt2) cartesian orbital state.',
      },
      area: {
        type: 'number',
        description: "The actual area of the object at it's largest cross-section, expressed in meters^2.",
      },
      bDot: {
        type: 'number',
        description: 'First derivative of drag/ballistic coefficient (m2/kg-s).',
      },
      cmOffset: {
        type: 'number',
        description: 'Model parameter value for center of mass offset (m).',
      },
      cov: {
        type: 'array',
        description:
          "Covariance matrix, in kilometer and second based units, in the specified covReferenceFrame.  If the covReferenceFrame is null it is assumed to be J2000.\nThe array values (1-21) represent the lower triangular half of the position-velocity covariance matrix. The size of the covariance matrix is dynamic, depending on whether the covariance for position only or position & velocity. The covariance elements are position dependent within the array with values ordered as follows:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR&nbsp;&nbsp;\n\nx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1\n\ny&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;3\n\nz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;6\n\nx'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;10\n\ny'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15\n\nz'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;\n\nThe cov array should contain only the lower left triangle values from top left down to bottom right, in order.\n\nIf additional covariance terms are included for DRAG, SRP, and/or THRUST, the matrix can be extended with the following order of elements:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR\n\nDRG&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;23&nbsp;&nbsp;24&nbsp;&nbsp;25&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;\n\nSRP&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;30&nbsp;&nbsp;31&nbsp;&nbsp;32&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;\n\nTHR&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;38&nbsp;&nbsp;39&nbsp;&nbsp;40&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;44&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45&nbsp;\n\n\n",
        items: {
          type: 'number',
        },
      },
      covMethod: {
        type: 'string',
        description:
          'The method used to generate the covariance during the orbit determination (OD) that produced the state vector, or whether an arbitrary, non-calculated default value was used (CALCULATED, DEFAULT).',
      },
      covReferenceFrame: {
        type: 'string',
        description:
          'The reference frame of the covariance matrix elements. If the covReferenceFrame is null it is assumed to be J2000.',
        enum: ['J2000', 'UVW', 'EFG/TDR', 'TEME', 'GCRF'],
      },
      descriptor: {
        type: 'string',
        description: 'Optional source-provided and searchable metadata or descriptor of the data.',
      },
      dragArea: {
        type: 'number',
        description: 'The effective area of the object exposed to atmospheric drag, expressed in meters^2.',
      },
      dragCoeff: {
        type: 'number',
        description: 'Area-to-mass ratio coefficient for atmospheric ballistic drag (m2/kg).',
      },
      dragModel: {
        type: 'string',
        description:
          'The Drag Model used for this vector (e.g. HARRIS-PRIESTER, JAC70, JBH09, MSIS90, NONE, etc.).',
      },
      edr: {
        type: 'number',
        description: 'Model parameter value for energy dissipation rate (EDR) (w/kg).',
      },
      eqCov: {
        type: 'array',
        description:
          'The covariance matrix values represent the lower triangular half of the covariance matrix in terms of equinoctial elements.&nbsp; The size of the covariance matrix is dynamic.&nbsp; The values are outputted in order across each row, i.e.:\n\n1&nbsp;&nbsp; 2&nbsp;&nbsp; 3&nbsp;&nbsp; 4&nbsp;&nbsp; 5\n\n6&nbsp;&nbsp; 7&nbsp;&nbsp; 8&nbsp;&nbsp; 9&nbsp; 10\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n51&nbsp; 52&nbsp; 53&nbsp; 54&nbsp; 55\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n\n\n\nThe ordering of values is as follows:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Af&nbsp;&nbsp; Ag&nbsp;&nbsp; L&nbsp;&nbsp;&nbsp; N&nbsp;&nbsp; Chi&nbsp; Psi&nbsp;&nbsp; B&nbsp;&nbsp; BDOT AGOM&nbsp; T&nbsp;&nbsp; C1&nbsp;&nbsp; C2&nbsp; ...\n\nAf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1\n\nAg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp; 3\n\nL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp; 6\n\nN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp; 10\n\nChi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11&nbsp;&nbsp; 12&nbsp;&nbsp; 13&nbsp;&nbsp; 14&nbsp;&nbsp; 15\n\nPsi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 16&nbsp;&nbsp; 17&nbsp;&nbsp; 18&nbsp;&nbsp; 19&nbsp;&nbsp; 20&nbsp;&nbsp; 21\n\nB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 22&nbsp;&nbsp; 23&nbsp;&nbsp; 24 &nbsp;&nbsp;25&nbsp;&nbsp; 26&nbsp;&nbsp; 27&nbsp;&nbsp; 28\n\nBDOT&nbsp;&nbsp; 29&nbsp;&nbsp; 30&nbsp;&nbsp; 31&nbsp;&nbsp; 32&nbsp;&nbsp; 33&nbsp;&nbsp; 34&nbsp;&nbsp; 35&nbsp;&nbsp; 36\n\nAGOM&nbsp; 37&nbsp;&nbsp; 38&nbsp;&nbsp; 39&nbsp;&nbsp; 40&nbsp;&nbsp; 41&nbsp;&nbsp; 42&nbsp;&nbsp; 43&nbsp;&nbsp; 44&nbsp;&nbsp; 45\n\nT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 46&nbsp;&nbsp; 47&nbsp;&nbsp; 48&nbsp;&nbsp; 49&nbsp;&nbsp; 50&nbsp;&nbsp; 51&nbsp;&nbsp; 52&nbsp;&nbsp; 53&nbsp;&nbsp; 54&nbsp;&nbsp; 55\n\nC1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 56&nbsp;&nbsp; 57&nbsp;&nbsp; 58&nbsp;&nbsp; 59&nbsp;&nbsp; 60&nbsp;&nbsp; 61&nbsp;&nbsp; 62&nbsp;&nbsp; 63&nbsp;&nbsp; 64&nbsp;&nbsp; 65&nbsp;&nbsp; 66\n\nC2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 67&nbsp;&nbsp; 68&nbsp;&nbsp; 69&nbsp;&nbsp; 70&nbsp;&nbsp; 71&nbsp; &nbsp;72&nbsp;&nbsp; 73&nbsp;&nbsp; 74&nbsp;&nbsp; 75&nbsp;&nbsp; 76&nbsp;&nbsp; 77&nbsp;&nbsp; 78\n\n:\n\n:\n\nwhere C1, C2, etc, are the "consider parameters" that may be added to the covariance matrix.&nbsp; The covariance matrix will be as large as the last element/model parameter needed.&nbsp; In other words, if the DC solved for all 6 elements plus AGOM, the covariance matrix will be 9x9 (and the rows for B and BDOT will be all zeros).&nbsp; If the covariance matrix is unavailable, the size will be set to 0x0, and no data will follow.&nbsp; The cov field should contain only the lower left triangle values from top left down to bottom right, in order.',
        items: {
          type: 'number',
        },
      },
      errorControl: {
        type: 'number',
        description: 'Integrator error control.',
      },
      fixedStep: {
        type: 'boolean',
        description: 'Boolean indicating use of fixed step size for this vector.',
      },
      geopotentialModel: {
        type: 'string',
        description:
          'Geopotential model used for this vector (e.g. EGM-96, WGS-84, WGS-72, JGM-2, or GEM-T3), including mm degree zonals, nn degree/order tesserals. E.g. EGM-96 24Z,24T.',
      },
      iau1980Terms: {
        type: 'integer',
        description: 'Number of terms used in the IAU 1980 nutation model (4, 50, or 106).',
      },
      idOrbitDetermination: {
        type: 'string',
        description:
          "Unique identifier of the OD solution record that produced this state vector. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queries as /udl/orbitdetermination/abc.",
      },
      idStateVector: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      integratorMode: {
        type: 'string',
        description: 'Integrator Mode.',
      },
      inTrackThrust: {
        type: 'boolean',
        description: 'Boolean indicating use of in-track thrust perturbations for this vector.',
      },
      lastObEnd: {
        type: 'string',
        description:
          'The end of the time interval containing the time of the last accepted observation, in ISO 8601 UTC format with microsecond precision.  For an exact observation time, the firstObTime and lastObTime are the same.',
        format: 'date-time',
      },
      lastObStart: {
        type: 'string',
        description:
          'The start of the time interval containing the time of the last accepted observation, in ISO 8601 UTC format with microsecond precision.  For an exact observation time, the firstObTime and lastObTime are the same.',
        format: 'date-time',
      },
      leapSecondTime: {
        type: 'string',
        description:
          'Time of the next leap second after epoch in ISO 8601 UTC time. If the next leap second is not known, the time of the previous leap second is used.',
        format: 'date-time',
      },
      lunarSolar: {
        type: 'boolean',
        description: 'Boolean indicating use of lunar/solar perturbations for this vector.',
      },
      mass: {
        type: 'number',
        description: 'The mass of the object, in kilograms.',
      },
      obsAvailable: {
        type: 'integer',
        description: 'The number of observations available for the OD of the object.',
      },
      obsUsed: {
        type: 'integer',
        description: 'The number of observations accepted for the OD of the object.',
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
      origObjectId: {
        type: 'string',
        description:
          'Optional identifier provided by state vector source to indicate the target onorbit object of this state vector. This may be an internal identifier and not necessarily map to a valid satellite number.',
      },
      partials: {
        type: 'string',
        description: 'Type of partial derivatives used (ANALYTIC, FULL NUM, or FAST NUM).',
      },
      pedigree: {
        type: 'string',
        description:
          'The pedigree of state vector, or methods used for its generation to include state update/orbit determination, propagation from another state, or a state from a calibration satellite (e.g. ORBIT_UPDATE, PROPAGATION, CALIBRATION, CONJUNCTION, FLIGHT_PLAN).',
      },
      polarMotionX: {
        type: 'number',
        description: 'Polar Wander Motion X (arc seconds).',
      },
      polarMotionY: {
        type: 'number',
        description: 'Polar Wander Motion Y (arc seconds).',
      },
      posUnc: {
        type: 'number',
        description: 'One sigma position uncertainty, in kilometers.',
      },
      rawFileURI: {
        type: 'string',
        description:
          'Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.',
      },
      recODSpan: {
        type: 'number',
        description: 'The recommended OD time span calculated for the object, expressed in days.',
      },
      referenceFrame: {
        type: 'string',
        description:
          'The reference frame of the cartesian orbital states. If the referenceFrame is null it is assumed to be J2000.',
        enum: ['J2000', 'EFG/TDR', 'ECR/ECEF', 'TEME', 'ITRF', 'GCRF'],
      },
      residualsAcc: {
        type: 'number',
        description: 'The percentage of residuals accepted in the OD of the object.',
      },
      revNo: {
        type: 'integer',
        description: 'Epoch revolution number.',
      },
      rms: {
        type: 'number',
        description:
          'The Weighted Root Mean Squared (RMS) of the differential correction on the target object that produced this vector.  WRMS is a quality indicator of the state vector update, with a value of 1.00 being optimal.  WRMS applies to Batch Least Squares (BLS) processes.',
      },
      satNo: {
        type: 'integer',
        description: 'Satellite/Catalog number of the target OnOrbit object.',
      },
      sigmaPosUVW: {
        type: 'array',
        description:
          'Array containing the standard deviation of error in target object position, U, V and W direction respectively (km).',
        items: {
          type: 'number',
        },
      },
      sigmaVelUVW: {
        type: 'array',
        description:
          'Array containing the standard deviation of error in target object velocity, U, V and W direction respectively (km/sec).',
        items: {
          type: 'number',
        },
      },
      solarFluxAPAvg: {
        type: 'number',
        description: 'Average solar flux geomagnetic index.',
      },
      solarFluxF10: {
        type: 'number',
        description: 'F10 (10.7 cm) solar flux value.',
      },
      solarFluxF10Avg: {
        type: 'number',
        description: 'F10 (10.7 cm) solar flux 81-day average value.',
      },
      solarRadPress: {
        type: 'boolean',
        description: 'Boolean indicating use of solar radiation pressure perturbations for this vector.',
      },
      solarRadPressCoeff: {
        type: 'number',
        description: 'Area-to-mass ratio coefficient for solar radiation pressure.',
      },
      solidEarthTides: {
        type: 'boolean',
        description: 'Boolean indicating use of solid earth tide perturbations for this vector.',
      },
      sourcedData: {
        type: 'array',
        description:
          'Optional array of UDL data (observation) UUIDs used to build this state vector. See the associated sourcedDataTypes array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).',
        items: {
          type: 'string',
        },
      },
      sourcedDataTypes: {
        type: 'array',
        description:
          'Optional array of UDL observation data types used to build this state vector (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs of observations for the positionally corresponding data types in this array (the two arrays must match in size).',
        items: {
          type: 'string',
          enum: ['EO', 'RADAR', 'RF', 'DOA', 'ELSET', 'SV'],
        },
      },
      srpArea: {
        type: 'number',
        description:
          'The effective area of the object exposed to solar radiation pressure, expressed in meters^2.',
      },
      stepMode: {
        type: 'string',
        description: 'Integrator step mode (AUTO, TIME, or S).',
      },
      stepSize: {
        type: 'number',
        description: 'Initial integration step size (seconds).',
      },
      stepSizeSelection: {
        type: 'string',
        description: 'Initial step size selection (AUTO or MANUAL).',
      },
      tags: {
        type: 'array',
        description:
          'Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.',
        items: {
          type: 'string',
        },
      },
      taiUtc: {
        type: 'number',
        description:
          'TAI (Temps Atomique International) minus UTC (Universal Time Coordinates) offset in seconds.',
      },
      thrustAccel: {
        type: 'number',
        description: 'Model parameter value for thrust acceleration (m/s2).',
      },
      tracksAvail: {
        type: 'integer',
        description: 'The number of sensor tracks available for the OD of the object.',
      },
      tracksUsed: {
        type: 'integer',
        description: 'The number of sensor tracks accepted for the OD of the object.',
      },
      transactionId: {
        type: 'string',
        description:
          'Optional identifier to track a commercial or marketplace transaction executed to produce this data.',
      },
      uct: {
        type: 'boolean',
        description:
          "Boolean indicating this state vector was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an OnOrbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
      },
      ut1Rate: {
        type: 'number',
        description: 'Rate of change of UT1 (milliseconds/day) - first derivative of ut1Utc.',
      },
      ut1Utc: {
        type: 'number',
        description: 'Universal Time-1 (UT1) minus UTC offset, in seconds.',
      },
      velUnc: {
        type: 'number',
        description: 'One sigma velocity uncertainty, in kilometers/second.',
      },
      xaccel: {
        type: 'number',
        description:
          'Cartesian X acceleration of target, in kilometers/second^2, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.',
      },
      xpos: {
        type: 'number',
        description:
          'Cartesian X position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.',
      },
      xposAlt1: {
        type: 'number',
        description:
          'Cartesian X position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.',
      },
      xposAlt2: {
        type: 'number',
        description:
          'Cartesian X position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.',
      },
      xvel: {
        type: 'number',
        description:
          'Cartesian X velocity of target, in kilometers/second, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.',
      },
      xvelAlt1: {
        type: 'number',
        description:
          'Cartesian X velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.',
      },
      xvelAlt2: {
        type: 'number',
        description:
          'Cartesian X velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.',
      },
      yaccel: {
        type: 'number',
        description:
          'Cartesian Y acceleration of target, in kilometers/second^2, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.',
      },
      ypos: {
        type: 'number',
        description:
          'Cartesian Y position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.',
      },
      yposAlt1: {
        type: 'number',
        description:
          'Cartesian Y position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.',
      },
      yposAlt2: {
        type: 'number',
        description:
          'Cartesian Y position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.',
      },
      yvel: {
        type: 'number',
        description:
          'Cartesian Y velocity of target, in kilometers/second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.',
      },
      yvelAlt1: {
        type: 'number',
        description:
          'Cartesian Y velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.',
      },
      yvelAlt2: {
        type: 'number',
        description:
          'Cartesian Y velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.',
      },
      zaccel: {
        type: 'number',
        description:
          'Cartesian Z acceleration of target, in kilometers/second^2, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.',
      },
      zpos: {
        type: 'number',
        description:
          'Cartesian Z position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.',
      },
      zposAlt1: {
        type: 'number',
        description:
          'Cartesian Z position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.',
      },
      zposAlt2: {
        type: 'number',
        description:
          'Cartesian Z position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.',
      },
      zvel: {
        type: 'number',
        description:
          'Cartesian Z velocity of target, in kilometers/second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.',
      },
      zvelAlt1: {
        type: 'number',
        description:
          'Cartesian Z velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.',
      },
      zvelAlt2: {
        type: 'number',
        description:
          'Cartesian Z velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.',
      },
    },
  },
};

export const handler = (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  return client.stateVector.create(body);
};

export default { metadata, tool, handler };
