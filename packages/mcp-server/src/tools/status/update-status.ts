// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'status',
  operation: 'write',
  tags: [],
  httpMethod: 'put',
  httpPath: '/udl/status/{id}',
};

export const tool: Tool = {
  name: 'update_status',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to update a single Status. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {}\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      id: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      idEntity: {
        type: 'string',
        description: 'Unique identifier of the parent entity.',
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      declassificationDate: {
        type: 'string',
        description: 'The declassification date of this data, in ISO 8601 UTC format.',
        format: 'date-time',
      },
      declassificationString: {
        type: 'string',
        description: 'Declassification string of this data.',
      },
      derivedFrom: {
        type: 'string',
        description: 'The sources or SCG references from which the classification of this data is derived.',
      },
      notes: {
        type: 'string',
        description: 'Comments describing the status creation and or updates to an entity.',
      },
      opsCap: {
        type: 'string',
        description: 'Operation capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).',
        enum: ['FMC', 'NMC', 'PMC', 'UNK'],
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
      state: {
        type: 'string',
        description:
          'Overall state of the entity, if applicable (e.g. UNKNOWN, DEAD, ACTIVE, RF ACTIVE, STANDBY).',
        enum: ['UNKNOWN', 'DEAD', 'ACTIVE', 'RF ACTIVE', 'STANDBY'],
      },
      subStatusCollection: {
        type: 'array',
        items: {
          type: 'object',
          description: 'Additional sub-system or capability status for the parent entity.',
          properties: {
            classificationMarking: {
              type: 'string',
              description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
            },
            dataMode: {
              type: 'string',
              description:
                'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
              enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
            },
            notes: {
              type: 'string',
              description: 'Descriptions and/or comments associated with the sub-status.',
            },
            source: {
              type: 'string',
              description: 'Source of the data.',
            },
            status: {
              type: 'string',
              description: 'Status of the sub-system/capability, e.g. FMC, NMC, PMC, UNK.',
              enum: ['FMC', 'NMC', 'PMC', 'UNK'],
            },
            statusId: {
              type: 'string',
              description: 'Id of the parent status.',
            },
            type: {
              type: 'string',
              description: "Parent entity's sub-system or capability status: mwCap, mdCap, ssCap, etc.",
              enum: ['mwCap', 'ssCap', 'mdCap'],
            },
            id: {
              type: 'string',
              description: 'Unique identifier of the record, auto-generated by the system.',
            },
            createdAt: {
              type: 'string',
              description: 'Time the row was created in the database, auto-populated by the system.',
              format: 'date-time',
            },
            createdBy: {
              type: 'string',
              description:
                'Application user who created the row in the database, auto-populated by the system.',
            },
            origin: {
              type: 'string',
              description:
                'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
            },
            origNetwork: {
              type: 'string',
              description:
                'The originating source network on which this record was created, auto-populated by the system.',
            },
          },
          required: ['classificationMarking', 'dataMode', 'notes', 'source', 'status', 'statusId', 'type'],
        },
      },
      sysCap: {
        type: 'string',
        description: 'System capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).',
        enum: ['FMC', 'NMC', 'PMC', 'UNK'],
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { id, ...body } = args as any;
  const response = await client.status.update(id, body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
