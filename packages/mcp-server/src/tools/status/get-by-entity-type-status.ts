// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'status',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/status/byEntityType/{entityType}',
};

export const tool: Tool = {
  name: 'get_by_entity_type_status',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to get all statuses related to a particular entity type.\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    type: 'object',\n    description: 'Status for a particular Entity. An entity may have multiple status records collected by various sources.',\n    properties: {\n      classificationMarking: {\n        type: 'string',\n        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n      },\n      dataMode: {\n        type: 'string',\n        description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n        enum: [          'REAL',\n          'TEST',\n          'SIMULATED',\n          'EXERCISE'\n        ]\n      },\n      idEntity: {\n        type: 'string',\n        description: 'Unique identifier of the parent entity.'\n      },\n      source: {\n        type: 'string',\n        description: 'Source of the data.'\n      },\n      id: {\n        type: 'string',\n        description: 'Unique identifier of the record, auto-generated by the system.'\n      },\n      createdAt: {\n        type: 'string',\n        description: 'Time the row was created in the database, auto-populated by the system.',\n        format: 'date-time'\n      },\n      createdBy: {\n        type: 'string',\n        description: 'Application user who created the row in the database, auto-populated by the system.'\n      },\n      declassificationDate: {\n        type: 'string',\n        description: 'The declassification date of this data, in ISO 8601 UTC format.',\n        format: 'date-time'\n      },\n      declassificationString: {\n        type: 'string',\n        description: 'Declassification string of this data.'\n      },\n      derivedFrom: {\n        type: 'string',\n        description: 'The sources or SCG references from which the classification of this data is derived.'\n      },\n      notes: {\n        type: 'string',\n        description: 'Comments describing the status creation and or updates to an entity.'\n      },\n      opsCap: {\n        type: 'string',\n        description: 'Operation capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).',\n        enum: [          'FMC',\n          'NMC',\n          'PMC',\n          'UNK'\n        ]\n      },\n      origin: {\n        type: 'string',\n        description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n      },\n      origNetwork: {\n        type: 'string',\n        description: 'The originating source network on which this record was created, auto-populated by the system.'\n      },\n      state: {\n        type: 'string',\n        description: 'Overall state of the entity, if applicable (e.g. UNKNOWN, DEAD, ACTIVE, RF ACTIVE, STANDBY).',\n        enum: [          'UNKNOWN',\n          'DEAD',\n          'ACTIVE',\n          'RF ACTIVE',\n          'STANDBY'\n        ]\n      },\n      subStatusCollection: {\n        type: 'array',\n        items: {\n          type: 'object',\n          description: 'Additional sub-system or capability status for the parent entity.',\n          properties: {\n            classificationMarking: {\n              type: 'string',\n              description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n            },\n            dataMode: {\n              type: 'string',\n              description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n              enum: [                'REAL',\n                'TEST',\n                'SIMULATED',\n                'EXERCISE'\n              ]\n            },\n            notes: {\n              type: 'string',\n              description: 'Descriptions and/or comments associated with the sub-status.'\n            },\n            source: {\n              type: 'string',\n              description: 'Source of the data.'\n            },\n            status: {\n              type: 'string',\n              description: 'Status of the sub-system/capability, e.g. FMC, NMC, PMC, UNK.',\n              enum: [                'FMC',\n                'NMC',\n                'PMC',\n                'UNK'\n              ]\n            },\n            statusId: {\n              type: 'string',\n              description: 'Id of the parent status.'\n            },\n            type: {\n              type: 'string',\n              description: 'Parent entity\\'s sub-system or capability status: mwCap, mdCap, ssCap, etc.',\n              enum: [                'mwCap',\n                'ssCap',\n                'mdCap'\n              ]\n            },\n            id: {\n              type: 'string',\n              description: 'Unique identifier of the record, auto-generated by the system.'\n            },\n            createdAt: {\n              type: 'string',\n              description: 'Time the row was created in the database, auto-populated by the system.',\n              format: 'date-time'\n            },\n            createdBy: {\n              type: 'string',\n              description: 'Application user who created the row in the database, auto-populated by the system.'\n            },\n            origin: {\n              type: 'string',\n              description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n            },\n            origNetwork: {\n              type: 'string',\n              description: 'The originating source network on which this record was created, auto-populated by the system.'\n            },\n            updatedAt: {\n              type: 'string',\n              description: 'Time the row was updated in the database, auto-populated by the system.',\n              format: 'date-time'\n            },\n            updatedBy: {\n              type: 'string',\n              description: 'Application user who updated the row in the database, auto-populated by the system.'\n            }\n          },\n          required: [            'classificationMarking',\n            'dataMode',\n            'notes',\n            'source',\n            'status',\n            'statusId',\n            'type'\n          ]\n        }\n      },\n      sysCap: {\n        type: 'string',\n        description: 'System capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).',\n        enum: [          'FMC',\n          'NMC',\n          'PMC',\n          'UNK'\n        ]\n      },\n      updatedAt: {\n        type: 'string',\n        description: 'Time the row was last updated in the database, auto-populated by the system.',\n        format: 'date-time'\n      },\n      updatedBy: {\n        type: 'string',\n        description: 'Application user who updated the row in the database, auto-populated by the system.'\n      }\n    },\n    required: [      'classificationMarking',\n      'dataMode',\n      'idEntity',\n      'source'\n    ]\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      entityType: {
        type: 'string',
      },
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['entityType'],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { entityType, ...body } = args as any;
  return asTextContentResult(await maybeFilter(args, await client.status.getByEntityType(entityType, body)));
};

export default { metadata, tool, handler };
