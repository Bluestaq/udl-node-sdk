// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'vessel',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/vessel',
};

export const tool: Tool = {
  name: 'list_vessel',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    $ref: '#/$defs/vessel_list_response'\n  },\n  $defs: {\n    vessel_list_response: {\n      type: 'object',\n      description: 'This service provides operations for manipulation and querying of maritime Vessel data. Vessel contains the static data of the specific vessel: mmsi, cruise speed, max speed, etc.',\n      properties: {\n        classificationMarking: {\n          type: 'string',\n          description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n        },\n        dataMode: {\n          type: 'string',\n          description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n          enum: [            'REAL',\n            'TEST',\n            'SIMULATED',\n            'EXERCISE'\n          ]\n        },\n        source: {\n          type: 'string',\n          description: 'Source of the data.'\n        },\n        id: {\n          type: 'string',\n          description: 'Unique identifier of the record, auto-generated by the system.'\n        },\n        altVesselId: {\n          type: 'string',\n          description: 'The original source Id for this vessel.'\n        },\n        callsign: {\n          type: 'string',\n          description: 'A uniquely designated identifier for the vessel\\'s transmitter station. All radio transmissions must be individually identified by the call sign. Merchant and naval vessels are assigned call signs by their national licensing authorities.'\n        },\n        createdAt: {\n          type: 'string',\n          description: 'Time the row was created in the database, auto-populated by the system.',\n          format: 'date-time'\n        },\n        createdBy: {\n          type: 'string',\n          description: 'Application user who created the row in the database, auto-populated by the system.'\n        },\n        firstSeen: {\n          type: 'string',\n          description: 'The date this vessel was first seen.',\n          format: 'date-time'\n        },\n        hullNum: {\n          type: 'string',\n          description: 'The vessel hull number designation of this maritime vessel. The hull number is a 1-6 character alphanumeric entry assigned to a ship and painted on the hull.'\n        },\n        idEntity: {\n          type: 'string',\n          description: 'Unique identifier of the parent entity. idEntity is required for Put.'\n        },\n        idOrganization: {\n          type: 'string',\n          description: 'The UDL ID of the organization that owns the vessel.'\n        },\n        imon: {\n          type: 'integer',\n          description: 'The International Maritime Organization Number of the vessel. IMON is a seven-digit number that uniquely identifies the vessel.'\n        },\n        length: {\n          type: 'number',\n          description: 'The overall length of the vessel, in meters. A value of 511 indicates a vessel length of 511 meters or greater.'\n        },\n        maxDraught: {\n          type: 'number',\n          description: 'The maximum static draught, in meters, of the vessel defined as the distance between the shipâ€™s keel and the waterline of the vessel.'\n        },\n        maxSpeed: {\n          type: 'number',\n          description: 'The maximum possible speed of this vessel in meters per second.'\n        },\n        mmsi: {\n          type: 'string',\n          description: 'The Maritime Mobile Service Identity of the vessel. MMSI is a nine-digit number that identifies the transmitter station of the vessel.'\n        },\n        numBlades: {\n          type: 'integer',\n          description: 'The number of blades per shaft for this vessel.'\n        },\n        numShafts: {\n          type: 'integer',\n          description: 'The number of shafts on this vessel.'\n        },\n        origin: {\n          type: 'string',\n          description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n        },\n        origNetwork: {\n          type: 'string',\n          description: 'The originating source network on which this record was created, auto-populated by the system.'\n        },\n        propType: {\n          type: 'string',\n          description: 'The type of propulsion employed by this vessel.'\n        },\n        sconum: {\n          type: 'string',\n          description: 'The Ship Control Number (SCONUM) is a naval vessel identification number (alphanumeric code) assigned by the Office of Naval Intelligence. SCONUM is sometimes referred to as NOIC ID. SCONUMs are typically of the form A#####, where A is an alpha character and # is numerical.'\n        },\n        status: {\n          type: 'string',\n          description: 'The status of this vessel.'\n        },\n        sternType: {\n          type: 'string',\n          description: 'The stern type code (Counter, Cruiser) associated with this vessel.'\n        },\n        vesselBuilder: {\n          type: 'string',\n          description: 'The shipbuilder who built this vessel.'\n        },\n        vesselClass: {\n          type: 'string',\n          description: 'The common name for a group of ships with similar design, usually named for the first vessel of the class.'\n        },\n        vesselDescription: {\n          type: 'string',\n          description: 'Further description or explanation of the vessel or type.'\n        },\n        vesselFlag: {\n          type: 'string',\n          description: 'The flag of the subject vessel.'\n        },\n        vesselName: {\n          type: 'string',\n          description: 'The name of this vessel. Vessel names that exceed the AIS 20 character are shortened (not truncated) to 15 character-spaces, followed by an underscore and the last 4 characters-spaces of the vessel full name.'\n        },\n        vesselType: {\n          type: 'string',\n          description: 'The reported ship type (e.g. Passenger, Tanker, Cargo, Other, etc.).'\n        },\n        vslWt: {\n          type: 'number',\n          description: 'The weight in tons, of this vessel.'\n        },\n        width: {\n          type: 'number',\n          description: 'The breadth of the vessel, in meters. A value of 63 indicates a vessel breadth of 63 meters or greater.'\n        },\n        yearBuilt: {\n          type: 'string',\n          description: 'Year the vessel went into service.'\n        }\n      },\n      required: [        'classificationMarking',\n        'dataMode',\n        'source'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: [],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { jq_filter, ...body } = args as any;
  const response = await client.vessel.list(body).asResponse();
  return asTextContentResult(await maybeFilter(jq_filter, await response.json()));
};

export default { metadata, tool, handler };
