// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'collect_responses',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/collectresponse',
};

export const tool: Tool = {
  name: 'list_collect_responses',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    $ref: '#/$defs/collect_response_abridged'\n  },\n  $defs: {\n    collect_response_abridged: {\n      type: 'object',\n      description: 'Collect response supports the response and status of individual collect requests. Each response is referenced by the UUID of the request, and contains information including the status of the request, collection times and types, and reference(s) to the observations collected. There may be multiple responses associated with a request, either from multiple collectors or to relay status changes prior to completion and delivery.',\n      properties: {\n        classificationMarking: {\n          type: 'string',\n          description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n        },\n        dataMode: {\n          type: 'string',\n          description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n          enum: [            'REAL',\n            'TEST',\n            'SIMULATED',\n            'EXERCISE'\n          ]\n        },\n        idRequest: {\n          type: 'string',\n          description: 'Unique identifier of the request associated with this response.'\n        },\n        source: {\n          type: 'string',\n          description: 'Source of the data.'\n        },\n        id: {\n          type: 'string',\n          description: 'Unique identifier of the record, auto-generated by the system.'\n        },\n        actualEndTime: {\n          type: 'string',\n          description: 'The actual end time of the collect or contact, in ISO 8601 UTC format.',\n          format: 'date-time'\n        },\n        actualStartTime: {\n          type: 'string',\n          description: 'The actual start time of the collect or contact, in ISO 8601 UTC format.',\n          format: 'date-time'\n        },\n        altEndTime: {\n          type: 'string',\n          description: 'Proposed alternative end time, in ISO 8601 UTC format.',\n          format: 'date-time'\n        },\n        altStartTime: {\n          type: 'string',\n          description: 'Proposed alternative start time, in ISO 8601 UTC format.',\n          format: 'date-time'\n        },\n        createdAt: {\n          type: 'string',\n          description: 'Time the row was created in the database, auto-populated by the system.',\n          format: 'date-time'\n        },\n        createdBy: {\n          type: 'string',\n          description: 'Application user who created the row in the database, auto-populated by the system.'\n        },\n        errCode: {\n          type: 'string',\n          description: 'Error code associated with this request/response.'\n        },\n        externalId: {\n          type: 'string',\n          description: 'UUID from external systems.  This field has no meaning within UDL and is provided as a convenience for systems that require tracking of internal system generated ID.'\n        },\n        idOnOrbit: {\n          type: 'string',\n          description: 'Unique identifier of the target on-orbit object associated with this response.'\n        },\n        idPlan: {\n          type: 'string',\n          description: 'Unique identifier of the parent plan or schedule associated with the request/response.'\n        },\n        idSensor: {\n          type: 'string',\n          description: 'Unique identifier of the reporting sensor.'\n        },\n        notes: {\n          type: 'string',\n          description: 'Notes or comments associated with this response.'\n        },\n        origin: {\n          type: 'string',\n          description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n        },\n        origNetwork: {\n          type: 'string',\n          description: 'The originating source network on which this record was created, auto-populated by the system.'\n        },\n        origObjectId: {\n          type: 'string',\n          description: 'Optional identifier provided by data source to indicate the target object of this response. This may be an internal identifier and not necessarily a valid satellite number.'\n        },\n        origSensorId: {\n          type: 'string',\n          description: 'Optional identifier provided by the collection source to indicate the sensor identifier responding to this collect or contact. This may be an internal identifier and not necessarily a valid sensor ID.'\n        },\n        satNo: {\n          type: 'integer',\n          description: 'Satellite/catalog number of the target on-orbit object.'\n        },\n        srcIds: {\n          type: 'array',\n          description: 'Array of UUIDs of the UDL data record(s) collected in response to the associated request.  See the associated \\'srcTyps\\' array for the specific types of data, positionally corresponding to the UUIDs in this array.  The \\'srcTyps\\' and \\'srcIds\\' arrays must match in size.  The appropriate API operation can be used to retrieve the specified object(s) (e.g. /udl/rfobservation/{uuid}).',\n          items: {\n            type: 'string'\n          }\n        },\n        srcTyps: {\n          type: 'array',\n          description: 'Array of UDL record type(s) (DOA, ELSET, EO, RADAR, RF, SV) collected or produced in response to the associated request.  See the associated \\'srcIds\\' array for the record UUIDs, positionally corresponding to the record types in this array.  The \\'srcTyps\\' and \\'srcIds\\' arrays must match in size.  The appropriate API operation can be used to retrieve the specified object(s) (e.g. /udl/rfobservation/{uuid}).',\n          items: {\n            type: 'string'\n          }\n        },\n        status: {\n          type: 'string',\n          description: 'The status of the request (ACCEPTED, CANCELLED, COLLECTED, COMPLETED, DELIVERED, FAILED, PARTIAL, PROPOSED, REJECTED, SCHEDULED):\\n\\nACCEPTED: The collect or contact request has been received and accepted.\\n\\nCANCELLED: A previously scheduled collect or contact whose execution was cancelled.\\n\\nCOLLECTED: The collect has been accomplished. A collected state implies that additional activity is required for delivery/completion.\\n\\nCOMPLETED: The collect or contact has been completed. For many systems completed and delivered constitute an equivalent successful end state.\\n\\nDELIVERED: The collected observation(s) have been delivered to the requestor. For many systems completed and delivered constitute an equivalent successful end state. A DELIVERED state is typically used for systems that exhibit a delay between collect and delivery, such as with space-based systems which require ground contact to deliver observations.\\n\\nFAILED: The collect or contact was attempted and failed, or the delivery of the collected observation(s) failed. A FAILED status may be accompanied by an error code (errCode), if available.\\n\\nPARTIAL: A PARTIAL state indicates that a part of a multi-track request has been accomplished, but the full request is incomplete. A PARTIAL status should ultimately be resolved to an end state.\\n\\nPROPOSED: Indicates that the request was received and alternate collect or contact time(s) (altStartTime, altEndTime) have been proposed. If an alternate is accepted by the requestor the current request should be cancelled and a new request created.\\n\\nREJECTED: The request has been received and rejected by the provider. A REJECTED status may be accompanied by an explanation (notes) of the reason that the request was rejected.\\n\\nSCHEDULED: The request was received and has been scheduled for execution.'\n        },\n        taskId: {\n          type: 'string',\n          description: 'Optional task ID associated with the request/response.'\n        }\n      },\n      required: [        'classificationMarking',\n        'dataMode',\n        'idRequest',\n        'source'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      createdAt: {
        type: 'string',
        description:
          'Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)',
        format: 'date',
      },
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['createdAt'],
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.collectResponses.list(body).asResponse();
  return asTextContentResult(await maybeFilter(args, await response.json()));
};

export default { metadata, tool, handler };
