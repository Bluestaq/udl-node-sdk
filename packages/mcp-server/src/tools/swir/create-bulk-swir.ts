// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'swir',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/swir/createBulk',
};

export const tool: Tool = {
  name: 'create_bulk_swir',
  description:
    'Service operation intended for initial integration only, to take a list of SWIR records as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.',
  inputSchema: {
    type: 'object',
    properties: {
      body: {
        type: 'array',
        items: {
          type: 'object',
          description: 'Data representing observed short wave infrared (SWIR) measurements.',
          properties: {
            classificationMarking: {
              type: 'string',
              description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
            },
            dataMode: {
              type: 'string',
              description:
                'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
              enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
            },
            source: {
              type: 'string',
              description: 'Source of the data.',
            },
            ts: {
              type: 'string',
              description: 'Data timestamp in ISO8601 UTC format.',
              format: 'date-time',
            },
            id: {
              type: 'string',
              description: 'Unique identifier of the record, auto-generated by the system.',
            },
            absFluxes: {
              type: 'array',
              description:
                'Array of absolute flux measurement data, in Watts per square centimeter per micron. This array should correspond with the same-sized array of wavelengths.',
              items: {
                type: 'number',
              },
            },
            badWave: {
              type: 'string',
              description: 'User comments concerning sensor or data limitations.',
            },
            createdAt: {
              type: 'string',
              description: 'Time the row was created in the database, auto-populated by the system.',
              format: 'date-time',
            },
            createdBy: {
              type: 'string',
              description:
                'Application user who created the row in the database, auto-populated by the system.',
            },
            fluxRatios: {
              type: 'array',
              description:
                'Array of flux ratio data. This array should correspond with the same-sized array of ratioWavelengths.',
              items: {
                type: 'number',
              },
            },
            idOnOrbit: {
              type: 'string',
              description: 'Unique identifier of the target on-orbit object.',
            },
            lat: {
              type: 'number',
              description:
                'Spacecraft WGS84 latitude, in degrees at obTime. -90 to 90 degrees (negative values south of equator).',
            },
            locationName: {
              type: 'string',
              description: 'Location/name of the observing sensor.',
            },
            lon: {
              type: 'number',
              description:
                'Spacecraft WGS84 longitude at ob time, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).',
            },
            origin: {
              type: 'string',
              description:
                'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
            },
            origNetwork: {
              type: 'string',
              description:
                'The originating source network on which this record was created, auto-populated by the system.',
            },
            origObjectId: {
              type: 'string',
              description: 'Original object ID or Catalog Number provided by source.',
            },
            ratioWavelengths: {
              type: 'array',
              description:
                'Array of ratio wavelength data. This array should correspond with the same-sized array of fluxRatios.',
              items: {
                type: 'number',
              },
            },
            satNo: {
              type: 'integer',
              description: 'Satellite/catalog number of the target on-orbit object.',
            },
            solarPhaseAngle: {
              type: 'number',
              description:
                'The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.',
            },
            wavelengths: {
              type: 'array',
              description:
                'Array of wavelengths, in microns. This array should correspond with the same-sized array of absFluxes.',
              items: {
                type: 'number',
              },
            },
          },
          required: ['classificationMarking', 'dataMode', 'source', 'ts'],
        },
      },
    },
    required: ['body'],
  },
  annotations: {},
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.swir.createBulk(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
