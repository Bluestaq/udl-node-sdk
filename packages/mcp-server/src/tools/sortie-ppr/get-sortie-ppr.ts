// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'sortie_ppr',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/sortieppr/{id}',
};

export const tool: Tool = {
  name: 'get_sortie_ppr',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to get a single sortieppr record by its unique ID passed as a path parameter.\n\n# Response Schema\n```json\n{\n  $ref: '#/$defs/sortie_ppr_full',\n  $defs: {\n    sortie_ppr_full: {\n      type: 'object',\n      description: 'SortiePPR is a regulatory requirement where operators must obtain permissions to full operational access to a runway, taxiway, or airport service.',\n      properties: {\n        classificationMarking: {\n          type: 'string',\n          description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n        },\n        dataMode: {\n          type: 'string',\n          description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n          enum: [            'REAL',\n            'TEST',\n            'SIMULATED',\n            'EXERCISE'\n          ]\n        },\n        idSortie: {\n          type: 'string',\n          description: 'Unique identifier of the Aircraft Sortie associated with this prior permission required (PPR) record.'\n        },\n        source: {\n          type: 'string',\n          description: 'Source of the data.'\n        },\n        id: {\n          type: 'string',\n          description: 'Unique identifier of the record, auto-generated by the system.'\n        },\n        createdAt: {\n          type: 'string',\n          description: 'Time the row was created in the database, auto-populated by the system.',\n          format: 'date-time'\n        },\n        createdBy: {\n          type: 'string',\n          description: 'Application user who created the row in the database, auto-populated by the system.'\n        },\n        endTime: {\n          type: 'string',\n          description: 'Time the prior permission required (PPR) valid window ends, in ISO 8601 UTC format with millisecond precision.',\n          format: 'date-time'\n        },\n        externalId: {\n          type: 'string',\n          description: 'Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.'\n        },\n        grantor: {\n          type: 'string',\n          description: 'Identifier of the prior permission required (PPR) grantor.'\n        },\n        number: {\n          type: 'string',\n          description: 'The prior permission required (PPR) number issued by the airfield for a sortie.'\n        },\n        origin: {\n          type: 'string',\n          description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n        },\n        origNetwork: {\n          type: 'string',\n          description: 'The originating source network on which this record was created, auto-populated by the system.'\n        },\n        remarks: {\n          type: 'string',\n          description: 'Remarks concerning the prior permission required (PPR) for a sortie.'\n        },\n        requestor: {\n          type: 'string',\n          description: 'The username of the prior permission required (PPR) requestor.'\n        },\n        sourceDL: {\n          type: 'string',\n          description: 'The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.'\n        },\n        startTime: {\n          type: 'string',\n          description: 'Time the prior permission required (PPR) valid window begins, in ISO 8601 UTC format with millisecond precision.',\n          format: 'date-time'\n        },\n        type: {\n          type: 'string',\n          description: 'Type of prior permission required (PPR) for a sortie (M - Military or C - Civilian). Enum: [M, C].',\n          enum: [            'M',\n            'C'\n          ]\n        },\n        updatedAt: {\n          type: 'string',\n          description: 'Time the row was updated in the database, auto-populated by the system.',\n          format: 'date-time'\n        },\n        updatedBy: {\n          type: 'string',\n          description: 'Application user who updated the row in the database, auto-populated by the system.'\n        }\n      },\n      required: [        'classificationMarking',\n        'dataMode',\n        'idSortie',\n        'source'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      id: {
        type: 'string',
      },
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['id'],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { id, ...body } = args as any;
  return asTextContentResult(await maybeFilter(args, await client.sortiePpr.get(id, body)));
};

export default { metadata, tool, handler };
