// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'star_catalog',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/starcatalog/{id}',
};

export const tool: Tool = {
  name: 'get_star_catalog',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to get a single StarCatalog record by its unique ID passed as a path parameter.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  description: 'The star catalog provides the position, proper motion, parallax, and photometric magnitudes at various bandpasses of a star.',\n  properties: {\n    astrometryOrigin: {\n      type: 'string',\n      description: 'Originating astrometric catalog for this object. Enum: [GAIADR3, HIPPARCOS, USNOBSC].',\n      enum: [        'GAIADR3',\n        'HIPPARCOS',\n        'USNOBSC'\n      ]\n    },\n    classificationMarking: {\n      type: 'string',\n      description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n    },\n    csId: {\n      type: 'integer',\n      description: 'The ID of this object in the specific catalog associated with this record.'\n    },\n    dataMode: {\n      type: 'string',\n      description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n      enum: [        'REAL',\n        'TEST',\n        'SIMULATED',\n        'EXERCISE'\n      ]\n    },\n    dec: {\n      type: 'number',\n      description: 'Barycentric declination of the source in International Celestial Reference System (ICRS) at the reference epoch, in degrees.'\n    },\n    ra: {\n      type: 'number',\n      description: 'Barycentric right ascension of the source in the International Celestial Reference System (ICRS) frame at the reference epoch, in degrees.'\n    },\n    source: {\n      type: 'string',\n      description: 'Source of the data.'\n    },\n    starEpoch: {\n      type: 'number',\n      description: 'Reference epoch to which the astrometric source parameters are referred, expressed as Julian Year in Barycentric Coordinate Time (TCB).'\n    },\n    id: {\n      type: 'string',\n      description: 'Unique identifier of the record, auto-generated by the system.'\n    },\n    bpmag: {\n      type: 'number',\n      description: 'Gaia DR3 optical photometric Bp-band magnitude in the Vega scale.'\n    },\n    bpmagUnc: {\n      type: 'number',\n      description: 'Gaia DR3 optical Bp-band magnitude uncertainty in the Vega scale.'\n    },\n    catVersion: {\n      type: 'string',\n      description: 'The version of the catalog associated with this object.'\n    },\n    createdAt: {\n      type: 'string',\n      description: 'Time the row was created in the database, auto-populated by the system.',\n      format: 'date-time'\n    },\n    createdBy: {\n      type: 'string',\n      description: 'Application user who created the row in the database, auto-populated by the system.'\n    },\n    decUnc: {\n      type: 'number',\n      description: 'Uncertainty of the declination of the source, in milliarcseconds, at the reference epoch.'\n    },\n    gaiadr3CatId: {\n      type: 'integer',\n      description: 'The ID of this object in the Gaia DR3 Catalog.'\n    },\n    gmag: {\n      type: 'number',\n      description: 'Gaia DR3 optical photometric G-band magnitude in the Vega scale.'\n    },\n    gmagUnc: {\n      type: 'number',\n      description: 'Gaia DR3 optical photometric G-band magnitude uncertainty in the Vega scale.'\n    },\n    gncCatId: {\n      type: 'integer',\n      description: 'The ID of this object in the Guidance and Navagation Control (GNC) Catalog.'\n    },\n    hipCatId: {\n      type: 'integer',\n      description: 'The ID of this object in the Hipparcos Catalog.'\n    },\n    hmag: {\n      type: 'number',\n      description: 'Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric H-band magnitude in the Vega scale.'\n    },\n    hmagUnc: {\n      type: 'number',\n      description: 'Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric H-band magnitude uncertainty in the Vega scale.'\n    },\n    jmag: {\n      type: 'number',\n      description: 'Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric J-band magnitude in the Vega scale.'\n    },\n    jmagUnc: {\n      type: 'number',\n      description: 'Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric J-band magnitude uncertainty in the Vega scale.'\n    },\n    kmag: {\n      type: 'number',\n      description: 'Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric K-band magnitude in the Vega scale.'\n    },\n    kmagUnc: {\n      type: 'number',\n      description: 'Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric K-band magnitude uncertainty in the Vega scale.'\n    },\n    multFlag: {\n      type: 'boolean',\n      description: 'Flag indicating that this is a multiple object source.'\n    },\n    neighborDistance: {\n      type: 'number',\n      description: 'Distance between source and nearest neighbor, in arcseconds.'\n    },\n    neighborFlag: {\n      type: 'boolean',\n      description: 'Flag indicating that the nearest catalog neighbor is closer than 4.6 arcseconds.'\n    },\n    neighborId: {\n      type: 'integer',\n      description: 'The catalog ID of the nearest neighbor to this source.'\n    },\n    origin: {\n      type: 'string',\n      description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n    },\n    origNetwork: {\n      type: 'string',\n      description: 'The originating source network on which this record was created, auto-populated by the system.'\n    },\n    parallax: {\n      type: 'number',\n      description: 'Absolute stellar parallax of the source, in milliarcseconds.'\n    },\n    parallaxUnc: {\n      type: 'number',\n      description: 'Uncertainty of the stellar parallax, in milliarcseconds.'\n    },\n    pmdec: {\n      type: 'number',\n      description: 'Proper motion in declination of the source, in milliarcseconds/year, at the reference epoch.'\n    },\n    pmdecUnc: {\n      type: 'number',\n      description: 'Uncertainty of proper motion in declination, in milliarcseconds/year.'\n    },\n    pmra: {\n      type: 'number',\n      description: 'Proper motion in right ascension of the source, in milliarcseconds/year, at the reference epoch.'\n    },\n    pmraUnc: {\n      type: 'number',\n      description: 'Uncertainty of proper motion in right ascension, in milliarcseconds/year.'\n    },\n    pmUncFlag: {\n      type: 'boolean',\n      description: 'Flag indicating that the proper motion uncertainty in either ra or dec is greater than 10 milliarcseconds/year.'\n    },\n    posUncFlag: {\n      type: 'boolean',\n      description: 'Flag indicating that the position uncertainty in either ra or dec is greater than 100 milliarcseconds.'\n    },\n    raUnc: {\n      type: 'number',\n      description: 'Uncertainty of the right ascension of the source, in milliarcseconds, at the reference epoch.'\n    },\n    rpmag: {\n      type: 'number',\n      description: 'Gaia DR3 optical Rp-band magnitude in the Vega scale.'\n    },\n    rpmagUnc: {\n      type: 'number',\n      description: 'Gaia DR3 optical photometric Rp-band magnitude uncertainty in the Vega scale.'\n    },\n    shift: {\n      type: 'number',\n      description: 'Photocentric shift caused by neighbors, in arcseconds.'\n    },\n    shiftFlag: {\n      type: 'boolean',\n      description: 'Flag indicating that the photocentric shift is greater than 50 milliarcseconds.'\n    },\n    updatedAt: {\n      type: 'string',\n      description: 'Time the row was updated in the database.',\n      format: 'date-time'\n    },\n    updatedBy: {\n      type: 'string',\n      description: 'Application user who updated the row in the database.'\n    },\n    varFlag: {\n      type: 'boolean',\n      description: 'Flag indicating that the source exhibits variable magnitude.'\n    }\n  },\n  required: [    'astrometryOrigin',\n    'classificationMarking',\n    'csId',\n    'dataMode',\n    'dec',\n    'ra',\n    'source',\n    'starEpoch'\n  ]\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      id: {
        type: 'string',
      },
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { id, ...body } = args as any;
  return asTextContentResult(await maybeFilter(args, await client.starCatalog.get(id, body)));
};

export default { metadata, tool, handler };
