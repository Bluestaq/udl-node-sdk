// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'tdoa_fdoa.diffofarrival',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/diffofarrival',
};

export const tool: Tool = {
  name: 'list_tdoa_fdoa_diffofarrival',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    $ref: '#/$defs/diffofarrival_abridged'\n  },\n  $defs: {\n    diffofarrival_abridged: {\n      type: 'object',\n      description: 'Model representation of Signal time and frequency difference of arrival (TDOA/FDOA) information obtained by using passive RF based sensor phenomenologies and sensor triangulation.',\n      properties: {\n        classificationMarking: {\n          type: 'string',\n          description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n        },\n        dataMode: {\n          type: 'string',\n          description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n          enum: [            'REAL',\n            'TEST',\n            'SIMULATED',\n            'EXERCISE'\n          ]\n        },\n        obTime: {\n          type: 'string',\n          description: 'Ob detection time in ISO 8601 UTC with microsecond precision.',\n          format: 'date-time'\n        },\n        source: {\n          type: 'string',\n          description: 'Source of the data.'\n        },\n        id: {\n          type: 'string',\n          description: 'Unique identifier of the record, auto-generated by the system.'\n        },\n        bandwidth: {\n          type: 'number',\n          description: 'Bandwidth of the signal in Hz.'\n        },\n        collectionMode: {\n          type: 'string',\n          description: 'Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).'\n        },\n        createdAt: {\n          type: 'string',\n          description: 'Time the row was created in the database, auto-populated by the system.',\n          format: 'date-time'\n        },\n        createdBy: {\n          type: 'string',\n          description: 'Application user who created the row in the database, auto-populated by the system.'\n        },\n        deltaRange: {\n          type: 'number',\n          description: 'Delta range, in km. Delta range calculation convention is (sensor2 - sensor1).'\n        },\n        deltaRangeRate: {\n          type: 'number',\n          description: 'Delta range rate, in km/sec. Delta range rate calculation convention is (sensor2 - sensor1).'\n        },\n        deltaRangeRateUnc: {\n          type: 'number',\n          description: 'One sigma uncertainty in the delta range rate, in km/sec.'\n        },\n        deltaRangeUnc: {\n          type: 'number',\n          description: 'One sigma uncertainty in delta range, in km.'\n        },\n        descriptor: {\n          type: 'string',\n          description: 'Optional source-provided and searchable metadata or descriptor of the data.'\n        },\n        fdoa: {\n          type: 'number',\n          description: 'Frequency difference of arrival of the center frequency signal, in Hz.  FDOA calculation convention is (sensor2 - sensor1).'\n        },\n        fdoaUnc: {\n          type: 'number',\n          description: 'One sigma uncertainty in frequency difference of arrival of the center frequency signal, in Hz.'\n        },\n        frequency: {\n          type: 'number',\n          description: 'Center frequency of the collect in Hz.'\n        },\n        idOnOrbit: {\n          type: 'string',\n          description: 'Unique identifier of the target on-orbit object, if correlated.'\n        },\n        idSensor1: {\n          type: 'string',\n          description: 'Sensor ID of the primary/1st sensor used for this measurement.'\n        },\n        idSensor2: {\n          type: 'string',\n          description: 'Sensor ID of the secondary/2nd sensor used for this measurement.'\n        },\n        origin: {\n          type: 'string',\n          description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n        },\n        origNetwork: {\n          type: 'string',\n          description: 'The originating source network on which this record was created, auto-populated by the system.'\n        },\n        origObjectId: {\n          type: 'string',\n          description: 'Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.'\n        },\n        origSensorId1: {\n          type: 'string',\n          description: 'Optional identifier provided by DOA source to indicate the primary/1st sensor identifier used for this measurement. This may be an internal identifier and not necessarily a valid sensor ID.'\n        },\n        origSensorId2: {\n          type: 'string',\n          description: 'Optional identifier provided by DOA source to indicate the secondary/2nd sensor identifier used for this this observation. This may be an internal identifier and not necessarily a valid sensor ID.'\n        },\n        satNo: {\n          type: 'integer',\n          description: 'Catalog number of the target on-orbit object.'\n        },\n        sen2alt: {\n          type: 'number',\n          description: 'Sensor 2 altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.'\n        },\n        sen2lat: {\n          type: 'number',\n          description: 'Sensor 2 WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info.'\n        },\n        sen2lon: {\n          type: 'number',\n          description: 'Sensor 2 WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info.'\n        },\n        senalt: {\n          type: 'number',\n          description: 'Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.'\n        },\n        senlat: {\n          type: 'number',\n          description: 'Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).'\n        },\n        senlon: {\n          type: 'number',\n          description: 'Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).'\n        },\n        sensor1Delay: {\n          type: 'number',\n          description: 'The signal arrival delay relative to sensor 1 in seconds.'\n        },\n        sensor2Delay: {\n          type: 'number',\n          description: 'The signal arrival delay relative to sensor 2 in seconds.'\n        },\n        snr: {\n          type: 'number',\n          description: 'Signal to noise ratio, in dB.'\n        },\n        sourceDL: {\n          type: 'string',\n          description: 'The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.'\n        },\n        taskId: {\n          type: 'string',\n          description: 'Optional identifier to indicate the specific tasking which produced this observation.'\n        },\n        tdoa: {\n          type: 'number',\n          description: 'Time difference of arrival of the center frequency signal, in seconds.  TDOA calculation convention is (sensor2 - sensor1).'\n        },\n        tdoaUnc: {\n          type: 'number',\n          description: 'One sigma uncertainty in time difference of arrival of the center frequency signal, in seconds.'\n        },\n        transactionId: {\n          type: 'string',\n          description: 'Optional identifier to track a commercial or marketplace transaction executed to produce this data.'\n        },\n        uct: {\n          type: 'boolean',\n          description: 'Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the \\'origObjectId\\' field may be populated with an internal data provider specific identifier.'\n        }\n      },\n      required: [        'classificationMarking',\n        'dataMode',\n        'obTime',\n        'source'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      obTime: {
        type: 'string',
        description:
          'Ob detection time in ISO 8601 UTC with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)',
        format: 'date-time',
      },
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['obTime'],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { jq_filter, ...body } = args as any;
  const response = await client.tdoaFdoa.diffofarrival.list(body).asResponse();
  return asTextContentResult(await maybeFilter(jq_filter, await response.json()));
};

export default { metadata, tool, handler };
