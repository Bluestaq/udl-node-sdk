// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'emitter_geolocation',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/emittergeolocation/createBulk',
};

export const tool: Tool = {
  name: 'create_bulk_emitter_geolocation',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation intended for initial integration only, to take a list of RF geolocations as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
  inputSchema: {
    type: 'object',
    properties: {
      body: {
        type: 'array',
        items: {
          type: 'object',
          description: 'Model representation of Emitter geolocation data for a signal of interest.',
          properties: {
            classificationMarking: {
              type: 'string',
              description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
            },
            dataMode: {
              type: 'string',
              description:
                'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
              enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
            },
            signalOfInterestType: {
              type: 'string',
              description: 'Type of the signal of interest of this Emitter Geo Location (e.g. RF).',
            },
            source: {
              type: 'string',
              description: 'Source of the data.',
            },
            startTime: {
              type: 'string',
              description:
                'The start time for this Emitter Geo Location data set in ISO 8601 UTC with microsecond precision.',
              format: 'date-time',
            },
            id: {
              type: 'string',
              description: 'Unique identifier of the record, auto-generated by the system.',
            },
            agjson: {
              type: 'string',
              description:
                "Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.",
            },
            algVersion: {
              type: 'string',
              description:
                'The EmitterGeo algorithm type and version used in Emitter geolocation calculations.',
            },
            andims: {
              type: 'integer',
              description: 'Number of dimensions of the geometry depicted by region.',
            },
            area: {
              type: 'string',
              description:
                'Optional geographical region or polygon (lat/lon pairs) of the area surrounding the Point of Interest as projected on the ground.',
            },
            asrid: {
              type: 'integer',
              description: 'Geographical spatial_ref_sys for region.',
            },
            atext: {
              type: 'string',
              description:
                "Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.",
            },
            atype: {
              type: 'string',
              description: 'Type of region as projected on the ground.',
            },
            centerFreq: {
              type: 'number',
              description: 'The detected signal frequency in megahertz.',
            },
            cluster: {
              type: 'string',
              description: 'The name(s) of the subset of constellation spacecraft that made this detection.',
            },
            confArea: {
              type: 'number',
              description:
                'The area of the confidence ellipse specified in meters squared to contain the emitter with a 95% probability.',
            },
            constellation: {
              type: 'string',
              description: 'The name of the satellite constellation.',
            },
            createdAt: {
              type: 'string',
              description: 'Time the row was created in the database, auto-populated by the system.',
              format: 'date-time',
            },
            createdBy: {
              type: 'string',
              description:
                'Application user who created the row in the database, auto-populated by the system.',
            },
            createdTs: {
              type: 'string',
              description:
                'Specifies the creation time associated with the order in ISO 8601 UTC with microsecond precision.',
              format: 'date-time',
            },
            detectAlt: {
              type: 'number',
              description: 'The altitude relative to WGS-84 ellipsoid, in meters.',
            },
            detectLat: {
              type: 'number',
              description:
                'WGS-84 latitude of the most likely emitter location coordinate point, in degrees. -90 to 90 degrees (negative values south of equator).',
            },
            detectLon: {
              type: 'number',
              description:
                'WGS-84 longitude of the most likely emitter location coordinate point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).',
            },
            endTime: {
              type: 'string',
              description:
                'The end time for this Emitter Geo Location data set in ISO 8601 UTC with microsecond precision.',
              format: 'date-time',
            },
            errEllp: {
              type: 'array',
              description:
                'Confidence ellipsoid about the detection location [semi-major axis (m), semi-minor axis (m), orientation (deg)].',
              items: {
                type: 'number',
              },
            },
            externalId: {
              type: 'string',
              description:
                'Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.',
            },
            idOnOrbit: {
              type: 'string',
              description:
                "Unique identifier of the satellite used to identify and geolocate Emitter signals of interest. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the onorbit object with idOnOrbit = abc would be queried as /udl/onorbit/abc. Used when Emitter geolocation is done by a single satellite.",
            },
            idRFEmitter: {
              type: 'string',
              description:
                "Optional identifier of the geolocated signal of interest RF Emitter for this observation. This ID can be used to obtain additional information on an RF Emitter object using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the rfemitter object with idRFEmitter = abc would be queried as /udl/rfemitter/abc.",
            },
            idSensor: {
              type: 'string',
              description:
                "Unique identifier of the reporting sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc. Used when Emitter geolocation is done by a single sensor.",
            },
            maxFreq: {
              type: 'number',
              description: 'The maximum detected frequency in megahertz.',
            },
            minFreq: {
              type: 'number',
              description: 'The minimum detected frequency in megahertz.',
            },
            numBursts: {
              type: 'integer',
              description: 'The count of single-burst observations used for this geolocation observation.',
            },
            orderId: {
              type: 'string',
              description: 'The order identifier for this Emitter Geo Location data set.',
            },
            origin: {
              type: 'string',
              description:
                'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
            },
            origNetwork: {
              type: 'string',
              description:
                'The originating source network on which this record was created, auto-populated by the system.',
            },
            origObjectId: {
              type: 'string',
              description:
                'Optional identifier of the satellite used to identify and geolocate Emitter signals of interest of this observation. This may be an internal identifier and not necessarily a valid satellite number. Used when Emitter geolocation is done by a single satellite.',
            },
            origRFEmitterId: {
              type: 'string',
              description:
                'Optional identifier of the emitter of interest for this observation. This may be an internal identifier and not necessarily a valid emitter Id.',
            },
            origSensorId: {
              type: 'string',
              description:
                'Optional identifier provided by observation source to indicate the sensor identifier which produced this Emitter Geo Location. This may be an internal identifier and not necessarily a valid sensor ID. Used when Emitter geolocation is done by a single sensor.',
            },
            passGroupId: {
              type: 'string',
              description:
                'Optional external identifier referencing the entity used in the calculation of the geolocation.',
            },
            receivedTs: {
              type: 'string',
              description:
                'The time representing the mean of the constituent single-burst observations in ISO 8601 UTC with microsecond precision.',
              format: 'date-time',
            },
            satNo: {
              type: 'integer',
              description:
                'Satellite/catalog number of the on-orbit spacecraft used to identify and geolocate Emitter signals of interest of this detection. Used when Emitter geolocation is done by a single satellite.',
            },
            signalOfInterest: {
              type: 'string',
              description: 'The name of the signal of interest.',
            },
            sourceDL: {
              type: 'string',
              description:
                'The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.',
            },
            tags: {
              type: 'array',
              description:
                'Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.',
              items: {
                type: 'string',
              },
            },
          },
          required: ['classificationMarking', 'dataMode', 'signalOfInterestType', 'source', 'startTime'],
        },
      },
    },
    required: ['body'],
  },
  annotations: {},
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.emitterGeolocation.createBulk(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
