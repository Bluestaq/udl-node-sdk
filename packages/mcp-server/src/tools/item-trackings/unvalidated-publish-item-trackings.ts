// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'item_trackings',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/filedrop/udl-itemtracking',
  operationId: 'filedrop_udl_itemtracking_post_id',
};

export const tool: Tool = {
  name: 'unvalidated_publish_item_trackings',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to take multiple itemtracking records as a POST body and ingest into the database. This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {}\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      body: {
        type: 'array',
        items: {
          type: 'object',
          properties: {
            classificationMarking: {
              type: 'string',
              description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
            },
            dataMode: {
              type: 'string',
              description:
                'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
              enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
            },
            scanCode: {
              type: 'string',
              description:
                'The tracking identifier of an item or person. May be similar in representation of a barcode or UPC.',
            },
            scannerId: {
              type: 'string',
              description: 'The ID of the scanner or input device.',
            },
            source: {
              type: 'string',
              description: 'Source of the data.',
            },
            ts: {
              type: 'string',
              description: 'The timestamp of the scan, in ISO 8601 UTC format with millisecond precision.',
              format: 'date-time',
            },
            id: {
              type: 'string',
              description: 'Unique identifier of the record, auto-generated by the system.',
            },
            createdAt: {
              type: 'string',
              description: 'Time the row was created in the database, auto-populated by the system.',
              format: 'date-time',
            },
            createdBy: {
              type: 'string',
              description:
                'Application user who created the row in the database, auto-populated by the system.',
            },
            dvCode: {
              type: 'string',
              description:
                'The United States distinguished visitor code of the person scanned, only applicable to people.',
            },
            idItem: {
              type: 'string',
              description: 'The UDL ID of the item this record is associated with.',
            },
            keys: {
              type: 'array',
              description: 'Array of keys that may be associated with this tracked item.',
              items: {
                type: 'string',
              },
            },
            lat: {
              type: 'number',
              description: 'WGS84 latitude where the item was scanned, in degrees.',
            },
            lon: {
              type: 'number',
              description: 'WGS84 longitude where the item was scanned, in degrees.',
            },
            notes: {
              type: 'string',
              description: 'Optional notes or comments about the tracking data.',
            },
            origin: {
              type: 'string',
              description:
                'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
            },
            origNetwork: {
              type: 'string',
              description:
                'The originating source network on which this record was created, auto-populated by the system.',
            },
            scanType: {
              type: 'string',
              description:
                "The type of scan for tracking the item within it's journey  (e.g. IN, OUT, RECEIVED, DELIVERED, TRANSIT, ABANDONDED, REFUSED, UNABLE, RETURNED, HELD, OTHER). For example, received and delivered are for when an item is received from or delivered to the end customer. In and out are for stops in between such as being loaded on an airplane or received at a warehouse.",
            },
            scGenTool: {
              type: 'string',
              description:
                'The algorithm name or standard that generated the scanCode (e.g. UPC-A, EAN-13, GTIN, SSCC, bID, JAN, etc.).',
            },
            sourceDL: {
              type: 'string',
              description:
                'The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.',
            },
            type: {
              type: 'string',
              description: 'The type of item that is being scanned (e.g. CARGO, PERSON, MAIL, MICAP, OTHER).',
            },
            values: {
              type: 'array',
              description:
                'Array of values for the keys that may be associated to this tracked item. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.',
              items: {
                type: 'string',
              },
            },
          },
          required: ['classificationMarking', 'dataMode', 'scanCode', 'scannerId', 'source', 'ts'],
        },
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.itemTrackings.unvalidatedPublish(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
