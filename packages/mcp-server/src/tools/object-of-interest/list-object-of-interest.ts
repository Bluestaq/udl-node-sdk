// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'object_of_interest',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/objectofinterest',
};

export const tool: Tool = {
  name: 'list_object_of_interest',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    type: 'object',\n    description: 'OnOrbit objects of interest, which include information about the last known state of the object.',\n    properties: {\n      classificationMarking: {\n        type: 'string',\n        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n      },\n      dataMode: {\n        type: 'string',\n        description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n        enum: [          'REAL',\n          'TEST',\n          'SIMULATED',\n          'EXERCISE'\n        ]\n      },\n      idOnOrbit: {\n        type: 'string',\n        description: 'UUID of the parent Onorbit record.'\n      },\n      sensorTaskingStartTime: {\n        type: 'string',\n        description: 'Sensor tasking start time for object of interest.',\n        format: 'date-time'\n      },\n      source: {\n        type: 'string',\n        description: 'Source of the data.'\n      },\n      statusDate: {\n        type: 'string',\n        description: 'Time of last status change of the object of interest event.',\n        format: 'date-time'\n      },\n      id: {\n        type: 'string',\n        description: 'Unique identifier of the record, auto-generated by the system.'\n      },\n      apogee: {\n        type: 'number',\n        description: 'Last reported apogee. The Orbit point furthest from the center of the earth in kilometers.'\n      },\n      argOfPerigee: {\n        type: 'number',\n        description: 'Last reported argument of perigee. The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.'\n      },\n      bStar: {\n        type: 'number',\n        description: 'Last reported drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.'\n      },\n      createdAt: {\n        type: 'string',\n        description: 'Time the row was created in the database, auto-populated by the system.',\n        format: 'date-time'\n      },\n      createdBy: {\n        type: 'string',\n        description: 'Application user who created the row in the database, auto-populated by the system.'\n      },\n      deltaTs: {\n        type: 'array',\n        description: 'Possible delta time applications for the object of interest, in seconds.',\n        items: {\n          type: 'number'\n        }\n      },\n      deltaVs: {\n        type: 'array',\n        description: 'Possible delta V applications for the object of interest, in km/sec.',\n        items: {\n          type: 'number'\n        }\n      },\n      description: {\n        type: 'string',\n        description: 'Description of the object of interest event.'\n      },\n      eccentricity: {\n        type: 'number',\n        description: 'Last reported eccentricity of the object. The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.'\n      },\n      elsetEpoch: {\n        type: 'string',\n        description: 'Last reported elset epoch time in ISO 8601 UTC time, with microsecond precision.',\n        format: 'date-time'\n      },\n      inclination: {\n        type: 'number',\n        description: 'Last reported inclination of the object. Inclination is the angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.'\n      },\n      lastObTime: {\n        type: 'string',\n        description: 'Last reported observation time in ISO 8601 UTC time, with microsecond precision.',\n        format: 'date-time'\n      },\n      meanAnomaly: {\n        type: 'number',\n        description: 'Last reported meanAnomaly. Mean anomoly is where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.'\n      },\n      meanMotion: {\n        type: 'number',\n        description: 'Last reported mean motion of the object. Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.'\n      },\n      meanMotionDDot: {\n        type: 'number',\n        description: 'Last reported 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.'\n      },\n      meanMotionDot: {\n        type: 'number',\n        description: 'Last reported 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.'\n      },\n      missedObTime: {\n        type: 'string',\n        description: 'The time at which an attempted observation of the object of interest noticed it was missing, in ISO 8601 UTC time, with microsecond precision.',\n        format: 'date-time'\n      },\n      name: {\n        type: 'string',\n        description: 'Unique name of the object of interest event.'\n      },\n      origin: {\n        type: 'string',\n        description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n      },\n      origNetwork: {\n        type: 'string',\n        description: 'The originating source network on which this record was created, auto-populated by the system.'\n      },\n      perigee: {\n        type: 'number',\n        description: 'Last reported perigee. The orbit point nearest to the center of the earth in kilometers.'\n      },\n      period: {\n        type: 'number',\n        description: 'Last reported orbit period. Period of the orbit is equal to inverse of mean motion.'\n      },\n      priority: {\n        type: 'integer',\n        description: 'Priority of the object of interest as an integer (1=highest priority).'\n      },\n      raan: {\n        type: 'number',\n        description: 'Last reported raan.  Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.'\n      },\n      revNo: {\n        type: 'integer',\n        description: 'The last reported revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.'\n      },\n      satNo: {\n        type: 'integer',\n        description: 'Satellite/Catalog number of the target on-orbit object.'\n      },\n      semiMajorAxis: {\n        type: 'number',\n        description: 'Last reported semi major axis, which is the sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass.'\n      },\n      sensorTaskingStopTime: {\n        type: 'string',\n        description: 'Sensor tasking stop time for object of interest.',\n        format: 'date-time'\n      },\n      status: {\n        type: 'string',\n        description: 'Status of the object of interest event (e.g. OPEN, CLOSED, CANCELLED).'\n      },\n      svEpoch: {\n        type: 'string',\n        description: 'Last reported state vector epoch time in ISO 8601 UTC time, with microsecond precision.',\n        format: 'date-time'\n      },\n      x: {\n        type: 'number',\n        description: 'Last reported x position of the object in km, in J2000 coordinates.'\n      },\n      xvel: {\n        type: 'number',\n        description: 'Last reported x velocity of the object in km/sec, in J2000 coordinates.'\n      },\n      y: {\n        type: 'number',\n        description: 'Last reported y position of the object in km, in J2000 coordinates.'\n      },\n      yvel: {\n        type: 'number',\n        description: 'Last reported y velocity of the object in km/sec, in J2000 coordinates.'\n      },\n      z: {\n        type: 'number',\n        description: 'Last reported z position of the object in km, in J2000 coordinates.'\n      },\n      zvel: {\n        type: 'number',\n        description: 'Last reported z velocity of the object in km/sec, in J2000 coordinates.'\n      }\n    },\n    required: [      'classificationMarking',\n      'dataMode',\n      'idOnOrbit',\n      'sensorTaskingStartTime',\n      'source',\n      'statusDate'\n    ]\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: [],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { jq_filter, ...body } = args as any;
  const response = await client.objectOfInterest.list(body).asResponse();
  return asTextContentResult(await maybeFilter(jq_filter, await response.json()));
};

export default { metadata, tool, handler };
