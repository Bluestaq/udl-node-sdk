// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'sensor',
  operation: 'write',
  tags: [],
  httpMethod: 'put',
  httpPath: '/udl/sensor/{id}',
};

export const tool: Tool = {
  name: 'update_sensor',
  description:
    'Service operation to update a single Sensor. A specific role is required to perform this service operation. Please contact the UDL team for assistance.',
  inputSchema: {
    type: 'object',
    properties: {
      id: {
        type: 'string',
      },
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      sensorName: {
        type: 'string',
        description: 'Unique name of this sensor.',
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      active: {
        type: 'boolean',
        description: 'Optional flag indicating if the sensor is active.',
      },
      afId: {
        type: 'string',
        description:
          'Optional US Air Force identifier for the sensor/ASR site, typically for air surveillance radar (ASR) sensors.',
      },
      asrType: {
        type: 'string',
        description: 'The sensor type at the site. Optional field, intended primarily for ASRs.',
      },
      dataControl: {
        type: 'string',
        description:
          'Optional dissemination control required for accessing data (e.g observations) produced by this sensor. This is typically a proprietary data owner control for commercial sensors.',
      },
      entity: {
        type: 'object',
        description:
          'An entity is a generic representation of any object within a space/SSA system such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An entity can have an operating unit, a location (if terrestrial), and statuses.',
        properties: {
          classificationMarking: {
            type: 'string',
            description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
          },
          dataMode: {
            type: 'string',
            description:
              'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
            enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
          },
          name: {
            type: 'string',
            description: 'Unique entity name.',
          },
          source: {
            type: 'string',
            description: 'Source of the data.',
          },
          type: {
            type: 'string',
            description:
              'The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR, NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).',
            enum: [
              'AIRCRAFT',
              'BUS',
              'COMM',
              'IR',
              'NAVIGATION',
              'ONORBIT',
              'RFEMITTER',
              'SCIENTIFIC',
              'SENSOR',
              'SITE',
              'VESSEL',
            ],
          },
          countryCode: {
            type: 'string',
            description:
              'The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.',
          },
          createdAt: {
            type: 'string',
            description: 'Time the row was created in the database, auto-populated by the system.',
            format: 'date-time',
          },
          createdBy: {
            type: 'string',
            description:
              'Application user who created the row in the database, auto-populated by the system.',
          },
          idEntity: {
            type: 'string',
            description: 'Unique identifier of the record.',
          },
          idLocation: {
            type: 'string',
            description: 'Unique identifier of the entity location, if terrestrial/fixed.',
          },
          idOnOrbit: {
            type: 'string',
            description:
              'Onorbit identifier if this entity is part of an on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.',
          },
          idOperatingUnit: {
            type: 'string',
            description: 'Unique identifier of the associated operating unit object.',
          },
          location: {
            $ref: '#/$defs/location_ingest',
          },
          onOrbit: {
            type: 'object',
            description: 'Model object representing on-orbit objects or satellites in the system.',
            properties: {
              classificationMarking: {
                type: 'string',
                description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
              },
              dataMode: {
                type: 'string',
                description:
                  'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
                enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
              },
              satNo: {
                type: 'integer',
                description: 'Satellite/Catalog number of the target on-orbit object.',
              },
              source: {
                type: 'string',
                description: 'Source of the data.',
              },
              altName: {
                type: 'string',
                description: 'Alternate name of the on-orbit object.',
              },
              category: {
                type: 'string',
                description:
                  'Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic, Heliocentric, Interplanetary, Lagrangian, Docked).',
                enum: [
                  'Unknown',
                  'On-Orbit',
                  'Decayed',
                  'Cataloged Without State',
                  'Launch Nominal',
                  'Analyst Satellite',
                  'Cislunar',
                  'Lunar',
                  'Hyperbolic',
                  'Heliocentric',
                  'Interplanetary',
                  'Lagrangian',
                  'Docked',
                ],
              },
              commonName: {
                type: 'string',
                description: 'Common name of the on-orbit object.',
              },
              constellation: {
                type: 'string',
                description: 'Constellation to which this satellite belongs.',
              },
              countryCode: {
                type: 'string',
                description:
                  'The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.',
              },
              createdAt: {
                type: 'string',
                description: 'Time the row was created in the database, auto-populated by the system.',
                format: 'date-time',
              },
              createdBy: {
                type: 'string',
                description:
                  'Application user who created the row in the database, auto-populated by the system.',
              },
              decayDate: {
                type: 'string',
                description: 'Date of decay.',
                format: 'date-time',
              },
              idOnOrbit: {
                type: 'string',
                description:
                  'For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites, auto-generated by the system.',
              },
              intlDes: {
                type: 'string',
                description:
                  'International Designator, typically of the format YYYYLLLAAA, where YYYY is the launch year, LLL is the sequential launch number of that year, and AAA is an optional launch piece designator for the launch.',
              },
              launchDate: {
                type: 'string',
                description: 'Date of launch.',
                format: 'date',
              },
              launchSiteId: {
                type: 'string',
                description: 'Id of the associated launchSite entity.',
              },
              lifetimeYears: {
                type: 'integer',
                description: 'Estimated lifetime of the on-orbit payload, if known.',
              },
              missionNumber: {
                type: 'string',
                description: 'Mission number of the on-orbit object.',
              },
              objectType: {
                type: 'string',
                description:
                  'Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED, UNKNOWN.',
                enum: ['ROCKET BODY', 'DEBRIS', 'PAYLOAD', 'PLATFORM', 'MANNED', 'UNKNOWN'],
              },
              origin: {
                type: 'string',
                description:
                  'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
              },
              origNetwork: {
                type: 'string',
                description:
                  'The originating source network on which this record was created, auto-populated by the system.',
              },
            },
            required: ['classificationMarking', 'dataMode', 'satNo', 'source'],
          },
          origin: {
            type: 'string',
            description:
              'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
          },
          origNetwork: {
            type: 'string',
            description:
              'The originating source network on which this record was created, auto-populated by the system.',
          },
          ownerType: {
            type: 'string',
            description:
              'Type of organization which owns this entity (e.g. Commercial, Government, Academic, Consortium, etc).',
            enum: ['Commercial', 'Government', 'Academic', 'Consortium', 'Other'],
          },
          taskable: {
            type: 'boolean',
            description: 'Boolean indicating if this entity is taskable.',
          },
          terrestrialId: {
            type: 'string',
            description: 'Terrestrial identifier of this entity, if applicable.',
          },
          urls: {
            type: 'array',
            description: 'List of URLs to additional details/documents for this entity.',
            items: {
              type: 'string',
            },
          },
        },
        required: ['classificationMarking', 'dataMode', 'name', 'source', 'type'],
      },
      idEntity: {
        type: 'string',
        description: 'Unique identifier of the parent entity. idEntity is required for Put.',
      },
      idSensor: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
      sensorcharacteristics: {
        type: 'array',
        description:
          'Collection of Sensorcharacteristics which define characteristics and capabilities of a sensor.',
        items: {
          type: 'object',
          description: 'Model representation of characteristics and capabilities of a sensor.',
          properties: {
            classificationMarking: {
              type: 'string',
              description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
            },
            dataMode: {
              type: 'string',
              description:
                'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
              enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
            },
            idSensor: {
              type: 'string',
              description: 'Unique identifier of the parent sensor.',
            },
            source: {
              type: 'string',
              description: 'Source of the data.',
            },
            id: {
              type: 'string',
              description: 'Unique identifier of the record, auto-generated by the system.',
            },
            acceptSampleRanges: {
              type: 'array',
              description:
                'Array of measurement range(s) where radar samples must fall to be acceptable. If this field is populated, the associated beam(s) must be provided in the beamOrder field.',
              items: {
                type: 'number',
              },
            },
            aperture: {
              type: 'number',
              description: 'Optical sensor camera aperture.',
            },
            asrScanRate: {
              type: 'number',
              description:
                'For ASR (Air Surveillance Radar) sensors, the scan (360 deg sweep) rate of the radar, in scans/minute.',
            },
            azAngs: {
              type: 'array',
              description:
                'Array of azimuth angles of a radar beam, in degrees. If this field is populated, the associated beam(s) must be provided in the beamOrder field.',
              items: {
                type: 'number',
              },
            },
            azimuthRate: {
              type: 'number',
              description: 'Azimuth rate acquisition limit (radians/minute).',
            },
            band: {
              type: 'string',
              description: 'Sensor band.',
            },
            beamOrder: {
              type: 'array',
              description:
                'Array designating the beam order of provided values (e.g. vb1 for vertical beam 1, ob1 for oblique beam 1, etc.). Required if any of the following array fields are populated: azAngs, elAngs, radarPulseWidths, pulseRepPeriods, delayGates, rangeGates, rangeSpacings, vertGateSpacings, vertGateWidths, specAvgSpectraNums, tempMedFiltCodes, runMeanCodes, totRecNums, reqRecords, acceptSampleRanges.',
              items: {
                type: 'string',
              },
            },
            beamQty: {
              type: 'integer',
              description: 'Number of radar beams used by the sensor.',
            },
            boresight: {
              type: 'number',
              description: 'The angle of the center of a phased array sensor.',
            },
            boresightOffAngle: {
              type: 'number',
              description: 'The number of degrees off of the boresight for the sensor.',
            },
            createdAt: {
              type: 'string',
              description: 'Time the row was created in the database, auto-populated by the system.',
              format: 'date-time',
            },
            createdBy: {
              type: 'string',
              description:
                'Application user who created the row in the database, auto-populated by the system.',
            },
            critShear: {
              type: 'number',
              description:
                'Threshold shear value beyond which one of the radial velocity values will be rejected, measured in units of inverse second.',
            },
            delayGates: {
              type: 'array',
              description:
                'Array of time delay(s) for pulses from a radar beam to get to the first range gate, in nanoseconds. If this field is populated, the associated beam(s) must be provided in the beamOrder field.',
              items: {
                type: 'number',
              },
            },
            description: {
              type: 'string',
              description: 'Description of the equipment and data source.',
            },
            elAngs: {
              type: 'array',
              description:
                'Array of elevation angles of a radar beam, in degrees. If this field is populated, the associated beam(s) must be provided in the beamOrder field.',
              items: {
                type: 'number',
              },
            },
            elevationRateGeolm: {
              type: 'number',
              description: 'Elevation rate acquisition limit (radians/minute).',
            },
            equipmentType: {
              type: 'string',
              description: 'Type of equipment used to take measurements.',
            },
            fanBeamWidth: {
              type: 'number',
              description:
                "The beam width of a Sensor's Fan (range). The values for this range from (0.0 to PI).",
            },
            fft: {
              type: 'integer',
              description:
                'Number of Fast Fourier Transform (FFT) points used to convert time varying signals into the frequency domain.',
            },
            fgpCrit: {
              type: 'integer',
              description:
                'Maximum number of times the first guess was propagated in each gate before failing the first guess check.',
            },
            focalPoint: {
              type: 'number',
              description:
                'For radar based sensors, the focal point elevation of the radar at the site, in meters.',
            },
            hFOV: {
              type: 'number',
              description: 'Horizontal field of view.',
            },
            hResPixels: {
              type: 'integer',
              description: 'Horizontal pixel resolution.',
            },
            k: {
              type: 'number',
              description:
                'For radar based sensors, K-factor is a relative indicator of refractivity that infers the amount of radar beam bending due to atmosphere. (1<K<2).',
            },
            leftClockAngle: {
              type: 'number',
              description: 'For Orbiting Sensors, First Card Azimuth limit #1 (left, degrees).',
            },
            leftGeoBeltLimit: {
              type: 'number',
              description: 'Leftmost GEO belt longitude limit for this sensor (if applicable).',
            },
            location: {
              type: 'string',
              description: 'Site where measurement is taken.',
            },
            magDec: {
              type: 'number',
              description: 'Angle between magnetic north and true north at the sensor site, in degrees.',
            },
            magnitudeLimit: {
              type: 'number',
              description: 'Absolute magnitude acquisition limit for optical sensors.',
            },
            maxDeviationAngle: {
              type: 'number',
              description: 'Max deviation angle of the sensor in degrees.',
            },
            maxObservableRange: {
              type: 'number',
              description: 'Maximum observable sensor range, in kilometers.',
            },
            maxRangeLimit: {
              type: 'number',
              description:
                'Maximum observable range limit in kilometers -- sensor cannot acquire beyond this range.',
            },
            minRangeLimit: {
              type: 'number',
              description: 'Minimum range measurement capability of the sensor, in kilometers.',
            },
            minSignalNoiseRatio: {
              type: 'number',
              description:
                'Signal to Noise Ratio, in decibels. The values for this range from 0.0 - + 99.99 dB.',
            },
            negativeRangeRateLimit: {
              type: 'number',
              description: 'Negative Range-rate/relative velocity limit (kilometers/second).',
            },
            numIntegratedPulses: {
              type: 'integer',
              description: 'For radar based sensors, number of integrated pulses in a transmit cycle.',
            },
            origNetwork: {
              type: 'string',
              description:
                'The originating source network on which this record was created, auto-populated by the system.',
            },
            positiveRangeRateLimit: {
              type: 'number',
              description: 'Positive Range-rate/relative velocity limit (kilometers/second).',
            },
            prf: {
              type: 'number',
              description:
                'For radar based sensors, pulse repetition frequency (PRF), in hertz. Number of new pulses transmitted per second.',
            },
            probFalseAlarm: {
              type: 'number',
              description:
                'For radar based sensors, probability of the indication of the presence of a radar target due to noise or interference.',
            },
            pulseRepPeriods: {
              type: 'array',
              description:
                'Array of interval(s) between the start of one radar pulse and the start of another for a radar beam, in microseconds. If this field is populated, the associated beam(s) must be provided in the beamOrder field.',
              items: {
                type: 'number',
              },
            },
            radarFrequency: {
              type: 'number',
              description: 'Radar frequency of the sensor (if a radar sensor).',
            },
            radarMessageFormat: {
              type: 'string',
              description: 'Message data format transmitted by the sensor digitizer.',
            },
            radarMUR: {
              type: 'number',
              description: 'For radar based sensors, radar maximum unambiguous range, in kilometers.',
            },
            radarPulseWidths: {
              type: 'array',
              description:
                'Array of transmit time(s) for a radar beam pulse, in microseconds. If this field is populated, the associated beam(s) must be provided in the beamOrder field.',
              items: {
                type: 'number',
              },
            },
            radioFrequency: {
              type: 'number',
              description: 'Radio frequency (if sensor is RF).',
            },
            rangeGates: {
              type: 'array',
              description:
                'Array of the number(s) of discrete altitudes where return signals are sampled by a radar beam. If this field is populated, the associated beam(s) must be provided in the beamOrder field.',
              items: {
                type: 'integer',
              },
            },
            rangeSpacings: {
              type: 'array',
              description:
                'Array of range gate spacing(s) for a radar beam, in nanoseconds. If this field is populated, the associated beam(s) must be provided in the beamOrder field.',
              items: {
                type: 'number',
              },
            },
            reqRecords: {
              type: 'array',
              description:
                'Array of the total number(s) of records required to meet consensus for a radar beam. If this field is populated, the associated beam(s) must be provided in the beamOrder field.',
              items: {
                type: 'integer',
              },
            },
            rightClockAngle: {
              type: 'number',
              description: 'For Orbiting Sensors, First Card Azimuth limit #3 (right, degrees).',
            },
            rightGeoBeltLimit: {
              type: 'number',
              description: 'Rightmost GEO belt longitude limit for this sensor (if applicable).',
            },
            runMeanCodes: {
              type: 'array',
              description:
                'Array of running mean code(s) used by radar data processing. The running mean method involves taking a series of averages of different selections of the full data set to smooth out short-term fluctuations in the data. If this field is populated, the associated beam(s) must be provided in the beamOrder field.',
              items: {
                type: 'integer',
              },
            },
            siteCode: {
              type: 'string',
              description: 'Site code of the sensor.',
            },
            specAvgSpectraNums: {
              type: 'array',
              description:
                'Array of the number(s) of Doppler spectra used to process measurements from radar. Spectral averaging involves combining multiple Doppler spectra acquired to obtain a more accurate and representative spectrum. If this field is populated, the associated beam(s) must be provided in the beamOrder field.',
              items: {
                type: 'integer',
              },
            },
            systemNoiseTemperature: {
              type: 'number',
              description:
                'For radar based sensors, expression of the radar system noise, aggregated as an equivalent thermal noise value, in degrees Kelvin.',
            },
            taskableRange: {
              type: 'number',
              description: 'Maximum taskable range of the sensor, in kilometers.',
            },
            tempMedFiltCodes: {
              type: 'array',
              description:
                'Array of temporal median filter code(s) of a radar beam. Temporal median filtering is a noise-reducing algorithm which involves replacing each data point with the median value of a window of neighboring points over time. If this field is populated, the associated beam(s) must be provided in the beamOrder field.',
              items: {
                type: 'integer',
              },
            },
            testNumber: {
              type: 'string',
              description: 'Test number for the observed measurement.',
            },
            totRecNums: {
              type: 'array',
              description:
                'Array of the total number(s) of records for a radar beam. If this field is populated, the associated beam(s) must be provided in the beamOrder field.',
              items: {
                type: 'integer',
              },
            },
            towerHeight: {
              type: 'number',
              description: 'For tower sensors, the physical height of the sensor tower, in meters.',
            },
            trackAngle: {
              type: 'number',
              description:
                'Beginning track angle limit, in radians. Track angle is the angle between the camera axis and the gimbal plane. Values range from 0 - PI/2.',
            },
            transmitPower: {
              type: 'number',
              description: 'Radar transmit power in Watts.',
            },
            trueNorthCorrector: {
              type: 'integer',
              description: 'True North correction for the sensor, in ACP (Azimunth Change Pulse) count.',
            },
            trueTilt: {
              type: 'number',
              description: 'Antenna true tilt, in degrees.',
            },
            vertBeamFlag: {
              type: 'boolean',
              description: 'Flag indicating if a vertical radar beam was used in the wind calculation.',
            },
            vertGateSpacings: {
              type: 'array',
              description:
                'Array of vertical distance(s) between points where radar measurements are taken, in meters. If this field is populated, the associated beam(s) must be provided in the beamOrder field.',
              items: {
                type: 'number',
              },
            },
            vertGateWidths: {
              type: 'array',
              description:
                'Array of width(s) of each location where radar measurements are taken, in meters. If this field is populated, the associated beam(s) must be provided in the beamOrder field.',
              items: {
                type: 'number',
              },
            },
            vFOV: {
              type: 'number',
              description: 'Vertical field of view.',
            },
            vResPixels: {
              type: 'integer',
              description: 'Vertical pixel resolution.',
            },
            z1MaxRange: {
              type: 'number',
              description:
                'Peformance zone-1 maximum range, in kilometers. Note that the zones apply only to the PSR/Search radars.',
            },
            z1MinRange: {
              type: 'number',
              description:
                'Peformance zone-1 minimum range, in kilometers. Note that the zones apply only to the PSR/Search radars.',
            },
            z2MaxRange: {
              type: 'number',
              description:
                'Peformance zone-2 maximum range, in kilometers. Note that the zones apply only to the PSR/Search radars.',
            },
            z2MinRange: {
              type: 'number',
              description:
                'Peformance zone-2 minimum range, in kilometers. Note that the zones apply only to the PSR/Search radars.',
            },
          },
          required: ['classificationMarking', 'dataMode', 'idSensor', 'source'],
        },
      },
      sensorlimitsCollection: {
        type: 'array',
        description:
          'Sensorlimits define 0 to many limits of a particular sensor in terms of observation coverage of on-orbit objects.',
        items: {
          type: 'object',
          description:
            'Sensorlimits define 0 to many limits of a particular sensor in terms of observation coverage of on-orbit objects.',
          properties: {
            classificationMarking: {
              type: 'string',
              description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
            },
            dataMode: {
              type: 'string',
              description:
                'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
              enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
            },
            source: {
              type: 'string',
              description: 'Source of the data.',
            },
            createdAt: {
              type: 'string',
              description: 'Time the row was created in the database, auto-populated by the system.',
              format: 'date-time',
            },
            createdBy: {
              type: 'string',
              description:
                'Application user who created the row in the database, auto-populated by the system.',
            },
            idSensor: {
              type: 'string',
              description: 'Unique identifier of the target sensor object.',
            },
            idSensorLimits: {
              type: 'string',
              description: 'Unique identifier of the record, auto-generated by the system.',
            },
            lowerLeftAzimuthLimit: {
              type: 'number',
              description:
                'Leftmost or minimum lower azimuth within this limit. Interpreted according to site types as lower left azimuth limit elevation angle of axis of conical observation pattern. If the limit rectangle is parallel to the horizon, the upper and lower left azimuth limits would be equal. (degrees).',
            },
            lowerLeftElevationLimit: {
              type: 'number',
              description:
                'Minimum or lower elevation within this limit. Interpreted according to site types as minimum elevation angle, constant elevation or fan beam centerline. (Degrees).',
            },
            lowerRightAzimuthLimit: {
              type: 'number',
              description:
                'Rightmost or maximum lower azimuth within this limit. Interpreted according to site types as 2nd lower azimuth limit elevation angle of axis of conical observation pattern. If the limit rectangle is parallel to the horizon, the upper and lower right azimuth limits would be equal. (degrees).',
            },
            lowerRightElevationLimit: {
              type: 'number',
              description:
                'Minimum or lower right elevation within this limit. Interpreted according to site types as minimum right elevation angle, constant elevation or fan beam centerline. If the limit rectangle is parallel to the horizon, the left and right lower elevation limits would be equal. (Degrees).',
            },
            origNetwork: {
              type: 'string',
              description:
                'The originating source network on which this record was created, auto-populated by the system.',
            },
            upperLeftAzimuthLimit: {
              type: 'number',
              description:
                'Leftmost or minimum upper azimuth within this sensor limit. Interpreted according to site types as beginning upper azimuth limit, left-hand upper boundary limit. If the limit rectangle is parallel to the horizon, the upper and lower left azimuth limits would be equal. (in degrees).',
            },
            upperLeftElevationLimit: {
              type: 'number',
              description:
                'Maximum or upper elevation within this limit. Interpreted according to site types as maximum elevation angle, half the apex of conical observation pattern or star. (Degrees).',
            },
            upperRightAzimuthLimit: {
              type: 'number',
              description:
                'Rightmost or maximum upper azimuth within this limit. Interpreted according to site types as 2nd azimuth limit elevation angle of axis of conical observation pattern. If the limit rectangle is parallel to the horizon, the upper and lower right azimuth limits would be equal. (degrees).',
            },
            upperRightElevationLimit: {
              type: 'number',
              description:
                'Maximum or upper right elevation within this limit. Interpreted according to site types as maximum rightmost elevation angle, half the apex of conical observation pattern or star. If the limit rectangle is parallel to the horizon, the left and right upper elevation limits would be equal. (Degrees).',
            },
          },
          required: ['classificationMarking', 'dataMode', 'source'],
        },
      },
      sensorNumber: {
        type: 'integer',
        description:
          'Number assigned to this sensor. Since there is no authoritative numbering scheme, these numbers sometimes collide across sensors (especially commercial sensors). It is therefore not a unique identifier.',
      },
      sensorObservationType: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'Unique identifier of the record, auto-generated by the system.',
          },
          createdAt: {
            type: 'string',
            description: 'Time the row was created in the database, auto-populated by the system.',
            format: 'date-time',
          },
          createdBy: {
            type: 'string',
            description:
              'Application user who created the row in the database, auto-populated by the system.',
          },
          origNetwork: {
            type: 'string',
            description:
              'The originating source network on which this record was created, auto-populated by the system.',
          },
          type: {
            type: 'string',
            description: 'The observation measurement type produced by a sensor.',
          },
        },
        required: [],
      },
      sensorStats: {
        type: 'array',
        description: 'Collection of SensorStats which contain statistics of a sensor.',
        items: {
          type: 'object',
          description:
            'SensorStats contain statistics on sensors related to observation production such as last reported observation time.',
          properties: {
            classificationMarking: {
              type: 'string',
              description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
            },
            dataMode: {
              type: 'string',
              description:
                'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
              enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
            },
            idSensor: {
              type: 'string',
              description: 'Unique ID of the parent sensor.',
            },
            source: {
              type: 'string',
              description: 'Source of the data.',
            },
            id: {
              type: 'string',
              description: 'Unique identifier of the record, auto-generated by the system.',
            },
            createdAt: {
              type: 'string',
              description: 'Time the row was created in the database, auto-populated by the system.',
              format: 'date-time',
            },
            createdBy: {
              type: 'string',
              description:
                'Application user who created the row in the database, auto-populated by the system.',
            },
            lastObTime: {
              type: 'string',
              description: 'Time of last reported observation in ISO 8601 UTC with microsecond precision.',
              format: 'date-time',
            },
            updatedAt: {
              type: 'string',
              description:
                'Read-only time the row was updated in the database, set automatically by the system on update.',
              format: 'date-time',
            },
            updatedBy: {
              type: 'string',
              description:
                'Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.',
            },
          },
          required: ['classificationMarking', 'dataMode', 'idSensor', 'source'],
        },
      },
      sensorType: {
        type: 'object',
        properties: {
          id: {
            type: 'integer',
            description: 'Unique identifier of the record, auto-generated by the system.',
          },
          createdAt: {
            type: 'string',
            description: 'Time the row was created in the database, auto-populated by the system.',
            format: 'date-time',
          },
          createdBy: {
            type: 'string',
            description:
              'Application user who created the row in the database, auto-populated by the system.',
          },
          origNetwork: {
            type: 'string',
            description:
              'The originating source network on which this record was created, auto-populated by the system.',
          },
          type: {
            type: 'string',
            description: 'The specific sensor type and/or surveillance capability of this sensor.',
          },
        },
        required: [],
      },
      shortName: {
        type: 'string',
        description: 'Optional short name for the sensor.',
      },
    },
    $defs: {
      location_ingest: {
        type: 'object',
        description:
          'Model representation of a location, which is a specific fixed point on the earth and is used to denote the locations of fixed sensors, operating units, etc.',
        properties: {
          classificationMarking: {
            type: 'string',
            description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
          },
          dataMode: {
            type: 'string',
            description:
              'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
            enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
          },
          name: {
            type: 'string',
            description: 'Location name.',
          },
          source: {
            type: 'string',
            description: 'Source of the data.',
          },
          altitude: {
            type: 'number',
            description: 'Altitude of the location, in kilometers.',
          },
          countryCode: {
            type: 'string',
            description:
              'The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.',
          },
          createdAt: {
            type: 'string',
            description: 'Time the row was created in the database, auto-populated by the system.',
            format: 'date-time',
          },
          createdBy: {
            type: 'string',
            description:
              'Application user who created the row in the database, auto-populated by the system.',
          },
          idLocation: {
            type: 'string',
            description: 'Unique identifier of the location, auto-generated by the system.',
          },
          lat: {
            type: 'number',
            description:
              'WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).',
          },
          lon: {
            type: 'number',
            description:
              'WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).',
          },
          origin: {
            type: 'string',
            description:
              'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
          },
          origNetwork: {
            type: 'string',
            description:
              'The originating source network on which this record was created, auto-populated by the system.',
          },
        },
        required: ['classificationMarking', 'dataMode', 'name', 'source'],
      },
    },
  },
};

export const handler = (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { id, ...body } = args as any;
  return client.sensor.update(id, body);
};

export default { metadata, tool, handler };
