// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../../';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'sensor.calibration',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/filedrop/udl-sensorcalibration',
  operationId: 'filedrop_udl_sensorcalibration_post_id',
};

export const tool: Tool = {
  name: 'unvalidated_publish_sensor_calibration',
  description:
    'Service operation to take multiple sensorcalibration records as a POST body and ingest into the database. This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n',
  inputSchema: {
    type: 'object',
    properties: {
      body: {
        type: 'array',
        items: {
          type: 'object',
          description:
            "The Sensor Calibration service records data about a sensor's overall accuracy and is used to adjust sensor settings to achieve and maintain that accuracy in reported sensor observations. Calibration occurs periodically when needed to maintain sensor accuracy or on-demand to adjust a sensor for a specific reading.",
          properties: {
            classificationMarking: {
              type: 'string',
              description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
            },
            dataMode: {
              type: 'string',
              description:
                'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
              enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
            },
            idSensor: {
              type: 'string',
              description:
                "Unique identifier of the sensor to which this calibration data applies. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.",
            },
            source: {
              type: 'string',
              description: 'Source of the data.',
            },
            startTime: {
              type: 'string',
              description:
                'Calibration data span start time in ISO 8601 UTC format with millisecond precision.',
              format: 'date-time',
            },
            id: {
              type: 'string',
              description:
                'Unique identifier of the record, auto-generated by the system if not provided on create operations.',
            },
            azRaAccelBias: {
              type: 'number',
              description:
                'Sensor azimuth/right-ascension acceleration bias rate, in degrees per second squared, during sensor operation.',
            },
            azRaAccelSigma: {
              type: 'number',
              description:
                'Standard deviation azimuth/right-ascension acceleration bias rate, in degrees per second squared.',
            },
            azRaBias: {
              type: 'number',
              description: 'Sensor azimuth/right-ascension bias, in degrees, during sensor operation.',
            },
            azRaBiasRate: {
              type: 'number',
              description:
                'Sensor azimuth/right-ascension bias rate, in degrees per second, during sensor operation.',
            },
            azRaMean: {
              type: 'number',
              description: 'The mean azimuth/right-ascension average, in degrees, for the duration span.',
            },
            azRaRms: {
              type: 'number',
              description:
                'The root mean square of the azimuth/right-ascension, in degrees, for the duration span.',
            },
            azRaSigmaRate: {
              type: 'number',
              description: 'Standard deviation azimuth/right-ascension bias rate, in degrees per second.',
            },
            calAngleRef: {
              type: 'string',
              description:
                'Specifies the calibration reference angle set for this calibration data set. Azimuth and Elevation (AZEL) or Right Ascension and Declination (RADEC).',
            },
            calTrackMode: {
              type: 'string',
              description:
                'Specifies that the calibration data are from INTRA_TRACK or INTER_TRACK residuals.',
            },
            calType: {
              type: 'string',
              description:
                'The basis of calibration values contained in this record (COMPUTED, OPERATIONAL).',
            },
            confidenceNoiseBias: {
              type: 'number',
              description: 'The confidence noise bias of the duration span.',
            },
            createdAt: {
              type: 'string',
              description: 'Time the row was created in the database, auto-populated by the system.',
              format: 'date-time',
            },
            createdBy: {
              type: 'string',
              description:
                'Application user who created the row in the database, auto-populated by the system.',
            },
            duration: {
              type: 'number',
              description:
                'Duration of the sensor calibration data which produced these values, measured in days.',
            },
            ecr: {
              type: 'array',
              description:
                'Three element array, expressing the sensor location in Earth Centered Rotating (ECR) coordinates, in kilometers. The array element order is [x, y, z].',
              items: {
                type: 'number',
              },
            },
            elDecAccelBias: {
              type: 'number',
              description:
                'Sensor elevation/declination acceleration bias rate, in degrees per second squared, during sensor operation.',
            },
            elDecAccelSigma: {
              type: 'number',
              description:
                'Standard deviation elevation/declination acceleration bias rate, in degrees per second squared.',
            },
            elDecBias: {
              type: 'number',
              description: 'Sensor elevation/declination bias, in degrees, during sensor operation.',
            },
            elDecBiasRate: {
              type: 'number',
              description:
                'Sensor elevation/declination bias rate, in degrees per second, during sensor operation.',
            },
            elDecMean: {
              type: 'number',
              description: 'The mean elevation/declination residuals, in degrees, for the duration span.',
            },
            elDecRms: {
              type: 'number',
              description:
                'The root mean square of the elevation/declination, in degrees, for the duration span.',
            },
            elDecSigmaRate: {
              type: 'number',
              description: 'Standard deviation elevation/declination bias rate, in degrees per second.',
            },
            endTime: {
              type: 'string',
              description:
                'Calibration data span end time in ISO 8601 UTC format with millisecond precision. If provided, the endTime must be greater than or equal to the startTime in the SensorCalibration record.',
              format: 'date-time',
            },
            numAzRaObs: {
              type: 'integer',
              description:
                'The number of observables used in determining the azimuth or right-ascension calibration values.',
            },
            numElDecObs: {
              type: 'integer',
              description:
                'The number of observables used in determining the elevation or declination calibration values.',
            },
            numObs: {
              type: 'integer',
              description: 'The total number of observables available over the calibration span.',
            },
            numPhotoObs: {
              type: 'integer',
              description:
                'The number of observables used in determining the photometric calibration values.',
            },
            numRangeObs: {
              type: 'integer',
              description: 'The number of observables used in determining the range calibration values.',
            },
            numRangeRateObs: {
              type: 'integer',
              description: 'The number of observables used in determining the range rate calibration values.',
            },
            numRcsObs: {
              type: 'integer',
              description:
                'The number of observables used in determining the radar cross section (RCS) calibration values.',
            },
            numTimeObs: {
              type: 'integer',
              description: 'The number of observables used in determining the time calibration values.',
            },
            numTracks: {
              type: 'integer',
              description: 'The total number of tracks available over the calibration span.',
            },
            origin: {
              type: 'string',
              description:
                'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
            },
            origNetwork: {
              type: 'string',
              description:
                'The originating source network on which this record was created, auto-populated by the system.',
            },
            photoBias: {
              type: 'number',
              description: 'The photometric observation noise bias in visual magnitude.',
            },
            photoSigma: {
              type: 'number',
              description: 'The photometric observation noise standard deviation in visual magnitude.',
            },
            rangeAccelBias: {
              type: 'number',
              description:
                'Sensor range rate bias acceleration, in kilometers per second squared, during sensor operation.',
            },
            rangeAccelSigma: {
              type: 'number',
              description:
                'Standard deviation range rate bias acceleration, in kilometers per second squared.',
            },
            rangeBias: {
              type: 'number',
              description: 'Sensor range bias, in kilometers, for the duration span.',
            },
            rangeRateBias: {
              type: 'number',
              description: 'Sensor range rate bias, in kilometers per second for the duration span.',
            },
            rangeRateRms: {
              type: 'number',
              description:
                'The root mean square of the calibration sensor range rate, in kilometers per second, for the duration span.',
            },
            rangeRateSigma: {
              type: 'number',
              description: 'Standard deviation range rate, in kilometers per second, for the duration span.',
            },
            rangeRms: {
              type: 'number',
              description:
                'The root mean square of the calibration sensor range, in kilometers, for the duration span.',
            },
            rangeSigma: {
              type: 'number',
              description: 'Calibration standard deviation range, in kilometers, for the duration span.',
            },
            rcsBias: {
              type: 'number',
              description: 'The radar cross section (RCS) observation noise bias in square meters.',
            },
            rcsSigma: {
              type: 'number',
              description:
                'The radar cross section (RCS) observation noise standard deviation in square meters.',
            },
            refTargets: {
              type: 'array',
              description: 'Array of the catalog IDs of the reference targets used in the calibration.',
              items: {
                type: 'string',
              },
            },
            refType: {
              type: 'string',
              description: 'The reference type used in the calibration.',
            },
            senType: {
              type: 'string',
              description: 'The sensor type (MECHANICAL, OPTICAL, PHASED ARRAY, RF).',
            },
            sourceDL: {
              type: 'string',
              description:
                'The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.',
            },
            timeBias: {
              type: 'number',
              description: 'Sensor time bias, in seconds, for the duration span.',
            },
            timeBiasSigma: {
              type: 'number',
              description: 'Standard deviation time, in seconds, for the duration span.',
            },
          },
          required: ['classificationMarking', 'dataMode', 'idSensor', 'source', 'startTime'],
        },
      },
    },
  },
};

export const handler = (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  return client.sensor.calibration.unvalidatedPublish(body);
};

export default { metadata, tool, handler };
