// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'link_status',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/linkstatus',
};

export const tool: Tool = {
  name: 'create_link_status',
  description:
    'Service operation to take a single LinkStatus as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.',
  inputSchema: {
    type: 'object',
    properties: {
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      endPoint1Lat: {
        type: 'number',
        description:
          'Latitude of link endpoint-1, WGS-84 in degrees. -90 to 90 degrees (negative values south of equator).',
      },
      endPoint1Lon: {
        type: 'number',
        description:
          'Longitude of link endpoint-1, WGS-84 longitude in degrees. -180 to 180 degrees (negative values west of Prime Meridian).',
      },
      endPoint1Name: {
        type: 'string',
        description: 'The name or description of link endpoint-1, corresponding to beam-1.',
      },
      endPoint2Lat: {
        type: 'number',
        description:
          'Latitude of link endpoint-2, WGS-84 in degrees. -90 to 90 degrees (negative values south of equator).',
      },
      endPoint2Lon: {
        type: 'number',
        description:
          'Longitude of link endpoint-2, WGS-84 longitude in degrees. -180 to 180 degrees (negative values west of Prime Meridian).',
      },
      endPoint2Name: {
        type: 'string',
        description: 'The name or description of link endpoint-2, corresponding to beam-2.',
      },
      linkName: {
        type: 'string',
        description: 'The name or description of the link.',
      },
      linkStartTime: {
        type: 'string',
        description:
          'The link establishment time, or the time that the link becomes available for use, in ISO8601 UTC format.',
        format: 'date-time',
      },
      linkStopTime: {
        type: 'string',
        description:
          'The link termination time, or the time that the link becomes unavailable for use, in ISO8601 UTC format.',
        format: 'date-time',
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      id: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      band: {
        type: 'string',
        description: 'The RF band employed by the link (e.g. MIL-KA, COM-KA, X-BAND, C-BAND, etc.).',
      },
      constellation: {
        type: 'string',
        description:
          'The constellation name if the link is established over a LEO/MEO constellation.  In this case, idOnOrbit1 and idOnOrbit2 will be null.',
      },
      dataRate1To2: {
        type: 'number',
        description: 'The endpoint-1 to endpoint-2 data rate, in kbps.',
      },
      dataRate2To1: {
        type: 'number',
        description: 'The endpoint-2 to endpoint-1 data rate, in kbps.',
      },
      idBeam1: {
        type: 'string',
        description:
          'The ID of beam-1 forming the link.  In the case of two sat link, beam-1 corresponds to Sat-1.',
      },
      idBeam2: {
        type: 'string',
        description:
          'The ID of beam-2 forming the link.  In the case of two sat link, beam-2 corresponds to Sat-2.',
      },
      linkState: {
        type: 'string',
        description: 'The state of the link (e.g. OK, DEGRADED-WEATHER, DEGRADED-EMI, etc.).',
      },
      linkType: {
        type: 'string',
        description: 'The type of the link.',
      },
      opsCap: {
        type: 'string',
        description: 'The OPSCAP mission status of the system(s) forming the link.',
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
      satNo1: {
        type: 'integer',
        description: 'Satellite/catalog number of the target on-orbit primary object.',
      },
      satNo2: {
        type: 'integer',
        description: 'Satellite/catalog number of the target on-orbit secondary object.',
      },
      snr: {
        type: 'number',
        description: 'Signal to noise ratio, in dB.',
      },
      sysCap: {
        type: 'string',
        description: 'The SYSCAP mission status of the system(s) forming the link.',
      },
    },
    required: [
      'classificationMarking',
      'dataMode',
      'endPoint1Lat',
      'endPoint1Lon',
      'endPoint1Name',
      'endPoint2Lat',
      'endPoint2Lon',
      'endPoint2Name',
      'linkName',
      'linkStartTime',
      'linkStopTime',
      'source',
    ],
  },
  annotations: {},
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.linkStatus.create(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
