// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'link_status',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/linkstatus/{id}',
};

export const tool: Tool = {
  name: 'get_link_status',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to get a single LinkStatus record by its unique ID passed as a path parameter.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  description: 'Captures link status.',\n  properties: {\n    classificationMarking: {\n      type: 'string',\n      description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n    },\n    dataMode: {\n      type: 'string',\n      description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n      enum: [        'REAL',\n        'TEST',\n        'SIMULATED',\n        'EXERCISE'\n      ]\n    },\n    endPoint1Lat: {\n      type: 'number',\n      description: 'Latitude of link endpoint-1, WGS-84 in degrees. -90 to 90 degrees (negative values south of equator).'\n    },\n    endPoint1Lon: {\n      type: 'number',\n      description: 'Longitude of link endpoint-1, WGS-84 longitude in degrees. -180 to 180 degrees (negative values west of Prime Meridian).'\n    },\n    endPoint1Name: {\n      type: 'string',\n      description: 'The name or description of link endpoint-1, corresponding to beam-1.'\n    },\n    endPoint2Lat: {\n      type: 'number',\n      description: 'Latitude of link endpoint-2, WGS-84 in degrees. -90 to 90 degrees (negative values south of equator).'\n    },\n    endPoint2Lon: {\n      type: 'number',\n      description: 'Longitude of link endpoint-2, WGS-84 longitude in degrees. -180 to 180 degrees (negative values west of Prime Meridian).'\n    },\n    endPoint2Name: {\n      type: 'string',\n      description: 'The name or description of link endpoint-2, corresponding to beam-2.'\n    },\n    linkName: {\n      type: 'string',\n      description: 'The name or description of the link.'\n    },\n    linkStartTime: {\n      type: 'string',\n      description: 'The link establishment time, or the time that the link becomes available for use, in ISO8601 UTC format.',\n      format: 'date-time'\n    },\n    linkStopTime: {\n      type: 'string',\n      description: 'The link termination time, or the time that the link becomes unavailable for use, in ISO8601 UTC format.',\n      format: 'date-time'\n    },\n    source: {\n      type: 'string',\n      description: 'Source of the data.'\n    },\n    id: {\n      type: 'string',\n      description: 'Unique identifier of the record, auto-generated by the system.'\n    },\n    band: {\n      type: 'string',\n      description: 'The RF band employed by the link (e.g. MIL-KA, COM-KA, X-BAND, C-BAND, etc.).'\n    },\n    constellation: {\n      type: 'string',\n      description: 'The constellation name if the link is established over a LEO/MEO constellation.  In this case, idOnOrbit1 and idOnOrbit2 will be null.'\n    },\n    createdAt: {\n      type: 'string',\n      description: 'Time the row was created in the database, auto-populated by the system.',\n      format: 'date-time'\n    },\n    createdBy: {\n      type: 'string',\n      description: 'Application user who created the row in the database, auto-populated by the system.'\n    },\n    dataRate1To2: {\n      type: 'number',\n      description: 'The endpoint-1 to endpoint-2 data rate, in kbps.'\n    },\n    dataRate2To1: {\n      type: 'number',\n      description: 'The endpoint-2 to endpoint-1 data rate, in kbps.'\n    },\n    idBeam1: {\n      type: 'string',\n      description: 'The ID of beam-1 forming the link.  In the case of two sat link, beam-1 corresponds to Sat-1.'\n    },\n    idBeam2: {\n      type: 'string',\n      description: 'The ID of beam-2 forming the link.  In the case of two sat link, beam-2 corresponds to Sat-2.'\n    },\n    idOnOrbit1: {\n      type: 'string',\n      description: 'Unique ID of the on-orbit satellite (Sat-1) forming the link.  A null value for idOnOrbit1 indicates that the link is formed over a LEO/MEO constellation.'\n    },\n    idOnOrbit2: {\n      type: 'string',\n      description: 'Unique ID of the on-orbit satellite (Sat-2) forming the link.  A null value for idOnOrbit2 indicates either a link employing only Sat-1 or a link formed over a LEO/MEO constellation.'\n    },\n    linkState: {\n      type: 'string',\n      description: 'The state of the link (e.g. OK, DEGRADED-WEATHER, DEGRADED-EMI, etc.).'\n    },\n    linkType: {\n      type: 'string',\n      description: 'The type of the link.'\n    },\n    opsCap: {\n      type: 'string',\n      description: 'The OPSCAP mission status of the system(s) forming the link.'\n    },\n    origin: {\n      type: 'string',\n      description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n    },\n    origNetwork: {\n      type: 'string',\n      description: 'The originating source network on which this record was created, auto-populated by the system.'\n    },\n    satNo1: {\n      type: 'integer',\n      description: 'Satellite/catalog number of the target on-orbit primary object.'\n    },\n    satNo2: {\n      type: 'integer',\n      description: 'Satellite/catalog number of the target on-orbit secondary object.'\n    },\n    sysCap: {\n      type: 'string',\n      description: 'The SYSCAP mission status of the system(s) forming the link.'\n    }\n  },\n  required: [    'classificationMarking',\n    'dataMode',\n    'endPoint1Lat',\n    'endPoint1Lon',\n    'endPoint1Name',\n    'endPoint2Lat',\n    'endPoint2Lon',\n    'endPoint2Name',\n    'linkName',\n    'linkStartTime',\n    'linkStopTime',\n    'source'\n  ]\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      id: {
        type: 'string',
      },
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['id'],
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { id, ...body } = args as any;
  return asTextContentResult(await maybeFilter(args, await client.linkStatus.get(id, body)));
};

export default { metadata, tool, handler };
