// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'stage',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/stage',
};

export const tool: Tool = {
  name: 'list_stage',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    type: 'object',\n    description: 'Launch stage information for a particular launch vehicle. A launch vehicle can have several stages, each with 1 to many engines.',\n    properties: {\n      classificationMarking: {\n        type: 'string',\n        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n      },\n      dataMode: {\n        type: 'string',\n        description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n        enum: [          'REAL',\n          'TEST',\n          'SIMULATED',\n          'EXERCISE'\n        ]\n      },\n      idEngine: {\n        type: 'string',\n        description: 'Identifier of the Engine record for this stage.'\n      },\n      idLaunchVehicle: {\n        type: 'string',\n        description: 'Identifier of the launch vehicle record for this stage.'\n      },\n      source: {\n        type: 'string',\n        description: 'Source of the data.'\n      },\n      id: {\n        type: 'string',\n        description: 'Unique identifier of the record, auto-generated by the system.'\n      },\n      avionicsNotes: {\n        type: 'string',\n        description: 'Description/notes of the stage avionics.'\n      },\n      burnTime: {\n        type: 'number',\n        description: 'Total burn time of the stage engines in seconds.'\n      },\n      controlThruster1: {\n        type: 'string',\n        description: 'Control thruster 1 type.'\n      },\n      controlThruster2: {\n        type: 'string',\n        description: 'Control thruster 2 type.'\n      },\n      createdAt: {\n        type: 'string',\n        description: 'Time the row was created in the database, auto-populated by the system.',\n        format: 'date-time'\n      },\n      createdBy: {\n        type: 'string',\n        description: 'Application user who created the row in the database, auto-populated by the system.'\n      },\n      diameter: {\n        type: 'number',\n        description: 'Stage maximum external diameter in meters.'\n      },\n      length: {\n        type: 'number',\n        description: 'Stage length in meters.'\n      },\n      mainEngineThrustSeaLevel: {\n        type: 'number',\n        description: 'Thrust of the stage main engine at sea level in kN.'\n      },\n      mainEngineThrustVacuum: {\n        type: 'number',\n        description: 'Thrust of the stage main engine in a vacuum in kN.'\n      },\n      manufacturerOrgId: {\n        type: 'string',\n        description: 'ID of the organization that manufactures this launch stage.'\n      },\n      mass: {\n        type: 'number',\n        description: 'Stage gross mass in kg.'\n      },\n      notes: {\n        type: 'string',\n        description: 'Description/notes of the stage.'\n      },\n      numBurns: {\n        type: 'integer',\n        description: 'Number of burns for the stage engines.'\n      },\n      numControlThruster1: {\n        type: 'integer',\n        description: 'Number of type control thruster 1.'\n      },\n      numControlThruster2: {\n        type: 'integer',\n        description: 'Number of type control thruster 2.'\n      },\n      numEngines: {\n        type: 'integer',\n        description: 'The number of the specified engines on this launch stage.'\n      },\n      numStageElements: {\n        type: 'integer',\n        description: 'Number of launch stage elements used in this stage.'\n      },\n      numVernier: {\n        type: 'integer',\n        description: 'Number of vernier or additional engines.'\n      },\n      origin: {\n        type: 'string',\n        description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n      },\n      origNetwork: {\n        type: 'string',\n        description: 'The originating source network on which this record was created, auto-populated by the system.'\n      },\n      photoURLs: {\n        type: 'array',\n        description: 'Array of URLs of photos of the stage.',\n        items: {\n          type: 'string'\n        }\n      },\n      restartable: {\n        type: 'boolean',\n        description: 'Boolean indicating if this launch stage can be restarted.'\n      },\n      reusable: {\n        type: 'boolean',\n        description: 'Boolean indicating if this launch stage is reusable.'\n      },\n      stageNumber: {\n        type: 'integer',\n        description: 'The stage number of this launch stage.'\n      },\n      thrustSeaLevel: {\n        type: 'number',\n        description: 'Total thrust of the stage at sea level in kN.'\n      },\n      thrustVacuum: {\n        type: 'number',\n        description: 'Total thrust of the stage in a vacuum in kN.'\n      },\n      type: {\n        type: 'string',\n        description: 'Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).'\n      },\n      vernier: {\n        type: 'string',\n        description: 'Engine vernier or additional engine type.'\n      },\n      vernierBurnTime: {\n        type: 'number',\n        description: 'Total burn time of the vernier or additional stage engines in seconds.'\n      },\n      vernierNumBurns: {\n        type: 'integer',\n        description: 'Total number of burns of the vernier or additional stage engines.'\n      },\n      vernierThrustSeaLevel: {\n        type: 'number',\n        description: 'Total thrust of one of the vernier or additional engines at sea level in kN.'\n      },\n      vernierThrustVacuum: {\n        type: 'number',\n        description: 'Total thrust of one of the vernier or additional engines in a vacuum in kN.'\n      }\n    },\n    required: [      'classificationMarking',\n      'dataMode',\n      'idEngine',\n      'idLaunchVehicle',\n      'source'\n    ]\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: [],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { jq_filter, ...body } = args as any;
  const response = await client.stage.list(body).asResponse();
  return asTextContentResult(await maybeFilter(jq_filter, await response.json()));
};

export default { metadata, tool, handler };
