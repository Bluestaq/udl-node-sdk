// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'stage',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/stage',
};

export const tool: Tool = {
  name: 'create_stage',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to take a single Stage as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance. A Stage represents various stages of a particular launch vehicle, compiled by a particular source. A vehicle may have multiple stage records.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {}\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      idEngine: {
        type: 'string',
        description: 'Identifier of the Engine record for this stage.',
      },
      idLaunchVehicle: {
        type: 'string',
        description: 'Identifier of the launch vehicle record for this stage.',
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      id: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      avionicsNotes: {
        type: 'string',
        description: 'Description/notes of the stage avionics.',
      },
      burnTime: {
        type: 'number',
        description: 'Total burn time of the stage engines in seconds.',
      },
      controlThruster1: {
        type: 'string',
        description: 'Control thruster 1 type.',
      },
      controlThruster2: {
        type: 'string',
        description: 'Control thruster 2 type.',
      },
      diameter: {
        type: 'number',
        description: 'Stage maximum external diameter in meters.',
      },
      length: {
        type: 'number',
        description: 'Stage length in meters.',
      },
      mainEngineThrustSeaLevel: {
        type: 'number',
        description: 'Thrust of the stage main engine at sea level in kN.',
      },
      mainEngineThrustVacuum: {
        type: 'number',
        description: 'Thrust of the stage main engine in a vacuum in kN.',
      },
      manufacturerOrgId: {
        type: 'string',
        description: 'ID of the organization that manufactures this launch stage.',
      },
      mass: {
        type: 'number',
        description: 'Stage gross mass in kg.',
      },
      notes: {
        type: 'string',
        description: 'Description/notes of the stage.',
      },
      numBurns: {
        type: 'integer',
        description: 'Number of burns for the stage engines.',
      },
      numControlThruster1: {
        type: 'integer',
        description: 'Number of type control thruster 1.',
      },
      numControlThruster2: {
        type: 'integer',
        description: 'Number of type control thruster 2.',
      },
      numEngines: {
        type: 'integer',
        description: 'The number of the specified engines on this launch stage.',
      },
      numStageElements: {
        type: 'integer',
        description: 'Number of launch stage elements used in this stage.',
      },
      numVernier: {
        type: 'integer',
        description: 'Number of vernier or additional engines.',
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
      photoURLs: {
        type: 'array',
        description: 'Array of URLs of photos of the stage.',
        items: {
          type: 'string',
        },
      },
      restartable: {
        type: 'boolean',
        description: 'Boolean indicating if this launch stage can be restarted.',
      },
      reusable: {
        type: 'boolean',
        description: 'Boolean indicating if this launch stage is reusable.',
      },
      stageNumber: {
        type: 'integer',
        description: 'The stage number of this launch stage.',
      },
      tags: {
        type: 'array',
        description:
          'Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.',
        items: {
          type: 'string',
        },
      },
      thrustSeaLevel: {
        type: 'number',
        description: 'Total thrust of the stage at sea level in kN.',
      },
      thrustVacuum: {
        type: 'number',
        description: 'Total thrust of the stage in a vacuum in kN.',
      },
      type: {
        type: 'string',
        description:
          'Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).',
      },
      vernier: {
        type: 'string',
        description: 'Engine vernier or additional engine type.',
      },
      vernierBurnTime: {
        type: 'number',
        description: 'Total burn time of the vernier or additional stage engines in seconds.',
      },
      vernierNumBurns: {
        type: 'integer',
        description: 'Total number of burns of the vernier or additional stage engines.',
      },
      vernierThrustSeaLevel: {
        type: 'number',
        description: 'Total thrust of one of the vernier or additional engines at sea level in kN.',
      },
      vernierThrustVacuum: {
        type: 'number',
        description: 'Total thrust of one of the vernier or additional engines in a vacuum in kN.',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.stage.create(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
