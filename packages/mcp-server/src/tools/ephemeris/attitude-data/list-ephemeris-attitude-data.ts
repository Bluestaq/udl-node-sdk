// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../../';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'ephemeris.attitude_data',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/attitudedata',
};

export const tool: Tool = {
  name: 'list_ephemeris_attitude_data',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    $ref: '#/$defs/attitude_data_abridged'\n  },\n  $defs: {\n    attitude_data_abridged: {\n      type: 'object',\n      description: 'These services provide operations for posting and querying attitude of on-orbit objects.  Attitude describes the orientation of an object, which can be represented by quaternions or euler angles.  The AttitudeSet ID (asId) identifies the \\'AttitudeSet\\' record which contains details of the underlying data as well as a collection of attitude points. Points must be retrieved by first identifying a desired AttitudeSet and pulling its points by that AttitudeSet ID \\'asId\\'.',\n      properties: {\n        classificationMarking: {\n          type: 'string',\n          description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n        },\n        dataMode: {\n          type: 'string',\n          description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n          enum: [            'REAL',\n            'TEST',\n            'SIMULATED',\n            'EXERCISE'\n          ]\n        },\n        source: {\n          type: 'string',\n          description: 'Source of the data.'\n        },\n        ts: {\n          type: 'string',\n          description: 'Time associated with this attitude record, in ISO 8601 UTC format, with microsecond precision.',\n          format: 'date-time'\n        },\n        id: {\n          type: 'string',\n          description: 'Unique identifier of the record, auto-generated by the system.'\n        },\n        asId: {\n          type: 'string',\n          description: 'Unique identifier of the parent AttitudeSet associated with this record.'\n        },\n        coningAngle: {\n          type: 'number',\n          description: 'Coning angle in degrees.'\n        },\n        createdAt: {\n          type: 'string',\n          description: 'Time the row was created in the database, auto-populated by the system.',\n          format: 'date-time'\n        },\n        createdBy: {\n          type: 'string',\n          description: 'Application user who created the row in the database, auto-populated by the system.'\n        },\n        declination: {\n          type: 'number',\n          description: 'Precession axis declination (ECI J2000 frame) in degrees.'\n        },\n        idOnOrbit: {\n          type: 'string',\n          description: 'Unique identifier of the on-orbit satellite to which this attitude record applies.'\n        },\n        motionType: {\n          type: 'string',\n          description: 'Label specifying type of rotational motion of target.'\n        },\n        origin: {\n          type: 'string',\n          description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n        },\n        origNetwork: {\n          type: 'string',\n          description: 'The originating source network on which this record was created, auto-populated by the system.'\n        },\n        origObjectId: {\n          type: 'string',\n          description: 'Optional identifier provided by the record source to indicate the target object of this attitude record. This may be an internal identifier and not necessarily map to a valid satellite number.'\n        },\n        precPeriod: {\n          type: 'number',\n          description: 'Precession period in seconds.'\n        },\n        q1: {\n          type: 'number',\n          description: 'Quaternion vector component 1.'\n        },\n        q1Dot: {\n          type: 'number',\n          description: 'Derivative of quaternion vector component 1.'\n        },\n        q2: {\n          type: 'number',\n          description: 'Quaternion vector component 2.'\n        },\n        q2Dot: {\n          type: 'number',\n          description: 'Derivative of quaternion vector component 2.'\n        },\n        q3: {\n          type: 'number',\n          description: 'Quaternion vector component 3.'\n        },\n        q3Dot: {\n          type: 'number',\n          description: 'Derivative of quaternion vector component 3.'\n        },\n        qc: {\n          type: 'number',\n          description: 'Quaternion scalar component.'\n        },\n        qcDot: {\n          type: 'number',\n          description: 'Derivative of quaternion scalar component.'\n        },\n        ra: {\n          type: 'number',\n          description: 'Precession axis right ascension (ECI J2000 frame) in degrees.'\n        },\n        satNo: {\n          type: 'integer',\n          description: 'Satellite/catalog number of the on-orbit object to which this attitude record applies.'\n        },\n        spinPeriod: {\n          type: 'number',\n          description: 'Spin period in seconds.'\n        },\n        xAngle: {\n          type: 'array',\n          description: 'Array of X body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.',\n          items: {\n            type: 'number'\n          }\n        },\n        xRate: {\n          type: 'array',\n          description: 'Array of X body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence.  Attitude rates are expressed in frame1 with respect to frame2.',\n          items: {\n            type: 'number'\n          }\n        },\n        yAngle: {\n          type: 'array',\n          description: 'Array of Y body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.',\n          items: {\n            type: 'number'\n          }\n        },\n        yRate: {\n          type: 'array',\n          description: 'Array of Y body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence.  Attitude rates are expressed in frame1 with respect to frame2.',\n          items: {\n            type: 'number'\n          }\n        },\n        zAngle: {\n          type: 'array',\n          description: 'Array of Z body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.',\n          items: {\n            type: 'number'\n          }\n        },\n        zRate: {\n          type: 'array',\n          description: 'Array of Z body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence  Attitude rates are expressed in frame1 with respect to frame2.',\n          items: {\n            type: 'number'\n          }\n        }\n      },\n      required: [        'classificationMarking',\n        'dataMode',\n        'source',\n        'ts'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      asId: {
        type: 'string',
        description: 'Unique identifier of the parent AttitudeSet associated with this record. (uuid)',
      },
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.ephemeris.attitudeData.list(body).asResponse();
  return asTextContentResult(await maybeFilter(args, await response.json()));
};

export default { metadata, tool, handler };
