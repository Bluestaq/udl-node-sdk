// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'ephemeris',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/ephemeris/tuple',
};

export const tool: Tool = {
  name: 'tuple_ephemeris',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.\n\n# Response Schema\n```json\n{\n  $ref: '#/$defs/ephemeris_tuple_response',\n  $defs: {\n    ephemeris_tuple_response: {\n      type: 'array',\n      items: {\n        $ref: '#/$defs/ephemeris_full'\n      }\n    },\n    ephemeris_full: {\n      type: 'object',\n      description: 'An ephemeris record is a position and velocity vector identifying the location and trajectory of an on-orbit object at a specified time. Ephemeris points, including covariance, are in kilometer and second based units in a user specified reference frame, with ECI J2K being preferred. The EphemerisSet ID (esId) links all points associated with an ephemeris set. The \\'EphemerisSet\\' record contains details of the underlying data and propagation models used in the generation of the ephemeris. Ephemeris points must be retrieved by specifying the parent EphemerisSet ID (esId).',\n      properties: {\n        classificationMarking: {\n          type: 'string',\n          description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n        },\n        dataMode: {\n          type: 'string',\n          description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n          enum: [            'REAL',\n            'TEST',\n            'SIMULATED',\n            'EXERCISE'\n          ]\n        },\n        source: {\n          type: 'string',\n          description: 'Source of the data.'\n        },\n        ts: {\n          type: 'string',\n          description: 'Time associated with the Ephemeris Point, in ISO8601 UTC format.',\n          format: 'date-time'\n        },\n        xpos: {\n          type: 'number',\n          description: 'Cartesian X position of target, in km, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.'\n        },\n        xvel: {\n          type: 'number',\n          description: 'Cartesian X velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.'\n        },\n        ypos: {\n          type: 'number',\n          description: 'Cartesian Y position of target, in km, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.'\n        },\n        yvel: {\n          type: 'number',\n          description: 'Cartesian Y velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.'\n        },\n        zpos: {\n          type: 'number',\n          description: 'Cartesian Z position of target, in km, in the specified EphemerisSet referenceFrame. If referenceFrame is null then J2K should be assumed.'\n        },\n        zvel: {\n          type: 'number',\n          description: 'Cartesian Z velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.'\n        },\n        id: {\n          type: 'string',\n          description: 'Unique identifier of the record, auto-generated by the system.'\n        },\n        cov: {\n          type: 'array',\n          description: 'Covariance matrix, in kilometer and second based units, in the specified Ephemeris Set covReferenceFrame.  If the covReferenceFrame from the EphemerisSet table is null it is assumed to be J2000.\\nThe array values represent the lower triangular half of the position-velocity covariance matrix. The size of the covariance matrix is dynamic, depending on whether the covariance for position only or position & velocity. The covariance elements are position dependent within the array with values ordered as follows:\\n\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;y&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;x\\'&nbsp;&nbsp;y\\'&nbsp;z\\'&nbsp;&nbsp;\\n\\nx&nbsp;&nbsp;&nbsp;&nbsp;1\\n\\ny&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3\\n\\nz&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;6\\n\\nx\\'&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;10\\n\\ny\\'&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15\\n\\nz\\'&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp; 21\\n\\n\\n\\n\\n\\nThe array containing the covariance matrix elements will be of length 6 for position only covariance, or length 21 for position-velocity covariance.  The cov array should contain only the lower left triangle values from top left down to bottom right, in order.',\n          items: {\n            type: 'number'\n          }\n        },\n        createdAt: {\n          type: 'string',\n          description: 'Time the row was created in the database, auto-populated by the system.',\n          format: 'date-time'\n        },\n        createdBy: {\n          type: 'string',\n          description: 'Application user who created the row in the database, auto-populated by the system.'\n        },\n        esId: {\n          type: 'string',\n          description: 'Unique identifier of the parent EphemerisSet, auto-generated by the system. The esId (ephemerisSet id) is used to identify all individual ephemeris states associated with a parent ephemerisSet.'\n        },\n        idOnOrbit: {\n          type: 'string',\n          description: 'Unique identifier of the on-orbit satellite object.'\n        },\n        origin: {\n          type: 'string',\n          description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n        },\n        origObjectId: {\n          type: 'string',\n          description: 'Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.'\n        },\n        xaccel: {\n          type: 'number',\n          description: 'Cartesian X acceleration of target, in km/sec^2, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.'\n        },\n        yaccel: {\n          type: 'number',\n          description: 'Cartesian Y acceleration of target, in km/sec^2, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.'\n        },\n        zaccel: {\n          type: 'number',\n          description: 'Cartesian Z acceleration of target, in km/sec^2, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.'\n        }\n      },\n      required: [        'classificationMarking',\n        'dataMode',\n        'source',\n        'ts',\n        'xpos',\n        'xvel',\n        'ypos',\n        'yvel',\n        'zpos',\n        'zvel'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      columns: {
        type: 'string',
        description:
          'Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.',
      },
      esId: {
        type: 'string',
        description:
          'Unique identifier of the parent EphemerisSet, auto-generated by the system. The esId (ephemerisSet id) is used to identify all individual ephemeris states associated with a parent ephemerisSet. (uuid)',
      },
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['columns', 'esId'],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { jq_filter, ...body } = args as any;
  return asTextContentResult(await maybeFilter(jq_filter, await client.ephemeris.tuple(body)));
};

export default { metadata, tool, handler };
