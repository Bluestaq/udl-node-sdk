// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'countries',
  operation: 'write',
  tags: [],
  httpMethod: 'put',
  httpPath: '/udl/country/{code}',
};

export const tool: Tool = {
  name: 'update_countries',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to update a single Country. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {}\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      code: {
        type: 'string',
        description:
          'The country code. Optimally, this value is the ISO 3166 Alpha-2-two-character country code, however it can represent various consortiums that do not appear in the ISO document.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      codeAlt: {
        type: 'string',
        description: '3 Digit or other alternate country code.',
      },
      fipsCode: {
        type: 'string',
        description:
          "Federal Information Processing Standard (FIPS) two-character country code. This field is used when the country code for FIPS differs from the country code for ISO-3166 value. For example, the ISO-3166 Alpha-2-country code for Vanuatu is VU, whereas Vanuatu's FIPS equivalent country code is NH.",
      },
      iso3Code: {
        type: 'string',
        description:
          'ISO 3166 Alpha-3 country code. This is a three-character code that represents a country name, which may be more closely related to the country name than its corresponding Alpha-2 code.',
      },
      name: {
        type: 'string',
        description: 'Country name.',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { code, ...body } = args as any;
  const response = await client.countries.update(code, body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
