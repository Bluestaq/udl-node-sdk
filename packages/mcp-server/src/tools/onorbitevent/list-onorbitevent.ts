// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'onorbitevent',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/onorbitevent',
};

export const tool: Tool = {
  name: 'list_onorbitevent',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    $ref: '#/$defs/onorbitevent_list_response'\n  },\n  $defs: {\n    onorbitevent_list_response: {\n      type: 'object',\n      properties: {\n        classificationMarking: {\n          type: 'string',\n          description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n        },\n        dataMode: {\n          type: 'string',\n          description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n          enum: [            'REAL',\n            'TEST',\n            'SIMULATED',\n            'EXERCISE'\n          ]\n        },\n        eventTime: {\n          type: 'string',\n          description: 'Date/Time of the event. See eventTimeNotes for remarks on the accuracy of the date time.',\n          format: 'date-time'\n        },\n        source: {\n          type: 'string',\n          description: 'Source of the data.'\n        },\n        id: {\n          type: 'string',\n          description: 'Unique identifier of the record, auto-generated by the system.'\n        },\n        achievedFlightPhase: {\n          type: 'string',\n          description: 'Achieved phase of flight prior to the event.'\n        },\n        ageAtEvent: {\n          type: 'number',\n          description: 'Spacecraft age at the event in years.'\n        },\n        capabilityLoss: {\n          type: 'number',\n          description: 'Spacecraft capability loss incurred, as a fraction of 1.'\n        },\n        capabilityLossNotes: {\n          type: 'string',\n          description: 'Notes on capability loss at the time of event.'\n        },\n        capacityLoss: {\n          type: 'number',\n          description: 'Spacecraft capacity loss incurred, as a fraction of 1.'\n        },\n        consequentialEquipmentFailure: {\n          type: 'string',\n          description: 'Additional equipment which failed as a result of faulty equipment on the spacecraft during the event.'\n        },\n        createdAt: {\n          type: 'string',\n          description: 'Time the row was created in the database, auto-populated by the system.',\n          format: 'date-time'\n        },\n        createdBy: {\n          type: 'string',\n          description: 'Application user who created the row in the database, auto-populated by the system.'\n        },\n        declassificationDate: {\n          type: 'string',\n          description: 'The declassification date of this data, in ISO 8601 UTC format.',\n          format: 'date-time'\n        },\n        declassificationString: {\n          type: 'string',\n          description: 'Declassification string of this data.'\n        },\n        derivedFrom: {\n          type: 'string',\n          description: 'The sources or SCG references from which the classification of this data is derived.'\n        },\n        description: {\n          type: 'string',\n          description: 'Notes/description of the event.'\n        },\n        equipmentAtFault: {\n          type: 'string',\n          description: 'Equipment on the spacecraft which caused the event.'\n        },\n        equipmentCausingLossNotes: {\n          type: 'string',\n          description: 'Additional notes on the equipment causing the event/loss.'\n        },\n        equipmentPartAtFault: {\n          type: 'string',\n          description: 'Specific part of the equipment on the spacecraft which caused the event.'\n        },\n        equipmentTypeAtFault: {\n          type: 'string',\n          description: 'Type of the equipment on the spacecraft which caused the event.'\n        },\n        eventResult: {\n          type: 'string',\n          description: 'The result of the reported event.'\n        },\n        eventTimeNotes: {\n          type: 'string',\n          description: 'Notes/remarks on the validity/accuracy of the eventTime.'\n        },\n        eventType: {\n          type: 'string',\n          description: 'The type of on-orbit event being reported.'\n        },\n        geoPosition: {\n          type: 'number',\n          description: 'GEO position longitude at event time if applicable. Negative values are west.'\n        },\n        idOnOrbit: {\n          type: 'string',\n          description: 'Unique identifier of the on-orbit object for this event.'\n        },\n        inclined: {\n          type: 'boolean',\n          description: 'Boolean indicating if the spacecraft is inclined.'\n        },\n        injured: {\n          type: 'integer',\n          description: 'Number of humans injured in the event.'\n        },\n        insuranceCarriedNotes: {\n          type: 'string',\n          description: 'Additional insurance notes on coverages at the time of event.'\n        },\n        insuranceLoss: {\n          type: 'number',\n          description: 'Insurance loss incurred, as a fraction of 1.'\n        },\n        insuranceLossNotes: {\n          type: 'string',\n          description: 'Additional insurance notes if the event is an official loss.'\n        },\n        killed: {\n          type: 'integer',\n          description: 'Number of humans killed in the event.'\n        },\n        lesseeOrgId: {\n          type: 'string',\n          description: 'Unique identifier of the organization which leases this on-orbit spacecraft.'\n        },\n        lifeLost: {\n          type: 'number',\n          description: 'Spacecraft life lost due to the event as a percent/fraction of 1.'\n        },\n        netAmount: {\n          type: 'number',\n          description: 'Net amount of the insurance claim for the event, in USD.'\n        },\n        objectStatus: {\n          type: 'string',\n          description: 'The status of the on-orbit object.'\n        },\n        occurrenceFlightPhase: {\n          type: 'string',\n          description: 'Phase of flight during which the event occurred.'\n        },\n        officialLossDate: {\n          type: 'string',\n          description: 'Date time of official loss of the spacecraft.',\n          format: 'date-time'\n        },\n        operatedOnBehalfOfOrgId: {\n          type: 'string',\n          description: 'Unique identifier of the organization on whose behalf the on-orbit spacecraft is operated.'\n        },\n        operatorOrgId: {\n          type: 'string',\n          description: 'Organization ID of the operator of the on-orbit spacecraft at the time of the event.'\n        },\n        origin: {\n          type: 'string',\n          description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n        },\n        origNetwork: {\n          type: 'string',\n          description: 'The originating source network on which this record was created, auto-populated by the system.'\n        },\n        origObjectId: {\n          type: 'string',\n          description: 'Original object ID or Catalog Number provided by source (may not map to an existing idOnOrbit in UDL).'\n        },\n        ownerOrgId: {\n          type: 'string',\n          description: 'Organization ID of the owner of the on-orbit spacecraft at the time of the event.'\n        },\n        planeNumber: {\n          type: 'string',\n          description: 'GEO slot plane number/designator of the spacecraft at event time.'\n        },\n        planeSlot: {\n          type: 'string',\n          description: 'GEO plane slot of the spacecraft at event time.'\n        },\n        positionStatus: {\n          type: 'string',\n          description: 'Position status of the spacecraft at event time (e.g. Stable, Drifting/Tumbling, etc).'\n        },\n        remarks: {\n          type: 'string',\n          description: 'Additional remarks on the event description.'\n        },\n        satellitePosition: {\n          type: 'string',\n          description: 'Description of the satellite orbital position or regime.'\n        },\n        satNo: {\n          type: 'integer',\n          description: 'Satellite/Catalog number of the target on-orbit object.'\n        },\n        stageAtFault: {\n          type: 'string',\n          description: 'Faulty stage of flight for the event.'\n        },\n        thirdPartyInsuranceLoss: {\n          type: 'number',\n          description: 'Insurance loss incurred by 3rd party insurance, in USD.'\n        },\n        underlyingCause: {\n          type: 'string',\n          description: 'Underlying cause of the event.'\n        },\n        untilTime: {\n          type: 'string',\n          description: 'Maximum validity time of the event.',\n          format: 'date-time'\n        }\n      },\n      required: [        'classificationMarking',\n        'dataMode',\n        'eventTime',\n        'source'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: [],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { jq_filter, ...body } = args as any;
  const response = await client.onorbitevent.list(body).asResponse();
  return asTextContentResult(await maybeFilter(jq_filter, await response.json()));
};

export default { metadata, tool, handler };
