// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'onorbitevent',
  operation: 'write',
  tags: [],
  httpMethod: 'put',
  httpPath: '/udl/onorbitevent/{id}',
};

export const tool: Tool = {
  name: 'update_onorbitevent',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to update a single OnorbitEvent. An OnorbitEvent is an event associated with a particular on-orbit spacecraft including insurance related losses, anomalies and incidents. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {}\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      path_id: {
        type: 'string',
      },
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      eventTime: {
        type: 'string',
        description:
          'Date/Time of the event. See eventTimeNotes for remarks on the accuracy of the date time.',
        format: 'date-time',
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      body_id: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      achievedFlightPhase: {
        type: 'string',
        description: 'Achieved phase of flight prior to the event.',
      },
      ageAtEvent: {
        type: 'number',
        description: 'Spacecraft age at the event in years.',
      },
      capabilityLoss: {
        type: 'number',
        description: 'Spacecraft capability loss incurred, as a fraction of 1.',
      },
      capabilityLossNotes: {
        type: 'string',
        description: 'Notes on capability loss at the time of event.',
      },
      capacityLoss: {
        type: 'number',
        description: 'Spacecraft capacity loss incurred, as a fraction of 1.',
      },
      consequentialEquipmentFailure: {
        type: 'string',
        description:
          'Additional equipment which failed as a result of faulty equipment on the spacecraft during the event.',
      },
      declassificationDate: {
        type: 'string',
        description: 'The declassification date of this data, in ISO 8601 UTC format.',
        format: 'date-time',
      },
      declassificationString: {
        type: 'string',
        description: 'Declassification string of this data.',
      },
      derivedFrom: {
        type: 'string',
        description: 'The sources or SCG references from which the classification of this data is derived.',
      },
      description: {
        type: 'string',
        description: 'Notes/description of the event.',
      },
      equipmentAtFault: {
        type: 'string',
        description: 'Equipment on the spacecraft which caused the event.',
      },
      equipmentCausingLossNotes: {
        type: 'string',
        description: 'Additional notes on the equipment causing the event/loss.',
      },
      equipmentPartAtFault: {
        type: 'string',
        description: 'Specific part of the equipment on the spacecraft which caused the event.',
      },
      equipmentTypeAtFault: {
        type: 'string',
        description: 'Type of the equipment on the spacecraft which caused the event.',
      },
      eventResult: {
        type: 'string',
        description: 'The result of the reported event.',
      },
      eventTimeNotes: {
        type: 'string',
        description: 'Notes/remarks on the validity/accuracy of the eventTime.',
      },
      eventType: {
        type: 'string',
        description: 'The type of on-orbit event being reported.',
      },
      geoPosition: {
        type: 'number',
        description: 'GEO position longitude at event time if applicable. Negative values are west.',
      },
      idOnOrbit: {
        type: 'string',
        description: 'Unique identifier of the on-orbit object for this event.',
      },
      inclined: {
        type: 'boolean',
        description: 'Boolean indicating if the spacecraft is inclined.',
      },
      injured: {
        type: 'integer',
        description: 'Number of humans injured in the event.',
      },
      insuranceCarriedNotes: {
        type: 'string',
        description: 'Additional insurance notes on coverages at the time of event.',
      },
      insuranceLoss: {
        type: 'number',
        description: 'Insurance loss incurred, as a fraction of 1.',
      },
      insuranceLossNotes: {
        type: 'string',
        description: 'Additional insurance notes if the event is an official loss.',
      },
      killed: {
        type: 'integer',
        description: 'Number of humans killed in the event.',
      },
      lesseeOrgId: {
        type: 'string',
        description: 'Unique identifier of the organization which leases this on-orbit spacecraft.',
      },
      lifeLost: {
        type: 'number',
        description: 'Spacecraft life lost due to the event as a percent/fraction of 1.',
      },
      netAmount: {
        type: 'number',
        description: 'Net amount of the insurance claim for the event, in USD.',
      },
      objectStatus: {
        type: 'string',
        description: 'The status of the on-orbit object.',
      },
      occurrenceFlightPhase: {
        type: 'string',
        description: 'Phase of flight during which the event occurred.',
      },
      officialLossDate: {
        type: 'string',
        description: 'Date time of official loss of the spacecraft.',
        format: 'date-time',
      },
      operatedOnBehalfOfOrgId: {
        type: 'string',
        description:
          'Unique identifier of the organization on whose behalf the on-orbit spacecraft is operated.',
      },
      operatorOrgId: {
        type: 'string',
        description: 'Organization ID of the operator of the on-orbit spacecraft at the time of the event.',
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
      origObjectId: {
        type: 'string',
        description:
          'Original object ID or Catalog Number provided by source (may not map to an existing idOnOrbit in UDL).',
      },
      ownerOrgId: {
        type: 'string',
        description: 'Organization ID of the owner of the on-orbit spacecraft at the time of the event.',
      },
      planeNumber: {
        type: 'string',
        description: 'GEO slot plane number/designator of the spacecraft at event time.',
      },
      planeSlot: {
        type: 'string',
        description: 'GEO plane slot of the spacecraft at event time.',
      },
      positionStatus: {
        type: 'string',
        description: 'Position status of the spacecraft at event time (e.g. Stable, Drifting/Tumbling, etc).',
      },
      remarks: {
        type: 'string',
        description: 'Additional remarks on the event description.',
      },
      satellitePosition: {
        type: 'string',
        description: 'Description of the satellite orbital position or regime.',
      },
      satNo: {
        type: 'integer',
        description: 'Satellite/Catalog number of the target on-orbit object.',
      },
      stageAtFault: {
        type: 'string',
        description: 'Faulty stage of flight for the event.',
      },
      thirdPartyInsuranceLoss: {
        type: 'number',
        description: 'Insurance loss incurred by 3rd party insurance, in USD.',
      },
      underlyingCause: {
        type: 'string',
        description: 'Underlying cause of the event.',
      },
      untilTime: {
        type: 'string',
        description: 'Maximum validity time of the event.',
        format: 'date-time',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['path_id', 'classificationMarking', 'dataMode', 'eventTime', 'source'],
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { id, ...body } = args as any;
  const response = await client.onorbitevent.update(id, body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
