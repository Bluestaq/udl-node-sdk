// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'ground_imagery',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/udl/groundimagery',
};

export const tool: Tool = {
  name: 'create_ground_imagery',
  description:
    'Service operation to take a single GroundImagery object as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.',
  inputSchema: {
    type: 'object',
    properties: {
      classificationMarking: {
        type: 'string',
        description: 'Classification marking of the data in IC/CAPCO Portion-marked format.',
      },
      dataMode: {
        type: 'string',
        description:
          'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',
        enum: ['REAL', 'TEST', 'SIMULATED', 'EXERCISE'],
      },
      filename: {
        type: 'string',
        description: 'Name of the image file.',
      },
      imageTime: {
        type: 'string',
        description: 'Timestamp the image was captured/produced.',
        format: 'date-time',
      },
      source: {
        type: 'string',
        description: 'Source of the data.',
      },
      id: {
        type: 'string',
        description: 'Unique identifier of the record, auto-generated by the system.',
      },
      checksumValue: {
        type: 'string',
        description:
          'MD5 value of the file. The ingest/create operation will automatically generate the value.',
      },
      filesize: {
        type: 'integer',
        description:
          'Size of the image file. Units in bytes. If filesize is provided without an associated file, it defaults to 0.',
      },
      format: {
        type: 'string',
        description: 'Optional, field indicating type of image, NITF, PNG, etc.',
      },
      idSensor: {
        type: 'string',
        description: 'Optional ID of the sensor that produced this ground image.',
      },
      keywords: {
        type: 'array',
        description: 'Optional array of keywords for this image.',
        items: {
          type: 'string',
        },
      },
      name: {
        type: 'string',
        description: 'Optional name/description associated with this image.',
      },
      notes: {
        type: 'string',
        description: 'Description and notes of the image.',
      },
      origin: {
        type: 'string',
        description:
          'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.',
      },
      origSensorId: {
        type: 'string',
        description:
          'Optional identifier provided by source to indicate the sensor identifier used to detect this event. This may be an internal identifier and not necessarily a valid sensor ID.',
      },
      region: {
        type: 'string',
        description:
          'Geographical region or polygon (lon/lat pairs) of the image as projected on the ground in geoJSON or geoText format. This is an optional convenience field only used for create operations. The system will auto-detect the format (Well Known Text or GeoJSON) and populate both regionText and regionGeoJSON fields appropriately. When omitted, regionText or regionGeoJSON is expected.',
      },
      regionGeoJSON: {
        type: 'string',
        description:
          'Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. Reference: https://geojson.org/. Ignored if included with a create operation that also specifies a valid region or regionText.',
      },
      regionNDims: {
        type: 'integer',
        description: 'Number of dimensions of the geometry depicted by region.',
      },
      regionSRid: {
        type: 'integer',
        description: 'Geographical spatial_ref_sys for region.',
      },
      regionText: {
        type: 'string',
        description:
          'Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a create operation that also specifies a valid region.',
      },
      regionType: {
        type: 'string',
        description: 'Type of region as projected on the ground.',
      },
      subjectId: {
        type: 'string',
        description:
          'Optional identifier of the subject/target of the image, useful for correlating multiple images of the same subject.',
      },
      tags: {
        type: 'array',
        description:
          'Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.',
        items: {
          type: 'string',
        },
      },
      transactionId: {
        type: 'string',
        description:
          'Optional identifier to track a commercial or marketplace transaction executed to produce this data.',
      },
    },
    required: ['classificationMarking', 'dataMode', 'filename', 'imageTime', 'source'],
  },
  annotations: {},
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  const response = await client.groundImagery.create(body).asResponse();
  return asTextContentResult(await response.text());
};

export default { metadata, tool, handler };
