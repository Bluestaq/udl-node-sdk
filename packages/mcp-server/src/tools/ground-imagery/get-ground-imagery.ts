// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'unified-data-library-mcp/filtering';
import { Metadata, asTextContentResult } from 'unified-data-library-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Unifieddatalibrary from 'unified-data-library';

export const metadata: Metadata = {
  resource: 'ground_imagery',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/udl/groundimagery/{id}',
};

export const tool: Tool = {
  name: 'get_ground_imagery',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nService operation to get a single GroundImagery record by its unique ID passed as a path parameter. GroundImagery represents metadata about a ground image, as well as the actual binary image data.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  description: 'Imagery of terrestrial regions from on-orbit, air, and other sensors.',\n  properties: {\n    classificationMarking: {\n      type: 'string',\n      description: 'Classification marking of the data in IC/CAPCO Portion-marked format.'\n    },\n    dataMode: {\n      type: 'string',\n      description: 'Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\\n\\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\\n\\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\\n\\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\\n\\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.',\n      enum: [        'REAL',\n        'TEST',\n        'SIMULATED',\n        'EXERCISE'\n      ]\n    },\n    filename: {\n      type: 'string',\n      description: 'Name of the image file.'\n    },\n    imageTime: {\n      type: 'string',\n      description: 'Timestamp the image was captured/produced.',\n      format: 'date-time'\n    },\n    source: {\n      type: 'string',\n      description: 'Source of the data.'\n    },\n    id: {\n      type: 'string',\n      description: 'Unique identifier of the record, auto-generated by the system.'\n    },\n    checksumValue: {\n      type: 'string',\n      description: 'MD5 value of the file. The ingest/create operation will automatically generate the value.'\n    },\n    createdAt: {\n      type: 'string',\n      description: 'Time the row was created in the database, auto-populated by the system.',\n      format: 'date-time'\n    },\n    createdBy: {\n      type: 'string',\n      description: 'Application user who created the row in the database, auto-populated by the system.'\n    },\n    filesize: {\n      type: 'integer',\n      description: 'Size of the image file. Units in bytes. If filesize is provided without an associated file, it defaults to 0.'\n    },\n    format: {\n      type: 'string',\n      description: 'Optional, field indicating type of image, NITF, PNG, etc.'\n    },\n    idSensor: {\n      type: 'string',\n      description: 'Optional ID of the sensor that produced this ground image.'\n    },\n    keywords: {\n      type: 'array',\n      description: 'Optional array of keywords for this image.',\n      items: {\n        type: 'string'\n      }\n    },\n    name: {\n      type: 'string',\n      description: 'Optional name/description associated with this image.'\n    },\n    notes: {\n      type: 'string',\n      description: 'Description and notes of the image.'\n    },\n    origin: {\n      type: 'string',\n      description: 'Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.'\n    },\n    origNetwork: {\n      type: 'string',\n      description: 'The originating source network on which this record was created, auto-populated by the system.'\n    },\n    origSensorId: {\n      type: 'string',\n      description: 'Optional identifier provided by source to indicate the sensor identifier used to detect this event. This may be an internal identifier and not necessarily a valid sensor ID.'\n    },\n    region: {\n      type: 'string',\n      description: 'Geographical region or polygon (lon/lat pairs) of the image as projected on the ground in geoJSON or geoText format. This is an optional convenience field only used for create operations. The system will auto-detect the format (Well Known Text or GeoJSON) and populate both regionText and regionGeoJSON fields appropriately. When omitted, regionText or regionGeoJSON is expected.'\n    },\n    regionGeoJSON: {\n      type: 'string',\n      description: 'Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. Reference: https://geojson.org/. Ignored if included with a create operation that also specifies a valid region or regionText.'\n    },\n    regionNDims: {\n      type: 'integer',\n      description: 'Number of dimensions of the geometry depicted by region.'\n    },\n    regionSRid: {\n      type: 'integer',\n      description: 'Geographical spatial_ref_sys for region.'\n    },\n    regionText: {\n      type: 'string',\n      description: 'Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a create operation that also specifies a valid region.'\n    },\n    regionType: {\n      type: 'string',\n      description: 'Type of region as projected on the ground.'\n    },\n    sourceDL: {\n      type: 'string',\n      description: 'The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.'\n    },\n    subjectId: {\n      type: 'string',\n      description: 'Optional identifier of the subject/target of the image, useful for correlating multiple images of the same subject.'\n    },\n    tags: {\n      type: 'array',\n      description: 'Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.',\n      items: {\n        type: 'string'\n      }\n    },\n    transactionId: {\n      type: 'string',\n      description: 'Optional identifier to track a commercial or marketplace transaction executed to produce this data.'\n    },\n    updatedAt: {\n      type: 'string',\n      description: 'Read-only time the row was updated in the database, set automatically by the system on update.',\n      format: 'date-time'\n    },\n    updatedBy: {\n      type: 'string',\n      description: 'Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.'\n    }\n  },\n  required: [    'classificationMarking',\n    'dataMode',\n    'filename',\n    'imageTime',\n    'source'\n  ]\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      id: {
        type: 'string',
      },
      firstResult: {
        type: 'integer',
      },
      maxResults: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['id'],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Unifieddatalibrary, args: Record<string, unknown> | undefined) => {
  const { id, ...body } = args as any;
  return asTextContentResult(await maybeFilter(args, await client.groundImagery.get(id, body)));
};

export default { metadata, tool, handler };
