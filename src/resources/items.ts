// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../resource';
import * as Core from '../core';

export class Items extends APIResource {
  /**
   * Service operation to take multiple item records as a POST body and ingest into
   * the database. This operation is intended to be used for automated feeds into
   * UDL. A specific role is required to perform this service operation. Please
   * contact the UDL team for assistance.
   */
  create(body: ItemCreateParams, options?: Core.RequestOptions): Core.APIPromise<void> {
    return this._client.post('/filedrop/udl-item', {
      body,
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }
}

export type ItemCreateParams = Array<ItemCreateParams.Body>;

export namespace ItemCreateParams {
  export interface Body {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: string;

    /**
     * The tracking identifier of an item or person. May be similar in representation
     * of a barcode or UPC. If no scanCode or tracking number equivalent is available,
     * 'NONE' should be used.
     */
    scanCode: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * The item type of this record (e.g. EQUIPMENT, CARGO, PASSENGER).
     */
    type: string;

    /**
     * Unique identifier of the record, auto-generated by the system if not provided on
     * create operations.
     */
    id?: string;

    /**
     * Array of keys that may be associated to the accepting system data. The entries
     * in this array must correspond to the position index in accSysValues array. This
     * array must be the same length as accSysValues.
     */
    accSysKeys?: Array<string>;

    /**
     * Additional data required to find this item in the accepting system.
     */
    accSysNotes?: string;

    /**
     * Name of the system that accepted this item from a customer. Where a user or
     * application could go look for additional information.
     */
    accSystem?: string;

    /**
     * Array of values for the keys that may be associated to the accepting system
     * data. The entries in this array must correspond to the position index in
     * accSysKeys array. This array must be the same length as accSysKeys.
     */
    accSysValues?: Array<string>;

    /**
     * Flag indicating this item is planned to be airdropped. Applicable for cargo and
     * passenger item types only.
     */
    airdrop?: boolean;

    /**
     * Name of the additional data format so downstream consuming applications can know
     * how to parse it. Typically includes the source system name and the format name.
     */
    altDataFormat?: string;

    /**
     * The type of cargo (e.g. PALLET, ROLLING STOCK, LOOSE, OTHER). Applicable for
     * cargo item types only.
     */
    cargoType?: string;

    /**
     * How far left or right of centerline is the item in meters. Applicable for cargo
     * and passenger item types only.
     */
    centerlineOffset?: number;

    /**
     * Center of gravity position of the item, measured from the item's front datum, in
     * centimeters.
     */
    cg?: number;

    /**
     * The classification code of the commodity or group of commodities.
     */
    commodityCode?: string;

    /**
     * The classification system denoting the commodity code, commodityCode (e.g. AIR,
     * WATER, NMFC, UFC, STCC, DODUNQ, etc.).
     */
    commoditySys?: string;

    /**
     * Flag indicating this item acts as a container and contains additional items.
     */
    container?: boolean;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * The departure code or location where this item has left or is leaving.
     */
    departure?: string;

    /**
     * The destination of the item, typically an ICAO or port code. Applicable for
     * cargo and passenger item types only.
     */
    destination?: string;

    /**
     * United States Distinguished Visitor Code, only applicable to people.
     */
    dvCode?: string;

    /**
     * The fuselage station of the item measured from the reference datum, in
     * centimeters. Applicable for cargo and passenger item types only.
     */
    fs?: number;

    /**
     * Array of UN hazard classes or division codes that apply to this item.
     */
    hazCodes?: Array<number>;

    /**
     * Height of the cargo in meters. Applicable for cargo item types only.
     */
    height?: number;

    /**
     * The UDL ID of the air load plan this item is associated with.
     */
    idAirLoadPlan?: string;

    /**
     * Array of tracking identifiers that are contained within this item.
     */
    itemContains?: Array<string>;

    /**
     * Array of keys that may be associated to this item. The entries in this array
     * must correspond to the position index in the values array. This array must be
     * the same length as values..
     */
    keys?: Array<string>;

    /**
     * The latest acceptable arrival date of the item at the destination, in ISO 8601
     * date-only format (e.g. YYYY-MM-DD).
     */
    lastArrDate?: string;

    /**
     * Length of the cargo in meters. Applicable for cargo item types only.
     */
    length?: number;

    /**
     * Moment of the item in Newton-meters. Applicable for equipment and cargo item
     * types only.
     */
    moment?: number;

    /**
     * Name of the item. Applicable for equipment and cargo item types only.
     */
    name?: string;

    /**
     * Net explosive weight of the item, in kilograms.
     */
    netExpWt?: number;

    /**
     * Optional notes or comments about this item.
     */
    notes?: string;

    /**
     * Number of pallet positions or equivalent on the aircraft, ship, or conveyance
     * equipment that this item occupies.
     */
    numPalletPos?: number;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * The code denoting the type of material item.
     */
    productCode?: string;

    /**
     * The assigning system that denotes the type of material item, productCode (e.g.
     * NSN-national stock number, NDC-national drug code, MPN-manufacturer part number,
     * etc.).
     */
    productSys?: string;

    /**
     * The military branch receiving this item.
     */
    receivingBranch?: string;

    /**
     * The name of the unit receiving this item.
     */
    receivingUnit?: string;

    /**
     * The algorithm name or standard that generated the scanCode (e.g. UPC-A, EAN-13,
     * GTIN, SSCC, bID, JAN, etc.).
     */
    scGenTool?: string;

    /**
     * The source data library from which this record was received. This could be a
     * remote or tactical UDL or another data library. If null, the record should be
     * assumed to have originated from the primary Enterprise UDL.
     */
    sourceDL?: string;

    /**
     * Transportation Control Number of the cargo. Applicable for cargo item types
     * only.
     */
    tcn?: string;

    /**
     * The unit line number of this item.
     */
    uln?: string;

    /**
     * Array of values for the keys that may be associated to this tracked item. The
     * entries in this array must correspond to the position index in the keys array.
     * This array must be the same length as keys.
     */
    values?: Array<string>;

    /**
     * The volume of the item, in cubic meters. Applicable for cargo item types only.
     */
    volume?: number;

    /**
     * Weight of the item in kilograms (if item is a passenger, include on-person
     * bags).
     */
    weight?: number;

    /**
     * Timestamp when the weight was taken, in ISO 8601 UTC format with millisecond
     * precision.
     */
    weightTS?: string;

    /**
     * Width of the cargo in meters. Applicable for cargo item types only.
     */
    width?: number;
  }
}

export declare namespace Items {
  export { type ItemCreateParams as ItemCreateParams };
}
