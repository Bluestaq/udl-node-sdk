// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from 'bluestaq@unified-data-library/core/resource';
import * as Shared from 'bluestaq@unified-data-library/resources/shared';
import { APIPromise } from 'bluestaq@unified-data-library/core/api-promise';
import {
  OffsetPage,
  type OffsetPageParams,
  PagePromise,
} from 'bluestaq@unified-data-library/core/pagination';
import { RequestOptions } from 'bluestaq@unified-data-library/internal/request-options';
import { path } from 'bluestaq@unified-data-library/internal/utils/path';

export class SensorType extends APIResource {
  /**
   * Service operation to dynamically query data by a variety of query parameters not
   * specified in this API documentation. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   */
  list(
    query: SensorTypeListParams | null | undefined = {},
    options?: RequestOptions,
  ): PagePromise<SensorTypeListResponsesOffsetPage, SensorTypeListResponse> {
    return this._client.getAPIList('/udl/sensortype', OffsetPage<SensorTypeListResponse>, {
      query,
      ...options,
    });
  }

  /**
   * Service operation to get a single Sensortype record by its unique ID passed as a
   * path parameter.
   */
  get(
    id: number,
    query: SensorTypeGetParams | null | undefined = {},
    options?: RequestOptions,
  ): APIPromise<SensorTypeGetResponse> {
    return this._client.get(path`/udl/sensortype/${id}`, { query, ...options });
  }

  /**
   * Service operation to provide detailed information on available dynamic query
   * parameters for a particular data type.
   */
  queryhelp(options?: RequestOptions): APIPromise<SensorTypeQueryhelpResponse> {
    return this._client.get('/udl/sensortype/queryhelp', options);
  }
}

export type SensorTypeListResponsesOffsetPage = OffsetPage<SensorTypeListResponse>;

export interface SensorTypeListResponse {
  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: number;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * The specific sensor type and/or surveillance capability of this sensor.
   */
  type?: string;
}

export interface SensorTypeGetResponse {
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: number;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * The specific sensor type and/or surveillance capability of this sensor.
   */
  type?: string;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

export interface SensorTypeQueryhelpResponse {
  aodrSupported?: boolean;

  classificationMarking?: string;

  description?: string;

  historySupported?: boolean;

  name?: string;

  parameters?: Array<Shared.ParamDescriptor>;

  requiredRoles?: Array<string>;

  restSupported?: boolean;

  sortSupported?: boolean;

  typeName?: string;

  uri?: string;
}

export interface SensorTypeListParams extends OffsetPageParams {}

export interface SensorTypeGetParams {
  firstResult?: number;

  maxResults?: number;
}

export declare namespace SensorType {
  export {
    type SensorTypeListResponse as SensorTypeListResponse,
    type SensorTypeGetResponse as SensorTypeGetResponse,
    type SensorTypeQueryhelpResponse as SensorTypeQueryhelpResponse,
    type SensorTypeListResponsesOffsetPage as SensorTypeListResponsesOffsetPage,
    type SensorTypeListParams as SensorTypeListParams,
    type SensorTypeGetParams as SensorTypeGetParams,
  };
}
