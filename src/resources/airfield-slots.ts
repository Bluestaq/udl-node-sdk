// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../core/resource';
import { APIPromise } from '../core/api-promise';
import { buildHeaders } from '../internal/headers';
import { RequestOptions } from '../internal/request-options';

export class AirfieldSlots extends APIResource {
  /**
   * Service operation to take a single airfieldslot record as a POST body and ingest
   * into the database. A specific role is required to perform this service
   * operation. Please contact the UDL team for assistance.
   */
  create(body: AirfieldSlotCreateParams, options?: RequestOptions): APIPromise<void> {
    return this._client.post('/udl/airfieldslot', {
      body,
      ...options,
      headers: buildHeaders([{ Accept: '*/*' }, options?.headers]),
    });
  }

  /**
   * Service operation to dynamically query data by a variety of query parameters not
   * specified in this API documentation. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   */
  list(options?: RequestOptions): APIPromise<AirfieldSlotListResponse> {
    return this._client.get('/udl/airfieldslot', options);
  }
}

/**
 * Airfield capacity data. Contains data associated with the airfieldslots
 * available for parking, working, takeoff, and landing at the airfield, as well as
 * the types of aircraft that can be accommodated.
 */
export interface AirfieldslotAbridged {
  /**
   * The name of the airfield where this slot is located.
   */
  airfieldName: string;

  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Name of this slot.
   */
  name: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Largest category of aircraft supported in this slot (WIDE, NARROW, HELO, ALL,
   * OTHER).
   */
  acSlotCat?: 'WIDE' | 'NARROW' | 'HELO' | 'ALL' | 'OTHER';

  /**
   * Alternate airfield identifier provided by the source.
   */
  altAirfieldId?: string;

  /**
   * Number of aircraft that can fit in this slot at the same time.
   */
  capacity?: number;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Latest zulu time this slot is available based on daily standard hours. Not
   * applicable to slots with type PARKING. Abnormal hours, such as holidays, should
   * be marked via the AirfieldSlotConsumption schema.
   */
  endTime?: string;

  /**
   * The International Civil Aviation Organization (ICAO) code of the airfield.
   */
  icao?: string;

  /**
   * Unique identifier of the Airfield for which this slot information applies.
   */
  idAirfield?: string;

  /**
   * Minimum time that must elapse between different aircraft leaving and entering
   * this slot, in minutes.
   */
  minSeparation?: number;

  /**
   * Optional notes/comments for this airfield slot.
   */
  notes?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * Zulu time this slot is first available based on daily standard hours. Not
   * applicable to slots with type PARKING. Abnormal hours, such as holidays, should
   * be marked via the AirfieldSlotConsumption schema.
   */
  startTime?: string;

  /**
   * Designates how this slot can be used (WORKING, PARKING, TAKEOFF, LANDING,
   * OTHER).
   */
  type?: 'WORKING' | 'PARKING' | 'TAKEOFF' | 'LANDING' | 'OTHER';
}

/**
 * Airfield capacity data. Contains data associated with the airfieldslots
 * available for parking, working, takeoff, and landing at the airfield, as well as
 * the types of aircraft that can be accommodated.
 */
export interface AirfieldslotFull {
  /**
   * The name of the airfield where this slot is located.
   */
  airfieldName: string;

  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Name of this slot.
   */
  name: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Largest category of aircraft supported in this slot (WIDE, NARROW, HELO, ALL,
   * OTHER).
   */
  acSlotCat?: 'WIDE' | 'NARROW' | 'HELO' | 'ALL' | 'OTHER';

  /**
   * Alternate airfield identifier provided by the source.
   */
  altAirfieldId?: string;

  /**
   * Number of aircraft that can fit in this slot at the same time.
   */
  capacity?: number;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Latest zulu time this slot is available based on daily standard hours. Not
   * applicable to slots with type PARKING. Abnormal hours, such as holidays, should
   * be marked via the AirfieldSlotConsumption schema.
   */
  endTime?: string;

  /**
   * The International Civil Aviation Organization (ICAO) code of the airfield.
   */
  icao?: string;

  /**
   * Unique identifier of the Airfield for which this slot information applies.
   */
  idAirfield?: string;

  /**
   * Minimum time that must elapse between different aircraft leaving and entering
   * this slot, in minutes.
   */
  minSeparation?: number;

  /**
   * Optional notes/comments for this airfield slot.
   */
  notes?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * Zulu time this slot is first available based on daily standard hours. Not
   * applicable to slots with type PARKING. Abnormal hours, such as holidays, should
   * be marked via the AirfieldSlotConsumption schema.
   */
  startTime?: string;

  /**
   * Designates how this slot can be used (WORKING, PARKING, TAKEOFF, LANDING,
   * OTHER).
   */
  type?: 'WORKING' | 'PARKING' | 'TAKEOFF' | 'LANDING' | 'OTHER';

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

export type AirfieldSlotListResponse = Array<AirfieldslotAbridged>;

export interface AirfieldSlotCreateParams {
  /**
   * The name of the airfield where this slot is located.
   */
  airfieldName: string;

  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Name of this slot.
   */
  name: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Largest category of aircraft supported in this slot (WIDE, NARROW, HELO, ALL,
   * OTHER).
   */
  acSlotCat?: 'WIDE' | 'NARROW' | 'HELO' | 'ALL' | 'OTHER';

  /**
   * Alternate airfield identifier provided by the source.
   */
  altAirfieldId?: string;

  /**
   * Number of aircraft that can fit in this slot at the same time.
   */
  capacity?: number;

  /**
   * Latest zulu time this slot is available based on daily standard hours. Not
   * applicable to slots with type PARKING. Abnormal hours, such as holidays, should
   * be marked via the AirfieldSlotConsumption schema.
   */
  endTime?: string;

  /**
   * The International Civil Aviation Organization (ICAO) code of the airfield.
   */
  icao?: string;

  /**
   * Unique identifier of the Airfield for which this slot information applies.
   */
  idAirfield?: string;

  /**
   * Minimum time that must elapse between different aircraft leaving and entering
   * this slot, in minutes.
   */
  minSeparation?: number;

  /**
   * Optional notes/comments for this airfield slot.
   */
  notes?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * Zulu time this slot is first available based on daily standard hours. Not
   * applicable to slots with type PARKING. Abnormal hours, such as holidays, should
   * be marked via the AirfieldSlotConsumption schema.
   */
  startTime?: string;

  /**
   * Designates how this slot can be used (WORKING, PARKING, TAKEOFF, LANDING,
   * OTHER).
   */
  type?: 'WORKING' | 'PARKING' | 'TAKEOFF' | 'LANDING' | 'OTHER';
}

export declare namespace AirfieldSlots {
  export {
    type AirfieldslotAbridged as AirfieldslotAbridged,
    type AirfieldslotFull as AirfieldslotFull,
    type AirfieldSlotListResponse as AirfieldSlotListResponse,
    type AirfieldSlotCreateParams as AirfieldSlotCreateParams,
  };
}
