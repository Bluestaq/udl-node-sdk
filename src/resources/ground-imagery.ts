// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../resource';
import * as Core from '../core';

export class GroundImagery extends APIResource {
  /**
   * The ground imagery service allows for contribution of images. This service
   * operation requires a zip file in the body of the POST request. The zip file must
   * contain exactly two files. <h3> 1) A json file with any file name that ends in
   * .json e.g. MyDataFile.json The contents of the json file must be valid according
   * to the schema for Ground Imagery. 2) A binary image file of the specified types
   * allowed for GroundImagery. </h3> The metadata and image files will be stored and
   * associated with each other allowing queries of the data retrieval of the binary
   * images. This operation is intended to be used for automated feeds into UDL. A
   * specific role is required to perform this service operation. Please contact the
   * UDL team for assistance.
   */
  create(body: GroundImageryCreateParams, options?: Core.RequestOptions): Core.APIPromise<void> {
    return this._client.post('/filedrop/udl-groundimagery', {
      body,
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }
}

export interface GroundImageryCreateParams {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: string;

  /**
   * Name of the image file.
   */
  filename: string;

  /**
   * Timestamp the image was captured/produced.
   */
  imageTime: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * MD5 value of the file. The ingest/create operation will automatically generate
   * the value.
   */
  checksumValue?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Size of the image file. Units in bytes. If filesize is provided without an
   * associated file, it defaults to 0.
   */
  filesize?: number;

  /**
   * Optional, field indicating type of image, NITF, PNG, etc.
   */
  format?: string;

  /**
   * Optional ID of the sensor that produced this ground image.
   */
  idSensor?: string;

  /**
   * Optional array of keywords for this image.
   */
  keywords?: Array<string>;

  /**
   * Optional name/description associated with this image.
   */
  name?: string;

  /**
   * Description and notes of the image.
   */
  notes?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Optional identifier provided by source to indicate the sensor identifier used to
   * detect this event. This may be an internal identifier and not necessarily a
   * valid sensor ID.
   */
  origSensorId?: string;

  /**
   * Geographical region or polygon (lon/lat pairs) of the image as projected on the
   * ground in geoJSON or geoText format. This is an optional convenience field only
   * used for create operations. The system will auto-detect the format (Well Known
   * Text or GeoJSON) and populate both regionText and regionGeoJSON fields
   * appropriately. When omitted, regionText or regionGeoJSON is expected.
   */
  region?: string;

  /**
   * Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON
   * representation of the geometry/geography, of the image as projected on the
   * ground. Reference: https://geojson.org/. Ignored if included with a create
   * operation that also specifies a valid region or regionText.
   */
  regionGeoJSON?: string;

  /**
   * Number of dimensions of the geometry depicted by region.
   */
  regionNDims?: number;

  /**
   * Geographical spatial_ref_sys for region.
   */
  regionSRid?: number;

  /**
   * Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known
   * Text representation of the geometry/geography, of the image as projected on the
   * ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored
   * if included with a create operation that also specifies a valid region.
   */
  regionText?: string;

  /**
   * Type of region as projected on the ground.
   */
  regionType?: string;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * Optional identifier of the subject/target of the image, useful for correlating
   * multiple images of the same subject.
   */
  subjectId?: string;

  /**
   * Optional array of provider/source specific tags for this data, where each
   * element is no longer than 32 characters, used for implementing data owner
   * conditional access controls to restrict access to the data. Should be left null
   * by data providers unless conditional access controls are coordinated with the
   * UDL team.
   */
  tags?: Array<string>;

  /**
   * Optional identifier to track a commercial or marketplace transaction executed to
   * produce this data.
   */
  transactionId?: string;
}

export declare namespace GroundImagery {
  export { type GroundImageryCreateParams as GroundImageryCreateParams };
}
