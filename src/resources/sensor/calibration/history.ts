// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../../core/resource';
import { APIPromise } from '../../../core/api-promise';
import { buildHeaders } from '../../../internal/headers';
import { RequestOptions } from '../../../internal/request-options';

export class History extends APIResource {
  /**
   * Service operation to return the count of records satisfying the specified query
   * parameters. This operation is useful to determine how many records pass a
   * particular query criteria without retrieving large amounts of data. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
   * valid/required query parameter information.
   */
  count(query: HistoryCountParams, options?: RequestOptions): APIPromise<string> {
    return this._client.get('/udl/sensorcalibration/history/count', {
      query,
      ...options,
      headers: buildHeaders([{ Accept: 'text/plain' }, options?.headers]),
    });
  }

  /**
   * Service operation to dynamically query historical data by a variety of query
   * parameters not specified in this API documentation. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   */
  query(query: HistoryQueryParams, options?: RequestOptions): APIPromise<HistoryQueryResponse> {
    return this._client.get('/udl/sensorcalibration/history', { query, ...options });
  }

  /**
   * Service operation to dynamically query historical data by a variety of query
   * parameters not specified in this API documentation, then write that data to the
   * Secure Content Store. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   */
  writeAodr(query: HistoryWriteAodrParams, options?: RequestOptions): APIPromise<void> {
    return this._client.get('/udl/sensorcalibration/history/aodr', {
      query,
      ...options,
      headers: buildHeaders([{ Accept: '*/*' }, options?.headers]),
    });
  }
}

export type HistoryCountResponse = string;

export type HistoryQueryResponse = Array<HistoryQueryResponse.HistoryQueryResponseItem>;

export namespace HistoryQueryResponse {
  /**
   * The Sensor Calibration service records data about a sensor's overall accuracy
   * and is used to adjust sensor settings to achieve and maintain that accuracy in
   * reported sensor observations. Calibration occurs periodically when needed to
   * maintain sensor accuracy or on-demand to adjust a sensor for a specific reading.
   */
  export interface HistoryQueryResponseItem {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * Unique identifier of the sensor to which this calibration data applies. This ID
     * can be used to obtain additional information on a sensor using the 'get by ID'
     * operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc
     * would be queried as /udl/sensor/abc.
     */
    idSensor: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Calibration data span start time in ISO 8601 UTC format with millisecond
     * precision.
     */
    startTime: string;

    /**
     * Unique identifier of the record, auto-generated by the system if not provided on
     * create operations.
     */
    id?: string;

    /**
     * Sensor azimuth/right-ascension acceleration bias rate, in degrees per second
     * squared, during sensor operation.
     */
    azRaAccelBias?: number;

    /**
     * Standard deviation azimuth/right-ascension acceleration bias rate, in degrees
     * per second squared.
     */
    azRaAccelSigma?: number;

    /**
     * Sensor azimuth/right-ascension bias, in degrees, during sensor operation.
     */
    azRaBias?: number;

    /**
     * Sensor azimuth/right-ascension bias rate, in degrees per second, during sensor
     * operation.
     */
    azRaBiasRate?: number;

    /**
     * The mean azimuth/right-ascension average, in degrees, for the duration span.
     */
    azRaMean?: number;

    /**
     * The root mean square of the azimuth/right-ascension, in degrees, for the
     * duration span.
     */
    azRaRms?: number;

    /**
     * Standard deviation azimuth/right-ascension bias rate, in degrees per second.
     */
    azRaSigmaRate?: number;

    /**
     * Specifies the calibration reference angle set for this calibration data set.
     * Azimuth and Elevation (AZEL) or Right Ascension and Declination (RADEC).
     */
    calAngleRef?: string;

    /**
     * Specifies that the calibration data are from INTRA_TRACK or INTER_TRACK
     * residuals.
     */
    calTrackMode?: string;

    /**
     * The basis of calibration values contained in this record (COMPUTED,
     * OPERATIONAL).
     */
    calType?: string;

    /**
     * The confidence noise bias of the duration span.
     */
    confidenceNoiseBias?: number;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Duration of the sensor calibration data which produced these values, measured in
     * days.
     */
    duration?: number;

    /**
     * Three element array, expressing the sensor location in Earth Centered Rotating
     * (ECR) coordinates, in kilometers. The array element order is [x, y, z].
     */
    ecr?: Array<number>;

    /**
     * Sensor elevation/declination acceleration bias rate, in degrees per second
     * squared, during sensor operation.
     */
    elDecAccelBias?: number;

    /**
     * Standard deviation elevation/declination acceleration bias rate, in degrees per
     * second squared.
     */
    elDecAccelSigma?: number;

    /**
     * Sensor elevation/declination bias, in degrees, during sensor operation.
     */
    elDecBias?: number;

    /**
     * Sensor elevation/declination bias rate, in degrees per second, during sensor
     * operation.
     */
    elDecBiasRate?: number;

    /**
     * The mean elevation/declination residuals, in degrees, for the duration span.
     */
    elDecMean?: number;

    /**
     * The root mean square of the elevation/declination, in degrees, for the duration
     * span.
     */
    elDecRms?: number;

    /**
     * Standard deviation elevation/declination bias rate, in degrees per second.
     */
    elDecSigmaRate?: number;

    /**
     * Calibration data span end time in ISO 8601 UTC format with millisecond
     * precision. If provided, the endTime must be greater than or equal to the
     * startTime in the SensorCalibration record.
     */
    endTime?: string;

    /**
     * The number of observables used in determining the azimuth or right-ascension
     * calibration values.
     */
    numAzRaObs?: number;

    /**
     * The number of observables used in determining the elevation or declination
     * calibration values.
     */
    numElDecObs?: number;

    /**
     * The total number of observables available over the calibration span.
     */
    numObs?: number;

    /**
     * The number of observables used in determining the photometric calibration
     * values.
     */
    numPhotoObs?: number;

    /**
     * The number of observables used in determining the range calibration values.
     */
    numRangeObs?: number;

    /**
     * The number of observables used in determining the range rate calibration values.
     */
    numRangeRateObs?: number;

    /**
     * The number of observables used in determining the radar cross section (RCS)
     * calibration values.
     */
    numRcsObs?: number;

    /**
     * The number of observables used in determining the time calibration values.
     */
    numTimeObs?: number;

    /**
     * The total number of tracks available over the calibration span.
     */
    numTracks?: number;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * The photometric observation noise bias in visual magnitude.
     */
    photoBias?: number;

    /**
     * The photometric observation noise standard deviation in visual magnitude.
     */
    photoSigma?: number;

    /**
     * Sensor range rate bias acceleration, in kilometers per second squared, during
     * sensor operation.
     */
    rangeAccelBias?: number;

    /**
     * Standard deviation range rate bias acceleration, in kilometers per second
     * squared.
     */
    rangeAccelSigma?: number;

    /**
     * Sensor range bias, in kilometers, for the duration span.
     */
    rangeBias?: number;

    /**
     * Sensor range rate bias, in kilometers per second for the duration span.
     */
    rangeRateBias?: number;

    /**
     * The root mean square of the calibration sensor range rate, in kilometers per
     * second, for the duration span.
     */
    rangeRateRms?: number;

    /**
     * Standard deviation range rate, in kilometers per second, for the duration span.
     */
    rangeRateSigma?: number;

    /**
     * The root mean square of the calibration sensor range, in kilometers, for the
     * duration span.
     */
    rangeRms?: number;

    /**
     * Calibration standard deviation range, in kilometers, for the duration span.
     */
    rangeSigma?: number;

    /**
     * The radar cross section (RCS) observation noise bias in square meters.
     */
    rcsBias?: number;

    /**
     * The radar cross section (RCS) observation noise standard deviation in square
     * meters.
     */
    rcsSigma?: number;

    /**
     * Array of the catalog IDs of the reference targets used in the calibration.
     */
    refTargets?: Array<string>;

    /**
     * The reference type used in the calibration.
     */
    refType?: string;

    /**
     * The sensor type (MECHANICAL, OPTICAL, PHASED ARRAY, RF).
     */
    senType?: string;

    /**
     * The source data library from which this record was received. This could be a
     * remote or tactical UDL or another data library. If null, the record should be
     * assumed to have originated from the primary Enterprise UDL.
     */
    sourceDL?: string;

    /**
     * Sensor time bias, in seconds, for the duration span.
     */
    timeBias?: number;

    /**
     * Standard deviation time, in seconds, for the duration span.
     */
    timeBiasSigma?: number;
  }
}

export interface HistoryCountParams {
  /**
   * Calibration data span start time in ISO 8601 UTC format with millisecond
   * precision. (YYYY-MM-DDTHH:MM:SS.sssZ)
   */
  startTime: string;

  firstResult?: number;

  maxResult?: number;
}

export interface HistoryQueryParams {
  /**
   * Calibration data span start time in ISO 8601 UTC format with millisecond
   * precision. (YYYY-MM-DDTHH:MM:SS.sssZ)
   */
  startTime: string;

  /**
   * optional, fields for retrieval. When omitted, ALL fields are assumed. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
   * query fields that can be selected.
   */
  columns?: string;

  firstResult?: number;

  maxResult?: number;
}

export interface HistoryWriteAodrParams {
  /**
   * Calibration data span start time in ISO 8601 UTC format with millisecond
   * precision. (YYYY-MM-DDTHH:MM:SS.sssZ)
   */
  startTime: string;

  /**
   * optional, fields for retrieval. When omitted, ALL fields are assumed. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
   * query fields that can be selected.
   */
  columns?: string;

  firstResult?: number;

  maxResult?: number;

  /**
   * optional, notification method for the created file link. When omitted, EMAIL is
   * assumed. Current valid values are: EMAIL, SMS.
   */
  notification?: string;

  /**
   * optional, field delimiter when the created file is not JSON. Must be a single
   * character chosen from this set: (',', ';', ':', '|'). When omitted, "," is used.
   * It is strongly encouraged that your field delimiter be a character unlikely to
   * occur within the data.
   */
  outputDelimiter?: string;

  /**
   * optional, output format for the file. When omitted, JSON is assumed. Current
   * valid values are: JSON and CSV.
   */
  outputFormat?: string;
}

export declare namespace History {
  export {
    type HistoryCountResponse as HistoryCountResponse,
    type HistoryQueryResponse as HistoryQueryResponse,
    type HistoryCountParams as HistoryCountParams,
    type HistoryQueryParams as HistoryQueryParams,
    type HistoryWriteAodrParams as HistoryWriteAodrParams,
  };
}
