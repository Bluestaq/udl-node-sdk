// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../core/resource';
import { APIPromise } from '../../core/api-promise';
import { buildHeaders } from '../../internal/headers';
import { RequestOptions } from '../../internal/request-options';

export class History extends APIResource {
  /**
   * Service operation to return the count of records satisfying the specified query
   * parameters. This operation is useful to determine how many records pass a
   * particular query criteria without retrieving large amounts of data. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
   * valid/required query parameter information.
   *
   * @example
   * ```ts
   * const response =
   *   await client.globalAtmosphericModel.history.count({
   *     ts: '2019-12-27T18:11:19.117Z',
   *   });
   * ```
   */
  count(query: HistoryCountParams, options?: RequestOptions): APIPromise<string> {
    return this._client.get('/udl/globalatmosphericmodel/history/count', {
      query,
      ...options,
      headers: buildHeaders([{ Accept: 'text/plain' }, options?.headers]),
    });
  }

  /**
   * Service operation to dynamically query historical data by a variety of query
   * parameters not specified in this API documentation. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   *
   * @example
   * ```ts
   * const response =
   *   await client.globalAtmosphericModel.history.query({
   *     ts: '2019-12-27T18:11:19.117Z',
   *   });
   * ```
   */
  query(query: HistoryQueryParams, options?: RequestOptions): APIPromise<HistoryQueryResponse> {
    return this._client.get('/udl/globalatmosphericmodel/history', { query, ...options });
  }

  /**
   * Service operation to dynamically query historical data by a variety of query
   * parameters not specified in this API documentation, then write that data to the
   * Secure Content Store. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   *
   * @example
   * ```ts
   * await client.globalAtmosphericModel.history.writeAodr({
   *   ts: '2019-12-27T18:11:19.117Z',
   * });
   * ```
   */
  writeAodr(query: HistoryWriteAodrParams, options?: RequestOptions): APIPromise<void> {
    return this._client.get('/udl/globalatmosphericmodel/history/aodr', {
      query,
      ...options,
      headers: buildHeaders([{ Accept: '*/*' }, options?.headers]),
    });
  }
}

export type HistoryCountResponse = string;

export type HistoryQueryResponse = Array<HistoryQueryResponse.HistoryQueryResponseItem>;

export namespace HistoryQueryResponse {
  /**
   * The GlobalAtmosphericModel service provides atmospheric model output data for
   * use in space situational awareness such as the Global Total Electron Content
   * (2D) data, Global Total Electron Density (3D) data, etc.
   */
  export interface HistoryQueryResponseItem {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Target time of the model in ISO 8601 UTC format with millisecond precision.
     */
    ts: string;

    /**
     * Type of data associated with this record (e.g. Global Total Electron Density,
     * Global Total Electron Content).
     */
    type: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    /**
     * Model execution cadence, in minutes.
     */
    cadence?: number;

    /**
     * MD5 value of the data file. If not provided, the ingest/create operation will
     * automatically generate the value.
     */
    checksumValue?: string;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Ending altitude of model outputs, in kilometers.
     */
    endAlt?: number;

    /**
     * WGS-84 ending latitude of model output, in degrees. -90 to 90 degrees (negative
     * values south of equator).
     */
    endLat?: number;

    /**
     * WGS-84 ending longitude of model output, in degrees. -180 to 180 degrees
     * (negative values west of Prime Meridian).
     */
    endLon?: number;

    /**
     * The file name of the uploaded file.
     */
    filename?: string;

    /**
     * The uploaded file size, in bytes. The maximum file size for this service is
     * 104857600 bytes (100MB). Files exceeding the maximum size will be rejected.
     */
    filesize?: number;

    /**
     * Number of altitude points.
     */
    numAlt?: number;

    /**
     * Number of latitude points.
     */
    numLat?: number;

    /**
     * Number of longitude points.
     */
    numLon?: number;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * The time that this record was created, in ISO 8601 UTC format with millisecond
     * precision.
     */
    reportTime?: string;

    /**
     * The source data library from which this record was received. This could be a
     * remote or tactical UDL or another data library. If null, the record should be
     * assumed to have originated from the primary Enterprise UDL.
     */
    sourceDL?: string;

    /**
     * Starting altitude of model outputs, in kilometers.
     */
    startAlt?: number;

    /**
     * WGS-84 starting latitude of model output, in degrees. -90 to 90 degrees
     * (negative values south of equator).
     */
    startLat?: number;

    /**
     * WGS-84 starting longitude of model output, in degrees. -180 to 180 degrees
     * (negative values west of Prime Meridian).
     */
    startLon?: number;

    /**
     * State value indicating whether the values in this record are PREDICTED or
     * OBSERVED.
     */
    state?: string;

    /**
     * Separation in latitude between subsequent model outputs, in degrees.
     */
    stepLat?: number;

    /**
     * Separation in longitude between subsequent model outputs, in degrees.
     */
    stepLon?: number;
  }
}

export interface HistoryCountParams {
  /**
   * Target time of the model in ISO 8601 UTC format with millisecond precision.
   * (YYYY-MM-DDTHH:MM:SS.sssZ)
   */
  ts: string;

  firstResult?: number;

  maxResults?: number;
}

export interface HistoryQueryParams {
  /**
   * Target time of the model in ISO 8601 UTC format with millisecond precision.
   * (YYYY-MM-DDTHH:MM:SS.sssZ)
   */
  ts: string;

  /**
   * optional, fields for retrieval. When omitted, ALL fields are assumed. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
   * query fields that can be selected.
   */
  columns?: string;

  firstResult?: number;

  maxResults?: number;
}

export interface HistoryWriteAodrParams {
  /**
   * Target time of the model in ISO 8601 UTC format with millisecond precision.
   * (YYYY-MM-DDTHH:MM:SS.sssZ)
   */
  ts: string;

  /**
   * optional, fields for retrieval. When omitted, ALL fields are assumed. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
   * query fields that can be selected.
   */
  columns?: string;

  firstResult?: number;

  maxResults?: number;

  /**
   * optional, notification method for the created file link. When omitted, EMAIL is
   * assumed. Current valid values are: EMAIL, SMS.
   */
  notification?: string;

  /**
   * optional, field delimiter when the created file is not JSON. Must be a single
   * character chosen from this set: (',', ';', ':', '|'). When omitted, "," is used.
   * It is strongly encouraged that your field delimiter be a character unlikely to
   * occur within the data.
   */
  outputDelimiter?: string;

  /**
   * optional, output format for the file. When omitted, JSON is assumed. Current
   * valid values are: JSON and CSV.
   */
  outputFormat?: string;
}

export declare namespace History {
  export {
    type HistoryCountResponse as HistoryCountResponse,
    type HistoryQueryResponse as HistoryQueryResponse,
    type HistoryCountParams as HistoryCountParams,
    type HistoryQueryParams as HistoryQueryParams,
    type HistoryWriteAodrParams as HistoryWriteAodrParams,
  };
}
