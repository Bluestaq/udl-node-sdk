// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../resource';
import * as Core from '../core';
import * as AirfieldSlotsAPI from './airfield-slots';

export class Airfieldslots extends APIResource {
  /**
   * Service operation to get a single airfieldslot record by its unique ID passed as
   * a path parameter.
   */
  retrieve(id: string, options?: Core.RequestOptions): Core.APIPromise<AirfieldSlotsAPI.AirfieldslotFull> {
    return this._client.get(`/udl/airfieldslot/${id}`, options);
  }

  /**
   * Service operation to update a single airfieldslot record. A specific role is
   * required to perform this service operation. Please contact the UDL team for
   * assistance.
   */
  update(id1: string, body: AirfieldslotUpdateParams, options?: Core.RequestOptions): Core.APIPromise<void> {
    return this._client.put(`/udl/airfieldslot/${id1}`, {
      body,
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }

  /**
   * Service operation to delete an airfieldslot record specified by the passed ID
   * path parameter. A specific role is required to perform this service operation.
   * Please contact the UDL team for assistance.
   */
  delete(id: string, options?: Core.RequestOptions): Core.APIPromise<void> {
    return this._client.delete(`/udl/airfieldslot/${id}`, {
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }

  /**
   * Service operation to return the count of records satisfying the specified query
   * parameters. This operation is useful to determine how many records pass a
   * particular query criteria without retrieving large amounts of data. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
   * valid/required query parameter information.
   */
  count(options?: Core.RequestOptions): Core.APIPromise<string> {
    return this._client.get('/udl/airfieldslot/count', {
      ...options,
      headers: { Accept: 'text/plain', ...options?.headers },
    });
  }

  /**
   * Service operation to provide detailed information on available dynamic query
   * parameters for a particular data type.
   */
  queryhelp(options?: Core.RequestOptions): Core.APIPromise<void> {
    return this._client.get('/udl/airfieldslot/queryhelp', {
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }

  /**
   * Service operation to dynamically query data and only return specified
   * columns/fields. Requested columns are specified by the 'columns' query parameter
   * and should be a comma separated list of valid fields for the specified data
   * type. classificationMarking is always returned. See the queryhelp operation
   * (/udl/<datatype>/queryhelp) for more details on valid/required query parameter
   * information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5
   * hours would return the satNo and period of elsets with an epoch greater than 5
   * hours ago.
   */
  tuple(
    query: AirfieldslotTupleParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<AirfieldslotTupleResponse> {
    return this._client.get('/udl/airfieldslot/tuple', { query, ...options });
  }
}

export type AirfieldslotCountResponse = string;

export type AirfieldslotTupleResponse = Array<AirfieldSlotsAPI.AirfieldslotFull>;

export interface AirfieldslotUpdateParams {
  /**
   * The name of the airfield where this slot is located.
   */
  airfieldName: string;

  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Name of this slot.
   */
  name: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Largest category of aircraft supported in this slot (WIDE, NARROW, HELO, ALL,
   * OTHER).
   */
  acSlotCat?: 'WIDE' | 'NARROW' | 'HELO' | 'ALL' | 'OTHER';

  /**
   * Alternate airfield identifier provided by the source.
   */
  altAirfieldId?: string;

  /**
   * Number of aircraft that can fit in this slot at the same time.
   */
  capacity?: number;

  /**
   * Latest zulu time this slot is available based on daily standard hours. Not
   * applicable to slots with type PARKING. Abnormal hours, such as holidays, should
   * be marked via the AirfieldSlotConsumption schema.
   */
  endTime?: string;

  /**
   * The International Civil Aviation Organization (ICAO) code of the airfield.
   */
  icao?: string;

  /**
   * Unique identifier of the Airfield for which this slot information applies.
   */
  idAirfield?: string;

  /**
   * Minimum time that must elapse between different aircraft leaving and entering
   * this slot, in minutes.
   */
  minSeparation?: number;

  /**
   * Optional notes/comments for this airfield slot.
   */
  notes?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * Zulu time this slot is first available based on daily standard hours. Not
   * applicable to slots with type PARKING. Abnormal hours, such as holidays, should
   * be marked via the AirfieldSlotConsumption schema.
   */
  startTime?: string;

  /**
   * Designates how this slot can be used (WORKING, PARKING, TAKEOFF, LANDING,
   * OTHER).
   */
  type?: 'WORKING' | 'PARKING' | 'TAKEOFF' | 'LANDING' | 'OTHER';
}

export interface AirfieldslotTupleParams {
  /**
   * Comma-separated list of valid field names for this data type to be returned in
   * the response. Only the fields specified will be returned as well as the
   * classification marking of the data, if applicable. See the ‘queryhelp’ operation
   * for a complete list of possible fields.
   */
  columns: string;
}

export declare namespace Airfieldslots {
  export {
    type AirfieldslotCountResponse as AirfieldslotCountResponse,
    type AirfieldslotTupleResponse as AirfieldslotTupleResponse,
    type AirfieldslotUpdateParams as AirfieldslotUpdateParams,
    type AirfieldslotTupleParams as AirfieldslotTupleParams,
  };
}
