// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../resource';
import * as Core from '../core';
import * as AirfieldSlotsAPI from './airfield-slots';

export class Airfieldslots extends APIResource {
  /**
   * Service operation to get a single airfieldslot record by its unique ID passed as
   * a path parameter.
   */
  retrieve(
    params: AirfieldslotRetrieveParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<AirfieldSlotsAPI.AirfieldslotFull> {
    const { path_id, body_id } = params;
    return this._client.get(`/udl/airfieldslot/${path_id}`, options);
  }

  /**
   * Service operation to update a single airfieldslot record. A specific role is
   * required to perform this service operation. Please contact the UDL team for
   * assistance.
   */
  update(params: AirfieldslotUpdateParams, options?: Core.RequestOptions): Core.APIPromise<void> {
    const { path_id, body_id, body_id, ...body } = params;
    return this._client.put(`/udl/airfieldslot/${path_id}`, {
      body: { id: body_id, id: body_id, ...body },
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }

  /**
   * Service operation to delete an airfieldslot record specified by the passed ID
   * path parameter. A specific role is required to perform this service operation.
   * Please contact the UDL team for assistance.
   */
  delete(params: AirfieldslotDeleteParams, options?: Core.RequestOptions): Core.APIPromise<void> {
    const { path_id, body_id } = params;
    return this._client.delete(`/udl/airfieldslot/${path_id}`, {
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }

  /**
   * Service operation to return the count of records satisfying the specified query
   * parameters. This operation is useful to determine how many records pass a
   * particular query criteria without retrieving large amounts of data. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
   * valid/required query parameter information.
   */
  count(options?: Core.RequestOptions): Core.APIPromise<string> {
    return this._client.get('/udl/airfieldslot/count', {
      ...options,
      headers: { Accept: 'text/plain', ...options?.headers },
    });
  }

  /**
   * Service operation to provide detailed information on available dynamic query
   * parameters for a particular data type.
   */
  queryhelp(options?: Core.RequestOptions): Core.APIPromise<void> {
    return this._client.get('/udl/airfieldslot/queryhelp', {
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }

  /**
   * Service operation to dynamically query data and only return specified
   * columns/fields. Requested columns are specified by the 'columns' query parameter
   * and should be a comma separated list of valid fields for the specified data
   * type. classificationMarking is always returned. See the queryhelp operation
   * (/udl/<datatype>/queryhelp) for more details on valid/required query parameter
   * information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5
   * hours would return the satNo and period of elsets with an epoch greater than 5
   * hours ago.
   */
  tuple(
    params: AirfieldslotTupleParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<AirfieldslotTupleResponse> {
    const { columns } = params;
    return this._client.get('/udl/airfieldslot/tuple', options);
  }
}

export type AirfieldslotCountResponse = string;

export type AirfieldslotTupleResponse = Array<AirfieldSlotsAPI.AirfieldslotFull>;

export interface AirfieldslotRetrieveParams {
  /**
   * Path param:
   */
  path_id: string;

  /**
   * Body param: The ID of the AirfieldSlot to find.
   */
  body_id: string;
}

export interface AirfieldslotUpdateParams {
  /**
   * Path param:
   */
  path_id: string;

  /**
   * Body param: The ID of the AirfieldSlot to update.
   */
  body_id: string;

  /**
   * Body param: The name of the airfield where this slot is located.
   */
  airfieldName: string;

  /**
   * Body param: Classification marking of the data in IC/CAPCO Portion-marked
   * format.
   */
  classificationMarking: string;

  /**
   * Body param: Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST
   * data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: string;

  /**
   * Body param: Name of this slot.
   */
  name: string;

  /**
   * Body param: Source of the data.
   */
  source: string;

  /**
   * Body param: Unique identifier of the record, auto-generated by the system.
   */
  body_id?: string;

  /**
   * Body param: Largest category of aircraft supported in this slot (WIDE, NARROW,
   * HELO, ALL, OTHER).
   */
  acSlotCat?: string;

  /**
   * Body param: Alternate airfield identifier provided by the source.
   */
  altAirfieldId?: string;

  /**
   * Body param: Number of aircraft that can fit in this slot at the same time.
   */
  capacity?: number;

  /**
   * Body param: Time the row was created in the database, auto-populated by the
   * system.
   */
  createdAt?: string;

  /**
   * Body param: Application user who created the row in the database, auto-populated
   * by the system.
   */
  createdBy?: string;

  /**
   * Body param: Latest zulu time this slot is available based on daily standard
   * hours. Not applicable to slots with type PARKING. Abnormal hours, such as
   * holidays, should be marked via the AirfieldSlotConsumption schema.
   */
  endTime?: string;

  /**
   * Body param: The International Civil Aviation Organization (ICAO) code of the
   * airfield.
   */
  icao?: string;

  /**
   * Body param: Unique identifier of the Airfield for which this slot information
   * applies.
   */
  idAirfield?: string;

  /**
   * Body param: Minimum time that must elapse between different aircraft leaving and
   * entering this slot, in minutes.
   */
  minSeparation?: number;

  /**
   * Body param: Optional notes/comments for this airfield slot.
   */
  notes?: string;

  /**
   * Body param: Originating system or organization which produced the data, if
   * different from the source. The origin may be different than the source if the
   * source was a mediating system which forwarded the data on behalf of the origin
   * system. If null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * Body param: The originating source network on which this record was created,
   * auto-populated by the system.
   */
  origNetwork?: string;

  /**
   * Body param: The source data library from which this record was received. This
   * could be a remote or tactical UDL or another data library. If null, the record
   * should be assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * Body param: Zulu time this slot is first available based on daily standard
   * hours. Not applicable to slots with type PARKING. Abnormal hours, such as
   * holidays, should be marked via the AirfieldSlotConsumption schema.
   */
  startTime?: string;

  /**
   * Body param: Designates how this slot can be used (WORKING, PARKING, TAKEOFF,
   * LANDING, OTHER).
   */
  type?: string;
}

export interface AirfieldslotDeleteParams {
  /**
   * Path param:
   */
  path_id: string;

  /**
   * Body param: The ID of the AirfieldSlot entry to delete.
   */
  body_id: string;
}

export interface AirfieldslotTupleParams {
  /**
   * Comma-separated list of valid field names for this data type to be returned in
   * the response. Only the fields specified will be returned as well as the
   * classification marking of the data, if applicable. See the �queryhelp� operation
   * for a complete list of possible fields.
   */
  columns: string;
}

export declare namespace Airfieldslots {
  export {
    type AirfieldslotCountResponse as AirfieldslotCountResponse,
    type AirfieldslotTupleResponse as AirfieldslotTupleResponse,
    type AirfieldslotRetrieveParams as AirfieldslotRetrieveParams,
    type AirfieldslotUpdateParams as AirfieldslotUpdateParams,
    type AirfieldslotDeleteParams as AirfieldslotDeleteParams,
    type AirfieldslotTupleParams as AirfieldslotTupleParams,
  };
}
