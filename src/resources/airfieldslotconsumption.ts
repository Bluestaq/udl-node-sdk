// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../resource';
import * as Core from '../core';
import * as AirfieldslotconsumptionsAPI from './airfieldslotconsumptions';

export class Airfieldslotconsumption extends APIResource {
  /**
   * Service operation to get a single airfieldslotconsumption record by its unique
   * ID passed as a path parameter.
   */
  retrieve(
    params: AirfieldslotconsumptionRetrieveParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<AirfieldslotconsumptionsAPI.AirfieldslotconsumptionFull> {
    const { path_id, body_id } = params;
    return this._client.get(`/udl/airfieldslotconsumption/${path_id}`, options);
  }

  /**
   * Service operation to update a single AirfieldSlotConsumption. A specific role is
   * required to perform this service operation. Please contact the UDL team for
   * assistance.
   */
  update(params: AirfieldslotconsumptionUpdateParams, options?: Core.RequestOptions): Core.APIPromise<void> {
    const { path_id, body_id, body_id, ...body } = params;
    return this._client.put(`/udl/airfieldslotconsumption/${path_id}`, {
      body: { id: body_id, id: body_id, ...body },
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }

  /**
   * Service operation to delete an airfieldslotconsumption record specified by the
   * passed ID path parameter. A specific role is required to perform this service
   * operation. Please contact the UDL team for assistance.
   */
  delete(params: AirfieldslotconsumptionDeleteParams, options?: Core.RequestOptions): Core.APIPromise<void> {
    const { path_id, body_id } = params;
    return this._client.delete(`/udl/airfieldslotconsumption/${path_id}`, {
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }

  /**
   * Service operation to dynamically query data and only return specified
   * columns/fields. Requested columns are specified by the 'columns' query parameter
   * and should be a comma separated list of valid fields for the specified data
   * type. classificationMarking is always returned. See the queryhelp operation
   * (/udl/<datatype>/queryhelp) for more details on valid/required query parameter
   * information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5
   * hours would return the satNo and period of elsets with an epoch greater than 5
   * hours ago.
   */
  tuple(
    params: AirfieldslotconsumptionTupleParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<AirfieldslotconsumptionTupleResponse> {
    const { columns } = params;
    return this._client.get('/udl/airfieldslotconsumption/tuple', options);
  }
}

export type AirfieldslotconsumptionTupleResponse =
  Array<AirfieldslotconsumptionsAPI.AirfieldslotconsumptionFull>;

export interface AirfieldslotconsumptionRetrieveParams {
  /**
   * Path param:
   */
  path_id: string;

  /**
   * Body param: The ID of the AirfieldSlotConsumption to find.
   */
  body_id: string;
}

export interface AirfieldslotconsumptionUpdateParams {
  /**
   * Path param:
   */
  path_id: string;

  /**
   * Body param: The ID of the AirfieldSlotConsumption entry to update.
   */
  body_id: string;

  /**
   * Body param: Classification marking of the data in IC/CAPCO Portion-marked
   * format.
   */
  classificationMarking: string;

  /**
   * Body param: Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST
   * data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: string;

  /**
   * Body param: The end of the slot window, in ISO 8601 UTC format.
   */
  endTime: string;

  /**
   * Body param: Unique identifier of the airfield slot for which this slot
   * consumption record is referencing.
   */
  idAirfieldSlot: string;

  /**
   * Body param: Number of aircraft using this slot for this time.
   */
  numAircraft: number;

  /**
   * Body param: Source of the data.
   */
  source: string;

  /**
   * Body param: The start of the slot window, in ISO 8601 UTC format.
   */
  startTime: string;

  /**
   * Body param: Unique identifier of the record, auto-generated by the system.
   */
  body_id?: string;

  /**
   * Body param: Alternate identifier of the sortie arriving at the slot start time
   * provided by the source.
   */
  altArrSortieId?: string;

  /**
   * Body param: Alternate identifier of the sortie departing at the slot end time
   * provided by the source.
   */
  altDepSortieId?: string;

  /**
   * Body param: Comments from the approver.
   */
  appComment?: string;

  /**
   * Body param: Initials of the person approving the use of this slot. Use SYSTEM if
   * auto-approved without human involvement.
   */
  appInitials?: string;

  /**
   * Body param: Short name of the organization approving the use of this slot.
   */
  appOrg?: string;

  /**
   * Body param: Array of call signs of the aircraft using this slot.
   */
  callSigns?: Array<string>;

  /**
   * Body param: Identifying name of the aircraft using this slot. Names are often
   * Prior Permission Required (PPR) numbers or other similar human-readable
   * identifiers.
   */
  consumer?: string;

  /**
   * Body param: Time the row was created in the database, auto-populated by the
   * system.
   */
  createdAt?: string;

  /**
   * Body param: Application user who created the row in the database, auto-populated
   * by the system.
   */
  createdBy?: string;

  /**
   * Body param: Unique identifier of the sortie arriving at the slot start time.
   */
  idArrSortie?: string;

  /**
   * Body param: Unique identifier of the sortie departing at the slot end time.
   */
  idDepSortie?: string;

  /**
   * Body param: Mission identifier using this slot according to Mobility Air Forces
   * (MAF) Encode/Decode procedures.
   */
  missionId?: string;

  /**
   * Body param: The aircraft Model Design Series designation of the aircraft
   * occupying this slot.
   */
  occAircraftMDS?: string;

  /**
   * Body param: Time the aircraft began occupying this slot, in ISO 8601 UTC format
   * with millisecond precision.
   */
  occStartTime?: string;

  /**
   * Body param: The tail number of the aircraft occupying this slot.
   */
  occTailNumber?: string;

  /**
   * Body param: Flag indicating if the slot is occupied.
   */
  occupied?: boolean;

  /**
   * Body param: Originating system or organization which produced the data, if
   * different from the source. The origin may be different than the source if the
   * source was a mediating system which forwarded the data on behalf of the origin
   * system. If null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * Body param: The originating source network on which this record was created,
   * auto-populated by the system.
   */
  origNetwork?: string;

  /**
   * Body param: Comments from the requester.
   */
  reqComment?: string;

  /**
   * Body param: Initials of the person requesting the use of this slot. Use SYSTEM
   * if this request is auto-generated by an auto-planning system.
   */
  reqInitials?: string;

  /**
   * Body param: Short name of the organization requesting use of this slot.
   */
  reqOrg?: string;

  /**
   * Body param: The aircraft Model Design Series designation of the aircraft this
   * slot is reserved for.
   */
  resAircraftMDS?: string;

  /**
   * Body param: Mission identifier reserving this slot according to Mobility Air
   * Forces (MAF) Encode/Decode procedures.
   */
  resMissionId?: string;

  /**
   * Body param: The reason the slot reservation was made.
   */
  resReason?: string;

  /**
   * Body param: The tail number of the aircraft this slot is reserved for.
   */
  resTailNumber?: string;

  /**
   * Body param: Indicates the type of reservation (e.g. M for Mission, A for
   * Aircraft, O for Other).
   */
  resType?: string;

  /**
   * Body param: The source data library from which this record was received. This
   * could be a remote or tactical UDL or another data library. If null, the record
   * should be assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * Body param: Current status of this slot (REQUESTED / APPROVED / DENIED / BLOCKED
   * / OTHER).
   */
  status?: string;

  /**
   * Body param: The desired time for aircraft action such as landing, take off,
   * parking, etc., in ISO 8601 UTC format.
   */
  targetTime?: string;
}

export interface AirfieldslotconsumptionDeleteParams {
  /**
   * Path param:
   */
  path_id: string;

  /**
   * Body param: The ID of the AirfieldSlotConsumption entry to delete.
   */
  body_id: string;
}

export interface AirfieldslotconsumptionTupleParams {
  /**
   * Comma-separated list of valid field names for this data type to be returned in
   * the response. Only the fields specified will be returned as well as the
   * classification marking of the data, if applicable. See the �queryhelp� operation
   * for a complete list of possible fields.
   */
  columns: string;
}

export declare namespace Airfieldslotconsumption {
  export {
    type AirfieldslotconsumptionTupleResponse as AirfieldslotconsumptionTupleResponse,
    type AirfieldslotconsumptionRetrieveParams as AirfieldslotconsumptionRetrieveParams,
    type AirfieldslotconsumptionUpdateParams as AirfieldslotconsumptionUpdateParams,
    type AirfieldslotconsumptionDeleteParams as AirfieldslotconsumptionDeleteParams,
    type AirfieldslotconsumptionTupleParams as AirfieldslotconsumptionTupleParams,
  };
}
