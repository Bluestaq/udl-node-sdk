// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../../resource';
import * as HistoryAPI from './history';
import { EffectResponseFull, History } from './history';

export class EffectResponses extends APIResource {
  history: HistoryAPI.History = new HistoryAPI.History(this._client);
}

/**
 * A response for various effects on a target.
 */
export interface EffectResponse {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * The type of response in this record (e.g. COA, SCORECARD, etc.).
   */
  type: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * List of actions associated with this effect response.
   */
  actionsList?: Array<EffectResponse.ActionsList>;

  /**
   * The record ID, depending on the type identified in actorSrcType, of the
   * requested asset.
   */
  actorSrcId?: string;

  /**
   * The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT,
   * TRACK).
   */
  actorSrcType?: string;

  /**
   * List of COA metrics associated with this effect response.
   */
  coaMetrics?: Array<EffectResponse.CoaMetric>;

  /**
   * The collateral damage estimate (CDE) of the munition being fired.
   */
  collateralDamageEst?: number;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * The deadline time to accept this COA before it's no longer valid, in ISO8601 UTC
   * format.
   */
  decisionDeadline?: string;

  /**
   * List of external actions to be executed as part of this task.
   */
  externalActions?: Array<string>;

  /**
   * The external system identifier of the associated effect request. A human
   * readable unique id.
   */
  externalRequestId?: string;

  /**
   * Unique identifier of the EffectRequest associated with this response.
   */
  idEffectRequest?: string;

  /**
   * Unique identifier of the munition.
   */
  munitionId?: string;

  /**
   * The type of munition being fired.
   */
  munitionType?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * The probability of kill (0-1) of the target being destroyed.
   */
  probabilityOfKill?: number;

  /**
   * The record ID, depending on the type identified in redTargetSrcType, of the red
   * force target. If the redTargetSrcType is POI or TRACK, then this identifier
   * corresponds to either poi.poiid or track.trkId from their respective schemas.
   */
  redTargetSrcId?: string;

  /**
   * The source type of the targetId identifier (POI, SITE, TRACK).
   */
  redTargetSrcType?: string;

  /**
   * The time to overhead for the red force to be over their target, in ISO8601 UTC
   * format.
   */
  redTimeToOverhead?: string;

  /**
   * The number of shots required to destroy target.
   */
  shotsRequired?: number;
}

export namespace EffectResponse {
  /**
   * List of actions associated with this effect response.
   */
  export interface ActionsList {
    /**
     * The record ID, depending on the type identified in actorSrcType, of the
     * requested asset/actor.
     */
    actionActorSrcId?: string;

    /**
     * The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT,
     * TRACK).
     */
    actionActorSrcType?: string;

    /**
     * The desired end time of this task, in ISO8601 UTC format.
     */
    actionEndTime?: string;

    /**
     * Identifier of this action.
     */
    actionId?: string;

    /**
     * List of metrics associated with this action.
     */
    actionMetrics?: Array<ActionsList.ActionMetric>;

    /**
     * The desired start time of this task, in ISO8601 UTC format.
     */
    actionStartTime?: string;

    /**
     * The WGS-84 altitude of the asset/actor location at weapon launch, in meters.
     */
    actorInterceptAlt?: number;

    /**
     * The WGS-84 latitude of the asset/actor location at weapon launch, in degrees.
     * -90 to 90 degrees (negative values south of equator).
     */
    actorInterceptLat?: number;

    /**
     * The WGS-84 longitude of the asset/actor location at weapon launch, in degrees.
     * -180 to 180 degrees (negative values west of Prime Meridian).
     */
    actorInterceptLon?: number;

    /**
     * The type of munition or sensor used by this asset/actor.
     */
    effector?: string;

    /**
     * A summary string describing different aspects of the action.
     */
    summary?: string;

    /**
     * The POI or TRACK ID, depending on the type identified in targetSrcType, of the
     * requested target. This identifier corresponds to either poi.poiid or track.trkId
     * from their respective schemas.
     */
    targetSrcId?: string;

    /**
     * The source type of the targetId identifier (POI, TRACK).
     */
    targetSrcType?: string;

    /**
     * The end time of the asset TOT (time over target), in ISO8601 UTC format.
     */
    totEndTime?: string;

    /**
     * The start time of the asset TOT (time over target), in ISO8601 UTC format.
     */
    totStartTime?: string;

    /**
     * The WGS-84 altitude of the weapon destination location, in meters.
     */
    weaponInterceptAlt?: number;

    /**
     * The WGS-84 latitude of the weapon destination location, in degrees. -90 to 90
     * degrees (negative values south of equator).
     */
    weaponInterceptLat?: number;

    /**
     * The WGS-84 longitude of the weapon destination location, in degrees. -180 to 180
     * degrees (negative values west of Prime Meridian).
     */
    weaponInterceptLon?: number;
  }

  export namespace ActionsList {
    /**
     * List of COA metrics associated with this effect response.
     */
    export interface ActionMetric {
      /**
       * The metric score specific to its domain.
       */
      domainValue?: number;

      /**
       * The type of the metric (e.g. CollateralDamage, GoalAchievement, OpportunityCost,
       * Timeliness, Unavailable, etc.).
       */
      metricType?: string;

      /**
       * The metric that was used to score this task.
       */
      provenance?: string;

      /**
       * The metric score adjusted to be relative and comparable to other domains.
       */
      relativeValue?: number;
    }
  }

  /**
   * List of COA metrics associated with this effect response.
   */
  export interface CoaMetric {
    /**
     * The metric score specific to its domain.
     */
    domainValue?: number;

    /**
     * The type of the metric (e.g. CollateralDamage, GoalAchievement, OpportunityCost,
     * Timeliness, Unavailable, etc.).
     */
    metricType?: string;

    /**
     * The metric that was used to score this task.
     */
    provenance?: string;

    /**
     * The metric score adjusted to be relative and comparable to other domains.
     */
    relativeValue?: number;
  }
}

/**
 * A response for various effects on a target.
 */
export interface EffectResponseAbridged {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * The type of response in this record (e.g. COA, SCORECARD, etc.).
   */
  type: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * List of actions associated with this effect response.
   */
  actionsList?: Array<EffectResponseAbridged.ActionsList>;

  /**
   * The record ID, depending on the type identified in actorSrcType, of the
   * requested asset.
   */
  actorSrcId?: string;

  /**
   * The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT,
   * TRACK).
   */
  actorSrcType?: string;

  /**
   * List of COA metrics associated with this effect response.
   */
  coaMetrics?: Array<EffectResponseAbridged.CoaMetric>;

  /**
   * The collateral damage estimate (CDE) of the munition being fired.
   */
  collateralDamageEst?: number;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * The deadline time to accept this COA before it's no longer valid, in ISO8601 UTC
   * format.
   */
  decisionDeadline?: string;

  /**
   * List of external actions to be executed as part of this task.
   */
  externalActions?: Array<string>;

  /**
   * The external system identifier of the associated effect request. A human
   * readable unique id.
   */
  externalRequestId?: string;

  /**
   * Unique identifier of the EffectRequest associated with this response.
   */
  idEffectRequest?: string;

  /**
   * Unique identifier of the munition.
   */
  munitionId?: string;

  /**
   * The type of munition being fired.
   */
  munitionType?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * The probability of kill (0-1) of the target being destroyed.
   */
  probabilityOfKill?: number;

  /**
   * The record ID, depending on the type identified in redTargetSrcType, of the red
   * force target. If the redTargetSrcType is POI or TRACK, then this identifier
   * corresponds to either poi.poiid or track.trkId from their respective schemas.
   */
  redTargetSrcId?: string;

  /**
   * The source type of the targetId identifier (POI, SITE, TRACK).
   */
  redTargetSrcType?: string;

  /**
   * The time to overhead for the red force to be over their target, in ISO8601 UTC
   * format.
   */
  redTimeToOverhead?: string;

  /**
   * The number of shots required to destroy target.
   */
  shotsRequired?: number;
}

export namespace EffectResponseAbridged {
  /**
   * List of actions associated with this effect response.
   */
  export interface ActionsList {
    /**
     * The record ID, depending on the type identified in actorSrcType, of the
     * requested asset/actor.
     */
    actionActorSrcId?: string;

    /**
     * The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT,
     * TRACK).
     */
    actionActorSrcType?: string;

    /**
     * The desired end time of this task, in ISO8601 UTC format.
     */
    actionEndTime?: string;

    /**
     * Identifier of this action.
     */
    actionId?: string;

    /**
     * List of metrics associated with this action.
     */
    actionMetrics?: Array<ActionsList.ActionMetric>;

    /**
     * The desired start time of this task, in ISO8601 UTC format.
     */
    actionStartTime?: string;

    /**
     * The WGS-84 altitude of the asset/actor location at weapon launch, in meters.
     */
    actorInterceptAlt?: number;

    /**
     * The WGS-84 latitude of the asset/actor location at weapon launch, in degrees.
     * -90 to 90 degrees (negative values south of equator).
     */
    actorInterceptLat?: number;

    /**
     * The WGS-84 longitude of the asset/actor location at weapon launch, in degrees.
     * -180 to 180 degrees (negative values west of Prime Meridian).
     */
    actorInterceptLon?: number;

    /**
     * The type of munition or sensor used by this asset/actor.
     */
    effector?: string;

    /**
     * A summary string describing different aspects of the action.
     */
    summary?: string;

    /**
     * The POI or TRACK ID, depending on the type identified in targetSrcType, of the
     * requested target. This identifier corresponds to either poi.poiid or track.trkId
     * from their respective schemas.
     */
    targetSrcId?: string;

    /**
     * The source type of the targetId identifier (POI, TRACK).
     */
    targetSrcType?: string;

    /**
     * The end time of the asset TOT (time over target), in ISO8601 UTC format.
     */
    totEndTime?: string;

    /**
     * The start time of the asset TOT (time over target), in ISO8601 UTC format.
     */
    totStartTime?: string;

    /**
     * The WGS-84 altitude of the weapon destination location, in meters.
     */
    weaponInterceptAlt?: number;

    /**
     * The WGS-84 latitude of the weapon destination location, in degrees. -90 to 90
     * degrees (negative values south of equator).
     */
    weaponInterceptLat?: number;

    /**
     * The WGS-84 longitude of the weapon destination location, in degrees. -180 to 180
     * degrees (negative values west of Prime Meridian).
     */
    weaponInterceptLon?: number;
  }

  export namespace ActionsList {
    /**
     * List of COA metrics associated with this effect response.
     */
    export interface ActionMetric {
      /**
       * The metric score specific to its domain.
       */
      domainValue?: number;

      /**
       * The type of the metric (e.g. CollateralDamage, GoalAchievement, OpportunityCost,
       * Timeliness, Unavailable, etc.).
       */
      metricType?: string;

      /**
       * The metric that was used to score this task.
       */
      provenance?: string;

      /**
       * The metric score adjusted to be relative and comparable to other domains.
       */
      relativeValue?: number;
    }
  }

  /**
   * List of COA metrics associated with this effect response.
   */
  export interface CoaMetric {
    /**
     * The metric score specific to its domain.
     */
    domainValue?: number;

    /**
     * The type of the metric (e.g. CollateralDamage, GoalAchievement, OpportunityCost,
     * Timeliness, Unavailable, etc.).
     */
    metricType?: string;

    /**
     * The metric that was used to score this task.
     */
    provenance?: string;

    /**
     * The metric score adjusted to be relative and comparable to other domains.
     */
    relativeValue?: number;
  }
}

EffectResponses.History = History;

export declare namespace EffectResponses {
  export { type EffectResponse as EffectResponse, type EffectResponseAbridged as EffectResponseAbridged };

  export { History as History, type EffectResponseFull as EffectResponseFull };
}
