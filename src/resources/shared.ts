// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import * as AntennasAPI from './antennas';
import * as AttitudeDataAPI from './attitude-data';
import * as BatteriesAPI from './batteries';
import * as EnginesAPI from './engines';
import * as EntitiesAPI from './entities';
import * as SolararraydetailsAPI from './solararraydetails';
import * as AircraftSortieAPI from './air-operations/aircraft-sortie';
import * as ElsetsAPI from './elsets/elsets';
import * as StatevectorAPI from './statevector/statevector';
import { OffsetPage } from '../pagination';

/**
 * The information in an Air Transport Mission contains unique identification,
 * description of the mission objective, aircraft and crew assignments, mission
 * alias, embarkation/debarkation cargo locations, priority, and other mission
 * characteristics.
 */
export interface AirTransportMissionFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * The Aircraft Sortie Records linked to this mission. Do not set this field to
   * send data to the UDL. This field is set by the UDL when returning full Air
   * Transport Mission records.
   */
  aircraftSorties?: Array<AircraftSortieAPI.AircraftsortieFull>;

  /**
   * Mission alias.
   */
  alias?: string;

  /**
   * The unit the mission is allocated to.
   */
  allocatedUnit?: string;

  /**
   * Air Mobility Command (AMC) mission identifier according to Mobility Air Forces
   * (MAF) Encode/Decode procedures.
   */
  amcMissionId?: string;

  /**
   * The Aircraft and Personnel Automated Clearance System (APACS) system identifier
   * used to process and approve clearance requests.
   */
  apacsId?: string;

  /**
   * The call sign for this mission.
   */
  callSign?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Flag indicating this is a close watch mission.
   */
  cw?: boolean;

  /**
   * Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft
   * clearance requests.
   */
  dipWorksheetName?: string;

  /**
   * The International Civil Aviation Organization (ICAO) site code of first cargo
   * pick up.
   */
  firstPickUp?: string;

  /**
   * Global Decision Support System (GDSS) mission unique identifier.
   */
  gdssMissionId?: string;

  /**
   * Collection of Hazardous Material information associated with this Air Transport
   * Mission.
   */
  hazMat?: Array<AirTransportMissionFull.HazMat>;

  /**
   * Highest Joint Chiefs of Staff priority of this mission.
   */
  jcsPriority?: string;

  /**
   * The International Civil Aviation Organization (ICAO) site code of last cargo
   * drop off.
   */
  lastDropOff?: string;

  /**
   * Load type of this mission (e.g. CARGO, MIXED, PASSENGER).
   */
  loadCategoryType?: string;

  /**
   * Numbered Air Force (NAF) organization that owns the mission.
   */
  naf?: string;

  /**
   * Air Mobility Command (AMC) mission identifier of the next air transport mission.
   * Provides a method for AMC to link air transport missions together
   * chronologically for tasking and planning purposes.
   */
  nextAMCMissionId?: string;

  /**
   * Unique identifier of the next mission provided by the originating source.
   * Provides a method for the data provider to link air transport missions together
   * chronologically for tasking and planning purposes.
   */
  nextMissionId?: string;

  /**
   * A description of this mission's objective.
   */
  objective?: string;

  /**
   * The name of the operation that this mission supports.
   */
  operation?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The mission identifier provided by the originating source.
   */
  origMissionId?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Air Mobility Command (AMC) mission identifier of the previous air transport
   * mission. Provides a method for AMC to link air transport missions together
   * chronologically for tasking and planning purposes.
   */
  prevAMCMissionId?: string;

  /**
   * Unique identifier of the previous air transport mission provided by the
   * originating source. Provides a method for the data provider to link air
   * transport missions together chronologically for tasking and planning purposes.
   */
  prevMissionId?: string;

  /**
   * A description of this mission's purpose (e.g. why this mission needs to happen,
   * what is the mission supporting, etc.).
   */
  purpose?: string;

  /**
   * Information related to the planning, load, status, and deployment or dispatch of
   * one aircraft to carry out a mission.
   */
  remarks?: Array<AirTransportMissionFull.Remark>;

  /**
   * Information related to the planning, load, status, and deployment or dispatch of
   * one aircraft to carry out a mission.
   */
  requirements?: Array<AirTransportMissionFull.Requirement>;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * The number of minutes a mission is off schedule based on the source system's
   * business rules. Positive numbers are early, negative numbers are late.
   */
  sourceSysDeviation?: number;

  /**
   * Current state of the mission.
   */
  state?: string;

  /**
   * The type of mission (e.g. SAAM, CHNL, etc.).
   */
  type?: string;

  /**
   * Time the row was updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

export namespace AirTransportMissionFull {
  /**
   * Collection of Hazardous Material information associated with this Air Transport
   * Mission.
   */
  export interface HazMat {
    /**
     * Comma delimited list of Note IDs for Item Class Segregation groups, specific to
     * GDSS systems.
     */
    applicableNotes?: string;

    /**
     * Compatibility group code used to specify the controls for the transportation and
     * storage of hazardous materials according to the Hazardous Materials Regulations
     * issued by the U.S. Department of Transportation.
     */
    cgc?: string;

    /**
     * Comma delimited list of Note IDs for compatibility groups, specific to GDSS
     * systems.
     */
    cgn?: string;

    /**
     * Class and division of the hazardous material according to the Hazardous
     * Materials Regulations issued by the U.S. Department of Transportation.
     */
    classDiv?: number;

    /**
     * The hazMat identifier provided by the originating source.
     */
    extHazMatId?: string;

    /**
     * United Nations proper shipping name of the hazardous material according to the
     * Hazardous Materials Regulations issued by the U.S. Department of Transportation.
     */
    itemName?: string;

    /**
     * Net explosive weight of the hazardous material, in kilograms.
     */
    netExpWt?: number;

    /**
     * The International Civil Aviation Organization (ICAO) code of the site where the
     * hazardous material is unloaded.
     */
    offICAO?: string;

    /**
     * Itinerary number that identifies where the hazardous material is unloaded.
     */
    offItin?: number;

    /**
     * The International Civil Aviation Organization (ICAO) code of the site where the
     * hazardous material is loaded.
     */
    onICAO?: string;

    /**
     * Itinerary number that identifies where the hazardous material is loaded.
     */
    onItin?: number;

    /**
     * Number of pieces of hazardous cargo.
     */
    pieces?: number;

    /**
     * Flag indicating if hazardous material is associated with this air transport
     * mission. Possible values are P (planned to be associated with the mission) or A
     * (actually associated with the mission). Enum: [P, A].
     */
    planned?: string;

    /**
     * United Nations number or North America number that identifies hazardous
     * materials according to the Hazardous Materials Regulations issued by the U.S.
     * Department of Transportation.
     */
    unNum?: string;

    /**
     * Total weight of hazardous cargo, including non-explosive parts, in kilograms.
     */
    weight?: number;
  }

  /**
   * Collection of Remarks associated with this Air Transport Mission.
   */
  export interface Remark {
    /**
     * Date the remark was published, in ISO 8601 UTC format, with millisecond
     * precision.
     */
    date?: string;

    /**
     * Global Decision Support System (GDSS) remark identifier.
     */
    gdssRemarkId?: string;

    /**
     * If the remark is sortie specific, this is the number of the sortie it applies
     * to.
     */
    itineraryNum?: number;

    /**
     * Text of the remark.
     */
    text?: string;

    /**
     * Remark type.
     */
    type?: string;

    /**
     * User who published the remark.
     */
    user?: string;
  }

  /**
   * Collection of Requirements associated with this Air Transport Mission.
   */
  export interface Requirement {
    /**
     * Total weight of the bulk cargo, in kilograms.
     */
    bulkWeight?: number;

    /**
     * Earliest available date the cargo can be picked up.
     */
    ead?: string;

    /**
     * Global Decision Support System (GDSS) mission requirement identifier.
     */
    gdssReqId?: string;

    /**
     * Latest available date the cargo may be delivered.
     */
    lad?: string;

    /**
     * Number of ambulatory patients tasked for the mission.
     */
    numAmbulatory?: number;

    /**
     * Number of attendants tasked for the mission.
     */
    numAttendant?: number;

    /**
     * Number of litter patients tasked for the mission.
     */
    numLitter?: number;

    /**
     * Number of passengers associated with the mission.
     */
    numPax?: number;

    /**
     * Identifier of the offload itinerary location.
     */
    offloadId?: number;

    /**
     * Offload location code.
     */
    offloadLOCode?: string;

    /**
     * Identifier of the onload itinerary location.
     */
    onloadId?: number;

    /**
     * Onload location code.
     */
    onloadLOCode?: string;

    /**
     * Identification number of the Operation Plan (OPLAN) associated with this
     * mission.
     */
    oplan?: string;

    /**
     * Total weight of the outsize cargo, in kilograms.
     */
    outsizeWeight?: number;

    /**
     * Total weight of the oversized cargo, in kilograms.
     */
    oversizeWeight?: number;

    /**
     * Project name.
     */
    projName?: string;

    /**
     * Transportation requirement number.
     */
    transReqNum?: string;

    /**
     * Unit line number.
     */
    uln?: string;
  }
}

/**
 * Aircraft readiness and status data. Contains the dynamic data associated with
 * the specific aircraft status, either in-flight or on-ground, including remaining
 * fuel, mission readiness, and inventory, etc.
 */
export interface AircraftstatusFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Unique identifier of the aircraft.
   */
  idAircraft: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * List of additional operational systems on this aircraft beyond what is normally
   * available.
   */
  additionalSys?: Array<string>;

  /**
   * The status of the air-to-air weapon release system (OPERATIONAL,
   * NON-OPERATIONAL, OFF).
   */
  airToAirStatus?: 'OPERATIONAL' | 'NON-OPERATIONAL' | 'OFF';

  /**
   * The status of the air-to-ground weapon release system (OPERATIONAL,
   * NON-OPERATIONAL, OFF).
   */
  airToGroundStatus?: 'OPERATIONAL' | 'NON-OPERATIONAL' | 'OFF';

  /**
   * Aircraft alpha status code that indicates the aircraft maintenance status
   * estimated by the pilot.
   */
  alphaStatusCode?: string;

  /**
   * Alternate Aircraft Identifier provided by source.
   */
  altAircraftId?: string;

  /**
   * The contamination status of the aircraft (e.g. CLEAR, CONTAMINATED,
   * DECONTAMINATED, UNKNOWN, etc.).
   */
  contaminationStatus?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * The International Civil Aviation Organization (ICAO) code at which this aircraft
   * is currently located or has most recently departed, if airborne.
   */
  currentICAO?: string;

  /**
   * The current readiness state of the aircraft (e.g. AIRBORNE, ALERTCOCKED,
   * AVAILABLE, BATTLESTATION, RUNWAY ALERT, SUITUP).
   */
  currentState?: string;

  /**
   * The earliest time that turnaround of the aircraft may complete, in ISO 8601 UTC
   * format with millisecond precision.
   */
  earliestTAEndTime?: string;

  /**
   * The Expected Time in Commission (ETIC) for this aircraft, in ISO 8601 UTC format
   * with millisecond precision. This is the estimated time when the issue will be
   * resolved.
   */
  etic?: string;

  /**
   * Current flight phase (e.g. AIR REFUELING, GROUND, LANDING, etc.) of the
   * aircraft.
   */
  flightPhase?: string;

  /**
   * The mass of fuel remaining on the aircraft, in kilograms.
   */
  fuel?: number;

  /**
   * Used in conjunction with the fuel field to indicate either burnable or offload
   * fuel.
   */
  fuelFunction?: string;

  /**
   * The state of the aircraft fuel status (e.g. DELIVERED, DUMPED, EMPTY, FULL,
   * OTHER, REQUESTED, etc.).
   */
  fuelStatus?: string;

  /**
   * US Air Force geographic location code of the airfield where the aircraft is
   * located.
   */
  geoLoc?: string;

  /**
   * The ground status of the aircraft (e.g. ALERT, CREW READY, ENGINE START, HANGAR,
   * etc.).
   */
  groundStatus?: string;

  /**
   * Flag indicating that the aircraft is capable of making at least one gun pass.
   */
  gunCapable?: boolean;

  /**
   * The upper bound of the estimated number of gun rounds available.
   */
  gunRdsMax?: number;

  /**
   * The lower bound of the estimated number of gun rounds available.
   */
  gunRdsMin?: number;

  /**
   * The type of gun rounds available (e.g. 7.62 MM, 20 MM, 25 MM, etc.).
   */
  gunRdsType?: string;

  /**
   * If not airborne, the unique identifier of the installation currently hosting the
   * aircraft.
   */
  idAirfield?: string;

  /**
   * Unique identifier of the Point of Interest (POI) record related to this aircraft
   * status. This will generally represent the location of an aircraft on the ground.
   */
  idPOI?: string;

  /**
   * Array of inventory item(s) for which estimate(s) are available (e.g. AIM-9
   * SIDEWINDER, AIM-120 AMRAAM, AIM-92 STINGER, CHAFF DECOY, FLARE TP 400, etc.).
   * Intended as, but not constrained to, MIL-STD-6016 environment dependent
   * specific/store type designations. This array must be the same length as
   * inventoryMin and inventoryMax.
   */
  inventory?: Array<string>;

  /**
   * Array of the upper bound quantity for each of the inventory items. The values in
   * this array must correspond to position index in the inventory array. This array
   * must be the same length as inventory and inventoryMin.
   */
  inventoryMax?: Array<number>;

  /**
   * Array of the lower bound quantity for each of the inventory items. The values in
   * this array must correspond to position index in the inventory array. This array
   * must be the same length as inventory and inventoryMax.
   */
  inventoryMin?: Array<number>;

  /**
   * Date when the military aircraft inspection was last performed, in ISO 8601 UTC
   * format with millisecond precision.
   */
  lastInspectionDate?: string;

  /**
   * The name or ID of the external user that updated this status.
   */
  lastUpdatedBy?: string;

  /**
   * Military aircraft maintenance point of contact for this aircraft.
   */
  maintPoc?: string;

  /**
   * Indicates the priority of the maintenance effort.
   */
  maintPriority?: string;

  /**
   * The maintenance status of the aircraft.
   */
  maintStatus?: string;

  /**
   * Indicates the maintenance discrepancy that drives the current maintenance
   * status.
   */
  maintStatusDriver?: string;

  /**
   * The time of the last maintenance status update, in ISO 8601 UTC format with
   * millisecond precision.
   */
  maintStatusUpdate?: string;

  /**
   * The Operational Capability of the reported aircraft (ABLE, LOFUEL, UNABLE).
   */
  missionReadiness?: string;

  /**
   * Maintenance pacing remarks assocociated with this aircraft.
   */
  mxRemark?: string;

  /**
   * The International Civil Aviation Organization (ICAO) code of the next
   * destination of this aircraft.
   */
  nextICAO?: string;

  /**
   * Optional notes/comments concerning this aircraft status.
   */
  notes?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * The parking location of this aircraft.
   */
  parkLocation?: string;

  /**
   * The system that designated the parking location (e.g. EMOC, GDSS, PEX, etc.).
   */
  parkLocationSystem?: string;

  /**
   * The International Civil Aviation Organization (ICAO) code at which this aircraft
   * was previously located.
   */
  previousICAO?: string;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * The turnaround start time, in ISO 8601 UTC format with millisecond precision.
   */
  taStartTime?: string;

  /**
   * Estimated Time for Completion (ETIC) of an aircraft issue, in ISO 8601 UTC
   * format with millisecond precision. This is the estimated time when the course of
   * action to resolve the issue will be determined.
   */
  troubleshootEtic?: string;

  /**
   * List of unavailable systems that would normally be on this aircraft.
   */
  unavailableSys?: Array<string>;

  /**
   * Time the row was updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

/**
 * Self-reported information obtained from Automatic Identification System (AIS)
 * equipment. This contains information such as unique identification, status,
 * position, course, and speed. The AIS is an automatic tracking system that uses
 * transceivers on ships and is used by vessel traffic services. Although
 * technically and operationally distinct, the AIS system is analogous to ADS-B
 * that performs a similar function for aircraft. AIS is intended to assist a
 * vessel's watchstanding officers and allow maritime authorities to track and
 * monitor vessel movements. AIS integrates a standardized VHF transceiver with a
 * positioning system such as Global Positioning System receiver, with other
 * electronic navigation sensors, such as gyrocompass or rate of turn indicator.
 * Vessels fitted with AIS transceivers can be tracked by AIS base stations located
 * along coast lines or, when out of range of terrestrial networks, through a
 * growing number of satellites that are fitted with special AIS receivers which
 * are capable of deconflicting a large number of signatures.
 */
export interface AIsFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Source of the data.
   */
  source: string;

  /**
   * The timestamp that the vessel position was recorded, in ISO 8601 UTC format.
   */
  ts: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * The reference dimensions of the vessel, reported as [A, B, C, D], in meters.
   * Where the array values represent the distance fore (A), aft (B), to port (C),
   * and to starboard (D) of the navigation antenna. Array with values A = C = 0 and
   * B, D > 0 indicate the length (B) and width (D) of the vessel without antenna
   * position reference.
   */
  antennaRefDimensions?: Array<number>;

  /**
   * The average speed, in kilometers/hour, calculated for the subject vessel during
   * the latest voyage (port to port).
   */
  avgSpeed?: number;

  /**
   * A uniquely designated identifier for the vessel's transmitter station.
   */
  callSign?: string;

  /**
   * The reported cargo type. Intended as, but not constrained to, the USCG NAVCEN
   * AIS cargo definitions. Users should refer to USCG Navigation Center
   * documentation for specific definitions associated with ship and cargo types.
   * USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
   */
  cargoType?: string;

  /**
   * The course-over-ground reported by the vessel, in degrees.
   */
  course?: number;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * The US Geographic Unique Identifier of the current port hosting the vessel.
   */
  currentPortGUID?: string;

  /**
   * The UN Location Code of the current port hosting the vessel.
   */
  currentPortLOCODE?: string;

  /**
   * The destination of the vessel according to the AIS transmission.
   */
  destination?: string;

  /**
   * The Estimated Time of Arrival of the vessel at the destination, in ISO 8601 UTC
   * format.
   */
  destinationETA?: string;

  /**
   * The remaining distance, in kilometers, for the vessel to reach the reported
   * destination.
   */
  distanceToGo?: number;

  /**
   * The distance, in kilometers, that the vessel has travelled since departing the
   * last port.
   */
  distanceTravelled?: number;

  /**
   * The maximum static draught, in meters, of the vessel according to the AIS
   * transmission.
   */
  draught?: number;

  /**
   * The activity that the vessel is engaged in. This entry applies only when the
   * shipType = Other.
   */
  engagedIn?: string;

  /**
   * The Estimated Time of Arrival of the vessel at the destination port, according
   * to MarineTraffic calculations, in ISO 8601 UTC format.
   */
  etaCalculated?: string;

  /**
   * The date and time that the ETA was calculated by MarineTraffic, in ISO 8601 UTC
   * format.
   */
  etaUpdated?: string;

  /**
   * Unique identifier of the Track.
   */
  idTrack?: string;

  /**
   * Unique identifier of the vessel.
   */
  idVessel?: string;

  /**
   * The International Maritime Organization Number of the vessel. IMON is a
   * seven-digit number that uniquely identifies the vessel.
   */
  imon?: number;

  /**
   * The US Geographic Unique Identifier of the last port visited by the vessel.
   */
  lastPortGUID?: string;

  /**
   * The UN Location Code of the last port visited by the vessel.
   */
  lastPortLOCODE?: string;

  /**
   * WGS-84 latitude of the vessel position, in degrees. -90 to 90 degrees (negative
   * values south of equator).
   */
  lat?: number;

  /**
   * The overall length of the vessel, in meters. A value of 511 indicates a vessel
   * length of 511 meters or greater.
   */
  length?: number;

  /**
   * WGS-84 longitude of the vessel position, in degrees. -180 to 180 degrees
   * (negative values west of Prime Meridian).
   */
  lon?: number;

  /**
   * The maximum speed, in kilometers/hour, reported by the subject vessel during the
   * latest voyage (port to port).
   */
  maxSpeed?: number;

  /**
   * The Maritime Mobile Service Identity of the vessel. MMSI is a nine-digit number
   * that identifies the transmitter station of the vessel.
   */
  mmsi?: number;

  /**
   * The AIS Navigational Status of the vessel (e.g. Underway Using Engine, Moored,
   * Aground, etc.). Intended as, but not constrained to, the USCG NAVCEN navigation
   * status definitions. Users should refer to USCG Navigation Center documentation
   * for specific definitions associated with navigation status. USCG NAVCEN
   * documentation may be found at https://www.navcen.uscg.gov.
   */
  navStatus?: string;

  /**
   * The US Geographic Unique Identifier of the next destination port of the vessel.
   */
  nextPortGUID?: string;

  /**
   * The UN Location Code of the next destination port of the vessel.
   */
  nextPortLOCODE?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * The type of electronic position fixing device (e.g. GPS, GLONASS, etc.).
   * Intended as, but not constrained to, the USCG NAVCEN electronic position fixing
   * device definitions. Users should refer to USCG Navigation Center documentation
   * for specific device type information. USCG NAVCEN documentation may be found at
   * https://www.navcen.uscg.gov.
   */
  posDeviceType?: string;

  /**
   * Flag indicating high reported position accuracy (less than or equal to 10
   * meters). A value of 0/false indicates low accuracy (greater than 10 meters).
   */
  posHiAccuracy?: boolean;

  /**
   * Flag indicating high reported position latency (greater than 5 seconds). A value
   * of 0/false indicates low latency (less than 5 seconds).
   */
  posHiLatency?: boolean;

  /**
   * The Rate-of-Turn for the vessel, in degrees/minute. Positive value indicates
   * that the vessel is turning right.
   */
  rateOfTurn?: number;

  /**
   * Further description or explanation of the vessel or type.
   */
  shipDescription?: string;

  /**
   * The name of the vessel. Vessel names that exceed the AIS 20 character are
   * shortened (not truncated) to 15 character-spaces, followed by an underscore and
   * the last 4 characters-spaces of the vessel full name.
   */
  shipName?: string;

  /**
   * The reported ship type (e.g. Passenger, Tanker, Cargo, Other, etc.). See the
   * engagedIn and specialCraft entries for additional information on certain types
   * of vessels.
   */
  shipType?: string;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * The type of special craft designation of the vessel. This entry applies only
   * when the shipType = Special Craft.
   */
  specialCraft?: string;

  /**
   * Flag indicating that the vessel is engaged in a special maneuver (e.g. Waterway
   * Navigation).
   */
  specialManeuver?: boolean;

  /**
   * The speed-over-ground reported by the vessel, in kilometers/hour.
   */
  speed?: number;

  /**
   * The true heading reported by the vessel, in degrees.
   */
  trueHeading?: number;

  /**
   * The flag of the subject vessel according to AIS transmission.
   */
  vesselFlag?: string;

  /**
   * The breadth of the vessel, in meters. A value of 63 indicates a vessel breadth
   * of 63 meters or greater.
   */
  width?: number;
}

/**
 * AttitudeSet represents a wrapper or collection of Onorbit Attitude 'points' and
 * meta data indicating the specifics of the orientation of an on-orbit object.
 * Attitude is typically distributed in a flat file containing details of the
 * attitude generation as well as a large collection of individual points at
 * varying time steps. AttitudeSet is analogous to this flat file.
 */
export interface AttitudesetFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * The end time of the attitude ephemeris, in ISO 8601 UTC format, with microsecond
   * precision. If this set is constituted by a single epoch attitude message then
   * endTime should match the startTime.
   */
  endTime: string;

  /**
   * Reference frame 1 of the quaternion or Euler angle transformation utilized in
   * this attitude parameter or attitude ephemeris. The UDL convention is that
   * transformations occur FROM frame1 TO frame2. A specific spacecraft frame or
   * instrument name may be provided with the assumption the consumer understands the
   * location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx,
   * THRUSTERx, etc.).
   */
  frame1: string;

  /**
   * Reference frame 2 of the quaternion or Euler angle transformation utilized in
   * this attitude parameter or attitude ephemeris. The UDL convention is that
   * transformations occur FROM frame1 TO frame2. A specific spacecraft frame or
   * instrument name may be provided with the assumption the consumer understands the
   * location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx,
   * THRUSTERx, etc.).
   */
  frame2: string;

  /**
   * Number of attitude records contained in this set.
   */
  numPoints: number;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * The epoch or start time of the attitude parameter or attitude ephemeris, in ISO
   * 8601 UTC format, with microsecond precision. If this set is constituted by a
   * single attitude parameter message then startTime is the epoch.
   */
  startTime: string;

  /**
   * The type of attitude message or messages associated with this set.
   *
   * AEM = Attitude Ephemeris Message, specifying the attitude state of a single
   * object at multiple epochs.
   *
   * APM = Attitude Parameters Message, specifying the attitude state of a single
   * object at a single epoch.
   */
  type: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Array of UDL UUIDs of one or more AttitudeSet records associated with this set.
   * For example, a spacecraft Attitude Ephemeris Set might include a reference to an
   * Attitude Parameter Message defining the sensor to body frame transformation for
   * a sensor onboard the spacecraft, which allows for calculation of the sensor
   * orientation in frame2 of the attitude ephemeris.
   */
  asRef?: Array<string>;

  /**
   * Collection of attitude data associated with this Attitude Set.
   */
  attitudeList?: Array<AttitudeDataAPI.AttitudedataFull>;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Unique identifier of the parent (positional) Ephemeris Set, if this data is
   * correlated with an Ephemeris.
   */
  esId?: string;

  /**
   * The rotation sequence of the Euler angles in which attitude reference frame
   * transformation occurs (from left to right). One, two, or three axis rotations
   * are supported and are represented by one, two, or three characters respectively.
   * Repeated axis rotations are also supported, however, these rotations should not
   * be sequential. The numeric sequence values correspond to the body angles/rates
   * as follows: 1 - xAngle/xRate, 2 - yAngle/yRate, and 3 - zAngle/zRate. Valid
   * sequences are: 123, 132, 213, 231, 312, 321, 121, 131, 212, 232, 313, 323, 12,
   * 13, 21, 23, 31, 32, 1, 2, and 3.
   *
   * The following represent examples of possible rotation sequences: A single
   * rotation about the Y-axis can be expressed as '2', a double rotation with X-Z
   * sequence can be expressed as '13', and a triple rotation with Z-X-Y sequence can
   * be expressed as '312'.
   */
  eulerRotSeq?: string;

  /**
   * Unique identifier of the on-orbit satellite to which this attitude set applies.
   */
  idOnOrbit?: string;

  /**
   * Unique identifier of the sensor to which this attitude set applies IF this set
   * is reporting a single sensor orientation.
   */
  idSensor?: string;

  /**
   * Recommended interpolation method for estimating attitude ephemeris data.
   */
  interpolator?: string;

  /**
   * Recommended polynomial interpolation degree.
   */
  interpolatorDegree?: number;

  /**
   * Optional notes/comments for this attitude set.
   */
  notes?: string;

  /**
   * Model object representing on-orbit objects or satellites in the system.
   */
  onOrbit?: Onorbit;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Optional identifier provided by the record source to indicate the target object
   * of this attitude set. This may be an internal identifier and not necessarily map
   * to a valid satellite number.
   */
  origObjectId?: string;

  /**
   * Optional identifier provided by the record source to indicate the sensor
   * identifier to which this attitude set applies IF this set is reporting a single
   * sensor orientation. This may be an internal identifier and not necessarily a
   * valid sensor ID.
   */
  origSensorId?: string;

  /**
   * Initial precession angle (ECI J2000 frame) in degrees.
   */
  precAngleInit?: number;

  /**
   * Satellite/catalog number of the on-orbit object to which this attitude set
   * applies.
   */
  satNo?: number;

  /**
   * Initial spin angle (ECI J2000 frame) in degrees.
   */
  spinAngleInit?: number;

  /**
   * Attitude ephemeris step size, in seconds. This applies to Attitude Ephemeris
   * Messages (AEM) that employ a fixed step size.
   */
  stepSize?: number;
}

/**
 * Collect Requests support several types of individual requests, or
 * planned/scheduled tasks on sensors and/or orbital objects. Options are provided
 * to accomodate most common sensor contact and collection applications, including
 * single sensor-object tasking, search operations, and TT&C support. Multiple
 * requests originating from a plan or schedule may be associated to a sensor plan
 * if desired.
 */
export interface CollectRequestFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Source of the data.
   */
  source: string;

  /**
   * The start time or earliest time of the collect or contact request window, in ISO
   * 8601 UTC format.
   */
  startTime: string;

  /**
   * The type of this collect or contact request (DIRECTED SEARCH, DWELL, OBJECT,
   * POL, RATE TRACK, SEARCH, SOI, STARE, TTC, VOLUME SEARCH, etc.).
   */
  type: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Height above WGS-84 ellipsoid (HAE), in kilometers. If an accompanying stopAlt
   * is provided, then alt value can be assumed to be the starting altitude of a
   * volume definition.
   */
  alt?: number;

  /**
   * The argument of perigee is the angle, in degrees, formed between the perigee and
   * the ascending node.
   */
  argOfPerigee?: number;

  /**
   * The expected or directed azimuth angle, in degrees, for search or target
   * acquisition.
   */
  az?: number;

  /**
   * CollectResponses associated to request id. Read-only details (only used on
   * detail queries, not to be provided on create/update operations).
   */
  collectResponse?: Array<CollectResponseFull>;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * The customer for this request.
   */
  customer?: string;

  /**
   * The expected or directed declination angle, in degrees, for search or target
   * acquisition.
   */
  dec?: number;

  /**
   * The duration of the collect request, in seconds. If both duration and endTime
   * are provided, the endTime is assumed to take precedence.
   */
  duration?: number;

  /**
   * The dwell ID associated with this request. A dwell ID is dwell point specific
   * and a DWELL request consist of many dwell point requests.
   */
  dwellId?: string;

  /**
   * The orbital eccentricity of an astronomical object is a parameter that
   * determines the amount by which its orbit around another body deviates from a
   * perfect circle.
   */
  eccentricity?: number;

  /**
   * The expected or directed elevation angle, in degrees, for search or target
   * acquisition.
   */
  el?: number;

  /**
   * An element set is a collection of Keplerian orbital elements describing an orbit
   * of a particular satellite. The data is used along with an orbit propagator in
   * order to predict the motion of a satellite. The element set, or elset for short,
   * consists of identification data, the classical elements and drag parameters.
   */
  elset?: ElsetsAPI.Elset;

  /**
   * The end time of the collect or contact request window, in ISO 8601 UTC format.
   * If no endTime or duration is provided it is assumed the request is either
   * ongoing or that the request is for a specified number of tracks (numTracks). If
   * both duration and endTime are provided, the endTime is assumed to take
   * precedence.
   */
  endTime?: string;

  /**
   * Epoch time, in ISO 8601 UTC format, of the orbital elements.
   */
  epoch?: string;

  /**
   * ID of the UDL Ephemeris Set of the object associated with this request.
   */
  esId?: string;

  /**
   * The extent of the azimuth angle, in degrees, from center azimuth to define a
   * spatial volume.
   */
  extentAz?: number;

  /**
   * The extent of the elevation angle, in degrees, from center elevation to define a
   * spatial volume.
   */
  extentEl?: number;

  /**
   * The extent of the range, in km, from center range to define a spatial volume.
   */
  extentRange?: number;

  /**
   * Optional ID from external systems. This field has no meaning within UDL and is
   * provided as a convenience for systems that require tracking of an internal
   * system generated ID.
   */
  externalId?: string;

  /**
   * For optical sensors, the frame rate of the camera, in Hz.
   */
  frameRate?: number;

  /**
   * The estimated or expected emission frequency of the target, in MHz.
   */
  freq?: number;

  /**
   * The maximum frequency of interest, in MHz.
   */
  freqMax?: number;

  /**
   * The minimum frequency of interest, in MHz. If only minimum frequency is provided
   * it is assumed to be minimum reportable frequency.
   */
  freqMin?: number;

  /**
   * ID of the UDL Elset of the object associated with this request.
   */
  idElset?: string;

  /**
   * ID of the UDL Manifold Elset of the object associated with this request. A
   * Manifold Elset provides theoretical Keplerian orbital elements belonging to an
   * object of interest's manifold describing a possible/theoretical orbit for an
   * object of interest for tasking purposes.
   */
  idManifold?: string;

  /**
   * Unique identifier of the target on-orbit object for this request.
   */
  idOnOrbit?: string;

  /**
   * The unique ID of the collect request record from which this request originated.
   * This may be used for cases of sensor-to-sensor tasking, such as tip/cue
   * operations.
   */
  idParentReq?: string;

  /**
   * Unique identifier of the parent plan or schedule associated with this request.
   * If null, this request is assumed not associated with a plan or schedule.
   */
  idPlan?: string;

  /**
   * Unique identifier of the requested/scheduled/planned sensor associated with this
   * request. If both idSensor and origSensorId are null then the request is assumed
   * to be a general request for observations or contact on an object, if specified,
   * or an area/volume. In this case, the requester may specify a desired obType.
   */
  idSensor?: string;

  /**
   * ID of the UDL State Vector of the object or central vector associated with this
   * request.
   */
  idStateVector?: string;

  /**
   * The angle, in degrees, between the equator and the orbit plane when looking from
   * the center of the Earth. Inclination ranges from 0-180 degrees, with 0-90
   * representing posigrade orbits and 90-180 representing retrograde orbits.
   */
  inclination?: number;

  /**
   * For optical sensors, the integration time per camera frame, in milliseconds.
   */
  integrationTime?: number;

  /**
   * Inter-Range Operations Number. Four-digit identifier used to schedule and
   * identify AFSCN contact support for booster, launch, and on-orbit operations.
   */
  iron?: number;

  /**
   * The target object irradiance value.
   */
  irradiance?: number;

  /**
   * WGS-84 latitude, in degrees. -90 to 90 degrees (negative values south of
   * equator). If an accompanying stopLat is provided, then the lat value can be
   * assumed to be the starting latitude of a volume definition.
   */
  lat?: number;

  /**
   * WGS-84 longitude, in degrees. -180 to 180 degrees (negative values west of Prime
   * Meridian). If an accompanying stopLon is provided, then lon value can be assumed
   * to be the starting longitude of a volume definition.
   */
  lon?: number;

  /**
   * The timestamp of the external message from which this request originated, if
   * applicable, in ISO8601 UTC format with millisecond precision.
   */
  msgCreateDate?: string;

  /**
   * The type of external message from which this request originated.
   */
  msgType?: string;

  /**
   * Notes or comments associated with this request.
   */
  notes?: string;

  /**
   * For optical sensors, the requested number of frames to capture at each sensor
   * step.
   */
  numFrames?: number;

  /**
   * The number of requested observations on the target.
   */
  numObs?: number;

  /**
   * The number of requested tracks on the target. If numTracks is not provided it is
   * assumed to indicate all possible observations every pass over the request
   * duration or within the request start/end window.
   */
  numTracks?: number;

  /**
   * Optional type of observation (EO, IR, RADAR, RF-ACTIVE, RF-PASSIVE, OTHER)
   * requested. This field may correspond to a request of a specific sensor, or to a
   * general non sensor specific request.
   */
  obType?: string;

  /**
   * Model object representing on-orbit objects or satellites in the system.
   */
  onOrbit?: Onorbit;

  /**
   * The orbit regime of the target (GEO, HEO, LAUNCH, LEO, MEO, OTHER).
   */
  orbitRegime?: string;

  /**
   * The magnitude of rotation, in degrees, between the xAngle direction and locally
   * defined equinoctial plane. A positive value indicates clockwise rotation about
   * the sensor boresight vector.
   */
  orientAngle?: number;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Optional identifier provided by the data source to indicate the target object of
   * this request. This may be an internal identifier and not necessarily map to a
   * valid satellite number.
   */
  origObjectId?: string;

  /**
   * Optional identifier provided by the source to indicate the sensor identifier
   * requested/scheduled/planned for this request. This may be an internal identifier
   * and not necessarily a valid sensor ID. If both idSensor and origSensorId are
   * null then the request is assumed to be a general request for observations or
   * contact on an object, if specified, or an area/volume. In this case, the
   * requester may specify a desired obType.
   */
  origSensorId?: string;

  /**
   * Index number (integer) for records within a collection plan or schedule.
   */
  planIndex?: number;

  /**
   * The RF polarization (H, LHC, RHC, V).
   */
  polarization?: string;

  /**
   * The priority of the collect request (EMERGENCY, FLASH, IMMEDIATE, PRIORITY,
   * ROUTINE).
   */
  priority?: string;

  /**
   * The expected or directed right ascension angle, in degrees, for search or target
   * acquisition.
   */
  ra?: number;

  /**
   * Right ascension of the ascending node, or RAAN is the angle as measured in
   * degrees eastwards (or, as seen from the north, counterclockwise) from the First
   * Point of Aries to the ascending node.
   */
  raan?: number;

  /**
   * The expected acquisition range or defined center range, in km.
   */
  range?: number;

  /**
   * The Radar Cross-Section of the target, in m^2.
   */
  rcs?: number;

  /**
   * The maximum Radar Cross-Section of the target, in m^2.
   */
  rcsMax?: number;

  /**
   * The minimum Radar Cross-Section of the target, in m^2. If only minimum RCS is
   * provided it is assumed to be minimum reportable RCS.
   */
  rcsMin?: number;

  /**
   * The fraction of solar energy reflected from target.
   */
  reflectance?: number;

  /**
   * Satellite/catalog number of the target on-orbit object for this request.
   */
  satNo?: number;

  /**
   * Pre-coordinated code, direction, or configuration to be executed by the sensor
   * or site for this collect or contact.
   */
  scenario?: string;

  /**
   * The average of the periapsis and apoapsis distances, in kilometers. For circular
   * orbits, the semimajor axis is the distance between the centers of the bodies.
   */
  semiMajorAxis?: number;

  /**
   * The spectral model used for the irradiance calculation.
   */
  spectralModel?: string;

  /**
   * The maximum inclination, in degrees, to be used in search operations.
   */
  srchInc?: number;

  /**
   * The search pattern to be executed for this request (e.g. PICKET-FENCE, SCAN,
   * etc.).
   */
  srchPattern?: string;

  /**
   * This service provides operations for querying and manipulation of state vectors
   * for OnOrbit objects. State vectors are cartesian vectors of position (r) and
   * velocity (v) that, together with their time (epoch) (t), uniquely determine the
   * trajectory of the orbiting body in space. J2000 is the preferred coordinate
   * frame for all state vector positions/velocities in UDL, but in some cases data
   * may be in another frame depending on the provider and/or datatype. Please see
   * the 'Discover' tab in the storefront to confirm coordinate frames by data
   * provider.
   */
  stateVector?: StatevectorAPI.StateVectorFull;

  /**
   * The stopping HAE WGS-84 height above ellipsoid (HAE), of a volume definition, in
   * kilometers. The stopAlt value is only meaningful if a (starting) alt value is
   * provided.
   */
  stopAlt?: number;

  /**
   * The stopping WGS-84 latitude of a volume definition, in degrees. -90 to 90
   * degrees (negative values south of equator). The stopLat value is only meaningful
   * if a (starting) lat value is provided.
   */
  stopLat?: number;

  /**
   * The stopping WGS-84 longitude of a volume definition, in degrees. -180 to 180
   * degrees (negative values west of Prime Meridian). The stopLon value is only
   * meaningful if a (starting) lon value is provided.
   */
  stopLon?: number;

  /**
   * The (SSN) tasking suffix (A-Z) associated with this request. The suffix defines
   * the amount of observational data and the frequency of collection. Note that
   * suffix definitions are sensor type specific.
   */
  suffix?: string;

  /**
   * Optional array of provider/source specific tags for this data, where each
   * element is no longer than 32 characters, used for implementing data owner
   * conditional access controls to restrict access to the data. Should be left null
   * by data providers unless conditional access controls are coordinated with the
   * UDL team.
   */
  tags?: Array<string>;

  /**
   * The minimum object (diameter) size, in meters, to be reported.
   */
  targetSize?: number;

  /**
   * The (SSN) tasking category (1-5) associated with this request. The tasking
   * category defines the priority of gathering and transmitting the requested
   * observational data. Note that category definitions are sensor type specific.
   */
  taskCategory?: number;

  /**
   * The tasking group to which the target object is assigned.
   */
  taskGroup?: string;

  /**
   * Task ID associated with this request. A task ID may be associated with a single
   * collect request or may be used to tie together the sub-requests of a full
   * collect, for example a DWELL consisting of many dwell points.
   */
  taskId?: string;

  /**
   * The true anomaly defines the angular position, in degrees, of the object on it's
   * orbital path as measured from the orbit focal point at epoch. The true anomaly
   * is referenced from perigee.
   */
  trueAnomoly?: number;

  /**
   * Boolean indicating that this collect request is UCT follow-up.
   */
  uctFollowUp?: boolean;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;

  /**
   * The estimated or expected visual magnitude of the target, in Magnitudes (M).
   */
  visMag?: number;

  /**
   * The maximum estimated or expected visual magnitude of the target, in Magnitudes
   * (M).
   */
  visMagMax?: number;

  /**
   * The minimum estimated or expected visual magnitude of the target, in Magnitudes
   * (M). If only minimum vismag is provided it is assumed to be minimum reportable
   * vismag.
   */
  visMagMin?: number;

  /**
   * The angular distance, in degrees, in the sensor-x direction from scan center
   * defined by the central vector. The specification of xAngle and yAngle defines a
   * rectangle of width 2*xAngle and height 2*yAngle centered about the central
   * vector.
   */
  xAngle?: number;

  /**
   * The angular distance, in degrees, in the sensor-y direction from scan center
   * defined by the central vector. The specification of xAngle and yAngle defines a
   * rectangle of width 2*xAngle and height 2*yAngle centered about the central
   * vector.
   */
  yAngle?: number;
}

/**
 * Collect response supports the response and status of individual collect
 * requests. Each response is referenced by the UUID of the request, and contains
 * information including the status of the request, collection times and types, and
 * reference(s) to the observations collected. There may be multiple responses
 * associated with a request, either from multiple collectors or to relay status
 * changes prior to completion and delivery.
 */
export interface CollectResponseFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Unique identifier of the request associated with this response.
   */
  idRequest: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * The actual end time of the collect or contact, in ISO 8601 UTC format.
   */
  actualEndTime?: string;

  /**
   * The actual start time of the collect or contact, in ISO 8601 UTC format.
   */
  actualStartTime?: string;

  /**
   * Proposed alternative end time, in ISO 8601 UTC format.
   */
  altEndTime?: string;

  /**
   * Proposed alternative start time, in ISO 8601 UTC format.
   */
  altStartTime?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Error code associated with this request/response.
   */
  errCode?: string;

  /**
   * UUID from external systems. This field has no meaning within UDL and is provided
   * as a convenience for systems that require tracking of internal system generated
   * ID.
   */
  externalId?: string;

  /**
   * Unique identifier of the target on-orbit object associated with this response.
   */
  idOnOrbit?: string;

  /**
   * Unique identifier of the parent plan or schedule associated with the
   * request/response.
   */
  idPlan?: string;

  /**
   * Unique identifier of the reporting sensor.
   */
  idSensor?: string;

  /**
   * Notes or comments associated with this response.
   */
  notes?: string;

  /**
   * Model object representing on-orbit objects or satellites in the system.
   */
  onOrbit?: Onorbit;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Optional identifier provided by data source to indicate the target object of
   * this response. This may be an internal identifier and not necessarily a valid
   * satellite number.
   */
  origObjectId?: string;

  /**
   * Optional identifier provided by the collection source to indicate the sensor
   * identifier responding to this collect or contact. This may be an internal
   * identifier and not necessarily a valid sensor ID.
   */
  origSensorId?: string;

  /**
   * Satellite/catalog number of the target on-orbit object.
   */
  satNo?: number;

  /**
   * Array of UUIDs of the UDL data record(s) collected in response to the associated
   * request. See the associated 'srcTyps' array for the specific types of data,
   * positionally corresponding to the UUIDs in this array. The 'srcTyps' and
   * 'srcIds' arrays must match in size. The appropriate API operation can be used to
   * retrieve the specified object(s) (e.g. /udl/rfobservation/{uuid}).
   */
  srcIds?: Array<string>;

  /**
   * Array of UDL record type(s) (DOA, ELSET, EO, RADAR, RF, SV) collected or
   * produced in response to the associated request. See the associated 'srcIds'
   * array for the record UUIDs, positionally corresponding to the record types in
   * this array. The 'srcTyps' and 'srcIds' arrays must match in size. The
   * appropriate API operation can be used to retrieve the specified object(s) (e.g.
   * /udl/rfobservation/{uuid}).
   */
  srcTyps?: Array<string>;

  /**
   * The status of the request (ACCEPTED, CANCELLED, COLLECTED, COMPLETED, DELIVERED,
   * FAILED, PARTIAL, PROPOSED, REJECTED, SCHEDULED):
   *
   * ACCEPTED: The collect or contact request has been received and accepted.
   *
   * CANCELLED: A previously scheduled collect or contact whose execution was
   * cancelled.
   *
   * COLLECTED: The collect has been accomplished. A collected state implies that
   * additional activity is required for delivery/completion.
   *
   * COMPLETED: The collect or contact has been completed. For many systems completed
   * and delivered constitute an equivalent successful end state.
   *
   * DELIVERED: The collected observation(s) have been delivered to the requestor.
   * For many systems completed and delivered constitute an equivalent successful end
   * state. A DELIVERED state is typically used for systems that exhibit a delay
   * between collect and delivery, such as with space-based systems which require
   * ground contact to deliver observations.
   *
   * FAILED: The collect or contact was attempted and failed, or the delivery of the
   * collected observation(s) failed. A FAILED status may be accompanied by an error
   * code (errCode), if available.
   *
   * PARTIAL: A PARTIAL state indicates that a part of a multi-track request has been
   * accomplished, but the full request is incomplete. A PARTIAL status should
   * ultimately be resolved to an end state.
   *
   * PROPOSED: Indicates that the request was received and alternate collect or
   * contact time(s) (altStartTime, altEndTime) have been proposed. If an alternate
   * is accepted by the requestor the current request should be cancelled and a new
   * request created.
   *
   * REJECTED: The request has been received and rejected by the provider. A REJECTED
   * status may be accompanied by an explanation (notes) of the reason that the
   * request was rejected.
   *
   * SCHEDULED: The request was received and has been scheduled for execution.
   */
  status?: string;

  /**
   * Optional array of provider/source specific tags for this data, where each
   * element is no longer than 32 characters, used for implementing data owner
   * conditional access controls to restrict access to the data. Should be left null
   * by data providers unless conditional access controls are coordinated with the
   * UDL team.
   */
  tags?: Array<string>;

  /**
   * Optional task ID associated with the request/response.
   */
  taskId?: string;
}

/**
 * Historical drift rates for GEO Onorbit objects resulting from updates to
 * OnorbitDetails driftRate values.
 */
export interface DriftHistory {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * GEO drift rate, if applicable in degrees per day.
   */
  driftRate?: number;

  /**
   * Time the drift rate was replaced with another value and no longer the current
   * value.
   */
  effectiveUntil?: string;

  /**
   * UUID of the parent Onorbit record.
   */
  idOnOrbit?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;
}

/**
 * Historical drift rates for GEO Onorbit objects resulting from updates to
 * OnorbitDetails driftRate values.
 */
export interface DrifthistoryAbridged {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * GEO drift rate, if applicable in degrees per day.
   */
  driftRate?: number;

  /**
   * Time the drift rate was replaced with another value and no longer the current
   * value.
   */
  effectiveUntil?: string;

  /**
   * UUID of the parent Onorbit record.
   */
  idOnOrbit?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;
}

/**
 * Model representation of Earth Orientation Parameters (EOP) produced by the IERS
 * (International Earth Rotation and Reference Systems Service). Earth Orientation
 * Parameters describe the irregularities of the earth's rotation. Technically,
 * they are the parameters which provide the rotation of the ITRS (International
 * Terrestrial Reference System) to the ICRS (International Celestial Reference
 * System) as a function of time. Universal time -- Universal time (UT1) is the
 * time of the earth clock, which performs one revolution in about 24h. It is
 * practically proportional to the sidereal time. The excess revolution time is
 * called length of day (LOD). Coordinates of the pole -- x and y are the
 * coordinates of the Celestial Ephemeris Pole (CEP) relative to the IRP, the IERS
 * Reference Pole. The CEP differs from the instantaneous rotation axis by
 * quasi-diurnal terms with amplitudes under 0.01" (see Seidelmann, 1982). The
 * x-axis is in the direction of the ITRF zero-meridian; the y-axis is in the
 * direction 90 degrees West longitude. Celestial pole offsets -- Celestial pole
 * offsets are described in the IAU Precession and Nutation models. The observed
 * differences with respect to the conventional celestial pole position defined by
 * the models are monitored and reported by the IERS. IERS Bulletins A and B
 * provide current information on the Earth's orientation in the IERS Reference
 * System. This includes Universal Time, coordinates of the terrestrial pole, and
 * celestial pole offsets. Bulletin A gives an advanced solution updated weekly;
 * the standard solution is given monthly in Bulletin B. Fields suffixed with 'B'
 * are Bulletin B values. All solutions are continuous within their respective
 * uncertainties. Bulletin A is issued by the IERS Rapid Service/Prediction Centre
 * at the U.S. Naval Observatory, Washington, DC and Bulletin B is issued by the
 * IERS Earth Orientation Centre at the Paris Observatory. IERS Bulletin A reports
 * the latest determinations for polar motion, UT1-UTC, and nutation offsets at
 * daily intervals based on a combination of contributed analysis results using
 * data from Very Long Baseline Interferometry (VLBI), Satellite Laser Ranging
 * (SLR), Global Positioning System (GPS) satellites, and Lunar Laser Ranging
 * (LLR). Predictions for variations a year into the future are also provided.
 * Meteorological predictions of variations in Atmospheric Angular Momentum (AAM)
 * are used to aid in the prediction of near-term UT1-UTC changes. This publication
 * is prepared by the IERS Rapid Service/Prediction Center.
 */
export interface EopFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Effective date/time for the EOP values in ISO8601 UTC format. The values could
   * be current or predicted.
   */
  eopDate: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * The Bulletin A offset in obliquity dDe1980 with respect to the IAU 1976 Theory
   * of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of
   * arc. Note: dEpsilon is not used when this record represents IAU 2000 data.
   */
  dEpsilon?: number;

  /**
   * The Bulletin B offset in obliquity dDe1980 with respect to the IAU 1976 Theory
   * of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of
   * arc. Note: dEpsilonB is not used when this record represents IAU 2000 data.
   */
  dEpsilonB?: number;

  /**
   * The estimated uncertainty/error in the dEpsilon value in milliseconds of arc.
   */
  dEpsilonUnc?: number;

  /**
   * The Bulletin A offset in longitude dDy1980 with respect to the IAU 1976 Theory
   * of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of
   * arc. Note: dPSI is not used when this record represents IAU 2000 data.
   */
  dPSI?: number;

  /**
   * The Bulletin B offset in longitude dDy1980 with respect to the IAU 1976 Theory
   * of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of
   * arc. Note: dPSIB is not used when this record represents IAU 2000 data.
   */
  dPSIB?: number;

  /**
   * The estimated uncertainty/error in the dPSI value in milliseconds of arc.
   */
  dPSIUnc?: number;

  /**
   * The Bulletin A celestial pole offset along x-axis with respect to the IAU 2000A
   * Theory of Precession and Nutation, measured in milliseconds of arc. Note: dX is
   * not used when this record represents IAU 1980 data.
   */
  dX?: number;

  /**
   * The Bulletin B celestial pole offset along the X-axis with respect to the IAU
   * 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note:
   * dXB is not used when this record represents IAU 1980 data.
   */
  dXB?: number;

  /**
   * The estimated uncertainty/error in the Bulletin A dX value, in milliseconds of
   * arc.
   */
  dXUnc?: number;

  /**
   * The Bulletin A celestial pole offset along y-axis with respect to the IAU 2000A
   * Theory of Precession and Nutation, measured in milliseconds of arc. Note: dY is
   * not used when this record represents IAU 1980 data.
   */
  dY?: number;

  /**
   * The Bulletin B celestial pole offset along the Y-axis with respect to the IAU
   * 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note:
   * dYB is not used when this record represents IAU 1980 data.
   */
  dYB?: number;

  /**
   * The estimated uncertainty/error in the Bulletin A dY value, in milliseconds of
   * arc.
   */
  dYUnc?: number;

  /**
   * Bulletin A length of day or LOD in milliseconds. Universal time (UT1) is the
   * time of the earth clock, which performs one revolution in about 24h. It is
   * practically proportional to the sidereal time. The excess revolution time is
   * called length of day (LOD).
   */
  lod?: number;

  /**
   * The estimated uncertainty/error in the lod value in seconds.
   */
  lodUnc?: number;

  /**
   * Flag indicating Issued (I), or Predicted (P) for this record's nutation values
   * (dPSI and dEpsilon).
   */
  nutationState?: 'I' | 'P';

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Flag indicating Issued (I), or Predicted (P) for this record's polar motion
   * values.
   */
  polarMotionState?: 'I' | 'P';

  /**
   * The Bulletin A X coordinate value of earth polar motion at eopDate. Polar motion
   * of the Earth is the motion of the Earth's rotational axis relative to its crust.
   * This is measured with respect to a reference frame in which the solid Earth is
   * fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame).
   * Measured in arc seconds.
   */
  polarMotionX?: number;

  /**
   * Bulletin B X coordinate value of earth polar motion at eopDate. Polar motion of
   * the Earth is the motion of the Earth's rotational axis relative to its crust.
   * This is measured with respect to a reference frame in which the solid Earth is
   * fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame).
   * Measured in arc seconds.
   */
  polarMotionXB?: number;

  /**
   * Estimated uncertainty/error in polarMotionX value in arc seconds.
   */
  polarMotionXUnc?: number;

  /**
   * The Bulletin A Y coordinate value of earth polar motion at eopDate. Polar motion
   * of the Earth is the motion of the Earth's rotational axis relative to its crust.
   * This is measured with respect to a reference frame in which the solid Earth is
   * fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame).
   * Measured in arc seconds.
   */
  polarMotionY?: number;

  /**
   * Bulletin B Y coordinate value of earth polar motion at eopDate. Polar motion of
   * the Earth is the motion of the Earth's rotational axis relative to its crust.
   * This is measured with respect to a reference frame in which the solid Earth is
   * fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame).
   * Measured in arc seconds.
   */
  polarMotionYB?: number;

  /**
   * Estimated uncertainty/error in polarMotionY value in arc seconds.
   */
  polarMotionYUnc?: number;

  /**
   * The IAU Theory of Precession and Theory of Nutation applied to the data in this
   * record. IAU1980 records employ the IAU 1976 Theory of Precession and IAU 1980
   * Theory of Nutation, and IAU2000 records employ the IAU 2000A Theory of
   * Precession and Nutation.
   */
  precessionNutationStd?: string;

  /**
   * Optional URI location in the document repository of the raw file parsed by the
   * system to produce this record. To download the raw file, prepend
   * https://udl-hostname/scs/download?id= to this value.
   */
  rawFileURI?: string;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;

  /**
   * The difference between the Bulletin A UT1 and UTC time scales as of eopDate in
   * seconds.
   */
  ut1UTC?: number;

  /**
   * The Bulletin B difference between the UT1 and UTC time scales as of eopDate in
   * seconds.
   */
  ut1UTCB?: number;

  /**
   * Flag indicating Issued (I), or Predicted (P) for this record''s Bulletin A
   * UT1-UTC values.
   */
  ut1UTCState?: 'I' | 'P';

  /**
   * The estimated uncertainty/error in the ut1UTC value in seconds.
   */
  ut1UTCUnc?: number;
}

/**
 * An ephemeris record is a position and velocity vector identifying the location
 * and trajectory of an on-orbit object at a specified time. Ephemeris points,
 * including covariance, are in kilometer and second based units in a user
 * specified reference frame, with ECI J2K being preferred. The EphemerisSet ID
 * (esId) links all points associated with an ephemeris set. The 'EphemerisSet'
 * record contains details of the underlying data and propagation models used in
 * the generation of the ephemeris. Ephemeris points must be retrieved by
 * specifying the parent EphemerisSet ID (esId).
 */
export interface EphemerisFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Time associated with the Ephemeris Point, in ISO8601 UTC format.
   */
  ts: string;

  /**
   * Cartesian X position of target, in km, in the specified EphemerisSet
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  xpos: number;

  /**
   * Cartesian X velocity of target, in km/sec, in the specified EphemerisSet
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  xvel: number;

  /**
   * Cartesian Y position of target, in km, in the specified EphemerisSet
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  ypos: number;

  /**
   * Cartesian Y velocity of target, in km/sec, in the specified EphemerisSet
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  yvel: number;

  /**
   * Cartesian Z position of target, in km, in the specified EphemerisSet
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  zpos: number;

  /**
   * Cartesian Z velocity of target, in km/sec, in the specified EphemerisSet
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  zvel: number;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Covariance matrix, in kilometer and second based units, in the specified
   * Ephemeris Set covReferenceFrame. If the covReferenceFrame from the EphemerisSet
   * table is null it is assumed to be J2000. The array values represent the lower
   * triangular half of the position-velocity covariance matrix. The size of the
   * covariance matrix is dynamic, depending on whether the covariance for position
   * only or position & velocity. The covariance elements are position dependent
   * within the array with values ordered as follows:
   *
   * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;y&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;y'&nbsp;z'&nbsp;&nbsp;
   *
   * x&nbsp;&nbsp;&nbsp;&nbsp;1
   *
   * y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
   *
   * z&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;6
   *
   * x'&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;10
   *
   * y'&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
   *
   * z'&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;
   * 21
   *
   * The array containing the covariance matrix elements will be of length 6 for
   * position only covariance, or length 21 for position-velocity covariance. The cov
   * array should contain only the lower left triangle values from top left down to
   * bottom right, in order.
   */
  cov?: Array<number>;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Unique identifier of the parent EphemerisSet, auto-generated by the system. The
   * esId (ephemerisSet id) is used to identify all individual ephemeris states
   * associated with a parent ephemerisSet.
   */
  esId?: string;

  /**
   * Unique identifier of the on-orbit satellite object.
   */
  idOnOrbit?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * Optional identifier provided by ephemeris source to indicate the target object
   * of this ephemeris. This may be an internal identifier and not necessarily map to
   * a valid satellite number.
   */
  origObjectId?: string;

  /**
   * Cartesian X acceleration of target, in km/sec^2, in the specified EphemerisSet
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  xaccel?: number;

  /**
   * Cartesian Y acceleration of target, in km/sec^2, in the specified EphemerisSet
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  yaccel?: number;

  /**
   * Cartesian Z acceleration of target, in km/sec^2, in the specified EphemerisSet
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  zaccel?: number;
}

/**
 * Casualty report and evacuation request. Used to report and request support to
 * evacuate friendly and enemy casualties.
 */
export interface EvacFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative
   * values south of equator).
   */
  pickupLat: number;

  /**
   * WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees
   * (negative values west of Prime Meridian).
   */
  pickupLon: number;

  /**
   * The request time, in ISO 8601 UTC format.
   */
  reqTime: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * The type of this medevac record (REQUEST, RESPONSE).
   */
  type: 'REQUEST' | 'RESPONSE';

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  casualtyInfo?: Array<EvacFull.CasualtyInfo>;

  /**
   * Radius of circular area about lat/lon point, in meters (1-sigma, if representing
   * error).
   */
  ce?: number;

  /**
   * The contact frequency, in Hz, of the agency or zone controller.
   */
  cntctFreq?: number;

  /**
   * Additional comments for the medevac mission.
   */
  comments?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  enemyData?: Array<EvacFull.EnemyData>;

  /**
   * Unique identifier of a weather report associated with this evacuation.
   */
  idWeatherReport?: string;

  /**
   * Height above lat/lon point, in meters (1-sigma, if representing linear error).
   */
  le?: number;

  /**
   * UUID identifying the medevac mission, which should remain the same on subsequent
   * posts related to the same medevac mission.
   */
  medevacId?: string;

  /**
   * Flag indicating whether the mission requires medical personnel.
   */
  medicReq?: boolean;

  /**
   * The operation type of the evacuation. (NOT SPECIFIED, AIR, GROUND, SURFACE).
   */
  missionType?: string;

  /**
   * Number of ambulatory personnel requiring evacuation.
   */
  numAmbulatory?: number;

  /**
   * The count of people requiring medevac.
   */
  numCasualties?: number;

  /**
   * Number of people Killed In Action.
   */
  numKIA?: number;

  /**
   * Number of littered personnel requiring evacuation.
   */
  numLitter?: number;

  /**
   * Number of people Wounded In Action.
   */
  numWIA?: number;

  /**
   * Amplifying data for the terrain describing important obstacles in or around the
   * zone.
   */
  obstaclesRemarks?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a
   * point height above ellipsoid, and negative values indicate a point height below
   * ellipsoid.
   */
  pickupAlt?: number;

  /**
   * The expected pickup time, in ISO 8601 UTC format.
   */
  pickupTime?: string;

  /**
   * Related document ids.
   */
  relatedDocs?: Array<EvacFull.RelatedDoc>;

  /**
   * The call sign of this medevac requestor.
   */
  reqCallSign?: string;

  /**
   * Externally provided Medevac request number (e.g. MED.1.223908).
   */
  reqNum?: string;

  /**
   * Short description of the terrain features of the pickup location (WOODS, TREES,
   * PLOWED FIELDS, FLAT, STANDING WATER, MARSH, URBAN BUILT-UP AREA, MOUNTAIN, HILL,
   * SAND TD, ROCKY, VALLEY, METAMORPHIC ICE, UNKNOWN TD, SEA, NO STATEMENT).
   */
  terrain?: string;

  /**
   * Amplifying data for the terrain describing any notable additional terrain
   * features.
   */
  terrainRemarks?: string;

  /**
   * The call sign of the zone controller.
   */
  zoneContrCallSign?: string;

  /**
   * Flag indicating that the pickup site is hot and hostiles are in the area.
   */
  zoneHot?: boolean;

  /**
   * The expected marker identifying the pickup site (SMOKE ZONE MARKING, FLARES,
   * MIRROR, GLIDE ANGLE INDICATOR LIGHT, LIGHT ZONE MARKING, PANELS, FIRE, LASER
   * DESIGNATOR, STROBE LIGHTS, VEHICLE LIGHTS, COLORED SMOKE, WHITE PHOSPHERUS,
   * INFRARED, ILLUMINATION, FRATRICIDE FENCE).
   */
  zoneMarking?: string;

  /**
   * Color used for the pickup site marking (RED, WHITE, BLUE, YELLOW, GREEN, ORANGE,
   * BLACK, PURPLE, BROWN, TAN, GRAY, SILVER, CAMOUFLAGE, OTHER COLOR).
   */
  zoneMarkingColor?: string;

  /**
   * The name of the zone.
   */
  zoneName?: string;

  /**
   * The pickup site security (UNKNOWN ZONESECURITY, NO ENEMY, POSSIBLE ENEMY, ENEMY
   * IN AREA USE CAUTION, ENEMY IN AREA ARMED ESCORT REQUIRED).
   */
  zoneSecurity?: string;
}

export namespace EvacFull {
  /**
   * Identity and medical information on the patient to be evacuated.
   */
  export interface CasualtyInfo {
    /**
     * The patient age, in years.
     */
    age?: number;

    /**
     * Allergy information.
     */
    allergy?: Array<CasualtyInfo.Allergy>;

    /**
     * The patient blood type (A POS, B POS, AB POS, O POS, A NEG, B NEG, AB NEG, O
     * NEG).
     */
    bloodType?: string;

    /**
     * The body part involved for the patient (HEAD, NECK, ABDOMEN, UPPER EXTREMITIES,
     * BACK, FACE, LOWER EXTREMITIES, FRONT, OBSTETRICAL GYNECOLOGICAL, OTHER BODY
     * PART).
     */
    bodyPart?: string;

    /**
     * Array of the WGS-84 latitude (-90 to 90, negative values south of the equator)
     * in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in
     * degrees, and altitude, in meters, of the burial location. This array must
     * contain a minimum of 2 elements (latitude and longitude), and may contain an
     * optional 3rd element (altitude).
     */
    burialLocation?: Array<number>;

    /**
     * The call sign of this patient.
     */
    callSign?: string;

    /**
     * Unique identifier for the patient care provider.
     */
    careProviderUrn?: string;

    /**
     * Optional casualty key.
     */
    casualtyKey?: string;

    /**
     * The type of medical issue resulting in the need to evacuate the patient (NON
     * BATTLE, CUT, BURN, SICK, FRACTURE, AMPUTATION, PERFORATION, NUCLEAR, EXHAUSTION,
     * BIOLOGICAL, CHEMICAL, SHOCK, PUNCTURE WOUND, OTHER CUT, WOUNDED IN ACTION,
     * DENIAL, COMBAT STRESS).
     */
    casualtyType?: string;

    /**
     * Array of the WGS-84 latitude (-90 to 90, negative values south of the equator)
     * in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in
     * degrees, and altitude, in meters, of the collection point. This array must
     * contain a minimum of 2 elements (latitude and longitude), and may contain an
     * optional 3rd element (altitude).
     */
    collectionPoint?: Array<number>;

    /**
     * Additional comments on the patient's casualty information.
     */
    comments?: string;

    /**
     * Health condition information.
     */
    condition?: Array<CasualtyInfo.Condition>;

    /**
     * The contamination specified for the patient (NONE, RADIATION, BIOLOGICAL,
     * CHEMICAL).
     */
    contamType?: string;

    /**
     * The patient's general medical state (SICK IN QUARTERS, RETURN TO DUTY, EVACUATE
     * WOUNDED, EVACUATE DECEASED, INTERRED).
     */
    disposition?: string;

    /**
     * The expected disposition of this patient (R T D, EVACUATE, EVACUATE TO FORWARD
     * SURGICAL TEAM, EVACUATE TO COMBAT SUPPORT HOSPITAL, EVACUATE TO AERO MEDICAL
     * STAGING FACILITY, EVACUATE TO SUSTAINING BASE MEDICAL TREATMENT FACILITY).
     */
    dispositionType?: string;

    /**
     * Medical condition causation information.
     */
    etiology?: Array<CasualtyInfo.Etiology>;

    /**
     * The required evacuation method for this patient (AIR, GROUND, NOT EVACUATED).
     */
    evacType?: string;

    /**
     * The patient sex (MALE, FEMALE).
     */
    gender?: string;

    /**
     * Health state information.
     */
    healthState?: Array<CasualtyInfo.HealthState>;

    /**
     * Injury specifics.
     */
    injury?: Array<CasualtyInfo.Injury>;

    /**
     * Last 4 characters of the patient social security code, or equivalent.
     */
    last4SSN?: string;

    /**
     * Medication specifics.
     */
    medication?: Array<CasualtyInfo.Medication>;

    /**
     * The patient common or legal name.
     */
    name?: string;

    /**
     * The country code indicating the citizenship of the patient.
     */
    nationality?: string;

    /**
     * The career field of this patient.
     */
    occSpeciality?: string;

    /**
     * The patient service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND
     * MILITARY, FRIEND CIVILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY,
     * HOSTILE CIVILIAN).
     */
    patientIdentity?: string;

    /**
     * The patient service status (US MILITARY, US CIVILIAN, NON US MILITARY, NON US
     * CIVILIAN, ENEMY POW).
     */
    patientStatus?: string;

    /**
     * The patient pay grade or rank designation (O-10, O-9, O-8, O-7, O-6, O-5, O-4,
     * O-3, O-2, O-1, CWO-5, CWO-4, CWO-2, CWO-1, E -9, E-8, E-7, E-6, E-5, E-4, E-3,
     * E-2, E-1, NONE, CIVILIAN).
     */
    payGrade?: string;

    /**
     * The priority of the medevac mission for this patient (URGENT, PRIORITY, ROUTINE,
     * URGENT SURGERY, CONVENIENCE).
     */
    priority?: string;

    /**
     * The method used to generate this medevac report (DEVICE, GROUND COMBAT
     * PERSONNEL, EVACUATION PERSONNEL, ECHELON1 PERSONNEL, ECHELON2 PERSONNEL).
     */
    reportGen?: string;

    /**
     * Datetime of the compiling of the patients casualty report, in ISO 8601 UTC
     * format.
     */
    reportTime?: string;

    /**
     * The patient branch of service (AIR FORCE, ARMY, NAVY, MARINES, CIV, CONTR,
     * UNKNOWN SERVICE).
     */
    service?: string;

    /**
     * Array specifying if any special equipment is need for each of the evacuation of
     * this patient (EXTRACTION EQUIPMENT, SEMI RIGID LITTER, BACKBOARD, CERVICAL
     * COLLAR ,JUNGLE PENETRATOR, OXYGEN, WHOLE BLOOD, VENTILATOR, HOIST, NONE).
     */
    specMedEquip?: Array<string>;

    /**
     * Treatment information.
     */
    treatment?: Array<CasualtyInfo.Treatment>;

    /**
     * Information obtained for vital signs.
     */
    vitalSignData?: Array<CasualtyInfo.VitalSignData>;
  }

  export namespace CasualtyInfo {
    /**
     * Allergy information.
     */
    export interface Allergy {
      /**
       * Additional comments on the patient's allergy information.
       */
      comments?: string;

      /**
       * Type of patient allergy (e.g. PENICILLIN, SULFA, OTHER).
       */
      type?: string;
    }

    /**
     * The group path from transmitter to receiver.
     */
    export interface Condition {
      /**
       * Body part location or body part referenced in condition. Intended as, but not
       * constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE
       * LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW
       * BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
       */
      bodyPart?: string;

      /**
       * Additional comments on the patient's condition.
       */
      comments?: string;

      /**
       * Datetime of the condition diagnosis in ISO 8601 UTC datetime format.
       */
      time?: string;

      /**
       * Health condition assessment. Intended as, but not constrained to, K07.1
       * Condition Type Enumeration (e.g. ACTIVITY HIGH, ACTIVITY LOW, ACTIVITY MEDIUM,
       * ACTIVITY NONE, AVPU ALERT, AVPU ALTERED MENTAL STATE, AVPU PAIN, AVPU
       * UNRESPONSIVE, etc.).
       */
      type?: string;
    }

    /**
     * Medical condition causation information.
     */
    export interface Etiology {
      /**
       * The body part or location affected from the etiology. Intended as, but not
       * constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE
       * LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW
       * BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
       */
      bodyPart?: string;

      /**
       * Additional comments on the patient's etiology information.
       */
      comments?: string;

      /**
       * Datetime of the discovery of the etiology state in ISO 8601 UTC format.
       */
      time?: string;

      /**
       * The cause or manner of causation of the medical condition. Intended as, but not
       * constrained to, K07.1 EtiologyType Enumeration (e.g. ASSAULT, BUILDING COLLAPSE,
       * BURN CHEMICAL, BURN ELECTRICAL, BURN, BURN HOT LIQUID, BURN RADIATION, BURN
       * THERMAL, etc.).
       */
      type?: string;
    }

    /**
     * Health state information.
     */
    export interface HealthState {
      /**
       * Medical color code used to quickly identify various medical state (e.g. AMBER,
       * BLACK, BLUE, GRAY, NORMAL, RED).
       */
      healthStateCode?: string;

      /**
       * Medical confidence factor.
       */
      medConfFactor?: number;

      /**
       * Datetime of the health state diagnosis in ISO 8601 UTC datetime format.
       */
      time?: string;

      /**
       * Generalized state of health type (BIOLOGICAL, CHEMICAL, COGNITIVE, HYDRATION,
       * LIFE SIGN, RADIATION, SHOCK, THERMAL).
       */
      type?: string;
    }

    /**
     * Injury specifics.
     */
    export interface Injury {
      /**
       * Body part location of the injury. Intended as, but not constrained to, K07.1
       * Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT
       * BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW
       * FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
       */
      bodyPart?: string;

      /**
       * Additional comments on the patient's injury information.
       */
      comments?: string;

      /**
       * The time of the injury, in ISO 8601 UTC format.
       */
      time?: string;

      /**
       * Classification of the injury type (ABRASION, AMPUTATION IT, AVULATION,
       * BALLISTIC, BLAST WAVE, BURN 1ST DEGREE, BURN 2ND DEGREE, BURN 3RD DEGREE, BURN
       * INHALATION, BURN LOWER AIRWAY, CHEST FLAIL, CHEST OPEN, DEGLOVING, ECCHYMOSIS,
       * FRACTURE CLOSED, FRACTURE CREPITUS, FRACTURE IT, FRACTURE OPEN, HEMATOMA,
       * IRREGULAR CONSISTENCY, IRREGULAR CONSISTENCY RIDGED, IRREGULAR CONSISTENCY
       * SWOLLEN, IRREGULAR CONSISTENCY SWOLLEN DISTENDED, IRREGULAR CONSISTENCY TENDER,
       * IRREGULAR POSITION, IRREGULAR SHAPE, IRREGULAR SHAPE MISSHAPED, IRREGULAR SHAPE
       * NON SYMMETRICAL, LACERATION, NEUROVASCULAR COMPROMISE, NEUROVASCULAR INTACT,
       * PUNCTURE, SEAT BELT SIGN, STAB, TIC TIM).
       */
      type?: string;
    }

    /**
     * Medication specifics.
     */
    export interface Medication {
      /**
       * Route of medication delivery (e.g. INJECTION, ORAL, etc.).
       */
      adminRoute?: string;

      /**
       * Body part location or body part referenced for medication. Intended as, but not
       * constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE
       * LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW
       * BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
       */
      bodyPart?: string;

      /**
       * Additional comments on the patient's medication information.
       */
      comments?: string;

      /**
       * Quantity of medicine or drug administered or recommended to be taken at a
       * particular time.
       */
      dose?: string;

      /**
       * The time that the medication was administered in ISO 8601 UTC format.
       */
      time?: string;

      /**
       * The type of medication administered. Intended as, but not constrained to, K07.1
       * Medication Enumeration (CEFOTETAN, ABRASION, ABX, AMOXILOXACIN, ANALGESIC,
       * COLLOID, CRYOPECIPITATES, CRYSTALLOID, EPINEPHRINE, ERTAPENEM, FENTANYL,
       * HEXTEND, LACTATED RINGERS, MOBIC, MORPHINE, NARCOTIC, NS, PENICILLIN, PLASMA,
       * PLATELETS, PRBC, TYLENOL, WHOLE BLOOD MT).
       */
      type?: string;
    }

    /**
     * Treatment information.
     */
    export interface Treatment {
      /**
       * Body part location or body part treated or to be treated. Intended as, but not
       * constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE
       * LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW
       * BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
       */
      bodyPart?: string;

      /**
       * Additional comments on the patient's treatment information.
       */
      comments?: string;

      /**
       * Datetime of the treatment in ISO 8601 UTC format.
       */
      time?: string;

      /**
       * Type of treatment administered or to be administered. Intended as, but not
       * constrained to, K07.1 Treatment Type Enumeration (e.g. AIRWAY ADJUNCT, AIRWAY
       * ASSISTED VENTILATION, AIRWAY COMBI TUBE USED, AIRWAY ET NT, AIRWAY INTUBATED,
       * AIRWAY NPA OPA APPLIED, AIRWAY PATIENT, AIRWAY POSITIONAL, AIRWAY SURGICAL CRIC,
       * BREATHING CHEST SEAL, BREATHING CHEST TUBE, etc.).
       */
      type?: string;
    }

    /**
     * Information obtained for vital signs.
     */
    export interface VitalSignData {
      /**
       * Medical confidence factor.
       */
      medConfFactor?: number;

      /**
       * Datetime of the vital sign measurement in ISO 8601 UTC datetime format.
       */
      time?: string;

      /**
       * Patient vital sign measured (e.g. HEART RATE, PULSE RATE, RESPIRATION RATE,
       * TEMPERATURE CORE, etc.).
       */
      vitalSign?: string;

      /**
       * Vital sign value 1. The content of this field is dependent on the type of vital
       * sign being measured (see the vitalSign field).
       */
      vitalSign1?: number;

      /**
       * Vital sign value 2. The content of this field is dependent on the type of vital
       * sign being measured (see the vitalSign field).
       */
      vitalSign2?: number;
    }
  }

  /**
   * Data defining any enemy intelligence reported by the requestor.
   */
  export interface EnemyData {
    /**
     * Directions to known enemies in the operation area (NORTH, NORTHEAST, EAST,
     * SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST, SURROUNDED).
     */
    dirToEnemy?: string;

    /**
     * Comments provided by friendlies about the evac zone.
     */
    friendliesRemarks?: string;

    /**
     * Hot Landing Zone remarks.
     */
    hlzRemarks?: string;

    /**
     * The type of hostile fire received (SMALL ARMS, MORTAR, ARTILLERY, ROCKETS).
     */
    hostileFireType?: string;
  }

  /**
   * Related document ids.
   */
  export interface RelatedDoc {
    /**
     * List of data sources related to this document.
     */
    dataSourceRefs?: Array<RelatedDoc.DataSourceRef>;

    /**
     * The document id of the related document.
     */
    documentId?: string;
  }

  export namespace RelatedDoc {
    /**
     * List of data sources related to this document.
     */
    export interface DataSourceRef {
      /**
       * Data source id.
       */
      dataSourceId?: string;

      /**
       * end position.
       */
      endPosition?: string;

      /**
       * paragraph number.
       */
      paragraphNumber?: string;

      /**
       * sentence number.
       */
      sentenceNumber?: string;

      /**
       * start position.
       */
      startPosition?: string;
    }
  }
}

/**
 * Event Evolution is a unique service supporting the association of UDL records of
 * various data types to a common event or activity. The associations may be a one
 * time summary, aggregating sources of a past event, or of an ongoing activity
 * that evolves over a period of time.
 */
export interface EventEvolutionFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * User-provided unique identifier of this activity or event. This ID should remain
   * the same on subsequent updates in order to associate all records pertaining to
   * the activity or event.
   */
  eventId: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * The actual or estimated start time of the activity or event, in ISO 8601 UTC
   * format.
   */
  startTime: string;

  /**
   * Summary or description of the activity or event.
   */
  summary: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON
   * representation of the geometry/geography, of the image as projected on the
   * ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST
   * or PUT request that also specifies a valid 'area' or 'atext' field.
   */
  agjson?: string;

  /**
   * Number of dimensions of the geometry depicted by region.
   */
  andims?: number;

  /**
   * Optional geographical region or polygon (lat/lon pairs) of the area surrounding
   * the point of interest as projected on the ground.
   */
  area?: string;

  /**
   * Geographical spatial_ref_sys for region.
   */
  asrid?: number;

  /**
   * Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known
   * Text representation of the geometry/geography, of the image as projected on the
   * ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored
   * if included with a POST or PUT request that also specifies a valid 'area' field.
   */
  atext?: string;

  /**
   * Type of region as projected on the ground.
   */
  atype?: string;

  /**
   * The activity or event type associated with this record (e.g. BREAKUP, DIRECT
   * FIRE, IED, LAUNCH, PROTEST, etc.). For Significant Activities, recommended but
   * not constrained to, CAMEO.Manual.1.1b3 Chapter 6. Note that the evolution of an
   * event may incorporate records of various types, for example, a LAUNCH event may
   * evolve into a BREAKUP event.
   */
  category?: string;

  /**
   * The country code. This value is typically the ISO 3166 Alpha-2 two-character
   * country code, however it can also represent various consortiums that do not
   * appear in the ISO document. The code must correspond to an existing country in
   * the UDL’s country API. Call udl/country/{code} to get any associated FIPS code,
   * ISO Alpha-3 code, or alternate code values that exist for the specified country
   * code.
   */
  countryCode?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Optional description of the relationship between the records provided in the
   * srcTyps/srcIds and the activity or event.
   */
  dataDescription?: string;

  /**
   * The actual or estimated start time of the activity or event, in ISO 8601 UTC
   * format.
   */
  endTime?: string;

  /**
   * Administrative boundaries of the first sub-national level. Level 1 is simply the
   * largest demarcation under whatever demarcation criteria has been determined by
   * the governing body. For example this may be the state/province in which a
   * terrestrial event takes place, or with which the event is attributed for
   * non-localized or non-terrestrial activity.
   */
  geoAdminLevel1?: string;

  /**
   * Administrative boundaries of the second sub-national level. Level 2 is simply
   * the second largest demarcation under whatever demarcation criteria has been
   * determined by the governing body. For example this may be the city/district in
   * which a terrestrial event takes place, or with which the event is attributed for
   * non-localized or non-terrestrial activity.
   */
  geoAdminLevel2?: string;

  /**
   * Administrative boundaries of the third sub-national level. Level 3 is simply the
   * third largest demarcation under whatever demarcation criteria has been
   * determined by the governing body.
   */
  geoAdminLevel3?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Flag indicating that this record is for the purpose of redacting one or more
   * previously specified records from association with this activity or event. If
   * this flag is set then all records indicated in srcTyps/srcIds should be removed
   * from event association.
   */
  redact?: boolean;

  /**
   * Array of UUIDs of the UDL data records that are related to the determination of
   * this activity or event. See the associated 'srcTyps' array for the specific
   * types of data, positionally corresponding to the UUIDs in this array. The
   * 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps
   * array element for the data type of the UUID and use the appropriate API
   * operation to retrieve that object.
   */
  srcIds?: Array<string>;

  /**
   * Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE,
   * POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that
   * are related to this activity or event. See the associated 'srcIds' array for the
   * record UUIDs, positionally corresponding to the record types in this array. The
   * 'srcTyps' and 'srcIds' arrays must match in size.
   */
  srcTyps?: Array<string>;

  /**
   * The status of this activity or event. (ACTIVE, CONCLUDED, UNKNOWN).
   */
  status?: string;

  /**
   * Optional array of provider/source specific tags for this data, where each
   * element is no longer than 32 characters, used for implementing data owner
   * conditional access controls to restrict access to the data. Should be left null
   * by data providers unless conditional access controls are coordinated with the
   * UDL team.
   */
  tags?: Array<string>;

  /**
   * List of URLs to before/after images of this point of interest entity.
   */
  url?: Array<string>;
}

export interface FileData {
  id?: string;

  attributes?: FileData.Attributes;

  contentAction?: 'UPDATE' | 'COPY' | 'MOVE';

  targetName?: string;

  targetPath?: string;

  type?: 'file' | 'folder' | 'summary';
}

export namespace FileData {
  export interface Attributes {
    id?: string;

    classification?: string;

    classificationMarking?: string;

    createdBy?: string;

    createdDate?: string;

    description?: string;

    docTitle?: string;

    docType?: string;

    doi?: Array<string>;

    ellipseLat?: number;

    ellipseLon?: number;

    fileName?: string;

    intrinsicTitle?: string;

    keywords?: string;

    mediaTitle?: string;

    metaInfo?: string;

    milgrid?: string;

    milgridLat?: number;

    milgridLon?: number;

    modifiedBy?: string;

    modifiedDate?: string;

    name?: string;

    path?: string;

    read?: string;

    searchable?: boolean;

    searchAfter?: string;

    serialNumber?: string;

    size?: number;

    tags?: Array<string>;

    write?: string;
  }
}

/**
 * Flight Plan contains data specifying the details of an intended flight including
 * schedule and expected route.
 */
export interface FlightPlanFull {
  /**
   * The airfield identifier of the arrival location, International Civil Aviation
   * Organization (ICAO) code preferred.
   */
  arrAirfield: string;

  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * The airfield identifier of the departure location, International Civil Aviation
   * Organization (ICAO) code preferred.
   */
  depAirfield: string;

  /**
   * The generation time of this flight plan in ISO 8601 UTC format, with millisecond
   * precision.
   */
  genTS: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system if not provided on
   * create operations.
   */
  id?: string;

  /**
   * The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15
   * EAGLE, KC-130 HERCULES, etc.) of the aircraft associated with this flight plan.
   * Intended as, but not constrained to, MIL-STD-6016 environment dependent specific
   * type designations.
   */
  aircraftMDS?: string;

  /**
   * Collection of air refueling events occurring on this flight.
   */
  airRefuelEvents?: Array<FlightPlanFull.AirRefuelEvent>;

  /**
   * Air Mobility Command (AMC) mission identifier according to Mobility Air Forces
   * (MAF) encode/decode procedures.
   */
  amcMissionId?: string;

  /**
   * Fuel burned from the initial approach point to landing in pounds.
   */
  appLandingFuel?: number;

  /**
   * The first designated alternate arrival airfield, International Civil Aviation
   * Organization (ICAO) code preferred.
   */
  arrAlternate1?: string;

  /**
   * Fuel required to fly to alternate landing site 1 and land in pounds.
   */
  arrAlternate1Fuel?: number;

  /**
   * The second designated alternate arrival airfield, International Civil Aviation
   * Organization (ICAO) code preferred.
   */
  arrAlternate2?: string;

  /**
   * Fuel required to fly to alternate landing site 2 and land in pounds.
   */
  arrAlternate2Fuel?: number;

  /**
   * Additional fuel burned at landing/missed approach for icing during arrival in
   * pounds.
   */
  arrIceFuel?: number;

  /**
   * The arrival runway for this flight.
   */
  arrRunway?: string;

  /**
   * Array of Air Traffic Control (ATC) addresses.
   */
  atcAddresses?: Array<string>;

  /**
   * Average temperature deviation of the primary, divert, and alternate path for the
   * route between first Top of Climb and last Top of Descent in degrees Celsius.
   */
  avgTempDev?: number;

  /**
   * Fuel planned to be burned during the flight in pounds.
   */
  burnedFuel?: number;

  /**
   * The call sign assigned to the aircraft for this flight plan.
   */
  callSign?: string;

  /**
   * Remarks about the planned cargo associated with this flight plan.
   */
  cargoRemark?: string;

  /**
   * Fuel required from brake release to Top of Climb in pounds.
   */
  climbFuel?: number;

  /**
   * Time required from brake release to Top of Climb expressed as HH:MM.
   */
  climbTime?: string;

  /**
   * The amount of contingency fuel in pounds.
   */
  contingencyFuel?: number;

  /**
   * Array of country codes for the countries overflown during this flight in ISO
   * 3166-1 Alpha-2 format.
   */
  countryCodes?: Array<string>;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * The designated alternate departure airfield, International Civil Aviation
   * Organization (ICAO) code preferred.
   */
  depAlternate?: string;

  /**
   * The depressurization fuel required to fly from the Equal Time Point to the Last
   * Suitable/First Suitable airfield at depressurization altitude in pounds.
   */
  depressFuel?: number;

  /**
   * The departure runway for this flight.
   */
  depRunway?: string;

  /**
   * The percent degrade due to drag for this aircraft.
   */
  dragIndex?: number;

  /**
   * Additional fuel burned at landing/missed approach for an early descent in
   * pounds.
   */
  earlyDescentFuel?: number;

  /**
   * Total endurance time based on the fuel on board expressed as HH:MM.
   */
  enduranceTime?: string;

  /**
   * Fuel required to fly from Top of Climb to Top of Descent in pounds.
   */
  enrouteFuel?: number;

  /**
   * Time required to fly from Top of Climb to Top of Descent expressed as HH:MM.
   */
  enrouteTime?: string;

  /**
   * The list of equipment on the aircraft as defined in the Flight Information
   * Publications (FLIP) General Planning (GP) manual.
   */
  equipment?: string;

  /**
   * The estimated time of departure for the aircraft, in ISO 8601 UTC format, with
   * millisecond precision.
   */
  estDepTime?: string;

  /**
   * Array of Extended Operations (ETOPS) adequate landing airfields that are within
   * the mission region.
   */
  etopsAirfields?: Array<string>;

  /**
   * Array of Extended Operations (ETOPS) alternate suitable landing airfields that
   * are within the mission region.
   */
  etopsAltAirfields?: Array<string>;

  /**
   * The Extended Operations (ETOPS) rating used to calculate this flight plan.
   */
  etopsRating?: string;

  /**
   * The Extended Operations (ETOPS) validity window for the alternate airfield.
   */
  etopsValWindow?: string;

  /**
   * The source ID of the flight plan from the generating system.
   */
  externalId?: string;

  /**
   * Collection of messages associated with this flight plan indicating the severity,
   * the point where the message was generated, the path (Primary, Alternate, etc.),
   * and the text of the message.
   */
  flightPlanMessages?: Array<FlightPlanFull.FlightPlanMessage>;

  /**
   * Collection of point groups generated for this flight plan. Groups include point
   * sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point
   * (ETP).
   */
  flightPlanPointGroups?: Array<FlightPlanFull.FlightPlanPointGroup>;

  /**
   * Collection of waypoints associated with this flight plan.
   */
  flightPlanWaypoints?: Array<FlightPlanFull.FlightPlanWaypoint>;

  /**
   * The flight rules this flight plan is being filed under.
   */
  flightRules?: string;

  /**
   * The type of flight (MILITARY, CIVILIAN, etc).
   */
  flightType?: string;

  /**
   * The fuel degrade percentage used for this mission.
   */
  fuelDegrade?: number;

  /**
   * The GPS Receiver Autonomous Integrity Monitoring (RAIM) message. A RAIM system
   * assesses the integrity of the GPS signals. This system predicts outages for a
   * specified geographical area. These predictions are based on the location, path,
   * and scheduled GPS satellite outages.
   */
  gpsRAIM?: string;

  /**
   * Additional fuel burned at Top of Climb in pounds.
   */
  holdDownFuel?: number;

  /**
   * Additional fuel burned at the destination for holding in pounds.
   */
  holdFuel?: number;

  /**
   * Additional time for holding at the destination expressed as HH:MM.
   */
  holdTime?: string;

  /**
   * The UDL unique identifier of the aircraft associated with this flight plan.
   */
  idAircraft?: string;

  /**
   * The UDL unique identifier of the arrival airfield associated with this flight
   * plan.
   */
  idArrAirfield?: string;

  /**
   * The UDL unique identifier of the departure airfield associated with this flight
   * plan.
   */
  idDepAirfield?: string;

  /**
   * The amount of identified extra fuel carried and not available in the burn plan
   * in pounds.
   */
  identExtraFuel?: number;

  /**
   * The UDL unique identifier of the aircraft sortie associated with this flight
   * plan.
   */
  idSortie?: string;

  /**
   * A character string representation of the initial filed cruise speed for this
   * flight (prepended values of K, N, and M represent kilometers per hour, knots,
   * and Mach, respectively).
   */
  initialCruiseSpeed?: string;

  /**
   * A character string representation of the initial filed altitude level for this
   * flight (prepended values of F, S, A, and M represent flight level in hundreds of
   * feet, standard metric level in tens of meters, altitude in hundreds of feet, and
   * altitude in tens of meters, respectively).
   */
  initialFlightLevel?: string;

  /**
   * Fuel planned to be remaining on the airplane at landing in pounds.
   */
  landingFuel?: number;

  /**
   * The leg number of this flight plan.
   */
  legNum?: number;

  /**
   * The minimum fuel on board required to divert in pounds.
   */
  minDivertFuel?: number;

  /**
   * The mission index value for this mission. The mission index is the ratio of
   * time-related cost of aircraft operation to the cost of fuel.
   */
  msnIndex?: number;

  /**
   * Additional remarks for air traffic control for this flight.
   */
  notes?: string;

  /**
   * The number of aircraft flying this flight plan.
   */
  numAircraft?: number;

  /**
   * Additional fuel burned at Top of Descent for the operational condition in
   * pounds.
   */
  opConditionFuel?: number;

  /**
   * Operating weight of the aircraft in pounds.
   */
  opWeight?: number;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * Air Traffic Control address filing the flight plan.
   */
  originator?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Remarks from the planners concerning this flight plan.
   */
  plannerRemark?: string;

  /**
   * Total of all fuel required to complete the flight in pounds, including fuel to
   * be dispensed on a refueling mission.
   */
  rampFuel?: number;

  /**
   * Total fuel remaining at alternate landing site 1 in pounds.
   */
  remAlternate1Fuel?: number;

  /**
   * Total fuel remaining at alternate landing site 2 in pounds.
   */
  remAlternate2Fuel?: number;

  /**
   * The amount of reserve fuel in pounds.
   */
  reserveFuel?: number;

  /**
   * The 1801 fileable route of flight string for this flight. The route of flight
   * string contains route designators, significant points, change of speed/altitude,
   * change of flight rules, and cruise climbs.
   */
  routeString?: string;

  /**
   * Name of the planned Standard Instrument Departure (SID) procedure.
   */
  sid?: string;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * Name of the planned Standard Terminal Arrival (STAR) procedure.
   */
  star?: string;

  /**
   * The tail number of the aircraft associated with this flight plan.
   */
  tailNumber?: string;

  /**
   * Fuel at takeoff, which is calculated as the ramp fuel minus the taxi fuel in
   * pounds.
   */
  takeoffFuel?: number;

  /**
   * Fuel required to start engines and taxi to the end of the runway in pounds.
   */
  taxiFuel?: number;

  /**
   * Additional fuel burned at Top of Descent for thunderstorm avoidance in pounds.
   */
  thunderAvoidFuel?: number;

  /**
   * Fuel remaining at Top of Climb in pounds.
   */
  tocFuel?: number;

  /**
   * Additional fuel burned at Top of Climb for icing in pounds.
   */
  tocIceFuel?: number;

  /**
   * Fuel remaining at Top of Descent in pounds.
   */
  todFuel?: number;

  /**
   * Additional fuel burned at Top of Descent for icing in pounds.
   */
  todIceFuel?: number;

  /**
   * The amount of unidentified extra fuel required to get to min landing in pounds.
   */
  unidentExtraFuel?: number;

  /**
   * The amount of unusable fuel in pounds.
   */
  unusableFuel?: number;

  /**
   * The wake turbulence category for this flight. The categories are assigned by the
   * International Civil Aviation Organization (ICAO) and are based on maximum
   * certified takeoff mass for the purpose of separating aircraft in flight due to
   * wake turbulence. Valid values include LIGHT, MEDIUM, LARGE, HEAVY, and SUPER.
   */
  wakeTurbCat?: string;

  /**
   * Wind factor for the first half of the route. This is the average wind factor
   * from first Top of Climb to the mid-time of the entire route in knots. A positive
   * value indicates a headwind, while a negative value indicates a tailwind.
   */
  windFac1?: number;

  /**
   * Wind factor for the second half of the route. This is the average wind factor
   * from the mid-time of the entire route to last Top of Descent in knots. A
   * positive value indicates a headwind, while a negative value indicates a
   * tailwind.
   */
  windFac2?: number;

  /**
   * Average wind factor from Top of Climb to Top of Descent in knots. A positive
   * value indicates a headwind, while a negative value indicates a tailwind.
   */
  windFacAvg?: number;

  /**
   * The date and time the weather valid period ends in ISO 8601 UTC format, with
   * millisecond precision.
   */
  wxValidEnd?: string;

  /**
   * The date and time the weather valid period begins in ISO 8601 UTC format, with
   * millisecond precision.
   */
  wxValidStart?: string;
}

export namespace FlightPlanFull {
  /**
   * Collection of air refueling events occurring on this flight.
   */
  export interface AirRefuelEvent {
    /**
     * Additional degrade for air refueling, cumulative with fuelDegrade field percent.
     */
    arDegrade?: number;

    /**
     * Fuel onloaded (use positive numbers) or fuel offloaded (use negative numbers) in
     * pounds.
     */
    arExchangedFuel?: number;

    /**
     * The number of this air refueling event within the flight plan.
     */
    arNum?: number;

    /**
     * Fuel required to fly from air refueling exit point to air refueling divert
     * alternate airfield in pounds.
     */
    divertFuel?: number;

    /**
     * Fuel remaining at the air refueling exit in pounds.
     */
    exitFuel?: number;
  }

  /**
   * Collection of messages associated with this flight plan indicating the severity,
   * the point where the message was generated, the path (Primary, Alternate, etc.),
   * and the text of the message.
   */
  export interface FlightPlanMessage {
    /**
     * The text of the message.
     */
    msgText?: string;

    /**
     * The flight path that generated the message (PRIMARY, ALTERNATE, etc.).
     */
    routePath?: string;

    /**
     * The severity of the message.
     */
    severity?: string;

    /**
     * The waypoint number for which the message was generated, or enter "PLAN" for a
     * message impacting the entire route.
     */
    wpNum?: string;
  }

  /**
   * Collection of point groups generated for this flight plan. Groups include point
   * sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point
   * (ETP).
   */
  export interface FlightPlanPointGroup {
    /**
     * Average fuel flow at which the fuel was calculated in pounds per hour.
     */
    avgFuelFlow?: number;

    /**
     * Average wind factor from the Extended Operations (ETOPS) point to the recovery
     * airfield in knots.
     */
    etopsAvgWindFactor?: number;

    /**
     * Distance from the Extended Operations (ETOPS) point to the recovery airfield in
     * nautical miles.
     */
    etopsDistance?: number;

    /**
     * Fuel required to fly from the Extended Operations (ETOPS) point to the recovery
     * airfield in pounds.
     */
    etopsReqFuel?: number;

    /**
     * Temperature deviation from the Extended Operations (ETOPS) point to the recovery
     * airfield in degrees Celsius.
     */
    etopsTempDev?: number;

    /**
     * Time to fly from the Extended Operations (ETOPS) point to the recovery airfield
     * expressed in HH:MM format.
     */
    etopsTime?: string;

    /**
     * Array of point data for this Point Group.
     */
    flightPlanPoints?: Array<FlightPlanPointGroup.FlightPlanPoint>;

    /**
     * Total time from takeoff when the point is reached expressed in HH:MM format.
     */
    fromTakeoffTime?: string;

    /**
     * Average wind factor from the Equal Time Point (ETP) to the first suitable
     * airfield in knots.
     */
    fsafAvgWindFactor?: number;

    /**
     * Distance from the Equal Time Point (ETP) to the first suitable airfield in
     * nautical miles.
     */
    fsafDistance?: number;

    /**
     * Fuel required to fly from the Equal Time Point (ETP) to the first suitable
     * airfield in pounds.
     */
    fsafReqFuel?: number;

    /**
     * Temperature deviation from the Equal Time Point (ETP) to the first suitable
     * airfield in degrees Celsius.
     */
    fsafTempDev?: number;

    /**
     * Time to fly from the Equal Time Point (ETP) to the first suitable airfield
     * expressed in HH:MM format.
     */
    fsafTime?: string;

    /**
     * Flight level of the point at which the fuel was calculated in feet.
     */
    fuelCalcAlt?: number;

    /**
     * True airspeed at which the fuel was calculated in knots.
     */
    fuelCalcSpd?: number;

    /**
     * Average wind factor from the Equal Time Point (ETP) to the last suitable
     * airfield in knots.
     */
    lsafAvgWindFactor?: number;

    /**
     * Distance from the Equal Time Point (ETP) to the last suitable airfield in
     * nautical miles.
     */
    lsafDistance?: number;

    /**
     * Name of the last suitable airfield, International Civil Aviation Organization
     * (ICAO) code preferred.
     */
    lsafName?: string;

    /**
     * Fuel required to fly from the Equal Time Point (ETP) to the last suitable
     * airfield in pounds.
     */
    lsafReqFuel?: number;

    /**
     * Temperature deviation from the Equal Time Point (ETP) to the last suitable
     * airfield in degrees Celsius.
     */
    lsafTempDev?: number;

    /**
     * Time to fly from the Equal Time Point (ETP) to the last suitable airfield
     * expressed in HH:MM format.
     */
    lsafTime?: string;

    /**
     * Amount of planned fuel on board when the point is reached in pounds.
     */
    plannedFuel?: number;

    /**
     * Name of the point group, usually Extended Operations (ETOPS), Critical Fuel
     * Point, and Equal Time Point (ETP) sections.
     */
    pointGroupName?: string;

    /**
     * Specifies which Point Group case requires the most fuel.
     */
    worstFuelCase?: string;
  }

  export namespace FlightPlanPointGroup {
    /**
     * Array of point data for this Point Group.
     */
    export interface FlightPlanPoint {
      /**
       * Estimated Time of Arrival (ETA) at this point in ISO 8601 UTC format, with
       * millisecond precision.
       */
      fppEta?: string;

      /**
       * WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative
       * values south of equator).
       */
      fppLat?: number;

      /**
       * WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative
       * values west of Prime Meridian).
       */
      fppLon?: number;

      /**
       * Fuel required at this point to execute an Equal Time Point (ETP) or Extended
       * Operations (ETOPS) plan in pounds.
       */
      fppReqFuel?: number;

      /**
       * Name of this point.
       */
      pointName?: string;
    }
  }

  /**
   * Collection of waypoints associated with this flight plan.
   */
  export interface FlightPlanWaypoint {
    /**
     * Points are designated by type as either a comment point or a waypoint. A comment
     * point conveys important information about the point for pilots but is not
     * entered into a flight management system. A waypoint is a point that is entered
     * into a flight management system and/or filed with Air Traffic Control.
     */
    type: string;

    /**
     * Name of the point. The name of a comment point identifies important information
     * about that point, e.g. Top of Climb. The name of a waypoint identifies the
     * location of that point.
     */
    waypointName: string;

    /**
     * The air-to-air Tactical Air Navigation (TACAN) channels used by the
     * receiver/tanker during air refueling.
     */
    aaTacanChannel?: string;

    /**
     * The air distance of this leg in nautical miles.
     */
    airDistance?: number;

    /**
     * The flight path flown for this leg.
     */
    airway?: string;

    /**
     * Altitude of a level, point, or object measured in feet above mean sea level.
     */
    alt?: number;

    /**
     * The ID of the air refueling track/anchor or fixed track.
     */
    arId?: string;

    /**
     * Point identifying an air refueling track/anchor or fixed track.
     */
    arpt?: string;

    /**
     * Actual Time of Arrival (ATA) at this waypoint in ISO 8601 UTC format, with
     * millisecond precision.
     */
    ata?: string;

    /**
     * The average calibrated airspeed (CAS) for this leg in knots.
     */
    avgCalAirspeed?: number;

    /**
     * The average drift angle for this leg in degrees from true north.
     */
    avgDriftAng?: number;

    /**
     * The average ground speed for this leg in knots.
     */
    avgGroundSpeed?: number;

    /**
     * The average true airspeed (TAS) for this leg in knots.
     */
    avgTrueAirspeed?: number;

    /**
     * The average wind direction for this leg in degrees from true north.
     */
    avgWindDir?: number;

    /**
     * The average wind speed for this leg in knots.
     */
    avgWindSpeed?: number;

    /**
     * The day low level altitude in feet above sea level for the leg ending at this
     * waypoint.
     */
    dayLowAlt?: number;

    /**
     * Estimated Time of Arrival (ETA) at this waypoint in ISO 8601 UTC format, with
     * millisecond precision.
     */
    eta?: string;

    /**
     * The amount of fuel onloaded or offloaded at this waypoint in pounds (negative
     * value for offload).
     */
    exchangedFuel?: number;

    /**
     * The leg fuel flow in pounds per hour.
     */
    fuelFlow?: number;

    /**
     * The icing intensity classification for this flight (LIGHT, MODERATE, etc).
     */
    iceCat?: string;

    /**
     * WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative
     * values south of equator).
     */
    lat?: number;

    /**
     * The planned alternate leg based on user-defined constraints, International Civil
     * Aviation Organization (ICAO) code preferred.
     */
    legAlternate?: string;

    /**
     * The percent degrade due to drag for this aircraft for this leg.
     */
    legDragIndex?: number;

    /**
     * The fuel degrade percentage used for this leg.
     */
    legFuelDegrade?: number;

    /**
     * The average Mach speed for this leg.
     */
    legMach?: number;

    /**
     * The mission index value for this leg. The mission index is the ratio of
     * time-related cost of aircraft operation to the cost of fuel.
     */
    legMsnIndex?: number;

    /**
     * The wind factor for this leg in knots. A positive value indicates a headwind,
     * while a negative value indicates a tailwind.
     */
    legWindFac?: number;

    /**
     * WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative
     * values west of Prime Meridian).
     */
    lon?: number;

    /**
     * The magnetic course at leg midpoint in degrees from true north.
     */
    magCourse?: number;

    /**
     * The magnetic heading at leg midpoint in degrees from true north.
     */
    magHeading?: number;

    /**
     * The magnetic variation for this leg in degrees.
     */
    magVar?: number;

    /**
     * Navigational Aid (NAVAID) identification code.
     */
    navaid?: string;

    /**
     * The night low level altitude in feet above sea level for the leg ending at this
     * waypoint.
     */
    nightLowAlt?: number;

    /**
     * The night vision goggle low level altitude in feet above sea level for the leg
     * ending at this waypoint.
     */
    nvgLowAlt?: number;

    /**
     * The wind direction at this specific point in degrees from true north.
     */
    pointWindDir?: number;

    /**
     * The wind velocity at this specific point in knots.
     */
    pointWindSpeed?: number;

    /**
     * The primary UHF radio frequency used for the air refueling track or anchor in
     * megahertz.
     */
    priFreq?: number;

    /**
     * The secondary UHF radio frequency used for the air refueling track or anchor in
     * megahertz.
     */
    secFreq?: number;

    /**
     * Tactical Air Navigation (TACAN) channel for the Navigational Aid (NAVAID).
     */
    tacanChannel?: string;

    /**
     * Average temperature deviation from standard day profile for this leg in degrees
     * Celsius.
     */
    tempDev?: number;

    /**
     * The thunderstorm intensity classification for this flight (LIGHT, MODERATE,
     * etc).
     */
    thunderCat?: string;

    /**
     * The total air distance to this waypoint in nautical miles.
     */
    totalAirDistance?: number;

    /**
     * The total distance flown to this waypoint calculated from point of departure in
     * nautical miles.
     */
    totalFlownDistance?: number;

    /**
     * The total distance remaining from this waypoint to the point of arrival in
     * nautical miles.
     */
    totalRemDistance?: number;

    /**
     * The total fuel remaining at this waypoint in pounds.
     */
    totalRemFuel?: number;

    /**
     * The total time accumulated from takeoff to this waypoint expressed as HH:MM.
     */
    totalTime?: string;

    /**
     * The total time remaining from this waypoint to the point of arrival expressed as
     * HH:MM.
     */
    totalTimeRem?: string;

    /**
     * The total fuel used to this waypoint from point of departure in pounds.
     */
    totalUsedFuel?: number;

    /**
     * The total weight of the aircraft at this waypoint in pounds.
     */
    totalWeight?: number;

    /**
     * The true course at leg midpoint in degrees from true north.
     */
    trueCourse?: number;

    /**
     * The turbulence intensity classification for this flight (LIGHT, MODERATE, etc).
     */
    turbCat?: string;

    /**
     * VHF Omni-directional Range (VOR) frequency for the Navigational Aid (NAVAID) in
     * megahertz.
     */
    vorFreq?: number;

    /**
     * The waypoint number on the route. Comment points do not get a waypoint number.
     */
    waypointNum?: number;

    /**
     * The zone/leg distance flown in nautical miles.
     */
    zoneDistance?: number;

    /**
     * The amount of fuel used on this zone/leg in pounds.
     */
    zoneFuel?: number;

    /**
     * The time to fly this zone/leg in minutes.
     */
    zoneTime?: number;
  }
}

/**
 * Model object representing on-orbit objects or satellites in the system.
 */
export interface Onorbit {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Satellite/Catalog number of the target on-orbit object.
   */
  satNo: number;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Alternate name of the on-orbit object.
   */
  altName?: string;

  /**
   * Read-only collection of antennas on this on-orbit object.
   */
  antennas?: Array<Onorbit.Antenna>;

  /**
   * Read-only collection of batteries on this on-orbit object.
   */
  batteries?: Array<Onorbit.Battery>;

  /**
   * Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without
   * State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic,
   * Heliocentric, Interplanetary, Lagrangian, Docked).
   */
  category?:
    | 'Unknown'
    | 'On-Orbit'
    | 'Decayed'
    | 'Cataloged Without State'
    | 'Launch Nominal'
    | 'Analyst Satellite'
    | 'Cislunar'
    | 'Lunar'
    | 'Hyperbolic'
    | 'Heliocentric'
    | 'Interplanetary'
    | 'Lagrangian'
    | 'Docked';

  /**
   * Common name of the on-orbit object.
   */
  commonName?: string;

  /**
   * Constellation to which this satellite belongs.
   */
  constellation?: string;

  /**
   * The country code. This value is typically the ISO 3166 Alpha-2 two-character
   * country code, however it can also represent various consortiums that do not
   * appear in the ISO document. The code must correspond to an existing country in
   * the UDL’s country API. Call udl/country/{code} to get any associated FIPS code,
   * ISO Alpha-3 code, or alternate code values that exist for the specified country
   * code.
   */
  countryCode?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Date of decay.
   */
  decayDate?: string;

  entityCollection?: Array<EntitiesAPI.EntityFull>;

  /**
   * For the public catalog, the idOnOrbit is typically the satellite number as a
   * string, but may be a UUID for analyst or other unknown or untracked satellites,
   * auto-generated by the system.
   */
  idOnOrbit?: string;

  /**
   * International Designator, typically of the format YYYYLLLAAA, where YYYY is the
   * launch year, LLL is the sequential launch number of that year, and AAA is an
   * optional launch piece designator for the launch.
   */
  intlDes?: string;

  /**
   * Date of launch.
   */
  launchDate?: string;

  /**
   * Id of the associated launchSite entity.
   */
  launchSiteId?: string;

  /**
   * Estimated lifetime of the on-orbit payload, if known.
   */
  lifetimeYears?: number;

  /**
   * Mission number of the on-orbit object.
   */
  missionNumber?: string;

  /**
   * Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED,
   * UNKNOWN.
   */
  objectType?: 'ROCKET BODY' | 'DEBRIS' | 'PAYLOAD' | 'PLATFORM' | 'MANNED' | 'UNKNOWN';

  /**
   * Read-only collection of details for this on-orbit object.
   */
  onorbitDetails?: Array<Onorbit.OnorbitDetail>;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Read-only collection of solar arrays on this on-orbit object.
   */
  solarArrays?: Array<Onorbit.SolarArray>;

  /**
   * Read-only collection of thrusters (engines) on this on-orbit object.
   */
  thrusters?: Array<Onorbit.Thruster>;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

export namespace Onorbit {
  /**
   * Read-only collection of antennas on this on-orbit object.
   */
  export interface Antenna {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * ID of the antenna.
     */
    idAntenna: string;

    /**
     * ID of the on-orbit object.
     */
    idOnOrbit: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    /**
     * Model representation of information on on-orbit/spacecraft communication
     * antennas. A spacecraft may have multiple antennas and each antenna can have
     * multiple 'details' records compiled by different sources.
     */
    antenna?: AntennasAPI.AntennaFull;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * Time the row was last updated in the database, auto-populated by the system.
     */
    updatedAt?: string;

    /**
     * Application user who updated the row in the database, auto-populated by the
     * system.
     */
    updatedBy?: string;
  }

  /**
   * Read-only collection of batteries on this on-orbit object.
   */
  export interface Battery {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * ID of the battery.
     */
    idBattery: string;

    /**
     * ID of the on-orbit object.
     */
    idOnOrbit: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    /**
     * Model representation of specific spacecraft battery types.
     */
    battery?: BatteriesAPI.BatteryFull;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * The number of batteries on the spacecraft of the type identified by idBattery.
     */
    quantity?: number;

    /**
     * Time the row was last updated in the database, auto-populated by the system.
     */
    updatedAt?: string;

    /**
     * Application user who updated the row in the database, auto-populated by the
     * system.
     */
    updatedBy?: string;
  }

  /**
   * Contains details of the OnOrbit object.
   */
  export interface OnorbitDetail {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * UUID of the parent Onorbit record.
     */
    idOnOrbit: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    /**
     * Mass of fuel and disposables at launch time in kilograms.
     */
    additionalMass?: number;

    /**
     * The radius used for long-term debris environment projection analyses that is not
     * as conservative as COLA Radius, in meters.
     */
    adeptRadius?: number;

    /**
     * The total beginning of life delta V of the spacecraft, in meters per second.
     */
    bolDeltaV?: number;

    /**
     * Spacecraft beginning of life fuel mass, in orbit, in kilograms.
     */
    bolFuelMass?: number;

    /**
     * Average cross sectional area of the bus in meters squared.
     */
    busCrossSection?: number;

    /**
     * Type of the bus on the spacecraft.
     */
    busType?: string;

    /**
     * Maximum dimension of the box circumscribing the spacecraft (d = sqrt(a*a + b*b +
     * c\*c) where a is the tip-to-tip dimension, b and c are perpendicular to that.)
     * in meters.
     */
    colaRadius?: number;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Average cross sectional area in meters squared.
     */
    crossSection?: number;

    /**
     * The estimated total current mass of the spacecraft, in kilograms.
     */
    currentMass?: number;

    /**
     * The 1-sigma uncertainty of the total spacecraft delta V, in meters per second.
     */
    deltaVUnc?: number;

    /**
     * Array of the estimated mass of each deployable object, in kilograms. Must
     * contain the same number of elements as the value of numDeployable.
     */
    depEstMasses?: Array<number>;

    /**
     * Array of the 1-sigma uncertainty of the mass for each deployable object, in
     * kilograms. Must contain the same number of elements as the value of
     * numDeployable.
     */
    depMassUncs?: Array<number>;

    /**
     * Array of satellite deployable objects. Must contain the same number of elements
     * as the value of numDeployable.
     */
    depNames?: Array<string>;

    /**
     * GEO drift rate, if applicable in degrees per day.
     */
    driftRate?: number;

    /**
     * Spacecraft dry mass (without fuel or disposables) in kilograms.
     */
    dryMass?: number;

    /**
     * Estimated maximum burn duration for the object, in seconds.
     */
    estDeltaVDuration?: number;

    /**
     * Estimated remaining fuel for the object in kilograms.
     */
    fuelRemaining?: number;

    /**
     * GEO slot if applicable, in degrees. -180 (West of Prime Meridian) to 180 degrees
     * (East of Prime Meridian). Prime Meridian is 0.
     */
    geoSlot?: number;

    /**
     * The name of the source who last provided an observation for this idOnOrbit.
     */
    lastObSource?: string;

    /**
     * Time of last reported observation for this object in ISO 8601 UTC with
     * microsecond precision.
     */
    lastObTime?: string;

    /**
     * Nominal mass of spacecraft and fuel at launch time, in kilograms.
     */
    launchMass?: number;

    /**
     * Maximum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
     */
    launchMassMax?: number;

    /**
     * Minimum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
     */
    launchMassMin?: number;

    /**
     * Boolean indicating whether a spacecraft is maneuverable. Note that a spacecraft
     * may have propulsion capability but may not be maneuverable due to lack of fuel,
     * anomalous condition, or other operational constraints.
     */
    maneuverable?: boolean;

    /**
     * Maximum delta V available for this on-orbit spacecraft, in meters per second.
     */
    maxDeltaV?: number;

    /**
     * Maximum dimension across the spacecraft (e.g., tip-to-tip across the solar panel
     * arrays) in meters.
     */
    maxRadius?: number;

    /**
     * Array of the type of missions the spacecraft performs. Must contain the same
     * number of elements as the value of numMission.
     */
    missionTypes?: Array<string>;

    /**
     * The number of sub-satellites or deployable objects on the spacecraft.
     */
    numDeployable?: number;

    /**
     * The number of distinct missions the spacecraft performs.
     */
    numMission?: number;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * Current/latest radar cross section in meters squared.
     */
    rcs?: number;

    /**
     * Maximum radar cross section in meters squared.
     */
    rcsMax?: number;

    /**
     * Mean radar cross section in meters squared.
     */
    rcsMean?: number;

    /**
     * Minimum radar cross section in meters squared.
     */
    rcsMin?: number;

    /**
     * The reference source, sources, or URL from which the data in this record was
     * obtained.
     */
    refSource?: string;

    /**
     * Spacecraft deployed area of solar array in meters squared.
     */
    solarArrayArea?: number;

    /**
     * The 1-sigma uncertainty of the total spacecraft mass, in kilograms.
     */
    totalMassUnc?: number;

    /**
     * Time the row was last updated in the database, auto-populated by the system.
     */
    updatedAt?: string;

    /**
     * Application user who updated the row in the database, auto-populated by the
     * system.
     */
    updatedBy?: string;

    /**
     * Current/latest visual magnitude in M.
     */
    vismag?: number;

    /**
     * Maximum visual magnitude in M.
     */
    vismagMax?: number;

    /**
     * Mean visual magnitude in M.
     */
    vismagMean?: number;

    /**
     * Minimum visual magnitude in M.
     */
    vismagMin?: number;
  }

  /**
   * Read-only collection of solar arrays on this on-orbit object.
   */
  export interface SolarArray {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * ID of the on-orbit object.
     */
    idOnOrbit: string;

    /**
     * ID of the SolarArray.
     */
    idSolarArray: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * The number of solar arrays on the spacecraft of the type identified by
     * idSolarArray.
     */
    quantity?: number;

    /**
     * Model representation of information on on-orbit/spacecraft solar arrays. A
     * spacecraft may have multiple solar arrays and each solar array can have multiple
     * 'details' records compiled by different sources.
     */
    solarArray?: SolarArray.SolarArray;

    /**
     * Time the row was last updated in the database, auto-populated by the system.
     */
    updatedAt?: string;

    /**
     * Application user who updated the row in the database, auto-populated by the
     * system.
     */
    updatedBy?: string;
  }

  export namespace SolarArray {
    /**
     * Model representation of information on on-orbit/spacecraft solar arrays. A
     * spacecraft may have multiple solar arrays and each solar array can have multiple
     * 'details' records compiled by different sources.
     */
    export interface SolarArray {
      /**
       * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
       *
       * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
       * may include both real and simulated data.
       *
       * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
       * events, and analysis.
       *
       * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
       * datasets.
       *
       * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
       * requirements, and for validating technical, functional, and performance
       * characteristics.
       */
      dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

      /**
       * Solar Array name.
       */
      name: string;

      /**
       * Source of the data.
       */
      source: string;

      /**
       * Unique identifier of the record, auto-generated by the system.
       */
      id?: string;

      /**
       * Time the row was created in the database, auto-populated by the system.
       */
      createdAt?: string;

      /**
       * Application user who created the row in the database, auto-populated by the
       * system.
       */
      createdBy?: string;

      /**
       * Originating system or organization which produced the data, if different from
       * the source. The origin may be different than the source if the source was a
       * mediating system which forwarded the data on behalf of the origin system. If
       * null, the source may be assumed to be the origin.
       */
      origin?: string;

      /**
       * The originating source network on which this record was created, auto-populated
       * by the system.
       */
      origNetwork?: string;

      /**
       * Read-only collection of additional SolarArrayDetails by various sources for this
       * organization, ignored on create/update. These details must be created separately
       * via the /udl/solararraydetails operations.
       */
      solarArrayDetails?: Array<SolararraydetailsAPI.SolarArrayDetailsFull>;

      /**
       * Time the row was last updated in the database, auto-populated by the system.
       */
      updatedAt?: string;

      /**
       * Application user who updated the row in the database, auto-populated by the
       * system.
       */
      updatedBy?: string;
    }
  }

  /**
   * Read-only collection of thrusters (engines) on this on-orbit object.
   */
  export interface Thruster {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * ID of the Engine.
     */
    idEngine: string;

    /**
     * ID of the on-orbit object.
     */
    idOnOrbit: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Known launch vehicle engines and their performance characteristics and limits. A
     * launch vehicle has 1 to many engines per stage.
     */
    engine?: EnginesAPI.Engine;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * The number of engines/thrusters on the spacecraft of the type identified by
     * idEngine.
     */
    quantity?: number;

    /**
     * The type of thruster associated with this record (e.g. LAE, Hydrazine REA,
     * etc.).
     */
    type?: string;

    /**
     * Time the row was last updated in the database, auto-populated by the system.
     */
    updatedAt?: string;

    /**
     * Application user who updated the row in the database, auto-populated by the
     * system.
     */
    updatedBy?: string;
  }
}

export class FileDataOffsetPage extends OffsetPage<FileData> {}
