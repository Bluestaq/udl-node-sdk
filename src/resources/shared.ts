// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import * as Shared from './shared';
import { OffsetPage } from '../core/pagination';

/**
 * Beta Version Air Tasking Order: The ATO is used to task air missions, assign
 * cross force tasking as well as intraservice tasking.
 */
export interface AirTaskingOrderFull {
  /**
   * The effective begin time for this ATO in ISO 8601 UTC format with millisecond
   * precision.
   */
  beginTs: string;

  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Specifies the unique operation or exercise name, nickname, or codeword assigned
   * to a joint exercise or operation plan.
   */
  opExerName: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * The indicator specifying an affirmative or a negatice condition for this
   * message.
   */
  ackReqInd?: string;

  /**
   * Specifies textual data amplifying the data contained in the acknowledgement
   * requirement indicator (ackRedInd) field or the unit required to acknowledge.
   */
  ackUnitInstructions?: string;

  /**
   * A collection that specifies the tasked country, tasked service, unit and mission
   * level tasking for this ATO.
   */
  acMsnTasking?: Array<AirTaskingOrderFull.AcMsnTasking>;

  /**
   * Time the row was created in the database.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database.
   */
  createdBy?: string;

  /**
   * The effective end time for this ATO in ISO 8601 UTC format with millisecond
   * precision.
   */
  endTs?: string;

  /**
   * A collection that details special instructions, important information, guidance,
   * and amplifying information regarding this ATO.
   */
  genText?: Array<AirTaskingOrderFull.GenText>;

  /**
   * The month in which the message originated.
   */
  msgMonth?: string;

  /**
   * The identifier of the originator of the message.
   */
  msgOriginator?: string;

  /**
   * The qualifier which caveats the message status.
   */
  msgQualifier?: string;

  /**
   * The unique message identifier sequentially assigned by the originator.
   */
  msgSN?: string;

  /**
   * A collection that specifies the naval flight operations for this ATO.
   */
  navalFltOps?: Array<AirTaskingOrderFull.NavalFltOp>;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;
}

export namespace AirTaskingOrderFull {
  /**
   * Collection that specifies the tasked country, tasked service, unit and mission
   * level tasking for this ATO.
   */
  export interface AcMsnTasking {
    /**
     * The country code responsible for conducting this aircraft mission tasking for
     * the exercise or operation.
     */
    countryCode: string;

    /**
     * The service tasked with conducting this aircraft mission tasking for the
     * exercise or operation.
     */
    taskedService: string;

    /**
     * The designator of the unit that is tasked to perform this aircraft mission
     * tasking.
     */
    unitDesignator: string;

    /**
     * A collection of aircraft mission location information for this aircraft mission
     * tasking.
     */
    acMsnLocSeg?: Array<AcMsnTasking.AcMsnLocSeg>;

    /**
     * The readiness status expressed in time (minutes) for an aircraft to be airborne
     * after the launch order is received or the time required for a missile unit to
     * assume battle stations.
     */
    alertStatus?: number;

    /**
     * The AMC number assigned to identify one aircraft from another.
     */
    amcMsnNum?: string;

    /**
     * WGS-84 latitude of the departure location, in degrees. -90 to 90 degrees
     * (negative values south of equator) for this tasked air mission.
     */
    depLocLat?: number;

    /**
     * WGS-84 longitude of the departure location, in degrees. -180 to 180 degrees
     * (negative values west of Prime Meridian) for this tasked air mission.
     */
    depLocLon?: number;

    /**
     * The location or name specified for the departure of the tasked air mission.
     */
    depLocName?: string;

    /**
     * The departure location specified in UTM (100 meter) coordinates for the tasked
     * air mission.
     */
    depLocUTM?: string;

    /**
     * The time of departure for the tasked air mission in ISO8601 UTC format with
     * millisecond precision.
     */
    depTime?: string;

    /**
     * A collection of the individual aircraft assigned to this aircraft mission
     * tasking.
     */
    indACTasking?: Array<AcMsnTasking.IndAcTasking>;

    /**
     * The commander responsible for the planning and execution of the forces necessary
     * to achieve desired objectives.
     */
    msnCommander?: string;

    /**
     * The mission number assigned to this mission.
     */
    msnNum?: string;

    /**
     * The identifier for the composite set of missions for this operation/exercise.
     */
    pkgId?: string;

    /**
     * The code for the preferred type or designator for a tasked air mission.
     */
    priMsnType?: string;

    /**
     * An array of WGS-84 latitude of the recovery locations, in degrees. -90 to 90
     * degrees (negative values south of equator) for this tasked air mission.
     */
    rcvyLocLat?: Array<number>;

    /**
     * An array of WGS-84 longitude of the recovery locations, in degrees. -180 to 180
     * degrees (negative values west of Prime Meridian) for this tasked air mission.
     */
    rcvyLocLon?: Array<number>;

    /**
     * An array of locations specified for the recovery of the tasked air mission
     * represented by varying formats.
     */
    rcvyLocName?: Array<string>;

    /**
     * An array of recovery locations specified in UTM (100 meter) coordinates for the
     * tasked air mission.
     */
    rcvyLocUTM?: Array<string>;

    /**
     * An array of recovery times for the tasked air mission in ISO8601 UTC format with
     * millisecond precision.
     */
    rcvyTime?: Array<string>;

    /**
     * An indicator of whether a mission is or will be a residual mission.
     */
    resMsnInd?: string;

    /**
     * The code for the alternative type of a tasked air mission.
     */
    secMsnType?: string;

    /**
     * The tasked units location expressed as an ICAO or a place name.
     */
    unitLocName?: string;
  }

  export namespace AcMsnTasking {
    /**
     * Collection of aircraft mission location information for this aircraft mission
     * tasking.
     */
    export interface AcMsnLocSeg {
      /**
       * The start time of this mission in ISO 8601 UTC format with millisecond
       * precision.
       */
      startTime: string;

      /**
       * The code for the priority assigned to this mission.
       */
      airMsnPri?: string;

      /**
       * The altitude for this mission represented as hundreds of feet above MSL.
       */
      alt?: number;

      /**
       * The radius of the circle around the location being reported in feet.
       */
      areaGeoRad?: number;

      /**
       * The end time of this mission in ISO 8601 UTC format with millisecond precision.
       */
      endTime?: string;

      /**
       * The name that identifies the location at which this mission is to be performed.
       * This can be the name of a general target area, orbit, cap point, station, etc.
       */
      msnLocName?: string;

      /**
       * The alpha-numeric specified location for this mission specified as a bearing
       * angle in degrees relative to true north and a range in nautical miles (NM).
       */
      msnLocPtBarT?: string;

      /**
       * WGS-84 latitude of the mission location, in degrees. -90 to 90 degrees (negative
       * values south of equator) for this tasked air mission.
       */
      msnLocPtLat?: number;

      /**
       * WGS-84 longitude of the mission location, in degrees. -180 to 180 degrees
       * (negative values west of Prime Meridian) for this tasked air mission.
       */
      msnLocPtLon?: number;

      /**
       * The location name for this mission.
       */
      msnLocPtName?: string;
    }

    /**
     * Collection that specifies the naval flight operations for this ATO.
     */
    export interface IndAcTasking {
      /**
       * The type and model number for the aircraft. The field may specify a value of an
       * aircraft not yet assigned an aircraft code contained in the aircraft codes list.
       */
      acftType: string;

      /**
       * The call sign assigned to this mission aircraft.
       */
      callSign?: string;

      /**
       * The mode 1 and code of the Identification Friend or FOE (IFF) or Selective
       * Identification Feature (SIF).
       */
      iffSifMode1Code?: string;

      /**
       * The mode 2 and code of the Identification Friend or FOE (IFF) or Selective
       * Identification Feature (SIF).
       */
      iffSifMode2Code?: string;

      /**
       * The mode 3 and code of the Identification Friend or FOE (IFF) or Selective
       * Identification Feature (SIF).
       */
      iffSifMode3Code?: string;

      /**
       * An optional array of link 16 octal track numbers assigned as the primary JTIDS
       * Unit (JU) address for the mission aircraft.
       */
      juAddress?: Array<number>;

      /**
       * The Link 16 abbreviated call sign assigned to the ACA. This is normally the
       * first and last letter and the last two numbers of the call sign.
       */
      link16CallSign?: string;

      /**
       * The number of aircraft participating in this mission.
       */
      numAcft?: number;

      /**
       * The code that indicates the ordinance mix carried on this mission aircraft.
       */
      priConfigCode?: string;

      /**
       * The code for the secondary ordinance mix carried on this mission aircraft.
       */
      secConfigCode?: string;

      /**
       * The TACAN channel assigned to this mission aircraft.
       */
      tacanChan?: number;
    }
  }

  /**
   * Collection that details special instructions, important information, guidance,
   * and amplifying information regarding this ATO.
   */
  export interface GenText {
    /**
     * The free text that describes the information specific to the text indicator.
     */
    text?: string;

    /**
     * The indicator for the general text block. Examples include "OPENING REMARKS" and
     * "GENERAL SPINS INFORMATION".
     */
    textInd?: string;
  }

  /**
   * Collection that specifies the naval flight operations for this ATO.
   */
  export interface NavalFltOp {
    /**
     * The name of a ship or maritime vessel. Specify UNKNOWN if name is not known.
     */
    shipName: string;

    /**
     * The time when flight operations begin in ISO8601 UTC format with millisecond
     * precision.
     */
    fltOpStart?: string;

    /**
     * The time when flight operations end in ISO8601 UTC format with millisecond
     * precision.
     */
    fltOpStop?: string;

    /**
     * An array of times at which an aircraft will be launched and/or recovered in
     * ISO8601 UTC format with millisecond precision.
     */
    schdLaunchRcvyTime?: Array<string>;
  }
}

/**
 * The information in an Air Transport Mission contains unique identification,
 * description of the mission objective, aircraft and crew assignments, mission
 * alias, embarkation/debarkation cargo locations, priority, and other mission
 * characteristics.
 */
export interface AirTransportMissionFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * The Air Battle Plan used to coordinate and integrate air assets for this
   * mission.
   */
  abp?: string;

  /**
   * The Aircraft Sortie Records linked to this mission. Do not set this field to
   * send data to the UDL. This field is set by the UDL when returning full Air
   * Transport Mission records.
   */
  aircraftSorties?: Array<AircraftsortieFull>;

  /**
   * Mission alias.
   */
  alias?: string;

  /**
   * The unit the mission is allocated to.
   */
  allocatedUnit?: string;

  /**
   * Air Mobility Command (AMC) mission identifier according to Mobility Air Forces
   * (MAF) Encode/Decode procedures.
   */
  amcMissionId?: string;

  /**
   * The Aircraft and Personnel Automated Clearance System (APACS) system identifier
   * used to process and approve clearance requests.
   */
  apacsId?: string;

  /**
   * The call sign assigned to this mission according to the Air Tasking Order (ATO).
   */
  atoCallSign?: string;

  /**
   * The mission number according to the Air Tasking Order (ATO).
   */
  atoMissionId?: string;

  /**
   * The call sign for this mission.
   */
  callSign?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Flag indicating this is a close watch mission.
   */
  cw?: boolean;

  /**
   * Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft
   * clearance requests.
   */
  dipWorksheetName?: string;

  /**
   * The International Civil Aviation Organization (ICAO) site code of first cargo
   * pick up.
   */
  firstPickUp?: string;

  /**
   * Global Decision Support System (GDSS) mission unique identifier.
   */
  gdssMissionId?: string;

  /**
   * Collection of Hazardous Material information planned to be associated with this
   * Air Transport Mission.
   */
  hazMat?: Array<AirTransportMissionFull.HazMat>;

  /**
   * Highest Joint Chiefs of Staff priority of this mission.
   */
  jcsPriority?: string;

  /**
   * The International Civil Aviation Organization (ICAO) site code of last cargo
   * drop off.
   */
  lastDropOff?: string;

  /**
   * Load type of this mission (e.g. CARGO, MIXED, PASSENGER).
   */
  loadCategoryType?: string;

  /**
   * Mode-1 interrogation response (mission code), indicating mission or aircraft
   * type.
   */
  m1?: string;

  /**
   * Mode-2 interrogation response (military identification code).
   */
  m2?: string;

  /**
   * Mode-3/A interrogation response (aircraft identification), provides a 4-digit
   * octal identification code for the aircraft, assigned by the air traffic
   * controller. Mode-3/A is shared military/civilian use.
   */
  m3a?: string;

  /**
   * Numbered Air Force (NAF) organization that owns the mission.
   */
  naf?: string;

  /**
   * Air Mobility Command (AMC) mission identifier of the next air transport mission.
   * Provides a method for AMC to link air transport missions together
   * chronologically for tasking and planning purposes.
   */
  nextAMCMissionId?: string;

  /**
   * Unique identifier of the next mission provided by the originating source.
   * Provides a method for the data provider to link air transport missions together
   * chronologically for tasking and planning purposes.
   */
  nextMissionId?: string;

  /**
   * Designates the location responsible for mission transportation, logistics, or
   * distribution activities for an Area of Responsibility (AOR) within USTRANSCOM.
   */
  node?: string;

  /**
   * A description of this mission's objective.
   */
  objective?: string;

  /**
   * The name of the operation that this mission supports.
   */
  operation?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The mission identifier provided by the originating source.
   */
  origMissionId?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Air Mobility Command (AMC) mission identifier of the previous air transport
   * mission. Provides a method for AMC to link air transport missions together
   * chronologically for tasking and planning purposes.
   */
  prevAMCMissionId?: string;

  /**
   * Unique identifier of the previous air transport mission provided by the
   * originating source. Provides a method for the data provider to link air
   * transport missions together chronologically for tasking and planning purposes.
   */
  prevMissionId?: string;

  /**
   * A description of this mission's purpose (e.g. why this mission needs to happen,
   * what is the mission supporting, etc.).
   */
  purpose?: string;

  /**
   * Information related to the planning, load, status, and deployment or dispatch of
   * one aircraft to carry out a mission.
   */
  remarks?: Array<AirTransportMissionFull.Remark>;

  /**
   * Collection of Requirements planned to be associated with this Air Transport
   * Mission.
   */
  requirements?: Array<AirTransportMissionFull.Requirement>;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * The number of minutes a mission is off schedule based on the source system's
   * business rules. Positive numbers are early, negative numbers are late.
   */
  sourceSysDeviation?: number;

  /**
   * Current state of the mission.
   */
  state?: string;

  /**
   * The type of mission (e.g. SAAM, CHNL, etc.).
   */
  type?: string;

  /**
   * Time the row was updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

export namespace AirTransportMissionFull {
  /**
   * Collection of Hazardous Material information planned to be associated with this
   * Air Transport Mission.
   */
  export interface HazMat {
    /**
     * Comma delimited list of Note IDs for Item Class Segregation groups, specific to
     * GDSS systems.
     */
    applicableNotes?: string;

    /**
     * Compatibility group code used to specify the controls for the transportation and
     * storage of hazardous materials according to the Hazardous Materials Regulations
     * issued by the U.S. Department of Transportation.
     */
    cgc?: string;

    /**
     * Comma delimited list of Note IDs for compatibility groups, specific to GDSS
     * systems.
     */
    cgn?: string;

    /**
     * Class and division of the hazardous material according to the Hazardous
     * Materials Regulations issued by the U.S. Department of Transportation.
     */
    classDiv?: number;

    /**
     * The hazMat identifier provided by the originating source.
     */
    extHazMatId?: string;

    /**
     * United Nations proper shipping name of the hazardous material according to the
     * Hazardous Materials Regulations issued by the U.S. Department of Transportation.
     */
    itemName?: string;

    /**
     * Net explosive weight of the hazardous material, in kilograms.
     */
    netExpWt?: number;

    /**
     * The International Civil Aviation Organization (ICAO) code of the site where the
     * hazardous material is unloaded.
     */
    offICAO?: string;

    /**
     * Itinerary number that identifies where the hazardous material is unloaded.
     */
    offItin?: number;

    /**
     * The International Civil Aviation Organization (ICAO) code of the site where the
     * hazardous material is loaded.
     */
    onICAO?: string;

    /**
     * Itinerary number that identifies where the hazardous material is loaded.
     */
    onItin?: number;

    /**
     * Number of pieces of hazardous cargo.
     */
    pieces?: number;

    /**
     * Flag indicating if hazardous material is associated with this air transport
     * mission. Possible values are P (planned to be associated with the mission) or A
     * (actually associated with the mission). Enum: [P, A].
     */
    planned?: string;

    /**
     * United Nations number or North America number that identifies hazardous
     * materials according to the Hazardous Materials Regulations issued by the U.S.
     * Department of Transportation.
     */
    unNum?: string;

    /**
     * Total weight of hazardous cargo, including non-explosive parts, in kilograms.
     */
    weight?: number;
  }

  /**
   * Collection of Remarks associated with this Air Transport Mission.
   */
  export interface Remark {
    /**
     * Date the remark was published, in ISO 8601 UTC format, with millisecond
     * precision.
     */
    date?: string;

    /**
     * Global Decision Support System (GDSS) remark identifier.
     */
    gdssRemarkId?: string;

    /**
     * If the remark is sortie specific, this is the number of the sortie it applies
     * to.
     */
    itineraryNum?: number;

    /**
     * Text of the remark.
     */
    text?: string;

    /**
     * Remark type.
     */
    type?: string;

    /**
     * User who published the remark.
     */
    user?: string;
  }

  /**
   * Collection of Requirements planned to be associated with this Air Transport
   * Mission.
   */
  export interface Requirement {
    /**
     * Total weight of the bulk cargo, in kilograms.
     */
    bulkWeight?: number;

    /**
     * Earliest available date the cargo can be picked up, in ISO 8601 UTC format with
     * millisecond precision.
     */
    ead?: string;

    /**
     * Global Decision Support System (GDSS) mission requirement identifier.
     */
    gdssReqId?: string;

    /**
     * Latest available date the cargo may be delivered, in ISO 8601 UTC format with
     * millisecond precision.
     */
    lad?: string;

    /**
     * Number of ambulatory patients tasked for the mission.
     */
    numAmbulatory?: number;

    /**
     * Number of attendants tasked for the mission.
     */
    numAttendant?: number;

    /**
     * Number of litter patients tasked for the mission.
     */
    numLitter?: number;

    /**
     * Number of passengers associated with the mission.
     */
    numPax?: number;

    /**
     * Identifier of the offload itinerary location.
     */
    offloadId?: number;

    /**
     * Offload location code.
     */
    offloadLOCode?: string;

    /**
     * Identifier of the onload itinerary location.
     */
    onloadId?: number;

    /**
     * Onload location code.
     */
    onloadLOCode?: string;

    /**
     * Identification number of the Operation Plan (OPLAN) associated with this
     * mission.
     */
    oplan?: string;

    /**
     * Total weight of the outsize cargo, in kilograms.
     */
    outsizeWeight?: number;

    /**
     * Total weight of the oversized cargo, in kilograms.
     */
    oversizeWeight?: number;

    /**
     * Project name.
     */
    projName?: string;

    /**
     * Transportation requirement number.
     */
    transReqNum?: string;

    /**
     * Unit line number.
     */
    uln?: string;
  }
}

/**
 * General aircraft designation, characteristics, and capabilities. The aircraft
 * schema contains static data of specific aircraft, including tail number, cruise
 * speed, max speed, and minimum required runway length, etc.
 */
export interface AircraftFull {
  /**
   * The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15
   * EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained
   * to, MIL-STD-6016 environment dependent specific type designations.
   */
  aircraftMDS: string;

  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * The category of aircraft (e.g. M = Military, C = Commercial).
   */
  category?: string;

  /**
   * The Air Force major command (MAJCOM) overseeing the aircraft.
   */
  command?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * The cruise speed of the aircraft, in kilometers/hour.
   */
  cruiseSpeed?: number;

  /**
   * Military data network data transfer device ID for this aircraft.
   */
  dtd?: string;

  /**
   * An entity is a generic representation of any object within a space/SSA system
   * such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An
   * entity can have an operating unit, a location (if terrestrial), and statuses.
   */
  entity?: EntityFull;

  /**
   * ID of the parent entity for this aircraft.
   */
  idEntity?: string;

  /**
   * The maximum air speed of the aircraft, in kilometers/hour.
   */
  maxSpeed?: number;

  /**
   * The minimum length of runway required to land this aircraft, in feet. Note: The
   * corresponding equivalent field is not converted by the UDL and may or may not be
   * supplied by the provider. The provider/consumer is responsible for all unit
   * conversions.
   */
  minReqRunwayFt?: number;

  /**
   * The minimum length of runway required to land this aircraft, in meters. Note:
   * The corresponding equivalent field is not converted by the UDL and may or may
   * not be supplied by the provider. The provider/consumer is responsible for all
   * unit conversions.
   */
  minReqRunwayM?: number;

  /**
   * The nominal turnaround time for this aircraft, in minutes.
   */
  nominalTATime?: number;

  /**
   * Optional notes/comments for this aircraft.
   */
  notes?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * The wing or unit that owns the aircraft.
   */
  owner?: string;

  /**
   * Full serial number of the aircraft.
   */
  serialNumber?: string;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * The tail number of this aircraft.
   */
  tailNumber?: string;

  /**
   * Time the row was updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

/**
 * Information related to the planning, load, status, and deployment or dispatch of
 * one aircraft to carry out a mission.
 */
export interface AircraftsortieFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * The scheduled time that the Aircraft sortie is planned to depart, in ISO 8601
   * UTC format with millisecond precision.
   */
  plannedDepTime: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * The actual arrival time, in ISO 8601 UTC format with millisecond precision.
   */
  actualArrTime?: string;

  /**
   * The actual time the Aircraft comes to a complete stop in its parking position,
   * in ISO 8601 UTC format with millisecond precision.
   */
  actualBlockInTime?: string;

  /**
   * The actual time the Aircraft begins to taxi from its parking position, in ISO
   * 8601 UTC format with millisecond precision.
   */
  actualBlockOutTime?: string;

  /**
   * The actual departure time, in ISO 8601 UTC format.
   */
  actualDepTime?: string;

  /**
   * The Automatic Dependent Surveillance-Broadcast (ADS-B) device identifier.
   */
  aircraftADSB?: string;

  /**
   * Alternate Aircraft Identifier provided by source.
   */
  aircraftAltId?: string;

  /**
   * Aircraft event text.
   */
  aircraftEvent?: string;

  /**
   * The aircraft Model Design Series designation assigned to this sortie.
   */
  aircraftMDS?: string;

  /**
   * Remarks concerning the aircraft.
   */
  aircraftRemarks?: string;

  /**
   * The amount of time allowed between launch order and takeoff, in seconds.
   */
  alertStatus?: number;

  /**
   * The Alert Status code.
   */
  alertStatusCode?: string;

  /**
   * The Air Mobility Command (AMC) mission number of the sortie.
   */
  amcMsnNum?: string;

  /**
   * The type of mission (e.g. SAAM, CHNL, etc.).
   */
  amcMsnType?: string;

  /**
   * The arrival Federal Aviation Administration (FAA) code of this sortie.
   */
  arrFAA?: string;

  /**
   * The arrival International Aviation Transport Association (IATA) code of this
   * sortie.
   */
  arrIATA?: string;

  /**
   * The arrival International Civil Aviation Organization (ICAO) of this sortie.
   */
  arrICAO?: string;

  /**
   * The itinerary identifier of the arrival location.
   */
  arrItinerary?: number;

  /**
   * Purpose code at the arrival location of this sortie.
   */
  arrPurposeCode?: string;

  /**
   * The call sign assigned to the aircraft on this sortie.
   */
  callSign?: string;

  /**
   * Description of the cargo configuration (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1,
   * etc.) currently on board the aircraft. Configuration meanings are determined by
   * the data source.
   */
  cargoConfig?: string;

  /**
   * The last name of the aircraft commander.
   */
  commanderName?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Crew Services.
   */
  crew?: CrewFull;

  /**
   * The current state of this sortie.
   */
  currentState?: string;

  /**
   * The primary delay code.
   */
  delayCode?: string;

  /**
   * The departure Federal Aviation Administration (FAA) code of this sortie.
   */
  depFAA?: string;

  /**
   * The departure International Aviation Transport Association (IATA) code of this
   * sortie.
   */
  depIATA?: string;

  /**
   * The departure International Civil Aviation Organization (ICAO) of this sortie.
   */
  depICAO?: string;

  /**
   * The itinerary identifier of the departure location.
   */
  depItinerary?: number;

  /**
   * Purpose code at the departure location of this sortie.
   */
  depPurposeCode?: string;

  /**
   * Due home date by which the aircraft must return to its home station, in ISO 8601
   * UTC format with millisecond precision.
   */
  dhd?: string;

  /**
   * Reason the aircraft must return to home station by its due home date.
   */
  dhdReason?: string;

  /**
   * The current estimated time that the Aircraft is planned to arrive, in ISO 8601
   * UTC format with millisecond precision.
   */
  estArrTime?: string;

  /**
   * The estimated time the Aircraft will come to a complete stop in its parking
   * position, in ISO 8601 UTC format with millisecond precision.
   */
  estBlockInTime?: string;

  /**
   * The estimated time the Aircraft will begin to taxi from its parking position, in
   * ISO 8601 UTC format with millisecond precision.
   */
  estBlockOutTime?: string;

  /**
   * The current estimated time that the Aircraft is planned to depart, in ISO 8601
   * UTC format with millisecond precision.
   */
  estDepTime?: string;

  /**
   * Name of the uploaded PDF.
   */
  filename?: string;

  /**
   * Size of the supporting PDF, in bytes.
   */
  filesize?: number;

  /**
   * The planned flight time for this sortie, in minutes.
   */
  flightTime?: number;

  /**
   * Desk phone number of the flight manager assigned to the sortie. Null when no
   * flight manager is assigned.
   */
  fmDeskNum?: string;

  /**
   * Last name of the flight manager assigned to the sortie. Null when no flight
   * manager is assigned.
   */
  fmName?: string;

  /**
   * Mass of fuel required for this leg of the sortie, in kilograms.
   */
  fuelReq?: number;

  /**
   * Scheduled ground time, in minutes.
   */
  gndTime?: number;

  /**
   * Unique identifier of the aircraft.
   */
  idAircraft?: string;

  /**
   * The unique identifier of the mission to which this sortie is assigned.
   */
  idMission?: string;

  /**
   * Joint Chiefs of Staff priority of this sortie.
   */
  jcsPriority?: string;

  /**
   * The leg number of this sortie.
   */
  legNum?: number;

  /**
   * The external system line number of this sortie.
   */
  lineNumber?: number;

  /**
   * The mission ID according to the source system.
   */
  missionId?: string;

  /**
   * Time the associated mission data was last updated in relation to the aircraft
   * assignment, in ISO 8601 UTC format with millisecond precision. If this time is
   * coming from an external system, it may not sync with the latest mission time
   * associated to this record.
   */
  missionUpdate?: string;

  /**
   * Remarks concerning the sortie objective.
   */
  objectiveRemarks?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * The sortie identifier provided by the originating source.
   */
  origSortieId?: string;

  /**
   * Liquid oxygen onboard the aircraft for the crew compartment, in liters.
   */
  oxyOnCrew?: number;

  /**
   * Liquid oxygen onboard the aircraft for the troop compartment, in liters.
   */
  oxyOnPax?: number;

  /**
   * Liquid oxygen required on the aircraft for the crew compartment, in liters.
   */
  oxyReqCrew?: number;

  /**
   * Liquid oxygen required on the aircraft for the troop compartment, in liters.
   */
  oxyReqPax?: number;

  /**
   * The status of the supporting document.
   */
  paperStatus?: 'PUBLISHED' | 'DELETED' | 'UPDATED' | 'READ';

  /**
   * The version number of the crew paper.
   */
  papersVersion?: string;

  /**
   * The POI parking location.
   */
  parkingLoc?: string;

  /**
   * The number of passengers tasked for this sortie.
   */
  passengers?: number;

  /**
   * The scheduled time that the Aircraft sortie is planned to arrive, in ISO 8601
   * UTC format with millisecond precision.
   */
  plannedArrTime?: string;

  /**
   * The prior permission required (PPR) status.
   */
  pprStatus?: 'NOT REQUIRED' | 'REQUIRED NOT REQUESTED' | 'GRANTED' | 'PENDING';

  /**
   * The planned primary Standard Conventional Load of the aircraft for this sortie.
   */
  primarySCL?: string;

  /**
   * When crew papers are associated to this sortie, the system updates this value.
   * This field is the URI location in the document repository of that raw file. To
   * download the raw file, prepend https://udl-hostname/scs/download?id= to this
   * field's value.
   */
  rawFileURI?: string;

  /**
   * Aircraft configuration required for the mission.
   */
  reqConfig?: string;

  /**
   * Remarks concerning the results of this sortie.
   */
  resultRemarks?: string;

  /**
   * Type of Ravens required for this sortie (N - None, R - Raven (Security Team)
   * required, C6 - Consider ravens (Ground time over 6 hours), R6 - Ravens required
   * (Ground time over 6 hours)).
   */
  rvnReq?: 'N' | 'R' | 'C6' | 'R6';

  /**
   * Remarks concerning the schedule.
   */
  scheduleRemarks?: string;

  /**
   * The planned secondary Standard Conventional Load of the aircraft for this
   * sortie.
   */
  secondarySCL?: string;

  /**
   * Indicates the group responsible for recording the completion time of the next
   * event in the sequence of events assigned to this sortie (e.g. OPS - Operations,
   * MX - Maintenance, TR - Transportation, etc.).
   */
  soe?: string;

  /**
   * The scheduled UTC date for this sortie, in ISO 8601 date-only format (ex.
   * YYYY-MM-DD).
   */
  sortieDate?: string;

  sortiePPR?: Array<SortiePprFull>;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * The tail number of the aircraft assigned to this sortie.
   */
  tailNumber?: string;

  /**
   * Time the row was updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

/**
 * Aircraft readiness and status data. Contains the dynamic data associated with
 * the specific aircraft status, either in-flight or on-ground, including remaining
 * fuel, mission readiness, and inventory, etc.
 */
export interface AircraftstatusFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Unique identifier of the aircraft.
   */
  idAircraft: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * List of additional operational systems on this aircraft beyond what is normally
   * available.
   */
  additionalSys?: Array<string>;

  /**
   * The status of the air-to-air weapon release system (OPERATIONAL,
   * NON-OPERATIONAL, OFF).
   */
  airToAirStatus?: 'OPERATIONAL' | 'NON-OPERATIONAL' | 'OFF';

  /**
   * The status of the air-to-ground weapon release system (OPERATIONAL,
   * NON-OPERATIONAL, OFF).
   */
  airToGroundStatus?: 'OPERATIONAL' | 'NON-OPERATIONAL' | 'OFF';

  /**
   * Aircraft alpha status code that indicates the aircraft maintenance status
   * estimated by the pilot.
   */
  alphaStatusCode?: string;

  /**
   * Alternate Aircraft Identifier provided by source.
   */
  altAircraftId?: string;

  /**
   * The contamination status of the aircraft (e.g. CLEAR, CONTAMINATED,
   * DECONTAMINATED, UNKNOWN, etc.).
   */
  contaminationStatus?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * The International Civil Aviation Organization (ICAO) code at which this aircraft
   * is currently located or has most recently departed, if airborne.
   */
  currentICAO?: string;

  /**
   * The current readiness state of the aircraft (e.g. AIRBORNE, ALERTCOCKED,
   * AVAILABLE, BATTLESTATION, RUNWAY ALERT, SUITUP).
   */
  currentState?: string;

  /**
   * The earliest time that turnaround of the aircraft may complete, in ISO 8601 UTC
   * format with millisecond precision.
   */
  earliestTAEndTime?: string;

  /**
   * The Expected Time in Commission (ETIC) for this aircraft, in ISO 8601 UTC format
   * with millisecond precision. This is the estimated time when the issue will be
   * resolved.
   */
  etic?: string;

  /**
   * Current flight phase (e.g. AIR REFUELING, GROUND, LANDING, etc.) of the
   * aircraft.
   */
  flightPhase?: string;

  /**
   * The mass of fuel remaining on the aircraft, in kilograms.
   */
  fuel?: number;

  /**
   * Used in conjunction with the fuel field to indicate either burnable or offload
   * fuel.
   */
  fuelFunction?: string;

  /**
   * The state of the aircraft fuel status (e.g. DELIVERED, DUMPED, EMPTY, FULL,
   * OTHER, REQUESTED, etc.).
   */
  fuelStatus?: string;

  /**
   * US Air Force geographic location code of the airfield where the aircraft is
   * located.
   */
  geoLoc?: string;

  /**
   * The ground status of the aircraft (e.g. ALERT, CREW READY, ENGINE START, HANGAR,
   * etc.).
   */
  groundStatus?: string;

  /**
   * Flag indicating that the aircraft is capable of making at least one gun pass.
   */
  gunCapable?: boolean;

  /**
   * The upper bound of the estimated number of gun rounds available.
   */
  gunRdsMax?: number;

  /**
   * The lower bound of the estimated number of gun rounds available.
   */
  gunRdsMin?: number;

  /**
   * The type of gun rounds available (e.g. 7.62 MM, 20 MM, 25 MM, etc.).
   */
  gunRdsType?: string;

  /**
   * If not airborne, the unique identifier of the installation currently hosting the
   * aircraft.
   */
  idAirfield?: string;

  /**
   * Unique identifier of the Point of Interest (POI) record related to this aircraft
   * status. This will generally represent the location of an aircraft on the ground.
   */
  idPOI?: string;

  /**
   * Array of inventory item(s) for which estimate(s) are available (e.g. AIM-9
   * SIDEWINDER, AIM-120 AMRAAM, AIM-92 STINGER, CHAFF DECOY, FLARE TP 400, etc.).
   * Intended as, but not constrained to, MIL-STD-6016 environment dependent
   * specific/store type designations. This array must be the same length as
   * inventoryMin and inventoryMax.
   */
  inventory?: Array<string>;

  /**
   * Array of the upper bound quantity for each of the inventory items. The values in
   * this array must correspond to position index in the inventory array. This array
   * must be the same length as inventory and inventoryMin.
   */
  inventoryMax?: Array<number>;

  /**
   * Array of the lower bound quantity for each of the inventory items. The values in
   * this array must correspond to position index in the inventory array. This array
   * must be the same length as inventory and inventoryMax.
   */
  inventoryMin?: Array<number>;

  /**
   * Date when the military aircraft inspection was last performed, in ISO 8601 UTC
   * format with millisecond precision.
   */
  lastInspectionDate?: string;

  /**
   * The name or ID of the external user that updated this status.
   */
  lastUpdatedBy?: string;

  /**
   * Military aircraft maintenance point of contact for this aircraft.
   */
  maintPoc?: string;

  /**
   * Indicates the priority of the maintenance effort.
   */
  maintPriority?: string;

  /**
   * The maintenance status of the aircraft.
   */
  maintStatus?: string;

  /**
   * Indicates the maintenance discrepancy that drives the current maintenance
   * status.
   */
  maintStatusDriver?: string;

  /**
   * The time of the last maintenance status update, in ISO 8601 UTC format with
   * millisecond precision.
   */
  maintStatusUpdate?: string;

  /**
   * The Operational Capability of the reported aircraft (ABLE, LOFUEL, UNABLE).
   */
  missionReadiness?: string;

  /**
   * Maintenance pacing remarks assocociated with this aircraft.
   */
  mxRemark?: string;

  /**
   * The International Civil Aviation Organization (ICAO) code of the next
   * destination of this aircraft.
   */
  nextICAO?: string;

  /**
   * Optional notes/comments concerning this aircraft status.
   */
  notes?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * The parking location of this aircraft.
   */
  parkLocation?: string;

  /**
   * The system that designated the parking location (e.g. EMOC, GDSS, PEX, etc.).
   */
  parkLocationSystem?: string;

  /**
   * The International Civil Aviation Organization (ICAO) code at which this aircraft
   * was previously located.
   */
  previousICAO?: string;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * The turnaround start time, in ISO 8601 UTC format with millisecond precision.
   */
  taStartTime?: string;

  /**
   * Estimated Time for Completion (ETIC) of an aircraft issue, in ISO 8601 UTC
   * format with millisecond precision. This is the estimated time when the course of
   * action to resolve the issue will be determined.
   */
  troubleshootEtic?: string;

  /**
   * List of unavailable systems that would normally be on this aircraft.
   */
  unavailableSys?: Array<string>;

  /**
   * Time the row was updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

/**
 * Properties and characteristics of a remark that is associated with an aircraft
 * status.
 */
export interface AircraftstatusremarkFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * The ID of the Aircraft Status to which this remark applies.
   */
  idAircraftStatus: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * The text of the remark.
   */
  text: string;

  /**
   * Unique identifier of the record, auto-generated by the system if not provided on
   * create operations.
   */
  id?: string;

  /**
   * Unique identifier of the Aircraft Status Remark record from the originating
   * system.
   */
  altRmkId?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Time the remark was last updated in the originating system in ISO 8601 UTC
   * format with millisecond precision.
   */
  lastUpdatedAt?: string;

  /**
   * The name or ID of the external user that updated this remark in the originating
   * system.
   */
  lastUpdatedBy?: string;

  /**
   * The name of the remark.
   */
  name?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * Time the remark was created in the originating system in ISO 8601 UTC format
   * with millisecond precision.
   */
  timestamp?: string;

  /**
   * Time the row was updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

/**
 * Properties and characteristics of an airfield, which includes location, airfield
 * codes, suitability codes, and remarks.
 */
export interface AirfieldFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * The name of the airfield.
   */
  name: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * The airfield activity use type (e.g. Commercial, Airport, Heliport, Gliderport,
   * etc.).
   */
  type: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Alternate Airfield identifier provided by source.
   */
  altAirfieldId?: string;

  /**
   * Alternative names for this airfield.
   */
  alternativeNames?: Array<string>;

  /**
   * The closest city to the location of this airfield.
   */
  city?: string;

  /**
   * The country code. This value is typically the ISO 3166 Alpha-2 two-character
   * country code, however it can also represent various consortiums that do not
   * appear in the ISO document. The code must correspond to an existing country in
   * the UDL’s country API. Call udl/country/{code} to get any associated FIPS code,
   * ISO Alpha-3 code, or alternate code values that exist for the specified country
   * code.
   */
  countryCode?: string;

  /**
   * The country name where this airfield is located.
   */
  countryName?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Information regarding daylight saving time as is relevant to the location and
   * operation of this airfield.
   */
  dstInfo?: string;

  /**
   * Elevation of the airfield above mean sea level, in feet. Note: The corresponding
   * equivalent field is not converted by the UDL and may or may not be supplied by
   * the provider. The provider/consumer is responsible for all unit conversions.
   */
  elevFt?: number;

  /**
   * Elevation of the airfield above mean sea level, in meters. Note: The
   * corresponding equivalent field is not converted by the UDL and may or may not be
   * supplied by the provider. The provider/consumer is responsible for all unit
   * conversions.
   */
  elevM?: number;

  /**
   * The Federal Aviation Administration (FAA) location identifier of this airfield.
   */
  faa?: string;

  /**
   * Air Force geographic location code of the airfield.
   */
  geoloc?: string;

  /**
   * Time difference between the location of the airfield and the Greenwich Mean Time
   * (GMT), expressed as +/-HH:MM. Time zones east of Greenwich have positive offsets
   * and time zones west of Greenwich are negative.
   */
  gmtOffset?: string;

  /**
   * The host nation code of this airfield, used for non-DoD/FAA locations.
   */
  hostNatCode?: string;

  /**
   * The International Aviation Transport Association (IATA) code of the airfield.
   */
  iata?: string;

  /**
   * The International Civil Aviation Organization (ICAO) code of the airfield.
   */
  icao?: string;

  /**
   * The ID of the parent site.
   */
  idSite?: string;

  /**
   * The URL link to information about airfield.
   */
  infoURL?: string;

  /**
   * WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values
   * south of equator).
   */
  lat?: number;

  /**
   * WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative
   * values west of Prime Meridian).
   */
  lon?: number;

  /**
   * The magnetic declination/variation of the airfield's location from true north,
   * in degrees. Positive values east of true north and negative values west of true
   * north.
   */
  magDec?: number;

  /**
   * The length of the longest runway at this airfield in feet.
   */
  maxRunwayLength?: number;

  /**
   * Applicable miscellaneous codes according to the Airfield Suitability and
   * Restrictions Report (ASRR) for this airfield.
   */
  miscCodes?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * The regional authority of the airfield.
   */
  regionalAuthority?: string;

  /**
   * Region where the airfield resides.
   */
  regionName?: string;

  /**
   * The number of runways at the site.
   */
  runways?: number;

  /**
   * The secondary ICAO code for this airfield. Some airfields have two associated
   * ICAO codes, this can occur in cases when a single airfield supports both
   * military and civilian operations.
   */
  secondaryICAO?: string;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * State or province of the airfield's location.
   */
  state?: string;

  /**
   * The code for the state or province in which this airfield is located. Intended
   * as, but not constrained to, FIPS 10-4 region code designations.
   */
  stateProvinceCode?: string;

  /**
   * Array of descriptions for given suitability codes. The index of the description
   * corresponds to the position of the letter code in the string provided in the
   * suitabilityCodes field.
   */
  suitabilityCodeDescs?: Array<string>;

  /**
   * Associated suitability codes according to the Airfield Suitability and
   * Restrictions Report (ASRR) for this airfield.
   */
  suitabilityCodes?: string;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;

  /**
   * The airfield's World Area Code installation number (WAC-INNR).
   */
  wacINNR?: string;

  /**
   * Air Mobility Command (AMC) Zone availability Report identifier.
   */
  zarId?: string;
}

/**
 * Airfield capacity data. Contains data associated with the airfieldslots
 * available for parking, working, takeoff, and landing at the airfield, as well as
 * the types of aircraft that can be accommodated.
 */
export interface AirfieldslotFull {
  /**
   * The name of the airfield where this slot is located.
   */
  airfieldName: string;

  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Name of this slot.
   */
  name: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Largest category of aircraft supported in this slot (WIDE, NARROW, HELO, ALL,
   * OTHER).
   */
  acSlotCat?: 'WIDE' | 'NARROW' | 'HELO' | 'ALL' | 'OTHER';

  /**
   * Alternate airfield identifier provided by the source.
   */
  altAirfieldId?: string;

  /**
   * Number of aircraft that can fit in this slot at the same time.
   */
  capacity?: number;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Latest zulu time this slot is available based on daily standard hours. Not
   * applicable to slots with type PARKING. Abnormal hours, such as holidays, should
   * be marked via the AirfieldSlotConsumption schema.
   */
  endTime?: string;

  /**
   * The International Civil Aviation Organization (ICAO) code of the airfield.
   */
  icao?: string;

  /**
   * Unique identifier of the Airfield for which this slot information applies.
   */
  idAirfield?: string;

  /**
   * Minimum time that must elapse between different aircraft leaving and entering
   * this slot, in minutes.
   */
  minSeparation?: number;

  /**
   * Optional notes/comments for this airfield slot.
   */
  notes?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * Zulu time this slot is first available based on daily standard hours. Not
   * applicable to slots with type PARKING. Abnormal hours, such as holidays, should
   * be marked via the AirfieldSlotConsumption schema.
   */
  startTime?: string;

  /**
   * Designates how this slot can be used (WORKING, PARKING, TAKEOFF, LANDING,
   * OTHER).
   */
  type?: 'WORKING' | 'PARKING' | 'TAKEOFF' | 'LANDING' | 'OTHER';

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

/**
 * Airfield slot use data. Contains the dynamic data associated with the status and
 * use of specific airfield slots.
 */
export interface AirfieldslotconsumptionFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Unique identifier of the airfield slot for which this slot consumption record is
   * referencing.
   */
  idAirfieldSlot: string;

  /**
   * Number of aircraft using this slot for this time.
   */
  numAircraft: number;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * The start of the slot window, in ISO 8601 UTC format.
   */
  startTime: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Alternate identifier of the sortie arriving at the slot start time provided by
   * the source.
   */
  altArrSortieId?: string;

  /**
   * Alternate identifier of the sortie departing at the slot end time provided by
   * the source.
   */
  altDepSortieId?: string;

  /**
   * Comments from the approver.
   */
  appComment?: string;

  /**
   * Initials of the person approving the use of this slot. Use SYSTEM if
   * auto-approved without human involvement.
   */
  appInitials?: string;

  /**
   * Short name of the organization approving the use of this slot.
   */
  appOrg?: string;

  /**
   * Array of call signs of the aircraft using this slot.
   */
  callSigns?: Array<string>;

  /**
   * Identifying name of the aircraft using this slot. Names are often Prior
   * Permission Required (PPR) numbers or other similar human-readable identifiers.
   */
  consumer?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * The end of the slot window, in ISO 8601 UTC format.
   */
  endTime?: string;

  /**
   * Unique identifier of the sortie arriving at the slot start time.
   */
  idArrSortie?: string;

  /**
   * Unique identifier of the sortie departing at the slot end time.
   */
  idDepSortie?: string;

  /**
   * Mission identifier using this slot according to Mobility Air Forces (MAF)
   * Encode/Decode procedures.
   */
  missionId?: string;

  /**
   * The aircraft Model Design Series designation of the aircraft occupying this
   * slot.
   */
  occAircraftMDS?: string;

  /**
   * Time the aircraft began occupying this slot, in ISO 8601 UTC format with
   * millisecond precision.
   */
  occStartTime?: string;

  /**
   * The tail number of the aircraft occupying this slot.
   */
  occTailNumber?: string;

  /**
   * Flag indicating if the slot is occupied.
   */
  occupied?: boolean;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Comments from the requester.
   */
  reqComment?: string;

  /**
   * Initials of the person requesting the use of this slot. Use SYSTEM if this
   * request is auto-generated by an auto-planning system.
   */
  reqInitials?: string;

  /**
   * Short name of the organization requesting use of this slot.
   */
  reqOrg?: string;

  /**
   * The aircraft Model Design Series designation of the aircraft this slot is
   * reserved for.
   */
  resAircraftMDS?: string;

  /**
   * Mission identifier reserving this slot according to Mobility Air Forces (MAF)
   * Encode/Decode procedures.
   */
  resMissionId?: string;

  /**
   * The reason the slot reservation was made.
   */
  resReason?: string;

  /**
   * The tail number of the aircraft this slot is reserved for.
   */
  resTailNumber?: string;

  /**
   * Indicates the type of reservation (e.g. M for Mission, A for Aircraft, O for
   * Other).
   */
  resType?: string;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * Current status of this slot (REQUESTED / APPROVED / DENIED / BLOCKED / OTHER).
   */
  status?: 'REQUESTED' | 'APPROVED' | 'DENIED' | 'BLOCKED' | 'OTHER';

  /**
   * The desired time for aircraft action such as landing, take off, parking, etc.,
   * in ISO 8601 UTC format.
   */
  targetTime?: string;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

/**
 * The airfield status contains dynamic data of an airfield's capabilities.
 */
export interface AirfieldstatusFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Unique identifier of the Airfield for which this status is referencing.
   */
  idAirfield: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Alternate airfield identifier provided by the source.
   */
  altAirfieldId?: string;

  /**
   * The name of the person who approved the airfield survey review.
   */
  approvedBy?: string;

  /**
   * The date that survey review changes were approved for this airfield, in ISO 8601
   * UTC format with millisecond precision.
   */
  approvedDate?: string;

  /**
   * The category of aircraft rescue and fire fighting (ARFF) services that are
   * currently available at the airfield. Entries should include the code (FAA or
   * ICAO) and the category.
   */
  arffCat?: string;

  /**
   * Maximum on ground (MOG) number of high-reach/wide-body cargo aircraft that can
   * be serviced simultaneously based on spacing and manpower at the time of status.
   */
  cargoMOG?: number;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Maximum on ground (MOG) number of fleet aircraft that can be serviced
   * simultaneously based on spacing and manpower at the time of status.
   */
  fleetServiceMOG?: number;

  /**
   * Maximum on ground (MOG) number of aircraft that can be simultaneously refueled
   * based on spacing and manpower at the time of status.
   */
  fuelMOG?: number;

  /**
   * Array of quantities for each fuel type at the airfield, in kilograms. The values
   * in this array must correspond to the position index in fuelTypes. This array
   * must be the same length as fuelTypes.
   */
  fuelQtys?: Array<number>;

  /**
   * Array of fuel types available at the airfield. This array must be the same
   * length as fuelQtys.
   */
  fuelTypes?: Array<string>;

  /**
   * The expected time to receive ground support equipment (e.g. power units, air
   * units, cables, hoses, etc.), in minutes.
   */
  gseTime?: number;

  /**
   * The level of medical support and capabilities available at the airfield.
   */
  medCap?: string;

  /**
   * Description of the current status of the airfield.
   */
  message?: string;

  /**
   * Array of quantities for each material handling equipment types at the airfield.
   * The values in this array must correspond to the position index in mheTypes. This
   * array must be the same length as mheTypes.
   */
  mheQtys?: Array<number>;

  /**
   * Array of material handling equipment types at the airfield. This array must be
   * the same length as mheQtys.
   */
  mheTypes?: Array<string>;

  /**
   * Maximum on ground (MOG) number of aircraft that can be simultaneously ground
   * handled for standard maintenance based on spacing and manpower at the time of
   * status.
   */
  mxMOG?: number;

  /**
   * Maximum on ground (MOG) number of parking narrow-body aircraft based on spacing
   * and manpower at the time of status.
   */
  narrowParkingMOG?: number;

  /**
   * Maximum on ground (MOG) number of working narrow-body aircraft based on spacing
   * and manpower at the time of status.
   */
  narrowWorkingMOG?: number;

  /**
   * The number of aircraft that are currently on ground (COG) at the airfield.
   */
  numCOG?: number;

  /**
   * Maximum on ground (MOG) number of aircraft due to items not directly related to
   * the airfield infrastructure or aircraft servicing capability based on spacing
   * and manpower at the time of status.
   */
  operatingMOG?: number;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Maximum on ground (MOG) number of high-reach/wide-body passenger aircraft that
   * can be serviced simultaneously based on spacing and manpower at the time of
   * status.
   */
  passengerServiceMOG?: number;

  /**
   * The primary frequency which the airfield is currently operating, in megahertz.
   */
  priFreq?: number;

  /**
   * The number or ID of primary runway at the airfield.
   */
  priRwyNum?: string;

  /**
   * The name of the person who reviewed the airfield survey.
   */
  reviewedBy?: string;

  /**
   * The date the airfield survey was reviewed, in ISO 8601 UTC format with
   * millisecond precision.
   */
  reviewedDate?: string;

  /**
   * The primary runway condition reading value used for determining runway braking
   * action, from 0 to 26. A value of 0 indicates braking action is poor or
   * non-existent, where a value of 26 indicates braking action is good.
   */
  rwyCondReading?: number;

  /**
   * The primary runway friction factor which is dependent on the surface friction
   * between the tires of the aircraft and the runway surface, from 0 to 100. A lower
   * number indicates less friction and less braking response.
   */
  rwyFrictionFactor?: number;

  /**
   * Array of markings currently on the primary runway.
   */
  rwyMarkings?: Array<string>;

  /**
   * Array of slot types that an airfield requires a particular aircraft provide in
   * order to consume a slot at this location.
   */
  slotTypesReq?: Array<string>;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * The date the airfield survey was performed, in ISO 8601 UTC format with
   * millisecond precision.
   */
  surveyDate?: string;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;

  /**
   * Maximum on ground (MOG) number of parking wide-body aircraft based on spacing
   * and manpower at the time of status. Additional information about this field as
   * it pertains to specific aircraft type may be available in an associated
   * SiteOperations record.
   */
  wideParkingMOG?: number;

  /**
   * Maximum on ground (MOG) number of working wide-body aircraft based on spacing
   * and manpower at the time of status. Additional information about this field as
   * it pertains to specific aircraft type may be available in an associated
   * SiteOperations record.
   */
  wideWorkingMOG?: number;
}

/**
 * Information related to how an aircraft is loaded with cargo, equipment, and
 * passengers.
 */
export interface AirloadplanFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * The current estimated time that the aircraft is planned to depart, in ISO 8601
   * UTC format with millisecond precision.
   */
  estDepTime: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Allowable Cabin Load (ACL) onboard the aircraft. The maximum weight of
   * passengers, baggage, and cargo that can be safely transported in the aircraft
   * cabin, in kilograms.
   */
  aclOnboard?: number;

  /**
   * Allowable Cabin Load (ACL) released this leg. The weight of passengers, baggage,
   * and cargo released from the aircraft cabin, in kilograms.
   */
  aclReleased?: number;

  /**
   * The Model Design Series designation of the aircraft supporting this load plan.
   */
  aircraftMDS?: string;

  /**
   * Collection of hazmat actuals associated with this load plan.
   */
  airLoadPlanHazmatActuals?: Array<AirloadplanFull.AirLoadPlanHazmatActual>;

  /**
   * Collection of human remains transport information associated with this load
   * plan.
   */
  airLoadPlanHR?: Array<AirloadplanFull.AirLoadPlanHr>;

  /**
   * Collection of cargo information located at the pallet positions associated with
   * this load plan.
   */
  airLoadPlanPalletDetails?: Array<AirloadplanFull.AirLoadPlanPalletDetail>;

  /**
   * Collection of passenger and cargo details associated with this load plan for
   * this leg of the mission.
   */
  airLoadPlanPaxCargo?: Array<AirloadplanFull.AirLoadPlanPaxCargo>;

  /**
   * Collection of unit line number actuals associated with this load plan.
   */
  airLoadPlanULNActuals?: Array<AirloadplanFull.AirLoadPlanUlnActual>;

  /**
   * Optional identifier of arrival airfield with no International Civil Organization
   * (ICAO) code.
   */
  arrAirfield?: string;

  /**
   * The arrival International Civil Organization (ICAO) code of the landing
   * airfield.
   */
  arrICAO?: string;

  /**
   * Time the loadmaster or boom operator is available for cargo loading/unloading,
   * in ISO 8601 UTC format with millisecond precision.
   */
  availableTime?: string;

  /**
   * The basic weight of the aircraft multiplied by the distance between the
   * reference datum and the aircraft's center of gravity, in Newton-meters.
   */
  basicMoment?: number;

  /**
   * The weight of the aircraft without passengers, cargo, equipment, or usable fuel,
   * in kilograms.
   */
  basicWeight?: number;

  /**
   * Time the cargo briefing was given to the loadmaster or boom operator, in ISO
   * 8601 UTC format with millisecond precision.
   */
  briefTime?: string;

  /**
   * The call sign of the mission supporting this load plan.
   */
  callSign?: string;

  /**
   * Maximum fuselage station (FS) where cargo can be stored. FS is the distance from
   * the reference datum, in meters.
   */
  cargoBayFSMax?: number;

  /**
   * Minimum fuselage station (FS) where cargo can be stored. FS is the distance from
   * the reference datum, in meters.
   */
  cargoBayFSMin?: number;

  /**
   * Width of the cargo bay, in meters.
   */
  cargoBayWidth?: number;

  /**
   * The cargo configuration required for this leg (e.g. C-1, C-2, C-3, DV-1, DV-2,
   * AE-1, etc.). Configuration meanings are determined by the data source.
   */
  cargoConfig?: string;

  /**
   * The sum of cargo moments of all cargo on board the aircraft, in Newton-meters.
   * Each individual cargo moment is the weight of the cargo multiplied by the
   * distance between the reference datum and the cargo's center of gravity.
   */
  cargoMoment?: number;

  /**
   * Volume of cargo space in the aircraft, in cubic meters.
   */
  cargoVolume?: number;

  /**
   * The weight of the cargo on board the aircraft, in kilograms.
   */
  cargoWeight?: number;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * The number of crew members on the aircraft.
   */
  crewSize?: number;

  /**
   * Optional identifier of departure airfield with no International Civil
   * Organization (ICAO) code.
   */
  depAirfield?: string;

  /**
   * The departure International Civil Organization (ICAO) code of the departure
   * airfield.
   */
  depICAO?: string;

  /**
   * Description of the equipment configuration (e.g. Standard, Ferry, JBLM, CHS,
   * Combat, etc.). Configuration meanings are determined by the data source.
   */
  equipConfig?: string;

  /**
   * The current estimated time that the aircraft is planned to arrive, in ISO 8601
   * UTC format with millisecond precision.
   */
  estArrTime?: string;

  /**
   * The estimated weight of usable fuel upon landing multiplied by the distance
   * between the reference datum and the fuel's center of gravity, in Newton-meters.
   */
  estLandingFuelMoment?: number;

  /**
   * The estimated weight of usable fuel upon landing, in kilograms.
   */
  estLandingFuelWeight?: number;

  /**
   * Optional ID from external systems. This field has no meaning within UDL and is
   * provided as a convenience for systems that require tracking of an internal
   * system generated ID.
   */
  externalId?: string;

  /**
   * The fuel weight on board the aircraft multiplied by the distance between the
   * reference datum and the fuel's center of gravity, in Newton-meters.
   */
  fuelMoment?: number;

  /**
   * The weight of usable fuel on board the aircraft, in kilograms.
   */
  fuelWeight?: number;

  /**
   * The center of gravity of the aircraft using the gross weight and gross moment,
   * as a percentage of the mean aerodynamic chord (%MAC).
   */
  grossCG?: number;

  /**
   * The sum of moments of all items making up the gross weight of the aircraft, in
   * Newton-meters.
   */
  grossMoment?: number;

  /**
   * The total weight of the aircraft at takeoff including passengers, cargo,
   * equipment, and usable fuel, in kilograms.
   */
  grossWeight?: number;

  /**
   * The UDL ID of the mission this record is associated with.
   */
  idMission?: string;

  /**
   * The UDL ID of the aircraft sortie this record is associated with.
   */
  idSortie?: string;

  /**
   * The center of gravity of the aircraft using the landing weight and landing
   * moment, as a percentage of the mean aerodynamic chord (%MAC).
   */
  landingCG?: number;

  /**
   * The sum of moments of all items making up the gross weight of the aircraft upon
   * landing, in Newton-meters.
   */
  landingMoment?: number;

  /**
   * The gross weight of the aircraft upon landing, in kilograms.
   */
  landingWeight?: number;

  /**
   * The leg number of the mission supporting this load plan.
   */
  legNum?: number;

  /**
   * Name of the loadmaster or boom operator who received the cargo briefing.
   */
  loadmasterName?: string;

  /**
   * Rank of the loadmaster or boom operator overseeing cargo loading/unloading.
   */
  loadmasterRank?: string;

  /**
   * Remarks concerning this load plan.
   */
  loadRemarks?: string;

  /**
   * The mission number of the mission supporting this load plan.
   */
  missionNumber?: string;

  /**
   * The operating weight of the aircraft multiplied by the distance between the
   * reference datum and the aircraft's center of gravity, in Newton-meters.
   */
  operatingMoment?: number;

  /**
   * The basic weight of the aircraft including passengers and equipment, in
   * kilograms.
   */
  operatingWeight?: number;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Number of pallet positions on the aircraft.
   */
  ppOnboard?: number;

  /**
   * Number of pallet positions released this leg.
   */
  ppReleased?: number;

  /**
   * Time the loadmaster or boom operator is scheduled to begin overseeing cargo
   * loading/unloading, in ISO 8601 UTC format with millisecond precision.
   */
  schedTime?: string;

  /**
   * Number of passenger seats on the aircraft.
   */
  seatsOnboard?: number;

  /**
   * Number of passenger seats released this leg.
   */
  seatsReleased?: number;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * The tail number of the aircraft supporting this load plan.
   */
  tailNumber?: string;

  /**
   * Description of the fuel tank(s) configuration (e.g. ER, NON-ER, etc.).
   * Configuration meanings are determined by the data source.
   */
  tankConfig?: string;

  /**
   * Time the row was updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;

  /**
   * Alphanumeric code that describes general cargo-related utilization and
   * characteristics for an itinerary point.
   */
  utilCode?: string;

  /**
   * The center of gravity of the aircraft using the zero fuel weight and zero fuel
   * total moment, as a percentage of the mean aerodynamic chord (%MAC).
   */
  zeroFuelCG?: number;

  /**
   * The zero fuel weight of the aircraft multiplied by the distance between the
   * reference datum and the aircraft's center of gravity, in Newton-meters.
   */
  zeroFuelMoment?: number;

  /**
   * The operating weight of the aircraft including cargo, mail, baggage, and
   * passengers, but without usable fuel, in kilograms.
   */
  zeroFuelWeight?: number;
}

export namespace AirloadplanFull {
  /**
   * Collection of hazmat actuals associated with this load plan.
   */
  export interface AirLoadPlanHazmatActual {
    /**
     * The Air Special Handling Code (ASHC) indicates the type of special handling
     * required for hazardous cargo.
     */
    ashc?: string;

    /**
     * Compatibility group code used to specify the controls for the transportation and
     * storage of hazardous materials according to the Hazardous Materials Regulations
     * issued by the U.S. Department of Transportation.
     */
    cgc?: string;

    /**
     * Class and division of the hazardous material according to the Hazardous
     * Materials Regulations issued by the U.S. Department of Transportation.
     */
    classDiv?: string;

    /**
     * Description of the hazardous item.
     */
    hazDescription?: string;

    /**
     * Remarks concerning this hazardous material.
     */
    hazmatRemarks?: string;

    /**
     * United Nations number or North American number that identifies hazardous
     * materials according to the Hazardous Materials Regulations issued by the U.S.
     * Department of Transportation.
     */
    hazNum?: string;

    /**
     * Designates the type of hazmat number for the item (UN for United Nations or NA
     * for North American).
     */
    hazNumType?: string;

    /**
     * The International Civil Aviation Organization (ICAO) code of the site where the
     * hazardous material is unloaded.
     */
    hazOffICAO?: string;

    /**
     * Itinerary number that identifies where the hazardous material is unloaded.
     */
    hazOffItin?: number;

    /**
     * The International Civil Aviation Organization (ICAO) code of the site where the
     * hazardous material is loaded.
     */
    hazOnICAO?: string;

    /**
     * Itinerary number that identifies where the hazardous material is loaded.
     */
    hazOnItin?: number;

    /**
     * Number of pieces of hazardous cargo.
     */
    hazPieces?: number;

    /**
     * Transportation Control Number (TCN) of the hazardous item.
     */
    hazTcn?: string;

    /**
     * Total weight of hazardous cargo, including non-explosive parts, in kilograms.
     */
    hazWeight?: number;

    /**
     * United Nations proper shipping name of the hazardous material according to the
     * Hazardous Materials Regulations issued by the U.S. Department of Transportation.
     */
    itemName?: string;

    /**
     * Manufacturer's lot number for identification of the hazardous material.
     */
    lotNum?: string;

    /**
     * Net explosive weight of the hazardous material, in kilograms.
     */
    netExpWt?: number;
  }

  /**
   * Collection of human remains transport information associated with this load
   * plan.
   */
  export interface AirLoadPlanHr {
    /**
     * Type of transfer case used.
     */
    container?: string;

    /**
     * Name of the escort for the remains.
     */
    escort?: string;

    /**
     * The current estimated time of arrival for the remains in ISO 8601 UTC format
     * with millisecond precision.
     */
    hrEstArrTime?: string;

    /**
     * The International Civil Aviation Organization (ICAO) code of the site where the
     * remains are unloaded.
     */
    hrOffICAO?: string;

    /**
     * Itinerary number that identifies where the remains are unloaded.
     */
    hrOffItin?: number;

    /**
     * The International Civil Aviation Organization (ICAO) code of the site where the
     * remains are loaded.
     */
    hrOnICAO?: string;

    /**
     * Itinerary number that identifies where the remains are loaded.
     */
    hrOnItin?: number;

    /**
     * Remarks concerning the remains.
     */
    hrRemarks?: string;

    /**
     * Name of the deceased.
     */
    name?: string;

    /**
     * Rank of the deceased.
     */
    rank?: string;

    /**
     * Name of the receiving agency or funeral home to which the remains are being
     * delivered.
     */
    recAgency?: string;

    /**
     * Branch of service of the deceased.
     */
    service?: string;

    /**
     * Flag indicating if the remains are viewable.
     */
    viewable?: boolean;
  }

  /**
   * Collection of cargo information located at the pallet positions associated with
   * this load plan.
   */
  export interface AirLoadPlanPalletDetail {
    /**
     * Category of special interest cargo.
     */
    category?: string;

    /**
     * Pallet position of the cargo.
     */
    pp?: string;

    /**
     * Description of the cargo.
     */
    ppDescription?: string;

    /**
     * The International Civil Aviation Organization (ICAO) code of the site where the
     * cargo is unloaded.
     */
    ppOffICAO?: string;

    /**
     * Number of pieces included in the Transportation Control Number (TCN).
     */
    ppPieces?: number;

    /**
     * Remarks concerning the cargo at this pallet position.
     */
    ppRemarks?: string;

    /**
     * Transportation Control Number (TCN) of the cargo.
     */
    ppTcn?: string;

    /**
     * Total weight of the cargo at this pallet position in kilograms.
     */
    ppWeight?: number;

    /**
     * Flag indicating if this cargo is considered special interest.
     */
    specialInterest?: boolean;
  }

  /**
   * Collection of passenger and cargo details associated with this load plan for
   * this leg of the mission.
   */
  export interface AirLoadPlanPaxCargo {
    /**
     * Number of ambulatory medical passengers in this group.
     */
    ambPax?: number;

    /**
     * Number of patient attendant passengers in this group.
     */
    attPax?: number;

    /**
     * Number of space available passengers in this group.
     */
    availablePax?: number;

    /**
     * Weight of baggage in this group in kilograms.
     */
    bagWeight?: number;

    /**
     * Number of civilian passengers in this group.
     */
    civPax?: number;

    /**
     * Number of distinguished visitor passengers in this group.
     */
    dvPax?: number;

    /**
     * Number of foreign national passengers in this group.
     */
    fnPax?: number;

    /**
     * Weight of cargo in this group in kilograms.
     */
    groupCargoWeight?: number;

    /**
     * Describes the status or action needed for this group of passenger and cargo data
     * (e.g. ARRONBD, OFFTHIS, THROUGH, ONTHIS, DEPONBD, OFFNEXT).
     */
    groupType?: string;

    /**
     * Number of litter-bound passengers in this group.
     */
    litPax?: number;

    /**
     * Weight of mail in this group in kilograms.
     */
    mailWeight?: number;

    /**
     * Number of cargo pallets in this group.
     */
    numPallet?: number;

    /**
     * Weight of pallets, chains, and devices in this group in kilograms.
     */
    palletWeight?: number;

    /**
     * Weight of passengers in this group in kilograms.
     */
    paxWeight?: number;

    /**
     * Number of space required passengers in this group.
     */
    requiredPax?: number;
  }

  /**
   * Collection of unit line number actuals associated with this load plan.
   */
  export interface AirLoadPlanUlnActual {
    /**
     * Number of ambulatory patients associated with this load plan.
     */
    numAmbulatory?: number;

    /**
     * Number of attendants associated with this load plan.
     */
    numAttendant?: number;

    /**
     * Number of litter patients associated with this load plan.
     */
    numLitter?: number;

    /**
     * Number of passengers associated with this load plan.
     */
    numPax?: number;

    /**
     * Identifier of the offload itinerary location.
     */
    offloadId?: number;

    /**
     * Offload location code.
     */
    offloadLOCode?: string;

    /**
     * Identifier of the onload itinerary location.
     */
    onloadId?: number;

    /**
     * Onload location code.
     */
    onloadLOCode?: string;

    /**
     * Identification number of the Operation Plan (OPLAN) associated with this load
     * plan.
     */
    oplan?: string;

    /**
     * Project name.
     */
    projName?: string;

    /**
     * Unit line number.
     */
    uln?: string;

    /**
     * Total weight of all cargo items for this unit line number in kilograms.
     */
    ulnCargoWeight?: number;

    /**
     * Remarks concerning these unit line number actuals.
     */
    ulnRemarks?: string;
  }
}

/**
 * Beta Version Airspace Control Order: Contains airspace coordination information
 * and instructions that have been issued by an airspace control authority.
 */
export interface AirspacecontrolorderFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Specifies the unique operation or exercise name, nickname, or codeword assigned
   * to a joint exercise or operation plan.
   */
  opExName: string;

  /**
   * The identifier of the originator of this message.
   */
  originator: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * The start of the effective time period of this airspace control order, in ISO
   * 8601 UTC format with millisecond precision.
   */
  startTime: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Free text information expressed in natural language.
   */
  acoComments?: string;

  /**
   * The serial number of this airspace control order.
   */
  acoSerialNum?: string;

  /**
   * Mandatory nested segment to report multiple airspace control means statuses
   * within an ACOID.
   */
  airspaceControlMeansStatus?: Array<AirspacecontrolorderFull.AirspaceControlMeansStatus>;

  /**
   * The airspaceControlReferences set provides both USMTF and non-USMTF references
   * for this airspace control order.
   */
  airspaceControlOrderReferences?: Array<AirspacecontrolorderFull.AirspaceControlOrderReference>;

  /**
   * Name of the area of the command for which the ACO is valid.
   */
  areaOfValidity?: string;

  /**
   * Mandatory if classSource uses the "IORIG" designator. Must be a REASON FOR
   * CLASSIFICATION code.
   */
  classReasons?: Array<string>;

  /**
   * Markings defining the source material or the original classification authority
   * for the ACO message.
   */
  classSource?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Coded entries that provide justification for exemption from automatic
   * downgrading or declassification of the airspace control order.
   */
  declassExemptionCodes?: Array<string>;

  /**
   * Markings providing the literal guidance or date for downgrading or declassifying
   * the airspace control order.
   */
  downgradeInsDates?: Array<string>;

  /**
   * Specifies the geodetic datum by which the spatial coordinates of the controlled
   * airspace are calculated.
   */
  geoDatum?: string;

  /**
   * The month in which the message originated.
   */
  month?: string;

  /**
   * Supplementary name that can be used to further identify exercise nicknames, or
   * to provide the primary nickname of the option or the alternative of an
   * operational plan.
   */
  opExInfo?: string;

  /**
   * The secondary supplementary nickname of the option or the alternative of the
   * operational plan or order.
   */
  opExInfoAlt?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * The official identifier of the military establishment responsible for the
   * operation plan and the identification number assigned to this plan.
   */
  planOrigNum?: string;

  /**
   * The qualifier which caveats the message status.
   */
  qualifier?: string;

  /**
   * The serial number associated with the message qualifier.
   */
  qualSN?: number;

  /**
   * The unique message identifier sequentially assigned by the originator.
   */
  serialNum?: string;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * A qualifier for the end of the effective time period of this airspace control
   * order, such as AFTER, ASOF, NLT, etc. Used with field stopTime to indicate a
   * relative time.
   */
  stopQualifier?: string;

  /**
   * The end of the effective time period of this airspace control order, in ISO 8601
   * UTC format with millisecond precision.
   */
  stopTime?: string;

  /**
   * Array of unique link 16 identifiers that will be assigned to a future airspace
   * control means.
   */
  undLnkTrks?: Array<string>;
}

export namespace AirspacecontrolorderFull {
  /**
   * Mandatory nested segment to report multiple airspace control means statuses
   * within an ACOID.
   */
  export interface AirspaceControlMeansStatus {
    /**
     * A conditional nested segment to report multiple airspace control means within a
     * particular airspace control means status.
     */
    airspaceControlMeans?: Array<AirspaceControlMeansStatus.AirspaceControlMean>;

    /**
     * Status of Airspace Control Means. Must be ADD, CHANGE, or DELETE.
     */
    cmStat?: string;

    /**
     * Airspace control means name or designator. Mandatory if acmStat equals "DELETE,"
     * otherwise this field is prohibited.
     */
    cmStatId?: Array<string>;
  }

  export namespace AirspaceControlMeansStatus {
    /**
     * A conditional nested segment to report multiple airspace control means within a
     * particular airspace control means status.
     */
    export interface AirspaceControlMean {
      /**
       * The controlPoint set describes any reference/controlling/rendezvous point for a
       * given airspace control means.
       */
      airspaceControlPoint?: Array<AirspaceControlMean.AirspaceControlPoint>;

      /**
       * The timePeriods set describes the effective datetime for a given airspace
       * control means.
       */
      airspaceTimePeriod?: Array<AirspaceControlMean.AirspaceTimePeriod>;

      /**
       * A bearing measured from true North, in angular degrees. If cmShape is set to
       * "POLYARC" or "RADARC", this field is required and is mapped to the "beginning"
       * radial bearing parameter.
       */
      bearing0?: number;

      /**
       * A bearing measured from true North, in angular degrees. If cmShape is set to
       * "POLYARC" or "RADARC", this field is required and is mapped to the "ending"
       * radial bearing parameter.
       */
      bearing1?: number;

      /**
       * Airspace control means name or designator.
       */
      cmId?: string;

      /**
       * Designates the geometric type that defines the airspace shape. One of CIRCLE,
       * CORRIDOR, LINE, ORBIT, etc.
       */
      cmShape?: 'POLYARC' | '1TRACK' | 'POLYGON' | 'CIRCLE' | 'CORRIDOR' | 'APOINT' | 'AORBIT' | 'GEOLINE';

      /**
       * The code for the type of airspace control means.
       */
      cmType?: string;

      /**
       * The commander responsible within a specified geographical area for the airspace
       * control operation assigned to him.
       */
      cntrlAuth?: string;

      /**
       * The frequency for the airspace control authority. Can specify HZ, KHZ, MHZ, GHZ
       * or a DESIG frequency designator code.
       */
      cntrlAuthFreqs?: Array<string>;

      /**
       * A geospatial point coordinate specified in DMS (Degrees, Minutes, Seconds)
       * format. The fields coord0 and coord1 should be used in the specification of any
       * airspace control shape that requires exactly one (1) or two (2) reference points
       * for construction. For shapes requiring one reference point, for instance, when
       * cmShape is set to "APOINT", this field is required and singularly defines the
       * shape. Similarly, this field is required to define the center point of a
       * "CIRCLE" shape, or the "origin of bearing" for arcs.
       */
      coord0?: string;

      /**
       * A geospatial point coordinate specified in DMS (Degrees, Minutes, Seconds)
       * format. The fields coord0 and coord1 should be used in the specification of any
       * airspace control shape that requires exactly one (1) or two (2) reference points
       * for construction. For shapes requiring one reference point, for instance, when
       * cmShape is set to "APOINT", this field is required and singularly defines the
       * shape. Similarly, this field is required to define the center point of a
       * "CIRCLE" shape, or the "origin of bearing" for arcs.
       */
      coord1?: string;

      /**
       * An array of at least two alphanumeric symbols used to serially identify the
       * corridor waypoints. If cmShape is set to "CORRIDOR", one of either corrWayPoints
       * or polyCoord is required to specify the centerline of the corridor path.
       */
      corrWayPoints?: Array<string>;

      /**
       * Description of the airspace vertical dimension.
       */
      effVDim?: string;

      /**
       * General informat detailing the transit instruction for the airspace control
       * means.
       */
      freeText?: string;

      /**
       * Used to provide transit instructions for the airspace control means.
       */
      genTextInd?: string;

      /**
       * Specifies the geodetic datum by which the spatial coordinates of the controlled
       * airspace are calculated, if different from the top level ACO datum.
       */
      geoDatumAlt?: string;

      /**
       * Unique Link 16 identifier assigned to the airspace control means.
       */
      link16Id?: string;

      /**
       * Orbit alignment look-up code. Can be C=Center, L=Left, R=Right.
       */
      orbitAlignment?: string;

      /**
       * A set of geospatial coordinates specified in DMS (Degrees, Minutes, Seconds)
       * format which determine the vertices of a one or two dimensional geospatial
       * shape. When cmShape is set to "POLYARC" or "POLYGON", this field is required as
       * applied in the construction of the area boundary. If cmShape is set to
       * "CORRIDOR" or "GEOLINE", this field is required and can be interpreted as an
       * ordered set of points along a path in space.
       */
      polyCoord?: Array<string>;

      /**
       * A distance that represents a radial magnitude. If cmShape is set to "CIRCLE" or
       * "POLYARC", one of either fields radMag0 or radMag1 is required. If cmShape is
       * set to "RADARC", this field is required and maps to the "inner" radial magnitude
       * arc limit. If provided, the field radMagUnit is required.
       */
      radMag0?: number;

      /**
       * A distance that represents a radial magnitude. If cmShape is set to "CIRCLE" or
       * "POLYARC", one of either fields radMag0 or radMag1 is required. If cmShape is
       * set to "RADARC", this field is required and maps to the "outer" radial magnitude
       * arc limit. If provided, the field radMagUnit is required.
       */
      radMag1?: number;

      /**
       * Specifies the unit of length in which radial magnitudes are given. Use M for
       * meters, KM for kilometers, or NM for nautical miles.
       */
      radMagUnit?: string;

      /**
       * Index of a segment in an airtrack, which is defined by an ordered set of points.
       */
      trackLeg?: number;

      /**
       * The altitude at or below which the vertical position of an aircraft is
       * controlled by reference to true altitude.
       */
      transAltitude?: string;

      /**
       * Designates the means by which a defined airspace control means is to be used.
       */
      usage?: string;

      /**
       * Used to describe the "side to side" distance of a target, object or area. If
       * cmShape is set to "CORRIDOR" or "AORBIT", this field is required and is mapped
       * to the width parameter. If provided, the field widthUnit is required.
       */
      width?: number;

      /**
       * Given an ordered pair of spatial coordinates (p0, p1), defines a distance
       * extending into the LEFT half-plane relative to the direction of the vector that
       * maps p0 to p1. If cmShape is set to "1TRACK", this field is required to define
       * the width of the airspace track as measured from the left of the track segment
       * line. If provided, the field widthUnit is required.
       */
      widthLeft?: number;

      /**
       * Given an ordered pair of spatial coordinates (p0, p1), defines a distance
       * extending into the RIGHT half-plane relative to the direction of the vector that
       * maps p0 to p1. If cmShape is set to "1TRACK", this field is required to define
       * the width of the airspace track as measured from the right of the track segment
       * line. If provided, the field widthUnit is required.
       */
      widthRight?: number;

      /**
       * Specifies the unit of length for which widths are given. Use M for meters, KM
       * for kilometers, or NM for nautical miles.
       */
      widthUnit?: string;
    }

    export namespace AirspaceControlMean {
      /**
       * The controlPoint set describes any reference/controlling/rendezvous point for a
       * given airspace control means.
       */
      export interface AirspaceControlPoint {
        /**
         * The altitude of the control point.
         */
        ctrlPtAltitude?: string;

        /**
         * A geospatial point coordinate specified in DMS (Degrees, Minutes, Seconds)
         * format that represents the location of the control point.
         */
        ctrlPtLocation?: string;

        /**
         * The name applied to the control point, used as a reference.
         */
        ctrlPtName?: string;

        /**
         * One of possible control point type codes, such as CP, ER, OT, etc.
         */
        ctrlPtType?: string;
      }

      /**
       * The timePeriods set describes the effective datetime for a given airspace
       * control means.
       */
      export interface AirspaceTimePeriod {
        /**
         * Mandatory if timeMode is INTERVAL. Can be a numerical multiplier on an interval
         * frequency code, a stop time qualifier code such as AFTER, NET, UFN, etc, or a
         * datetime like string.
         */
        intDur?: Array<string>;

        /**
         * Mandatory if timeMode is INTERVAL. Can be one of the interval frequency codes,
         * such as BIWEEKLY, DAILY, YEARLY, etc.
         */
        intFreq?: Array<string>;

        /**
         * The end time designating that the airspace control order is no longer active.
         * Can contain datetime information or a stop time qualifier code, such as AFTER,
         * NET, UFN, etc.
         */
        timeEnd?: string;

        /**
         * The airspace time code associated with the ACO. Can be DISCRETE, a fixed time
         * block, or INTERVAL, a repeating time block.
         */
        timeMode?: string;

        /**
         * The start time designating that the airspace control order is active.
         */
        timeStart?: string;
      }
    }
  }

  /**
   * The airspaceControlReferences set provides both USMTF and non-USMTF references
   * for this airspace control order.
   */
  export interface AirspaceControlOrderReference {
    /**
     * The originator of this reference.
     */
    refOriginator?: string;

    /**
     * The reference serial number.
     */
    refSerialNum?: string;

    /**
     * Array of NATO Subject Indicator Codes (SIC) or filing numbers of the document
     * being referenced.
     */
    refSICs?: Array<string>;

    /**
     * Specifies an alphabetic serial number identifying a reference pertaining to this
     * message.
     */
    refSId?: string;

    /**
     * Indicates any special actions, restrictions, guidance, or information relating
     * to this reference.
     */
    refSpecialNotation?: string;

    /**
     * Timestamp of the referenced message, in ISO 8601 UTC format with millisecond
     * precision.
     */
    refTs?: string;

    /**
     * Specifies the type for this reference.
     */
    refType?: string;
  }
}

/**
 * Self-reported information obtained from Automatic Identification System (AIS)
 * equipment. This contains information such as unique identification, status,
 * position, course, and speed. The AIS is an automatic tracking system that uses
 * transceivers on ships and is used by vessel traffic services. Although
 * technically and operationally distinct, the AIS system is analogous to ADS-B
 * that performs a similar function for aircraft. AIS is intended to assist a
 * vessel's watchstanding officers and allow maritime authorities to track and
 * monitor vessel movements. AIS integrates a standardized VHF transceiver with a
 * positioning system such as Global Positioning System receiver, with other
 * electronic navigation sensors, such as gyrocompass or rate of turn indicator.
 * Vessels fitted with AIS transceivers can be tracked by AIS base stations located
 * along coast lines or, when out of range of terrestrial networks, through a
 * growing number of satellites that are fitted with special AIS receivers which
 * are capable of deconflicting a large number of signatures.
 */
export interface AIsFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Source of the data.
   */
  source: string;

  /**
   * The timestamp that the vessel position was recorded, in ISO 8601 UTC format.
   */
  ts: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * The reference dimensions of the vessel, reported as [A, B, C, D], in meters.
   * Where the array values represent the distance fore (A), aft (B), to port (C),
   * and to starboard (D) of the navigation antenna. Array with values A = C = 0 and
   * B, D > 0 indicate the length (B) and width (D) of the vessel without antenna
   * position reference.
   */
  antennaRefDimensions?: Array<number>;

  /**
   * The average speed, in kilometers/hour, calculated for the subject vessel during
   * the latest voyage (port to port).
   */
  avgSpeed?: number;

  /**
   * A uniquely designated identifier for the vessel's transmitter station.
   */
  callSign?: string;

  /**
   * The reported cargo type. Intended as, but not constrained to, the USCG NAVCEN
   * AIS cargo definitions. Users should refer to USCG Navigation Center
   * documentation for specific definitions associated with ship and cargo types.
   * USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
   */
  cargoType?: string;

  /**
   * The course-over-ground reported by the vessel, in degrees.
   */
  course?: number;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * The US Geographic Unique Identifier of the current port hosting the vessel.
   */
  currentPortGUID?: string;

  /**
   * The UN Location Code of the current port hosting the vessel.
   */
  currentPortLOCODE?: string;

  /**
   * The destination of the vessel according to the AIS transmission.
   */
  destination?: string;

  /**
   * The Estimated Time of Arrival of the vessel at the destination, in ISO 8601 UTC
   * format.
   */
  destinationETA?: string;

  /**
   * The remaining distance, in kilometers, for the vessel to reach the reported
   * destination.
   */
  distanceToGo?: number;

  /**
   * The distance, in kilometers, that the vessel has travelled since departing the
   * last port.
   */
  distanceTravelled?: number;

  /**
   * The maximum static draught, in meters, of the vessel according to the AIS
   * transmission.
   */
  draught?: number;

  /**
   * The activity that the vessel is engaged in. This entry applies only when the
   * shipType = Other.
   */
  engagedIn?: string;

  /**
   * The Estimated Time of Arrival of the vessel at the destination port, according
   * to MarineTraffic calculations, in ISO 8601 UTC format.
   */
  etaCalculated?: string;

  /**
   * The date and time that the ETA was calculated by MarineTraffic, in ISO 8601 UTC
   * format.
   */
  etaUpdated?: string;

  /**
   * Unique identifier of the Track.
   */
  idTrack?: string;

  /**
   * Unique identifier of the vessel.
   */
  idVessel?: string;

  /**
   * The International Maritime Organization Number of the vessel. IMON is a
   * seven-digit number that uniquely identifies the vessel.
   */
  imon?: number;

  /**
   * The US Geographic Unique Identifier of the last port visited by the vessel.
   */
  lastPortGUID?: string;

  /**
   * The UN Location Code of the last port visited by the vessel.
   */
  lastPortLOCODE?: string;

  /**
   * WGS-84 latitude of the vessel position, in degrees. -90 to 90 degrees (negative
   * values south of equator).
   */
  lat?: number;

  /**
   * The overall length of the vessel, in meters. A value of 511 indicates a vessel
   * length of 511 meters or greater.
   */
  length?: number;

  /**
   * WGS-84 longitude of the vessel position, in degrees. -180 to 180 degrees
   * (negative values west of Prime Meridian).
   */
  lon?: number;

  /**
   * The maximum speed, in kilometers/hour, reported by the subject vessel during the
   * latest voyage (port to port).
   */
  maxSpeed?: number;

  /**
   * The Maritime Mobile Service Identity of the vessel. MMSI is a nine-digit number
   * that identifies the transmitter station of the vessel.
   */
  mmsi?: number;

  /**
   * The AIS Navigational Status of the vessel (e.g. Underway Using Engine, Moored,
   * Aground, etc.). Intended as, but not constrained to, the USCG NAVCEN navigation
   * status definitions. Users should refer to USCG Navigation Center documentation
   * for specific definitions associated with navigation status. USCG NAVCEN
   * documentation may be found at https://www.navcen.uscg.gov.
   */
  navStatus?: string;

  /**
   * The US Geographic Unique Identifier of the next destination port of the vessel.
   */
  nextPortGUID?: string;

  /**
   * The UN Location Code of the next destination port of the vessel.
   */
  nextPortLOCODE?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * The type of electronic position fixing device (e.g. GPS, GLONASS, etc.).
   * Intended as, but not constrained to, the USCG NAVCEN electronic position fixing
   * device definitions. Users should refer to USCG Navigation Center documentation
   * for specific device type information. USCG NAVCEN documentation may be found at
   * https://www.navcen.uscg.gov.
   */
  posDeviceType?: string;

  /**
   * Flag indicating high reported position accuracy (less than or equal to 10
   * meters). A value of 0/false indicates low accuracy (greater than 10 meters).
   */
  posHiAccuracy?: boolean;

  /**
   * Flag indicating high reported position latency (greater than 5 seconds). A value
   * of 0/false indicates low latency (less than 5 seconds).
   */
  posHiLatency?: boolean;

  /**
   * The Rate-of-Turn for the vessel, in degrees/minute. Positive value indicates
   * that the vessel is turning right.
   */
  rateOfTurn?: number;

  /**
   * Further description or explanation of the vessel or type.
   */
  shipDescription?: string;

  /**
   * The name of the vessel. Vessel names that exceed the AIS 20 character are
   * shortened (not truncated) to 15 character-spaces, followed by an underscore and
   * the last 4 characters-spaces of the vessel full name.
   */
  shipName?: string;

  /**
   * The reported ship type (e.g. Passenger, Tanker, Cargo, Other, etc.). See the
   * engagedIn and specialCraft entries for additional information on certain types
   * of vessels.
   */
  shipType?: string;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * The type of special craft designation of the vessel. This entry applies only
   * when the shipType = Special Craft.
   */
  specialCraft?: string;

  /**
   * Flag indicating that the vessel is engaged in a special maneuver (e.g. Waterway
   * Navigation).
   */
  specialManeuver?: boolean;

  /**
   * The speed-over-ground reported by the vessel, in kilometers/hour.
   */
  speed?: number;

  /**
   * The true heading reported by the vessel, in degrees.
   */
  trueHeading?: number;

  /**
   * The flag of the subject vessel according to AIS transmission.
   */
  vesselFlag?: string;

  /**
   * The breadth of the vessel, in meters. A value of 63 indicates a vessel breadth
   * of 63 meters or greater.
   */
  width?: number;
}

/**
 * The analytic imagery schema supports data plots and graphics of various types.
 * The records contain general file information, allows for annotations to
 * user-defined areas of interest on the graphics, and supports keyword searching.
 */
export interface AnalyticImageryFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * General type of content of this image (CONTOUR, DIAGRAM, HEATMAP, HISTOGRAM,
   * PLOT, SCREENSHOT).
   */
  content: string;

  /**
   * Indicator of whether the data is REAL, TEST, SIMULATED, or EXERCISE data.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Description of the image content and utility.
   */
  description: string;

  /**
   * The image file name.
   */
  filename: string;

  /**
   * The image file size, in bytes. The maximum file size for this service is
   * 40,000,000 bytes (40MB). Files exceeding the maximum size will be rejected.
   */
  filesize: number;

  /**
   * The type of image associated with this record (GIF, JPG, PNG, TIF).
   */
  imageType: string;

  /**
   * The message time of this image record, in ISO8601 UTC format with millisecond
   * precision.
   */
  msgTime: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON
   * representation of the geometry/geography, of the image as projected on the
   * ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST
   * or PUT request that also specifies a valid 'area' or 'atext' field.
   */
  agjson?: string;

  /**
   * Number of dimensions of the geometry depicted by region.
   */
  andims?: number;

  /**
   * Rectangular annotation limits, specified in pixels, as an array of arrays of the
   * coordinates [ [UL1x, UL1y], [UR1x, UR1y], [LR1x, LR1y], [LL1x, LL1y] ],
   * indicating the corners of a rectangle beginning with the Upper Left (UL) and
   * moving clockwise. Allows the image provider to highlight one or more rectangular
   * area(s) of interest. The array must contain Nx4 two-element arrays, where N is
   * the number of rectangles of interest. The associated annotation(s) should be
   * included in the annText array.
   */
  annLims?: Array<Array<number>>;

  /**
   * Annotation text, a string array of annotation(s) corresponding to the
   * rectangular areas specified in annLims. This array contains the annotation text
   * associated with the areas of interest indicated in annLims, in order. This array
   * should contain one annotation per four values of the area (annLims) array.
   */
  annText?: Array<string>;

  /**
   * Geographical spatial_ref_sys for region.
   */
  asrid?: number;

  /**
   * Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known
   * Text representation of the geometry/geography, of the image as projected on the
   * ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored
   * if included with a POST or PUT request that also specifies a valid 'area' field.
   */
  atext?: string;

  /**
   * Type of region as projected on the ground.
   */
  atype?: string;

  /**
   * MD5 checksum value of the file. The ingest/create operation will automatically
   * generate the value.
   */
  checksumValue?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * The start time, in ISO8601 UTC format with millisecond precision, of the data
   * used in the analysis or composition of the image content, when applicable.
   */
  dataStart?: string;

  /**
   * The stop time, in ISO8601 UTC format with millisecond precision, of the data
   * used in the analysis or composition of the image content, when applicable.
   */
  dataStop?: string;

  /**
   * A collection of feature assessments associated with the analytic imagery record.
   */
  featureAssessments?: Array<AnalyticImageryFull.FeatureAssessment>;

  /**
   * Unique identifier of the reporting sensor.
   */
  idSensor?: string;

  /**
   * User-defined set ID of a sequence of images. Used to associate related analytic
   * image records.
   */
  imageSetId?: string;

  /**
   * The number of images in an image set.
   */
  imageSetLength?: number;

  /**
   * The image height (vertical), in pixels.
   */
  imgHeight?: number;

  /**
   * The image width (horizontal), in pixels.
   */
  imgWidth?: number;

  /**
   * Array of searchable keywords for this analytic imagery record.
   */
  keywords?: Array<string>;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Optional identifier provided by the source to indicate the sensor for this
   * collection. This may be an internal identifier and not necessarily a valid
   * sensor ID.
   */
  origSensorId?: string;

  /**
   * Assessed satellite ID (NORAD RSO object number). The 'satId' and 'satIdConf'
   * arrays must match in size.
   */
  satId?: Array<string>;

  /**
   * Assessed satellite confidence corresponding to an assessment ID. Values are
   * between 0.0 and 1.0. The 'satId' and 'satIdConf' arrays must match in size.
   */
  satIdConf?: Array<number>;

  /**
   * The sequence number of an image within an image set. If null, then it is assumed
   * that the order of images in an imageSet is not relevant.
   */
  sequenceId?: number;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * Array of UUIDs of the UDL data records that are related to this image. See the
   * associated 'srcTyps' array for the specific types of data, positionally
   * corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must
   * match in size. See the corresponding srcTyps array element for the data type of
   * the UUID and use the appropriate API operation to retrieve that object.
   */
  srcIds?: Array<string>;

  /**
   * Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE,
   * POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that
   * are related to this image. See the associated 'srcIds' array for the record
   * UUIDs, positionally corresponding to the record types in this array. The
   * 'srcTyps' and 'srcIds' arrays must match in size.
   */
  srcTyps?: Array<string>;

  /**
   * Optional array of provider/source specific tags for this data, where each
   * element is no longer than 32 characters, used for implementing data owner
   * conditional access controls to restrict access to the data. Should be left null
   * by data providers unless conditional access controls are coordinated with the
   * UDL team.
   */
  tags?: Array<string>;

  /**
   * Optional identifier to track a commercial or marketplace transaction executed to
   * produce this data.
   */
  transactionId?: string;

  /**
   * Optional field indicating the units that apply to the x-axis of the attached
   * image, when applicable.
   */
  xUnits?: string;

  /**
   * Optional field indicating the units that apply to the y-axis of the attached
   * image, when applicable.
   */
  yUnits?: string;

  /**
   * Optional field indicating the units that apply to the z-axis of the attached
   * image, when applicable.
   */
  zUnits?: string;
}

export namespace AnalyticImageryFull {
  /**
   * Feature assessments obtained from imagery analysis or other data analytics.
   * Feature assessments are georeferenced terrestrial features such as marine
   * vessels, vehicles, buildings, etc., or contain other types of non terrestrial
   * assessments such as spacecraft structures. Geospatial queries are supported
   * through either the regionText (WKT) or regionGeoJSON fields.
   */
  export interface FeatureAssessment {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * Datetime type value associated with this record, in ISO 8601 UTC format with
     * millisecond precision.
     */
    featureTs: string;

    /**
     * The Unit of Measure associated with this feature. If there are no physical units
     * associated with the feature a value of NONE should be specified.
     */
    featureUoM: string;

    /**
     * Unique identifier of the Analytic Imagery associated with this Feature
     * Assessment record.
     */
    idAnalyticImagery: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    /**
     * Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON
     * representation of the geometry/geography, of the feature assessment as projected
     * on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with
     * a POST or PUT request that also specifies a valid 'area' or 'atext' field.
     */
    agjson?: string;

    /**
     * Number of dimensions of the geometry depicted by region.
     */
    andims?: number;

    /**
     * Polygonal annotation limits, specified in pixels, as an array of arrays N x M.
     * Allows the image provider to highlight one or more polygonal area(s) of
     * interest. The array must contain NxM two-element arrays, where N is the number
     * of polygons of interest. The associated annotation(s) should be included in the
     * annText array.
     */
    annLims?: Array<Array<number>>;

    /**
     * Annotation text, a string array of annotation(s) corresponding to the
     * rectangular areas specified in annLims. This array contains the annotation text
     * associated with the areas of interest indicated in annLims, in order. This array
     * should contain one annotation per four values of the area (annLims) array.
     */
    annText?: Array<string>;

    /**
     * Geographical spatial_ref_sys for region.
     */
    asrid?: number;

    /**
     * Descriptive or additional information associated with this feature/assessment.
     */
    assessment?: string;

    /**
     * Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known
     * Text representation of the geometry/geography, of the feature assessment as
     * projected on the ground. WKT reference:
     * https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a
     * POST or PUT request that also specifies a valid 'area' field.
     */
    atext?: string;

    /**
     * Type of region as projected on the ground (POLYGON, POINT, LINE).
     */
    atype?: string;

    /**
     * Analytic confidence of feature accuracy (0 to 1).
     */
    confidence?: number;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Feature Assessment ID from external systems. This field has no meaning within
     * UDL and is provided as a convenience for systems that require tracking of an
     * internal system generated ID.
     */
    externalId?: string;

    /**
     * An array of numeric feature/assessment values expressed in the specified unit of
     * measure (obUoM). Because of the variability of the Feature Assessment data
     * types, each record may employ a numeric observation value (featureValue), a
     * string observation value (featureString), a Boolean observation value
     * (featureBool), an array of numeric observation values (featureArray), or any
     * combination of these.
     */
    featureArray?: Array<number>;

    /**
     * A boolean feature/assessment. Because of the variability of the Feature
     * Assessment data types, each record may employ a numeric observation value
     * (featureValue), a string observation value (featureString), a Boolean
     * observation value (featureBool), an array of numeric observation values
     * (featureArray), or any combination of these.
     */
    featureBool?: boolean;

    /**
     * A single feature/assessment string expressed in the specified unit of measure
     * (obUoM). Because of the variability of the Feature Assessment data types, each
     * record may employ a numeric observation value (featureValue), a string
     * observation value (featureString), a Boolean observation value (featureBool), an
     * array of numeric observation values (featureArray), or any combination of these.
     */
    featureString?: string;

    /**
     * An array of string feature/assessment expressions. Because of the variability of
     * the Feature Assessment data types, each record may employ a numeric observation
     * value (featureValue), a string observation value (featureString), a Boolean
     * observation value (featureBool), an array of numeric observation values
     * (featureArray), or any combination of these.
     */
    featureStringArray?: Array<string>;

    /**
     * A single feature/assessment value expressed in the specified unit of measure
     * (obUoM). Because of the variability of the Feature Assessment data types, each
     * record may employ a numeric observation value (featureValue), a string
     * observation value (featureString), a Boolean observation value (featureBool), an
     * array of numeric observation values (featureArray), or any combination of these.
     */
    featureValue?: number;

    /**
     * The feature object heading, in degrees clockwise from true North at the object
     * location.
     */
    heading?: number;

    /**
     * Estimated physical height of the feature, in meters.
     */
    height?: number;

    /**
     * Estimated physical length of the feature, in meters.
     */
    length?: number;

    /**
     * Source defined name of the feature associated with this record. If an annotation
     * for this feature element exists on the parent image it can be referenced here.
     */
    name?: string;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * The source data library from which this record was received. This could be a
     * remote or tactical UDL or another data library. If null, the record should be
     * assumed to have originated from the primary Enterprise UDL.
     */
    sourceDL?: string;

    /**
     * Feature's speed of travel, in meters per second.
     */
    speed?: number;

    /**
     * Array of UUIDs of the UDL data records that are related to the determination of
     * this activity or event. See the associated 'srcTyps' array for the specific
     * types of data, positionally corresponding to the UUIDs in this array. The
     * 'srcTyps', 'srcIds', and 'srcTs' arrays must contain the same number of
     * elements. See the corresponding srcTyps array element for the data type of the
     * UUID and use the appropriate API operation to retrieve that object.
     */
    srcIds?: Array<string>;

    /**
     * Array of the primary timestamps, in ISO 8601 UTC format, with appropriate
     * precision for the datatype of each correspondng srcTyp/srcId record. See the
     * associated 'srcTyps' and 'srcIds' arrays for the record type and UUID,
     * respectively, positionally corresponding to the record types in this array. The
     * 'srcTyps', 'srcIds', and 'srcTs' arrays must contain the same number of
     * elements. These timestamps are included to support services which do not include
     * a GET by {id} operation. If referencing a datatype which does not include a
     * primary timestamp, the corresponding srcTs array element should be included as
     * null.
     */
    srcTs?: Array<string>;

    /**
     * Array of UDL record types (AIS, GROUNDIMAGE, MTI, ONORBIT, POI, SAR, SKYIMAGE,
     * SOI, TRACK) related to this feature assessment. See the associated 'srcIds' and
     * 'srcTs' arrays for the record UUIDs and timetsmps. respectively, positionally
     * corresponding to the record types in this array. The 'srcTyps', 'srcIds', and
     * 'srcTs' arrays must contain the same number of elements.
     */
    srcTyps?: Array<string>;

    /**
     * Optional array of provider/source specific tags for this data, where each
     * element is no longer than 32 characters, used for implementing data owner
     * conditional access controls to restrict access to the data. Should be left null
     * by data providers unless conditional access controls are coordinated with the
     * UDL team.
     */
    tags?: Array<string>;

    /**
     * Optional identifier to track a commercial or marketplace transaction executed to
     * produce this data.
     */
    transactionId?: string;

    /**
     * The type of feature (e.g. AIRCRAFT, ANTENNA, SOLAR ARRAY, SITE, STRUCTURE,
     * VESSEL, VEHICLE, UNKNOWN, etc.) detailed in this feature assessment record. This
     * type may be a primary feature within an image, for example a VESSEL, or may be a
     * component or characteristic of a primary feature, for example an ANTENNA mounted
     * on a vessel.
     */
    type?: string;

    /**
     * Estimated physical width of the feature, in meters.
     */
    width?: number;
  }
}

/**
 * Detailed information for a spacecraft communication antenna. One antenna may
 * have multiple AntennaDetails records, compiled by various sources.
 */
export interface AntennaDetailsFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Unique identifier of the parent Antenna.
   */
  idAntenna: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Boolean indicating if this is a beam forming antenna.
   */
  beamForming?: boolean;

  /**
   * Array of angles between the half-power (-3 dB) points of the main lobe of the
   * antenna, in degrees.
   */
  beamwidth?: number;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Antenna description.
   */
  description?: string;

  /**
   * Antenna diameter in meters.
   */
  diameter?: number;

  /**
   * Antenna end of frequency range in Mhz.
   */
  endFrequency?: number;

  /**
   * Antenna maximum gain in dBi.
   */
  gain?: number;

  /**
   * Antenna gain tolerance in dB.
   */
  gainTolerance?: number;

  /**
   * An organization such as a corporation, manufacturer, consortium, government,
   * etc. An organization may have parent and child organizations as well as link to
   * a former organization if this org previously existed as another organization.
   */
  manufacturerOrg?: OrganizationFull;

  /**
   * ID of the organization that manufactures the antenna.
   */
  manufacturerOrgId?: string;

  /**
   * Antenna mode (e.g. TX,RX).
   */
  mode?: 'TX' | 'RX';

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Antenna polarization in degrees.
   */
  polarization?: number;

  /**
   * Antenna position (e.g. Top, Nadir, Side).
   */
  position?: string;

  /**
   * Array with 1-2 values specifying the length and width (for rectangular) and just
   * length for dipole antennas in meters.
   */
  size?: Array<number>;

  /**
   * Antenna start of frequency range in Mhz.
   */
  startFrequency?: number;

  /**
   * Boolean indicating if this antenna is steerable.
   */
  steerable?: boolean;

  /**
   * Optional array of provider/source specific tags for this data, where each
   * element is no longer than 32 characters, used for implementing data owner
   * conditional access controls to restrict access to the data. Should be left null
   * by data providers unless conditional access controls are coordinated with the
   * UDL team.
   */
  tags?: Array<string>;

  /**
   * Type of antenna (e.g. Reflector, Double Reflector, Shaped Reflector, Horn,
   * Parabolic, etc.).
   */
  type?: string;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

/**
 * Model representation of information on on-orbit/spacecraft communication
 * antennas. A spacecraft may have multiple antennas and each antenna can have
 * multiple 'details' records compiled by different sources.
 */
export interface AntennaFull {
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Antenna name.
   */
  name: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Read-only collection of additional AntennaDetails by various sources for this
   * organization, ignored on create/update. These details must be created separately
   * via the /udl/antennadetails operations.
   */
  antennaDetails?: Array<AntennaDetailsFull>;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

/**
 * Model representation of information on on-orbit/spacecraft communication
 * antennas. A spacecraft may have multiple antennas and each antenna can have
 * multiple 'details' records compiled by different sources.
 */
export interface AntennaIngest {
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Antenna name.
   */
  name: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;
}

/**
 * These services provide operations for posting and querying attitude of on-orbit
 * objects. Attitude describes the orientation of an object, which can be
 * represented by quaternions or euler angles. The AttitudeSet ID (asId) identifies
 * the 'AttitudeSet' record which contains details of the underlying data as well
 * as a collection of attitude points. Points must be retrieved by first
 * identifying a desired AttitudeSet and pulling its points by that AttitudeSet ID
 * 'asId'.
 */
export interface AttitudedataFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Time associated with this attitude record, in ISO 8601 UTC format, with
   * microsecond precision.
   */
  ts: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Unique identifier of the parent AttitudeSet associated with this record.
   */
  asId?: string;

  /**
   * Coning angle in degrees.
   */
  coningAngle?: number;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Precession axis declination (ECI J2000 frame) in degrees.
   */
  declination?: number;

  /**
   * Unique identifier of the on-orbit satellite to which this attitude record
   * applies.
   */
  idOnOrbit?: string;

  /**
   * Label specifying type of rotational motion of target.
   */
  motionType?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Optional identifier provided by the record source to indicate the target object
   * of this attitude record. This may be an internal identifier and not necessarily
   * map to a valid satellite number.
   */
  origObjectId?: string;

  /**
   * Precession period in seconds.
   */
  precPeriod?: number;

  /**
   * Quaternion vector component 1.
   */
  q1?: number;

  /**
   * Derivative of quaternion vector component 1.
   */
  q1Dot?: number;

  /**
   * Quaternion vector component 2.
   */
  q2?: number;

  /**
   * Derivative of quaternion vector component 2.
   */
  q2Dot?: number;

  /**
   * Quaternion vector component 3.
   */
  q3?: number;

  /**
   * Derivative of quaternion vector component 3.
   */
  q3Dot?: number;

  /**
   * Quaternion scalar component.
   */
  qc?: number;

  /**
   * Derivative of quaternion scalar component.
   */
  qcDot?: number;

  /**
   * Precession axis right ascension (ECI J2000 frame) in degrees.
   */
  ra?: number;

  /**
   * Satellite/catalog number of the on-orbit object to which this attitude record
   * applies.
   */
  satNo?: number;

  /**
   * Spin period in seconds.
   */
  spinPeriod?: number;

  /**
   * Array of X body rotation Euler angle(s), in degrees (-180 to 180). For repeated
   * axis rotations, the array elements should be placed in the order that the angles
   * apply in the sequence.
   */
  xAngle?: Array<number>;

  /**
   * Array of X body rotation rate(s), in degrees per second. For repeated axis
   * rotations, the array elements should be placed in the order that the rates apply
   * in the sequence. Attitude rates are expressed in frame1 with respect to frame2.
   */
  xRate?: Array<number>;

  /**
   * Array of Y body rotation Euler angle(s), in degrees (-180 to 180). For repeated
   * axis rotations, the array elements should be placed in the order that the angles
   * apply in the sequence.
   */
  yAngle?: Array<number>;

  /**
   * Array of Y body rotation rate(s), in degrees per second. For repeated axis
   * rotations, the array elements should be placed in the order that the rates apply
   * in the sequence. Attitude rates are expressed in frame1 with respect to frame2.
   */
  yRate?: Array<number>;

  /**
   * Array of Z body rotation Euler angle(s), in degrees (-180 to 180). For repeated
   * axis rotations, the array elements should be placed in the order that the angles
   * apply in the sequence.
   */
  zAngle?: Array<number>;

  /**
   * Array of Z body rotation rate(s), in degrees per second. For repeated axis
   * rotations, the array elements should be placed in the order that the rates apply
   * in the sequence Attitude rates are expressed in frame1 with respect to frame2.
   */
  zRate?: Array<number>;
}

/**
 * AttitudeSet represents a wrapper or collection of Onorbit Attitude 'points' and
 * meta data indicating the specifics of the orientation of an on-orbit object.
 * Attitude is typically distributed in a flat file containing details of the
 * attitude generation as well as a large collection of individual points at
 * varying time steps. AttitudeSet is analogous to this flat file.
 */
export interface AttitudesetFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * The end time of the attitude ephemeris, in ISO 8601 UTC format, with microsecond
   * precision. If this set is constituted by a single epoch attitude message then
   * endTime should match the startTime.
   */
  endTime: string;

  /**
   * Reference frame 1 of the quaternion or Euler angle transformation utilized in
   * this attitude parameter or attitude ephemeris. The UDL convention is that
   * transformations occur FROM frame1 TO frame2. A specific spacecraft frame or
   * instrument name may be provided with the assumption the consumer understands the
   * location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx,
   * THRUSTERx, etc.).
   */
  frame1: string;

  /**
   * Reference frame 2 of the quaternion or Euler angle transformation utilized in
   * this attitude parameter or attitude ephemeris. The UDL convention is that
   * transformations occur FROM frame1 TO frame2. A specific spacecraft frame or
   * instrument name may be provided with the assumption the consumer understands the
   * location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx,
   * THRUSTERx, etc.).
   */
  frame2: string;

  /**
   * Number of attitude records contained in this set.
   */
  numPoints: number;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * The epoch or start time of the attitude parameter or attitude ephemeris, in ISO
   * 8601 UTC format, with microsecond precision. If this set is constituted by a
   * single attitude parameter message then startTime is the epoch.
   */
  startTime: string;

  /**
   * The type of attitude message or messages associated with this set.
   *
   * AEM = Attitude Ephemeris Message, specifying the attitude state of a single
   * object at multiple epochs.
   *
   * APM = Attitude Parameters Message, specifying the attitude state of a single
   * object at a single epoch.
   */
  type: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Array of UDL UUIDs of one or more AttitudeSet records associated with this set.
   * For example, a spacecraft Attitude Ephemeris Set might include a reference to an
   * Attitude Parameter Message defining the sensor to body frame transformation for
   * a sensor onboard the spacecraft, which allows for calculation of the sensor
   * orientation in frame2 of the attitude ephemeris.
   */
  asRef?: Array<string>;

  /**
   * Collection of attitude data associated with this Attitude Set.
   */
  attitudeList?: Array<AttitudedataFull>;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Unique identifier of the parent (positional) Ephemeris Set, if this data is
   * correlated with an Ephemeris.
   */
  esId?: string;

  /**
   * The rotation sequence of the Euler angles in which attitude reference frame
   * transformation occurs (from left to right). One, two, or three axis rotations
   * are supported and are represented by one, two, or three characters respectively.
   * Repeated axis rotations are also supported, however, these rotations should not
   * be sequential. The numeric sequence values correspond to the body angles/rates
   * as follows: 1 - xAngle/xRate, 2 - yAngle/yRate, and 3 - zAngle/zRate. Valid
   * sequences are: 123, 132, 213, 231, 312, 321, 121, 131, 212, 232, 313, 323, 12,
   * 13, 21, 23, 31, 32, 1, 2, and 3.
   *
   * The following represent examples of possible rotation sequences: A single
   * rotation about the Y-axis can be expressed as '2', a double rotation with X-Z
   * sequence can be expressed as '13', and a triple rotation with Z-X-Y sequence can
   * be expressed as '312'.
   */
  eulerRotSeq?: string;

  /**
   * Unique identifier of the on-orbit satellite to which this attitude set applies.
   */
  idOnOrbit?: string;

  /**
   * Unique identifier of the sensor to which this attitude set applies IF this set
   * is reporting a single sensor orientation.
   */
  idSensor?: string;

  /**
   * Recommended interpolation method for estimating attitude ephemeris data.
   */
  interpolator?: string;

  /**
   * Recommended polynomial interpolation degree.
   */
  interpolatorDegree?: number;

  /**
   * Optional notes/comments for this attitude set.
   */
  notes?: string;

  /**
   * Model object representing on-orbit objects or satellites in the system.
   */
  onOrbit?: OnorbitFull;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Optional identifier provided by the record source to indicate the target object
   * of this attitude set. This may be an internal identifier and not necessarily map
   * to a valid satellite number.
   */
  origObjectId?: string;

  /**
   * Optional identifier provided by the record source to indicate the sensor
   * identifier to which this attitude set applies IF this set is reporting a single
   * sensor orientation. This may be an internal identifier and not necessarily a
   * valid sensor ID.
   */
  origSensorId?: string;

  /**
   * Initial precession angle (ECI J2000 frame) in degrees.
   */
  precAngleInit?: number;

  /**
   * Satellite/catalog number of the on-orbit object to which this attitude set
   * applies.
   */
  satNo?: number;

  /**
   * Initial spin angle (ECI J2000 frame) in degrees.
   */
  spinAngleInit?: number;

  /**
   * Attitude ephemeris step size, in seconds. This applies to Attitude Ephemeris
   * Messages (AEM) that employ a fixed step size.
   */
  stepSize?: number;
}

/**
 * Model representation of specific spacecraft battery types.
 */
export interface BatteryFull {
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Battery name.
   */
  name: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Read-only collection of additional BatteryDetails by various sources for this
   * organization, ignored on create/update. These details must be created separately
   * via the /udl/batterydetails operations.
   */
  batteryDetails?: Array<BatterydetailsFull>;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

/**
 * Model representation of specific spacecraft battery types.
 */
export interface BatteryIngest {
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Battery name.
   */
  name: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;
}

/**
 * Detailed information on a spacecraft battery type compiled by a particular
 * source. A Battery record may have multiple details records from several sources.
 */
export interface BatterydetailsFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Identifier of the parent battery type record.
   */
  idBattery: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Battery capacity in Ah.
   */
  capacity?: number;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Battery description/notes.
   */
  description?: string;

  /**
   * Depth of discharge as a percentage/fraction.
   */
  dischargeDepth?: number;

  /**
   * An organization such as a corporation, manufacturer, consortium, government,
   * etc. An organization may have parent and child organizations as well as link to
   * a former organization if this org previously existed as another organization.
   */
  manufacturerOrg?: OrganizationFull;

  /**
   * ID of the organization that manufactures the battery.
   */
  manufacturerOrgId?: string;

  /**
   * Battery model number or name.
   */
  model?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Optional array of provider/source specific tags for this data, where each
   * element is no longer than 32 characters, used for implementing data owner
   * conditional access controls to restrict access to the data. Should be left null
   * by data providers unless conditional access controls are coordinated with the
   * UDL team.
   */
  tags?: Array<string>;

  /**
   * Type of battery technology (e.g. Ni-Cd, Ni-H2, Li-ion, etc.).
   */
  technology?: string;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

/**
 * Describes a satellite antenna beam.
 */
export interface BeamFull {
  /**
   * The antenna beam ID of the particular beam for this channel. beamName is not
   * unique across payloads.
   */
  beamName: string;

  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Read-only collection of beamContours, ignored on create/update. These details
   * must be created separately via the /udl/beamcontour operations.
   */
  beamContours?: Array<BeamcontourFull>;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Optional notes/comments on this beam.
   */
  notes?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Time the row was updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

/**
 * Describes the beam contour associated with a beam entity. Beam contours are the
 * geographic representation of the relative gain levels of beam power off of the
 * maximum gain boresight points.
 */
export interface BeamcontourFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * ID of the beam.
   */
  idBeam: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * The type of object represented in this record (BORESIGHT, CONTOUR, SVC AREA).
   * Boresight refers to the point of maximum/peak gain, and should not be confused
   * with the 'aim point' of the related beam. Gain contours are regions of coverage
   * referenced to the relative gain of the related beam. Service Areas are composed
   * of one or more service regions, with each region being either discrete point(s)
   * or a continuous contour.
   */
  type: 'BORESIGHT' | 'CONTOUR' | 'SVC AREA';

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * The index number of this contour. The value is required if type = CONTOUR.
   */
  contourIdx?: number;

  /**
   * Time the row was created in the database, auto-populated by the system, example
   * = 2018-01-01T16:00:00.123Z.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * The relative gain level in dB associated with this boresight or contour. Gain
   * does not apply to service area records. The value is required if type =
   * BORESIGHT or CONTOUR.
   */
  gain?: number;

  /**
   * Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON
   * representation of the geometry/geography, of the image as projected on the
   * ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST
   * or PUT request that also specifies a valid 'area' or 'atext' field.
   */
  geographyJson?: string;

  /**
   * Number of dimensions of the geometry depicted by region.
   */
  geographyNdims?: number;

  /**
   * Geographical spatial_ref_sys for region.
   */
  geographySrid?: number;

  /**
   * Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known
   * Text representation of the geometry/geography, of the image as projected on the
   * ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored
   * if included with a POST or PUT request that also specifies a valid 'area' field.
   */
  geographyText?: string;

  /**
   * Type of region as projected.
   */
  geographyType?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * The region name within the service area.
   */
  regionName?: string;

  /**
   * Time the row was updated in the database, auto-populated by the system, example
   * = 2018-01-01T16:00:00.123Z.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

/**
 * A bus is the physical and software infrastructure backbone to which on-orbit
 * satellite payloads are attached for power, control, and other support functions.
 */
export interface BusFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Name of this bus.
   */
  name: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Attitude and Orbital Control Notes/description for the bus.
   */
  aocsNotes?: string;

  /**
   * Average mass of this bus without payloads or fuel, in kilograms.
   */
  avgDryMass?: number;

  /**
   * Average mass available on this bus for payloads, in kilograms.
   */
  avgPayloadMass?: number;

  /**
   * Average power available on this bus for payloads, in kilowatts.
   */
  avgPayloadPower?: number;

  /**
   * Average power available on this bus, in kilowatts.
   */
  avgSpacecraftPower?: number;

  /**
   * Average mass of this bus with fuel, but without payloads, in kilograms.
   */
  avgWetMass?: number;

  /**
   * Body dimension in X direction pertaining to length, in meters.
   */
  bodyDimensionX?: number;

  /**
   * Body dimension in Y direction pertaining to height, in meters.
   */
  bodyDimensionY?: number;

  /**
   * Body dimension in Z direction pertaining to width, in meters.
   */
  bodyDimensionZ?: number;

  /**
   * Unique identifier of the organization which designs the bus kit.
   */
  busKitDesignerOrgId?: string;

  /**
   * Country where this bus was manufactured. This value is typically the ISO 3166
   * Alpha-2 two-character country code, however it can also represent various
   * consortiums that do not appear in the ISO document. The code must correspond to
   * an existing country in the UDL’s country API. Call udl/country/{code} to get any
   * associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for
   * the specified country code.
   */
  countryCode?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Notes/description of the bus.
   */
  description?: string;

  /**
   * An entity is a generic representation of any object within a space/SSA system
   * such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An
   * entity can have an operating unit, a location (if terrestrial), and statuses.
   */
  entity?: EntityFull;

  /**
   * Boolean indicating if this bus is generic.
   */
  generic?: boolean;

  /**
   * ID of the parent entity for this bus.
   */
  idEntity?: string;

  /**
   * Launch envelope dimension in X direction, in meters.
   */
  launchEnvelopeDimensionX?: number;

  /**
   * Launch envelope dimension in Y direction, in meters.
   */
  launchEnvelopeDimensionY?: number;

  /**
   * Launch envelope dimension in Z direction, in meters.
   */
  launchEnvelopeDimensionZ?: number;

  /**
   * Unique identifier of the organization which manufactures the main onboard
   * computer for this bus.
   */
  mainComputerManufacturerOrgId?: string;

  /**
   * Unique identifier of the organization which manufactures this bus.
   */
  manufacturerOrgId?: string;

  /**
   * Mass category of this bus (e.g. 1 - 10 kg: Nanosatellite, 10 - 100 kg:
   * Microsatellite, 100 - 500 kg: Minisatellite, 1000 - 2500kg: Medium satellite,
   * etc.).
   */
  massCategory?: string;

  /**
   * Maximum power at beginning of life, lower bounds, in kilowatts.
   */
  maxBOLPowerLower?: number;

  /**
   * Maximum power at beginning of life, upper bounds, in kilowatts.
   */
  maxBOLPowerUpper?: number;

  /**
   * Maximum mass on station at beginning of life, in kilograms.
   */
  maxBOLStationMass?: number;

  /**
   * Maximum mass of this bus without payloads or fuel, in kilograms.
   */
  maxDryMass?: number;

  /**
   * Maximum power at end of life, lower bounds, in kilowatts.
   */
  maxEOLPowerLower?: number;

  /**
   * Maximum power at end of life, upper bounds, in kilowatts.
   */
  maxEOLPowerUpper?: number;

  /**
   * Maximum mass at launch, lower bounds, in kilograms.
   */
  maxLaunchMassLower?: number;

  /**
   * Maximum mass at launch, upper bounds, in kilograms.
   */
  maxLaunchMassUpper?: number;

  /**
   * Maximum payload mass available, in kilograms.
   */
  maxPayloadMass?: number;

  /**
   * Maximum payload power available, in kilowatts.
   */
  maxPayloadPower?: number;

  /**
   * Maximum power available on this bus, in kilowatts.
   */
  maxSpacecraftPower?: number;

  /**
   * Maximum mass of this bus with fuel, but without payloads, in kilograms.
   */
  maxWetMass?: number;

  /**
   * Median mass of this bus without payloads or fuel, in kilograms.
   */
  medianDryMass?: number;

  /**
   * Median mass of this bus with fuel, but without payloads, in kilograms.
   */
  medianWetMass?: number;

  /**
   * Minimum mass of this bus without payloads or fuel, in kilograms.
   */
  minDryMass?: number;

  /**
   * Minimum mass of this bus with fuel, but without payloads, in kilograms.
   */
  minWetMass?: number;

  /**
   * The number of orbit types this bus can support.
   */
  numOrbitType?: number;

  /**
   * Orbit averaged power (the power averaged over one orbit) available on this bus
   * for payloads, in kilowatts.
   */
  oapPayloadPower?: number;

  /**
   * Orbit averaged power (the power averaged over one orbit) available on this bus,
   * in kilowatts.
   */
  oapSpacecraftPower?: number;

  /**
   * Array of orbit types this bus can support (e.g. GEO, LEO, etc.). Must contain
   * the same number of elements as the value of numOrbitType.
   */
  orbitTypes?: Array<string>;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * The radial dimension available on this bus for payloads, in meters.
   */
  payloadDimensionX?: number;

  /**
   * The in-track dimension available on this bus for payloads, in meters.
   */
  payloadDimensionY?: number;

  /**
   * The cross-track dimension available on this bus for payloads, in meters.
   */
  payloadDimensionZ?: number;

  /**
   * The volume available on this bus for payloads, in cubic meters.
   */
  payloadVolume?: number;

  /**
   * Power category of this bus (e.g. 0-1kW low power, etc).
   */
  powerCategory?: string;

  /**
   * Unique identifier of the organization which manufactures the telemetry tracking
   * and command subsystem for this bus.
   */
  telemetryTrackingManufacturerOrgId?: string;

  /**
   * Type of this bus.
   */
  type?: string;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

/**
 * Channel information on a particular transponder.
 */
export interface ChannelFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * ID of the parent transponder object for this Channel.
   */
  idTransponder: string;

  /**
   * Channel name.
   */
  name: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Channel aPid.
   */
  apid?: string;

  /**
   * The antenna beam ID of the particular beam for this channel. beamName is not
   * unique across payloads.
   */
  beamName?: string;

  /**
   * Channel compression.
   */
  compression?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Channel encryption.
   */
  encryption?: string;

  /**
   * Identifier of the particular beam for this channel.
   */
  idBeam?: string;

  /**
   * ID of the RF Band object for this channel.
   */
  idRFBand?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Owner.
   */
  owner?: string;

  /**
   * Pkg.
   */
  pkg?: string;

  /**
   * Res.
   */
  res?: string;

  /**
   * SID.
   */
  sid?: string;

  /**
   * Channel type.
   */
  type?: string;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;

  /**
   * Channel vPid.
   */
  vpid?: string;
}

/**
 * Collect Requests support several types of individual requests, or
 * planned/scheduled tasks on sensors and/or orbital objects. Options are provided
 * to accomodate most common sensor contact and collection applications, including
 * single sensor-object tasking, search operations, and TT&C support. Multiple
 * requests originating from a plan or schedule may be associated to a sensor plan
 * if desired.
 */
export interface CollectRequestFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Source of the data.
   */
  source: string;

  /**
   * The start time or earliest time of the collect or contact request window, in ISO
   * 8601 UTC format.
   */
  startTime: string;

  /**
   * The type of this collect or contact request (DIRECTED SEARCH, DWELL, OBJECT,
   * POL, RATE TRACK, SEARCH, SOI, STARE, TTC, VOLUME SEARCH, etc.).
   */
  type: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Height above WGS-84 ellipsoid (HAE), in kilometers. If an accompanying stopAlt
   * is provided, then alt value can be assumed to be the starting altitude of a
   * volume definition.
   */
  alt?: number;

  /**
   * The argument of perigee is the angle, in degrees, formed between the perigee and
   * the ascending node.
   */
  argOfPerigee?: number;

  /**
   * The expected or directed azimuth angle, in degrees, for search or target
   * acquisition.
   */
  az?: number;

  /**
   * CollectResponses associated to request id. Read-only details (only used on
   * detail queries, not to be provided on create/update operations).
   */
  collectResponse?: Array<CollectResponseFull>;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * The customer for this request.
   */
  customer?: string;

  /**
   * The expected or directed declination angle, in degrees, for search or target
   * acquisition.
   */
  dec?: number;

  /**
   * The duration of the collect request, in seconds. If both duration and endTime
   * are provided, the endTime is assumed to take precedence.
   */
  duration?: number;

  /**
   * The dwell ID associated with this request. A dwell ID is dwell point specific
   * and a DWELL request consist of many dwell point requests.
   */
  dwellId?: string;

  /**
   * The orbital eccentricity of an astronomical object is a parameter that
   * determines the amount by which its orbit around another body deviates from a
   * perfect circle.
   */
  eccentricity?: number;

  /**
   * The expected or directed elevation angle, in degrees, for search or target
   * acquisition.
   */
  el?: number;

  /**
   * An element set is a collection of Keplerian orbital elements describing an orbit
   * of a particular satellite. The data is used along with an orbit propagator in
   * order to predict the motion of a satellite. The element set, or elset for short,
   * consists of identification data, the classical elements and drag parameters.
   */
  elset?: CollectRequestFull.Elset;

  /**
   * The end time of the collect or contact request window, in ISO 8601 UTC format.
   * If no endTime or duration is provided it is assumed the request is either
   * ongoing or that the request is for a specified number of tracks (numTracks). If
   * both duration and endTime are provided, the endTime is assumed to take
   * precedence.
   */
  endTime?: string;

  /**
   * Epoch time, in ISO 8601 UTC format, of the orbital elements.
   */
  epoch?: string;

  /**
   * ID of the UDL Ephemeris Set of the object associated with this request.
   */
  esId?: string;

  /**
   * The extent of the azimuth angle, in degrees, from center azimuth to define a
   * spatial volume.
   */
  extentAz?: number;

  /**
   * The extent of the elevation angle, in degrees, from center elevation to define a
   * spatial volume.
   */
  extentEl?: number;

  /**
   * The extent of the range, in km, from center range to define a spatial volume.
   */
  extentRange?: number;

  /**
   * Optional ID from external systems. This field has no meaning within UDL and is
   * provided as a convenience for systems that require tracking of an internal
   * system generated ID.
   */
  externalId?: string;

  /**
   * For optical sensors, the frame rate of the camera, in Hz.
   */
  frameRate?: number;

  /**
   * The estimated or expected emission frequency of the target, in MHz.
   */
  freq?: number;

  /**
   * The maximum frequency of interest, in MHz.
   */
  freqMax?: number;

  /**
   * The minimum frequency of interest, in MHz. If only minimum frequency is provided
   * it is assumed to be minimum reportable frequency.
   */
  freqMin?: number;

  /**
   * ID of the UDL Elset of the object associated with this request.
   */
  idElset?: string;

  /**
   * ID of the UDL Manifold Elset of the object associated with this request. A
   * Manifold Elset provides theoretical Keplerian orbital elements belonging to an
   * object of interest's manifold describing a possible/theoretical orbit for an
   * object of interest for tasking purposes.
   */
  idManifold?: string;

  /**
   * Unique identifier of the target on-orbit object for this request.
   */
  idOnOrbit?: string;

  /**
   * The unique ID of the collect request record from which this request originated.
   * This may be used for cases of sensor-to-sensor tasking, such as tip/cue
   * operations.
   */
  idParentReq?: string;

  /**
   * Unique identifier of the parent plan or schedule associated with this request.
   * If null, this request is assumed not associated with a plan or schedule.
   */
  idPlan?: string;

  /**
   * Unique identifier of the requested/scheduled/planned sensor associated with this
   * request. If both idSensor and origSensorId are null then the request is assumed
   * to be a general request for observations or contact on an object, if specified,
   * or an area/volume. In this case, the requester may specify a desired obType.
   */
  idSensor?: string;

  /**
   * ID of the UDL State Vector of the object or central vector associated with this
   * request.
   */
  idStateVector?: string;

  /**
   * The angle, in degrees, between the equator and the orbit plane when looking from
   * the center of the Earth. Inclination ranges from 0-180 degrees, with 0-90
   * representing posigrade orbits and 90-180 representing retrograde orbits.
   */
  inclination?: number;

  /**
   * For optical sensors, the integration time per camera frame, in milliseconds.
   */
  integrationTime?: number;

  /**
   * Inter-Range Operations Number. Four-digit identifier used to schedule and
   * identify AFSCN contact support for booster, launch, and on-orbit operations.
   */
  iron?: number;

  /**
   * The target object irradiance value.
   */
  irradiance?: number;

  /**
   * WGS-84 latitude, in degrees. -90 to 90 degrees (negative values south of
   * equator). If an accompanying stopLat is provided, then the lat value can be
   * assumed to be the starting latitude of a volume definition.
   */
  lat?: number;

  /**
   * WGS-84 longitude, in degrees. -180 to 180 degrees (negative values west of Prime
   * Meridian). If an accompanying stopLon is provided, then lon value can be assumed
   * to be the starting longitude of a volume definition.
   */
  lon?: number;

  /**
   * The timestamp of the external message from which this request originated, if
   * applicable, in ISO8601 UTC format with millisecond precision.
   */
  msgCreateDate?: string;

  /**
   * The type of external message from which this request originated.
   */
  msgType?: string;

  /**
   * Notes or comments associated with this request.
   */
  notes?: string;

  /**
   * For optical sensors, the requested number of frames to capture at each sensor
   * step.
   */
  numFrames?: number;

  /**
   * The number of requested observations on the target.
   */
  numObs?: number;

  /**
   * The number of requested tracks on the target. If numTracks is not provided it is
   * assumed to indicate all possible observations every pass over the request
   * duration or within the request start/end window.
   */
  numTracks?: number;

  /**
   * Optional type of observation (EO, IR, RADAR, RF-ACTIVE, RF-PASSIVE, OTHER)
   * requested. This field may correspond to a request of a specific sensor, or to a
   * general non sensor specific request.
   */
  obType?: string;

  /**
   * Model object representing on-orbit objects or satellites in the system.
   */
  onOrbit?: OnorbitFull;

  /**
   * The orbit regime of the target (GEO, HEO, LAUNCH, LEO, MEO, OTHER).
   */
  orbitRegime?: string;

  /**
   * The magnitude of rotation, in degrees, between the xAngle direction and locally
   * defined equinoctial plane. A positive value indicates clockwise rotation about
   * the sensor boresight vector.
   */
  orientAngle?: number;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Optional identifier provided by the data source to indicate the target object of
   * this request. This may be an internal identifier and not necessarily map to a
   * valid satellite number.
   */
  origObjectId?: string;

  /**
   * Optional identifier provided by the source to indicate the sensor identifier
   * requested/scheduled/planned for this request. This may be an internal identifier
   * and not necessarily a valid sensor ID. If both idSensor and origSensorId are
   * null then the request is assumed to be a general request for observations or
   * contact on an object, if specified, or an area/volume. In this case, the
   * requester may specify a desired obType.
   */
  origSensorId?: string;

  /**
   * Index number (integer) for records within a collection plan or schedule.
   */
  planIndex?: number;

  /**
   * The RF polarization (H, LHC, RHC, V).
   */
  polarization?: string;

  /**
   * The priority of the collect request (EMERGENCY, FLASH, IMMEDIATE, PRIORITY,
   * ROUTINE).
   */
  priority?: string;

  /**
   * The expected or directed right ascension angle, in degrees, for search or target
   * acquisition.
   */
  ra?: number;

  /**
   * Right ascension of the ascending node, or RAAN is the angle as measured in
   * degrees eastwards (or, as seen from the north, counterclockwise) from the First
   * Point of Aries to the ascending node.
   */
  raan?: number;

  /**
   * The expected acquisition range or defined center range, in km.
   */
  range?: number;

  /**
   * The Radar Cross-Section of the target, in m^2.
   */
  rcs?: number;

  /**
   * The maximum Radar Cross-Section of the target, in m^2.
   */
  rcsMax?: number;

  /**
   * The minimum Radar Cross-Section of the target, in m^2. If only minimum RCS is
   * provided it is assumed to be minimum reportable RCS.
   */
  rcsMin?: number;

  /**
   * The fraction of solar energy reflected from target.
   */
  reflectance?: number;

  /**
   * Satellite/catalog number of the target on-orbit object for this request.
   */
  satNo?: number;

  /**
   * Pre-coordinated code, direction, or configuration to be executed by the sensor
   * or site for this collect or contact.
   */
  scenario?: string;

  /**
   * The average of the periapsis and apoapsis distances, in kilometers. For circular
   * orbits, the semimajor axis is the distance between the centers of the bodies.
   */
  semiMajorAxis?: number;

  /**
   * The spectral model used for the irradiance calculation.
   */
  spectralModel?: string;

  /**
   * The maximum inclination, in degrees, to be used in search operations.
   */
  srchInc?: number;

  /**
   * The search pattern to be executed for this request (e.g. PICKET-FENCE, SCAN,
   * etc.).
   */
  srchPattern?: string;

  /**
   * This service provides operations for querying and manipulation of state vectors
   * for OnOrbit objects. State vectors are cartesian vectors of position (r) and
   * velocity (v) that, together with their time (epoch) (t), uniquely determine the
   * trajectory of the orbiting body in space. J2000 is the preferred coordinate
   * frame for all state vector positions/velocities in UDL, but in some cases data
   * may be in another frame depending on the provider and/or datatype. Please see
   * the 'Discover' tab in the storefront to confirm coordinate frames by data
   * provider.
   */
  stateVector?: CollectRequestFull.StateVector;

  /**
   * The stopping HAE WGS-84 height above ellipsoid (HAE), of a volume definition, in
   * kilometers. The stopAlt value is only meaningful if a (starting) alt value is
   * provided.
   */
  stopAlt?: number;

  /**
   * The stopping WGS-84 latitude of a volume definition, in degrees. -90 to 90
   * degrees (negative values south of equator). The stopLat value is only meaningful
   * if a (starting) lat value is provided.
   */
  stopLat?: number;

  /**
   * The stopping WGS-84 longitude of a volume definition, in degrees. -180 to 180
   * degrees (negative values west of Prime Meridian). The stopLon value is only
   * meaningful if a (starting) lon value is provided.
   */
  stopLon?: number;

  /**
   * The (SSN) tasking suffix (A-Z) associated with this request. The suffix defines
   * the amount of observational data and the frequency of collection. Note that
   * suffix definitions are sensor type specific.
   */
  suffix?: string;

  /**
   * Optional array of provider/source specific tags for this data, where each
   * element is no longer than 32 characters, used for implementing data owner
   * conditional access controls to restrict access to the data. Should be left null
   * by data providers unless conditional access controls are coordinated with the
   * UDL team.
   */
  tags?: Array<string>;

  /**
   * The minimum object (diameter) size, in meters, to be reported.
   */
  targetSize?: number;

  /**
   * The (SSN) tasking category (1-5) associated with this request. The tasking
   * category defines the priority of gathering and transmitting the requested
   * observational data. Note that category definitions are sensor type specific.
   */
  taskCategory?: number;

  /**
   * The tasking group to which the target object is assigned.
   */
  taskGroup?: string;

  /**
   * Task ID associated with this request. A task ID may be associated with a single
   * collect request or may be used to tie together the sub-requests of a full
   * collect, for example a DWELL consisting of many dwell points.
   */
  taskId?: string;

  /**
   * Optional identifier to track a commercial or marketplace transaction executed to
   * produce this data.
   */
  transactionId?: string;

  /**
   * The true anomaly defines the angular position, in degrees, of the object on it's
   * orbital path as measured from the orbit focal point at epoch. The true anomaly
   * is referenced from perigee.
   */
  trueAnomoly?: number;

  /**
   * Boolean indicating that this collect request is UCT follow-up.
   */
  uctFollowUp?: boolean;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;

  /**
   * The estimated or expected visual magnitude of the target, in Magnitudes (M).
   */
  visMag?: number;

  /**
   * The maximum estimated or expected visual magnitude of the target, in Magnitudes
   * (M).
   */
  visMagMax?: number;

  /**
   * The minimum estimated or expected visual magnitude of the target, in Magnitudes
   * (M). If only minimum vismag is provided it is assumed to be minimum reportable
   * vismag.
   */
  visMagMin?: number;

  /**
   * The angular distance, in degrees, in the sensor-x direction from scan center
   * defined by the central vector. The specification of xAngle and yAngle defines a
   * rectangle of width 2*xAngle and height 2*yAngle centered about the central
   * vector.
   */
  xAngle?: number;

  /**
   * The angular distance, in degrees, in the sensor-y direction from scan center
   * defined by the central vector. The specification of xAngle and yAngle defines a
   * rectangle of width 2*xAngle and height 2*yAngle centered about the central
   * vector.
   */
  yAngle?: number;
}

export namespace CollectRequestFull {
  /**
   * An element set is a collection of Keplerian orbital elements describing an orbit
   * of a particular satellite. The data is used along with an orbit propagator in
   * order to predict the motion of a satellite. The element set, or elset for short,
   * consists of identification data, the classical elements and drag parameters.
   */
  export interface Elset {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * Elset epoch time in ISO 8601 UTC format, with microsecond precision.
     */
    epoch: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * AGOM, expressed in m^2/kg, is the value of the (averaged) object Area times the
     * solar radiation pressure coefficient(Gamma) over the object Mass. Applicable
     * only with ephemType4.
     */
    agom?: number;

    /**
     * Optional algorithm used to produce this record.
     */
    algorithm?: string;

    /**
     * The orbit point furthest from the center of the earth in kilometers. If not
     * provided, apogee will be computed from the TLE according to the following. Using
     * mu, the standard gravitational parameter for the earth (398600.4418), semi-major
     * axis A = (mu/(n _ 2 _ pi/(24*3600))^2)(1/3). Using semi-major axis A,
     * eccentricity E, apogee = (A * (1 + E)) in km. Note that the calculations are for
     * computing the apogee radius from the center of the earth, to compute apogee
     * altitude the radius of the earth should be subtracted (6378.135 km).
     */
    apogee?: number;

    /**
     * The argument of perigee is the angle in degrees formed between the perigee and
     * the ascending node. If the perigee would occur at the ascending node, the
     * argument of perigee would be 0.
     */
    argOfPerigee?: number;

    /**
     * Ballistic coefficient, in m^2/kg. Applicable only with ephemType4.
     */
    ballisticCoeff?: number;

    /**
     * The drag term for SGP4 orbital model, used for calculating decay constants for
     * altitude, eccentricity etc, measured in inverse earth radii.
     */
    bStar?: number;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Optional source-provided and searchable metadata or descriptor of the data.
     */
    descriptor?: string;

    /**
     * The orbital eccentricity of an astronomical object is a parameter that
     * determines the amount by which its orbit around another body deviates from a
     * perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an
     * elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a
     * hyperbolic escape orbit.
     */
    eccentricity?: number;

    /**
     * Read-only start time at which this elset was the 'current' elset for its
     * satellite. This field and is set by the system automatically and ignored on
     * create/edit operations.
     */
    effectiveFrom?: string;

    /**
     * Read-only end time at which this elset was no longer the 'current' elset for its
     * satellite. This field and is set by the system automatically and ignored on
     * create/edit operations.
     */
    effectiveUntil?: string;

    /**
     * The ephemeris type associated with this TLE:
     *
     * 0:&nbsp;SGP (or SGP4 with Kozai mean motion)
     *
     * 1:&nbsp;SGP (Kozai mean motion)
     *
     * 2:&nbsp;SGP4 (Brouver mean motion)
     *
     * 3:&nbsp;SDP4
     *
     * 4:&nbsp;SGP4-XP
     *
     * 5:&nbsp;SDP8
     *
     * 6:&nbsp;SP (osculating mean motion)
     */
    ephemType?: number;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    idElset?: string;

    /**
     * Unique identifier of the satellite on-orbit object, if correlated. For the
     * public catalog, the idOnOrbit is typically the satellite number as a string, but
     * may be a UUID for analyst or other unknown or untracked satellites.
     */
    idOnOrbit?: string;

    /**
     * Unique identifier of the OD solution record that produced this elset. This ID
     * can be used to obtain additional information on an OrbitDetermination object
     * using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For
     * example, the OrbitDetermination with idOrbitDetermination = abc would be queried
     * as /udl/orbitdetermination/abc.
     */
    idOrbitDetermination?: string;

    /**
     * The angle between the equator and the orbit when looking from the center of the
     * Earth. If the orbit went exactly around the equator from left to right, then the
     * inclination would be 0. The inclination ranges from 0 to 180 degrees.
     */
    inclination?: number;

    /**
     * Read only derived/generated line1 of a legacy TLE (two line element set) format,
     * ignored on create/edit operations.
     */
    line1?: string;

    /**
     * Read only derived/generated line2 of a legacy TLE (two line element set) format,
     * ignored on create/edit operations.
     */
    line2?: string;

    /**
     * Where the satellite is in its orbital path. The mean anomaly ranges from 0 to
     * 360 degrees. The mean anomaly is referenced to the perigee. If the satellite
     * were at the perigee, the mean anomaly would be 0.
     */
    meanAnomaly?: number;

    /**
     * Mean motion is the angular speed required for a body to complete one orbit,
     * assuming constant speed in a circular orbit which completes in the same time as
     * the variable speed, elliptical orbit of the actual body. Measured in revolutions
     * per day.
     */
    meanMotion?: number;

    /**
     * 2nd derivative of the mean motion with respect to time. Units are revolutions
     * per day cubed.
     */
    meanMotionDDot?: number;

    /**
     * 1st derivative of the mean motion with respect to time. Units are revolutions
     * per day squared.
     */
    meanMotionDot?: number;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * Optional identifier provided by elset source to indicate the target onorbit
     * object of this elset. This may be an internal identifier and not necessarily map
     * to a valid satellite number.
     */
    origObjectId?: string;

    /**
     * The orbit point nearest to the center of the earth in kilometers. If not
     * provided, perigee will be computed from the TLE according to the following.
     * Using mu, the standard gravitational parameter for the earth (398600.4418),
     * semi-major axis A = (mu/(n _ 2 _ pi/(24*3600))^2)(1/3). Using semi-major axis A,
     * eccentricity E, perigee = (A * (1 - E)) in km. Note that the calculations are
     * for computing the perigee radius from the center of the earth, to compute
     * perigee altitude the radius of the earth should be subtracted (6378.135 km).
     */
    perigee?: number;

    /**
     * Period of the orbit equal to inverse of mean motion, in minutes.
     */
    period?: number;

    /**
     * Right ascension of the ascending node, or RAAN is the angle as measured in
     * degrees eastwards (or, as seen from the north, counterclockwise) from the First
     * Point of Aries to the ascending node, which is where the orbit crosses the
     * equator when traveling north.
     */
    raan?: number;

    /**
     * Optional URI location in the document repository of the raw file parsed by the
     * system to produce this record. To download the raw file, prepend
     * https://udl-hostname/scs/download?id= to this value.
     */
    rawFileURI?: string;

    /**
     * The current revolution number. The value is incremented when a satellite crosses
     * the equator on an ascending pass.
     */
    revNo?: number;

    /**
     * Satellite/catalog number of the target on-orbit object.
     */
    satNo?: number;

    /**
     * The sum of the periapsis and apoapsis distances divided by two. For circular
     * orbits, the semimajor axis is the distance between the centers of the bodies,
     * not the distance of the bodies from the center of mass. Units are kilometers.
     */
    semiMajorAxis?: number;

    /**
     * Optional array of UDL data (observation) UUIDs used to build this element set.
     * See the associated sourcedDataTypes array for the specific types of observations
     * for the positionally corresponding UUIDs in this array (the two arrays must
     * match in size).
     */
    sourcedData?: Array<string>;

    /**
     * Optional array of UDL observation data types used to build this element set
     * (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific
     * UUIDs of observations for the positionally corresponding data types in this
     * array (the two arrays must match in size).
     */
    sourcedDataTypes?: Array<'EO' | 'RADAR' | 'RF' | 'DOA' | 'ELSET' | 'SV'>;

    /**
     * The source data library from which this record was received. This could be a
     * remote or tactical UDL or another data library. If null, the record should be
     * assumed to have originated from the primary Enterprise UDL.
     */
    sourceDL?: string;

    /**
     * Optional array of provider/source specific tags for this data, where each
     * element is no longer than 32 characters, used for implementing data owner
     * conditional access controls to restrict access to the data. Should be left null
     * by data providers unless conditional access controls are coordinated with the
     * UDL team.
     */
    tags?: Array<string>;

    /**
     * Optional identifier to track a commercial or marketplace transaction executed to
     * produce this data.
     */
    transactionId?: string;

    /**
     * Boolean indicating this Elset was unable to be correlated to a known object.
     * This flag should only be set to true by data providers after an attempt to
     * correlate to an on-orbit object was made and failed. If unable to correlate, the
     * 'origObjectId' field may be populated with an internal data provider specific
     * identifier.
     */
    uct?: boolean;
  }

  /**
   * This service provides operations for querying and manipulation of state vectors
   * for OnOrbit objects. State vectors are cartesian vectors of position (r) and
   * velocity (v) that, together with their time (epoch) (t), uniquely determine the
   * trajectory of the orbiting body in space. J2000 is the preferred coordinate
   * frame for all state vector positions/velocities in UDL, but in some cases data
   * may be in another frame depending on the provider and/or datatype. Please see
   * the 'Discover' tab in the storefront to confirm coordinate frames by data
   * provider.
   */
  export interface StateVector {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * Time of validity for state vector in ISO 8601 UTC datetime format, with
     * microsecond precision.
     */
    epoch: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * The actual time span used for the OD of the object, expressed in days.
     */
    actualODSpan?: number;

    /**
     * Optional algorithm used to produce this record.
     */
    algorithm?: string;

    /**
     * The reference frame of the alternate1 (Alt1) cartesian orbital state.
     */
    alt1ReferenceFrame?: string;

    /**
     * The reference frame of the alternate2 (Alt2) cartesian orbital state.
     */
    alt2ReferenceFrame?: string;

    /**
     * The actual area of the object at it's largest cross-section, expressed in
     * meters^2.
     */
    area?: number;

    /**
     * First derivative of drag/ballistic coefficient (m2/kg-s).
     */
    bDot?: number;

    /**
     * Model parameter value for center of mass offset (m).
     */
    cmOffset?: number;

    /**
     * Covariance matrix, in kilometer and second based units, in the specified
     * covReferenceFrame. If the covReferenceFrame is null it is assumed to be J2000.
     * The array values (1-21) represent the lower triangular half of the
     * position-velocity covariance matrix. The size of the covariance matrix is
     * dynamic, depending on whether the covariance for position only or position &
     * velocity. The covariance elements are position dependent within the array with
     * values ordered as follows:
     *
     * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR&nbsp;&nbsp;
     *
     * x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1
     *
     * y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;3
     *
     * z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;6
     *
     * x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;10
     *
     * y'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
     *
     * z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;
     *
     * The cov array should contain only the lower left triangle values from top left
     * down to bottom right, in order.
     *
     * If additional covariance terms are included for DRAG, SRP, and/or THRUST, the
     * matrix can be extended with the following order of elements:
     *
     * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR
     *
     * DRG&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;23&nbsp;&nbsp;24&nbsp;&nbsp;25&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;
     *
     * SRP&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;30&nbsp;&nbsp;31&nbsp;&nbsp;32&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;
     *
     * THR&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;38&nbsp;&nbsp;39&nbsp;&nbsp;40&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;44&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45&nbsp;
     */
    cov?: Array<number>;

    /**
     * The method used to generate the covariance during the orbit determination (OD)
     * that produced the state vector, or whether an arbitrary, non-calculated default
     * value was used (CALCULATED, DEFAULT).
     */
    covMethod?: string;

    /**
     * The reference frame of the covariance matrix elements. If the covReferenceFrame
     * is null it is assumed to be J2000.
     */
    covReferenceFrame?: 'J2000' | 'UVW' | 'EFG/TDR' | 'TEME' | 'GCRF';

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Optional source-provided and searchable metadata or descriptor of the data.
     */
    descriptor?: string;

    /**
     * The effective area of the object exposed to atmospheric drag, expressed in
     * meters^2.
     */
    dragArea?: number;

    /**
     * Area-to-mass ratio coefficient for atmospheric ballistic drag (m2/kg).
     */
    dragCoeff?: number;

    /**
     * The Drag Model used for this vector (e.g. HARRIS-PRIESTER, JAC70, JBH09, MSIS90,
     * NONE, etc.).
     */
    dragModel?: string;

    /**
     * Model parameter value for energy dissipation rate (EDR) (w/kg).
     */
    edr?: number;

    /**
     * Start time at which this state vector was the 'current' state vector for its
     * satellite.
     */
    effectiveFrom?: string;

    /**
     * End time at which this state vector was no longer the 'current' state vector for
     * its satellite.
     */
    effectiveUntil?: string;

    /**
     * The covariance matrix values represent the lower triangular half of the
     * covariance matrix in terms of equinoctial elements.&nbsp; The size of the
     * covariance matrix is dynamic.&nbsp; The values are outputted in order across
     * each row, i.e.:
     *
     * 1&nbsp;&nbsp; 2&nbsp;&nbsp; 3&nbsp;&nbsp; 4&nbsp;&nbsp; 5
     *
     * 6&nbsp;&nbsp; 7&nbsp;&nbsp; 8&nbsp;&nbsp; 9&nbsp; 10
     *
     * :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
     *
     * :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
     *
     * 51&nbsp; 52&nbsp; 53&nbsp; 54&nbsp; 55
     *
     * :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
     *
     * :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
     *
     * The ordering of values is as follows:
     *
     * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Af&nbsp;&nbsp;
     * Ag&nbsp;&nbsp; L&nbsp;&nbsp;&nbsp; N&nbsp;&nbsp; Chi&nbsp; Psi&nbsp;&nbsp;
     * B&nbsp;&nbsp; BDOT AGOM&nbsp; T&nbsp;&nbsp; C1&nbsp;&nbsp; C2&nbsp; ...
     *
     * Af&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1
     *
     * Ag&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp; 3
     *
     * L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
     * 4&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp; 6
     *
     * N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
     * 7&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp; 10
     *
     * Chi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11&nbsp;&nbsp; 12&nbsp;&nbsp;
     * 13&nbsp;&nbsp; 14&nbsp;&nbsp; 15
     *
     * Psi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 16&nbsp;&nbsp; 17&nbsp;&nbsp;
     * 18&nbsp;&nbsp; 19&nbsp;&nbsp; 20&nbsp;&nbsp; 21
     *
     * B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 22&nbsp;&nbsp;
     * 23&nbsp;&nbsp; 24 &nbsp;&nbsp;25&nbsp;&nbsp; 26&nbsp;&nbsp; 27&nbsp;&nbsp; 28
     *
     * BDOT&nbsp;&nbsp; 29&nbsp;&nbsp; 30&nbsp;&nbsp; 31&nbsp;&nbsp; 32&nbsp;&nbsp;
     * 33&nbsp;&nbsp; 34&nbsp;&nbsp; 35&nbsp;&nbsp; 36
     *
     * AGOM&nbsp; 37&nbsp;&nbsp; 38&nbsp;&nbsp; 39&nbsp;&nbsp; 40&nbsp;&nbsp;
     * 41&nbsp;&nbsp; 42&nbsp;&nbsp; 43&nbsp;&nbsp; 44&nbsp;&nbsp; 45
     *
     * T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 46&nbsp;&nbsp;
     * 47&nbsp;&nbsp; 48&nbsp;&nbsp; 49&nbsp;&nbsp; 50&nbsp;&nbsp; 51&nbsp;&nbsp;
     * 52&nbsp;&nbsp; 53&nbsp;&nbsp; 54&nbsp;&nbsp; 55
     *
     * C1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 56&nbsp;&nbsp; 57&nbsp;&nbsp;
     * 58&nbsp;&nbsp; 59&nbsp;&nbsp; 60&nbsp;&nbsp; 61&nbsp;&nbsp; 62&nbsp;&nbsp;
     * 63&nbsp;&nbsp; 64&nbsp;&nbsp; 65&nbsp;&nbsp; 66
     *
     * C2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 67&nbsp;&nbsp; 68&nbsp;&nbsp;
     * 69&nbsp;&nbsp; 70&nbsp;&nbsp; 71&nbsp; &nbsp;72&nbsp;&nbsp; 73&nbsp;&nbsp;
     * 74&nbsp;&nbsp; 75&nbsp;&nbsp; 76&nbsp;&nbsp; 77&nbsp;&nbsp; 78
     *
     * :
     *
     * :
     *
     * where C1, C2, etc, are the "consider parameters" that may be added to the
     * covariance matrix.&nbsp; The covariance matrix will be as large as the last
     * element/model parameter needed.&nbsp; In other words, if the DC solved for all 6
     * elements plus AGOM, the covariance matrix will be 9x9 (and the rows for B and
     * BDOT will be all zeros).&nbsp; If the covariance matrix is unavailable, the size
     * will be set to 0x0, and no data will follow.&nbsp; The cov field should contain
     * only the lower left triangle values from top left down to bottom right, in
     * order.
     */
    eqCov?: Array<number>;

    /**
     * Integrator error control.
     */
    errorControl?: number;

    /**
     * Boolean indicating use of fixed step size for this vector.
     */
    fixedStep?: boolean;

    /**
     * Geopotential model used for this vector (e.g. EGM-96, WGS-84, WGS-72, JGM-2, or
     * GEM-T3), including mm degree zonals, nn degree/order tesserals. E.g. EGM-96
     * 24Z,24T.
     */
    geopotentialModel?: string;

    /**
     * Number of terms used in the IAU 1980 nutation model (4, 50, or 106).
     */
    iau1980Terms?: number;

    /**
     * Unique identifier of the satellite on-orbit object, if correlated. For the
     * public catalog, the idOnOrbit is typically the satellite number as a string, but
     * may be a UUID for analyst or other unknown or untracked satellites.
     */
    idOnOrbit?: string;

    /**
     * Unique identifier of the OD solution record that produced this state vector.
     * This ID can be used to obtain additional information on an OrbitDetermination
     * object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For
     * example, the OrbitDetermination with idOrbitDetermination = abc would be queries
     * as /udl/orbitdetermination/abc.
     */
    idOrbitDetermination?: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    idStateVector?: string;

    /**
     * Integrator Mode.
     */
    integratorMode?: string;

    /**
     * Boolean indicating use of in-track thrust perturbations for this vector.
     */
    inTrackThrust?: boolean;

    /**
     * The end of the time interval containing the time of the last accepted
     * observation, in ISO 8601 UTC format with microsecond precision. For an exact
     * observation time, the firstObTime and lastObTime are the same.
     */
    lastObEnd?: string;

    /**
     * The start of the time interval containing the time of the last accepted
     * observation, in ISO 8601 UTC format with microsecond precision. For an exact
     * observation time, the firstObTime and lastObTime are the same.
     */
    lastObStart?: string;

    /**
     * Time of the next leap second after epoch in ISO 8601 UTC time. If the next leap
     * second is not known, the time of the previous leap second is used.
     */
    leapSecondTime?: string;

    /**
     * Boolean indicating use of lunar/solar perturbations for this vector.
     */
    lunarSolar?: boolean;

    /**
     * The mass of the object, in kilograms.
     */
    mass?: number;

    /**
     * The number of observations available for the OD of the object.
     */
    obsAvailable?: number;

    /**
     * The number of observations accepted for the OD of the object.
     */
    obsUsed?: number;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * Optional identifier provided by state vector source to indicate the target
     * onorbit object of this state vector. This may be an internal identifier and not
     * necessarily map to a valid satellite number.
     */
    origObjectId?: string;

    /**
     * Type of partial derivatives used (ANALYTIC, FULL NUM, or FAST NUM).
     */
    partials?: string;

    /**
     * The pedigree of state vector, or methods used for its generation to include
     * state update/orbit determination, propagation from another state, or a state
     * from a calibration satellite (e.g. ORBIT_UPDATE, PROPAGATION, CALIBRATION,
     * CONJUNCTION, FLIGHT_PLAN).
     */
    pedigree?: string;

    /**
     * Polar Wander Motion X (arc seconds).
     */
    polarMotionX?: number;

    /**
     * Polar Wander Motion Y (arc seconds).
     */
    polarMotionY?: number;

    /**
     * One sigma position uncertainty, in kilometers.
     */
    posUnc?: number;

    /**
     * Optional URI location in the document repository of the raw file parsed by the
     * system to produce this record. To download the raw file, prepend
     * https://udl-hostname/scs/download?id= to this value.
     */
    rawFileURI?: string;

    /**
     * The recommended OD time span calculated for the object, expressed in days.
     */
    recODSpan?: number;

    /**
     * The reference frame of the cartesian orbital states. If the referenceFrame is
     * null it is assumed to be J2000.
     */
    referenceFrame?: 'J2000' | 'EFG/TDR' | 'ECR/ECEF' | 'TEME' | 'ITRF' | 'GCRF';

    /**
     * The percentage of residuals accepted in the OD of the object.
     */
    residualsAcc?: number;

    /**
     * Epoch revolution number.
     */
    revNo?: number;

    /**
     * The Weighted Root Mean Squared (RMS) of the differential correction on the
     * target object that produced this vector. WRMS is a quality indicator of the
     * state vector update, with a value of 1.00 being optimal. WRMS applies to Batch
     * Least Squares (BLS) processes.
     */
    rms?: number;

    /**
     * Satellite/Catalog number of the target OnOrbit object.
     */
    satNo?: number;

    /**
     * Array containing the standard deviation of error in target object position, U, V
     * and W direction respectively (km).
     */
    sigmaPosUVW?: Array<number>;

    /**
     * Array containing the standard deviation of error in target object velocity, U, V
     * and W direction respectively (km/sec).
     */
    sigmaVelUVW?: Array<number>;

    /**
     * Average solar flux geomagnetic index.
     */
    solarFluxAPAvg?: number;

    /**
     * F10 (10.7 cm) solar flux value.
     */
    solarFluxF10?: number;

    /**
     * F10 (10.7 cm) solar flux 81-day average value.
     */
    solarFluxF10Avg?: number;

    /**
     * Boolean indicating use of solar radiation pressure perturbations for this
     * vector.
     */
    solarRadPress?: boolean;

    /**
     * Area-to-mass ratio coefficient for solar radiation pressure.
     */
    solarRadPressCoeff?: number;

    /**
     * Boolean indicating use of solid earth tide perturbations for this vector.
     */
    solidEarthTides?: boolean;

    /**
     * Optional array of UDL data (observation) UUIDs used to build this state vector.
     * See the associated sourcedDataTypes array for the specific types of observations
     * for the positionally corresponding UUIDs in this array (the two arrays must
     * match in size).
     */
    sourcedData?: Array<string>;

    /**
     * Optional array of UDL observation data types used to build this state vector
     * (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific
     * UUIDs of observations for the positionally corresponding data types in this
     * array (the two arrays must match in size).
     */
    sourcedDataTypes?: Array<'EO' | 'RADAR' | 'RF' | 'DOA' | 'ELSET' | 'SV'>;

    /**
     * The source data library from which this record was received. This could be a
     * remote or tactical UDL or another data library. If null, the record should be
     * assumed to have originated from the primary Enterprise UDL.
     */
    sourceDL?: string;

    /**
     * The effective area of the object exposed to solar radiation pressure, expressed
     * in meters^2.
     */
    srpArea?: number;

    /**
     * Integrator step mode (AUTO, TIME, or S).
     */
    stepMode?: string;

    /**
     * Initial integration step size (seconds).
     */
    stepSize?: number;

    /**
     * Initial step size selection (AUTO or MANUAL).
     */
    stepSizeSelection?: string;

    /**
     * Optional array of provider/source specific tags for this data, where each
     * element is no longer than 32 characters, used for implementing data owner
     * conditional access controls to restrict access to the data. Should be left null
     * by data providers unless conditional access controls are coordinated with the
     * UDL team.
     */
    tags?: Array<string>;

    /**
     * TAI (Temps Atomique International) minus UTC (Universal Time Coordinates) offset
     * in seconds.
     */
    taiUtc?: number;

    /**
     * Model parameter value for thrust acceleration (m/s2).
     */
    thrustAccel?: number;

    /**
     * The number of sensor tracks available for the OD of the object.
     */
    tracksAvail?: number;

    /**
     * The number of sensor tracks accepted for the OD of the object.
     */
    tracksUsed?: number;

    /**
     * Optional identifier to track a commercial or marketplace transaction executed to
     * produce this data.
     */
    transactionId?: string;

    /**
     * Boolean indicating this state vector was unable to be correlated to a known
     * object. This flag should only be set to true by data providers after an attempt
     * to correlate to an OnOrbit object was made and failed. If unable to correlate,
     * the 'origObjectId' field may be populated with an internal data provider
     * specific identifier.
     */
    uct?: boolean;

    /**
     * Rate of change of UT1 (milliseconds/day) - first derivative of ut1Utc.
     */
    ut1Rate?: number;

    /**
     * Universal Time-1 (UT1) minus UTC offset, in seconds.
     */
    ut1Utc?: number;

    /**
     * One sigma velocity uncertainty, in kilometers/second.
     */
    velUnc?: number;

    /**
     * Cartesian X acceleration of target, in kilometers/second^2, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    xaccel?: number;

    /**
     * Cartesian X position of the target, in kilometers, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    xpos?: number;

    /**
     * Cartesian X position of the target, in kilometers, in the specified
     * alt1ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    xposAlt1?: number;

    /**
     * Cartesian X position of the target, in kilometers, in the specified
     * alt2ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    xposAlt2?: number;

    /**
     * Cartesian X velocity of target, in kilometers/second, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    xvel?: number;

    /**
     * Cartesian X velocity of the target, in kilometers/second, in the specified
     * alt1ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    xvelAlt1?: number;

    /**
     * Cartesian X velocity of the target, in kilometers/second, in the specified
     * alt2ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    xvelAlt2?: number;

    /**
     * Cartesian Y acceleration of target, in kilometers/second^2, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    yaccel?: number;

    /**
     * Cartesian Y position of the target, in kilometers, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    ypos?: number;

    /**
     * Cartesian Y position of the target, in kilometers, in the specified
     * alt1ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    yposAlt1?: number;

    /**
     * Cartesian Y position of the target, in kilometers, in the specified
     * alt2ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    yposAlt2?: number;

    /**
     * Cartesian Y velocity of target, in kilometers/second, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    yvel?: number;

    /**
     * Cartesian Y velocity of the target, in kilometers/second, in the specified
     * alt1ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    yvelAlt1?: number;

    /**
     * Cartesian Y velocity of the target, in kilometers/second, in the specified
     * alt2ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    yvelAlt2?: number;

    /**
     * Cartesian Z acceleration of target, in kilometers/second^2, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    zaccel?: number;

    /**
     * Cartesian Z position of the target, in kilometers, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    zpos?: number;

    /**
     * Cartesian Z position of the target, in kilometers, in the specified
     * alt1ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    zposAlt1?: number;

    /**
     * Cartesian Z position of the target, in kilometers, in the specified
     * alt2ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    zposAlt2?: number;

    /**
     * Cartesian Z velocity of target, in kilometers/second, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    zvel?: number;

    /**
     * Cartesian Z velocity of the target, in kilometers/second, in the specified
     * alt1ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    zvelAlt1?: number;

    /**
     * Cartesian Z velocity of the target, in kilometers/second, in the specified
     * alt2ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    zvelAlt2?: number;
  }
}

/**
 * Collect response supports the response and status of individual collect
 * requests. Each response is referenced by the UUID of the request, and contains
 * information including the status of the request, collection times and types, and
 * reference(s) to the observations collected. There may be multiple responses
 * associated with a request, either from multiple collectors or to relay status
 * changes prior to completion and delivery.
 */
export interface CollectResponseFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Unique identifier of the request associated with this response.
   */
  idRequest: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * The actual end time of the collect or contact, in ISO 8601 UTC format.
   */
  actualEndTime?: string;

  /**
   * The actual start time of the collect or contact, in ISO 8601 UTC format.
   */
  actualStartTime?: string;

  /**
   * Proposed alternative end time, in ISO 8601 UTC format.
   */
  altEndTime?: string;

  /**
   * Proposed alternative start time, in ISO 8601 UTC format.
   */
  altStartTime?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Error code associated with this request/response.
   */
  errCode?: string;

  /**
   * UUID from external systems. This field has no meaning within UDL and is provided
   * as a convenience for systems that require tracking of internal system generated
   * ID.
   */
  externalId?: string;

  /**
   * Unique identifier of the target on-orbit object associated with this response.
   */
  idOnOrbit?: string;

  /**
   * Unique identifier of the parent plan or schedule associated with the
   * request/response.
   */
  idPlan?: string;

  /**
   * Unique identifier of the reporting sensor.
   */
  idSensor?: string;

  /**
   * Notes or comments associated with this response.
   */
  notes?: string;

  /**
   * Model object representing on-orbit objects or satellites in the system.
   */
  onOrbit?: OnorbitFull;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Optional identifier provided by data source to indicate the target object of
   * this response. This may be an internal identifier and not necessarily a valid
   * satellite number.
   */
  origObjectId?: string;

  /**
   * Optional identifier provided by the collection source to indicate the sensor
   * identifier responding to this collect or contact. This may be an internal
   * identifier and not necessarily a valid sensor ID.
   */
  origSensorId?: string;

  /**
   * Satellite/catalog number of the target on-orbit object.
   */
  satNo?: number;

  /**
   * Array of UUIDs of the UDL data record(s) collected in response to the associated
   * request. See the associated 'srcTyps' array for the specific types of data,
   * positionally corresponding to the UUIDs in this array. The 'srcTyps' and
   * 'srcIds' arrays must match in size. The appropriate API operation can be used to
   * retrieve the specified object(s) (e.g. /udl/rfobservation/{uuid}).
   */
  srcIds?: Array<string>;

  /**
   * Array of UDL record type(s) (DOA, ELSET, EO, RADAR, RF, SV) collected or
   * produced in response to the associated request. See the associated 'srcIds'
   * array for the record UUIDs, positionally corresponding to the record types in
   * this array. The 'srcTyps' and 'srcIds' arrays must match in size. The
   * appropriate API operation can be used to retrieve the specified object(s) (e.g.
   * /udl/rfobservation/{uuid}).
   */
  srcTyps?: Array<string>;

  /**
   * The status of the request (ACCEPTED, CANCELLED, COLLECTED, COMPLETED, DELIVERED,
   * FAILED, PARTIAL, PROPOSED, REJECTED, SCHEDULED):
   *
   * ACCEPTED: The collect or contact request has been received and accepted.
   *
   * CANCELLED: A previously scheduled collect or contact whose execution was
   * cancelled.
   *
   * COLLECTED: The collect has been accomplished. A collected state implies that
   * additional activity is required for delivery/completion.
   *
   * COMPLETED: The collect or contact has been completed. For many systems completed
   * and delivered constitute an equivalent successful end state.
   *
   * DELIVERED: The collected observation(s) have been delivered to the requestor.
   * For many systems completed and delivered constitute an equivalent successful end
   * state. A DELIVERED state is typically used for systems that exhibit a delay
   * between collect and delivery, such as with space-based systems which require
   * ground contact to deliver observations.
   *
   * FAILED: The collect or contact was attempted and failed, or the delivery of the
   * collected observation(s) failed. A FAILED status may be accompanied by an error
   * code (errCode), if available.
   *
   * PARTIAL: A PARTIAL state indicates that a part of a multi-track request has been
   * accomplished, but the full request is incomplete. A PARTIAL status should
   * ultimately be resolved to an end state.
   *
   * PROPOSED: Indicates that the request was received and alternate collect or
   * contact time(s) (altStartTime, altEndTime) have been proposed. If an alternate
   * is accepted by the requestor the current request should be cancelled and a new
   * request created.
   *
   * REJECTED: The request has been received and rejected by the provider. A REJECTED
   * status may be accompanied by an explanation (notes) of the reason that the
   * request was rejected.
   *
   * SCHEDULED: The request was received and has been scheduled for execution.
   */
  status?: string;

  /**
   * Optional array of provider/source specific tags for this data, where each
   * element is no longer than 32 characters, used for implementing data owner
   * conditional access controls to restrict access to the data. Should be left null
   * by data providers unless conditional access controls are coordinated with the
   * UDL team.
   */
  tags?: Array<string>;

  /**
   * Optional task ID associated with the request/response.
   */
  taskId?: string;
}

/**
 * Comm represents communications entities (e.g. on-orbit communications satellite
 * payloads) within the SSA environment.
 */
export interface CommFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Name of the Comm entity.
   */
  name: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Description of the comm entity.
   */
  description?: string;

  /**
   * An entity is a generic representation of any object within a space/SSA system
   * such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An
   * entity can have an operating unit, a location (if terrestrial), and statuses.
   */
  entity?: EntityFull;

  /**
   * Unique identifier of the parent entity. idEntity is required for Put.
   */
  idEntity?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Read-only collection of Transponders for this Comm entity.
   */
  transponders?: Array<CommFull.Transponder>;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

export namespace CommFull {
  /**
   * A transponder receives and transmits radio signals at a prescribed frequency
   * range. A communications satellite's transponder is the series of interconnected
   * units that form a communications channel between the receiving and the
   * transmitting antennas. It is mainly used in satellite communication to transfer
   * the received signals.
   */
  export interface Transponder {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * ID of the parent Comm object for this transponder.
     */
    idComm: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    /**
     * Collection of Channels for this Transponder.
     */
    channels?: Array<Shared.ChannelFull>;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Forward error correction, e.g. 0=Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 =
     * 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
     */
    fec?: number;

    /**
     * Format.
     */
    format?: string;

    /**
     * Transponder modulation, e.g. Auto, QPSK, 8PSK.
     */
    modulation?: string;

    /**
     * Optional name of the transponder.
     */
    name?: string;

    /**
     * Optional external network id as provided data source.
     */
    nid?: string;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * Symbol rate is the number of symbol changes, waveform changes, or signaling
     * events, across the transmission medium per time unit using a digitally modulated
     * signal or a line code. Also measured in Hz.
     */
    symbolRate?: number;

    /**
     * Transponder system, e.g. DVB-S, DVB-S2.
     */
    system?: string;

    /**
     * Optional external transponder id as provided data source.
     */
    tid?: string;

    /**
     * Transponder Translation Factor. This is the frequency difference between the
     * uplink received by a satellite, and the downlink transmitted back. It varies
     * satellite to satellite dependent on the mission.
     */
    ttf?: number;

    /**
     * Time the row was last updated in the database, auto-populated by the system.
     */
    updatedAt?: string;

    /**
     * Application user who updated the row in the database, auto-populated by the
     * system.
     */
    updatedBy?: string;
  }
}

/**
 * Stores the results of a particular Conjunction Assessment (CA) run.
 */
export interface ConjunctionFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Time of closest approach (TCA) in UTC.
   */
  tca: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Commander's critical information requirements notes.
   */
  ccir?: string;

  /**
   * The value of the primary (object1) Area times the drag coefficient over the
   * object Mass, expressed in m^2/kg, used for propagation of the primary state
   * vector and covariance to TCA.
   */
  cdAoM1?: number;

  /**
   * The value of the secondary (object2) Area times the drag coefficient over the
   * object Mass, expressed in m^2/kg, used for propagation of the primary state
   * vector and covariance to TCA.
   */
  cdAoM2?: number;

  /**
   * Probability of Collision is the probability (denoted p, where 0.0<=p<=1.0), that
   * Object1 and Object2 will collide.
   */
  collisionProb?: number;

  /**
   * The method that was used to calculate the collision probability, ex.
   * FOSTER-1992.
   */
  collisionProbMethod?: string;

  /**
   * Additional notes from data providers.
   */
  comments?: string;

  /**
   * Emergency comments.
   */
  concernNotes?: string;

  /**
   * The value of the primary (object1) Area times the solar radiation pressure
   * coefficient over the object Mass, expressed in m^2/kg, used for propagation of
   * the primary state vector and covariance to TCA. This parameter is sometimes
   * referred to as AGOM.
   */
  crAoM1?: number;

  /**
   * The value of the secondary (object2) Area times the solar radiation pressure
   * coefficient over the object Mass, expressed in m^2/kg, used for propagation of
   * the primary state vector and covariance to TCA. This parameter is sometimes
   * referred to as AGOM.
   */
  crAoM2?: number;

  /**
   * Time the row was created in the database.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database.
   */
  createdBy?: string;

  /**
   * Optional source-provided and searchable metadata or descriptor of the data.
   */
  descriptor?: string;

  /**
   * The filename of the primary (object1) ephemeris used in the screening, if
   * applicable.
   */
  ephemName1?: string;

  /**
   * The filename of the secondary (object2) ephemeris used in the screening, if
   * applicable.
   */
  ephemName2?: string;

  /**
   * Unique identifier of the parent Ephemeris Set of the primary (object1) ephemeris
   * used in the screening, if applicable.
   */
  esId1?: string;

  /**
   * Unique identifier of the parent Ephemeris Set of the secondary (object2)
   * ephemeris used in the screening, if applicable.
   */
  esId2?: string;

  /**
   * Optional source-provided identifier for this conjunction event. In the case
   * where multiple conjunction records are submitted for the same event, this field
   * can be used to tie them together to the same event.
   */
  eventId?: string;

  /**
   * Unique identifier of the primary satellite on-orbit object, if correlated.
   */
  idOnOrbit1?: string;

  /**
   * Unique identifier of the secondary satellite on-orbit object, if correlated.
   */
  idOnOrbit2?: string;

  /**
   * Optional ID of the UDL State Vector at TCA of the primary object. When
   * performing a create, this id will be ignored in favor of the UDL generated id of
   * the stateVector1.
   */
  idStateVector1?: string;

  /**
   * Optional ID of the UDL State Vector at TCA of the secondary object. When
   * performing a create, this id will be ignored in favor of the UDL generated id of
   * the stateVector2.
   */
  idStateVector2?: string;

  /**
   * Used for probability of collision calculation, not Warning/Alert Threshold
   * notifications.
   */
  largeCovWarning?: boolean;

  /**
   * Used for probability of collision calculation, not Warning/Alert Threshold
   * notifications.
   */
  largeRelPosWarning?: boolean;

  /**
   * Time of last positive metric observation of the primary satellite.
   */
  lastObTime1?: string;

  /**
   * Time of last positive metric observation of the secondary satellite.
   */
  lastObTime2?: string;

  /**
   * Spacecraft name(s) for which the Collision message is provided.
   */
  messageFor?: string;

  /**
   * JMS provided message ID link.
   */
  messageId?: string;

  /**
   * Distance between objects at Time of Closest Approach (TCA) in meters.
   */
  missDistance?: number;

  /**
   * Model object representing on-orbit objects or satellites in the system.
   */
  onOrbit1?: OnorbitFull;

  /**
   * Model object representing on-orbit objects or satellites in the system.
   */
  onOrbit2?: OnorbitFull;

  /**
   * Optional place holder for an OnOrbit ID that does not exist in UDL.
   */
  origIdOnOrbit1?: string;

  /**
   * Optional place holder for an OnOrbit ID that does not exist in UDL.
   */
  origIdOnOrbit2?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * Creating agency or owner/operator (may be different than provider who submitted
   * the conjunction message).
   */
  originator?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Flag indicating if owner was contacted.
   */
  ownerContacted?: boolean;

  /**
   * Penetration Level Sigma.
   */
  penetrationLevelSigma?: number;

  /**
   * Link to filename associated with JMS record.
   */
  rawFileURI?: string;

  /**
   * Distance between objects along Normal vector in meters.
   */
  relPosN?: number;

  /**
   * Distance between objects along Radial Vector at Time of Closest Approach in
   * meters.
   */
  relPosR?: number;

  /**
   * Distance between objects along Tangential Vector in meters.
   */
  relPosT?: number;

  /**
   * Closing velocity magnitude (relative speed) at Time of Closest Approach in
   * meters/sec.
   */
  relVelMag?: number;

  /**
   * Closing velocity between objects along Normal Vector in meters/sec.
   */
  relVelN?: number;

  /**
   * Closing velocity between objects along Radial Vector at Time of Closest Approach
   * in meters/sec.
   */
  relVelR?: number;

  /**
   * Closing velocity between objects along Tangential Vector in meters/sec.
   */
  relVelT?: number;

  /**
   * Satellite/catalog number of the target on-orbit primary object.
   */
  satNo1?: number;

  /**
   * Satellite/catalog number of the target on-orbit secondary object.
   */
  satNo2?: number;

  /**
   * The start time in UTC of the screening period for the conjunction assessment.
   */
  screenEntryTime?: string;

  /**
   * The stop time in UTC of the screening period for the conjunction assessment.
   */
  screenExitTime?: string;

  /**
   * Component size of screen in X component of RTN (Radial, Transverse and Normal)
   * frame in meters.
   */
  screenVolumeX?: number;

  /**
   * Component size of screen in Y component of RTN (Radial, Transverse and Normal)
   * frame in meters.
   */
  screenVolumeY?: number;

  /**
   * Component size of screen in Z component of RTN (Radial, Transverse and Normal)
   * frame in meters.
   */
  screenVolumeZ?: number;

  /**
   * Used for probability of collision calculation, not Warning/Alert Threshold
   * notifications.
   */
  smallCovWarning?: boolean;

  /**
   * Used for probability of collision calculation, not Warning/Alert Threshold
   * notifications.
   */
  smallRelVelWarning?: boolean;

  /**
   * Flag indicating if State department was notified.
   */
  stateDeptNotified?: boolean;

  /**
   * This service provides operations for querying and manipulation of state vectors
   * for OnOrbit objects. State vectors are cartesian vectors of position (r) and
   * velocity (v) that, together with their time (epoch) (t), uniquely determine the
   * trajectory of the orbiting body in space. J2000 is the preferred coordinate
   * frame for all state vector positions/velocities in UDL, but in some cases data
   * may be in another frame depending on the provider and/or datatype. Please see
   * the 'Discover' tab in the storefront to confirm coordinate frames by data
   * provider.
   */
  stateVector1?: ConjunctionFull.StateVector1;

  /**
   * This service provides operations for querying and manipulation of state vectors
   * for OnOrbit objects. State vectors are cartesian vectors of position (r) and
   * velocity (v) that, together with their time (epoch) (t), uniquely determine the
   * trajectory of the orbiting body in space. J2000 is the preferred coordinate
   * frame for all state vector positions/velocities in UDL, but in some cases data
   * may be in another frame depending on the provider and/or datatype. Please see
   * the 'Discover' tab in the storefront to confirm coordinate frames by data
   * provider.
   */
  stateVector2?: ConjunctionFull.StateVector2;

  /**
   * Optional array of provider/source specific tags for this data, where each
   * element is no longer than 32 characters, used for implementing data owner
   * conditional access controls to restrict access to the data. Should be left null
   * by data providers unless conditional access controls are coordinated with the
   * UDL team.
   */
  tags?: Array<string>;

  /**
   * The primary (object1) acceleration, expressed in m/s^2, due to in-track thrust
   * used to propagate the primary state vector and covariance to TCA.
   */
  thrustAccel1?: number;

  /**
   * The secondary (object2) acceleration, expressed in m/s^2, due to in-track thrust
   * used to propagate the primary state vector and covariance to TCA.
   */
  thrustAccel2?: number;

  /**
   * Optional identifier to track a commercial or marketplace transaction executed to
   * produce this data.
   */
  transactionId?: string;

  /**
   * The type of data represented in this conjunction record (e.g. CONJUNCTION,
   * CARA-WORKLIST, etc.). If type is null the record is assumed to be a Conjunction.
   */
  type?: string;

  /**
   * Used for probability of collision calculation, not Warning/Alert Threshold
   * notifications.
   */
  uvwWarn?: boolean;

  /**
   * The time at which the secondary (object2) enters the screening volume, in ISO
   * 8601 UTC format with microsecond precision.
   */
  volEntryTime?: string;

  /**
   * The time at which the secondary (object2) exits the screening volume, in ISO
   * 8601 UTC format with microsecond precision.
   */
  volExitTime?: string;

  /**
   * The shape (BOX, ELLIPSOID) of the screening volume.
   */
  volShape?: string;
}

export namespace ConjunctionFull {
  /**
   * This service provides operations for querying and manipulation of state vectors
   * for OnOrbit objects. State vectors are cartesian vectors of position (r) and
   * velocity (v) that, together with their time (epoch) (t), uniquely determine the
   * trajectory of the orbiting body in space. J2000 is the preferred coordinate
   * frame for all state vector positions/velocities in UDL, but in some cases data
   * may be in another frame depending on the provider and/or datatype. Please see
   * the 'Discover' tab in the storefront to confirm coordinate frames by data
   * provider.
   */
  export interface StateVector1 {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * Time of validity for state vector in ISO 8601 UTC datetime format, with
     * microsecond precision.
     */
    epoch: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * The actual time span used for the OD of the object, expressed in days.
     */
    actualODSpan?: number;

    /**
     * Optional algorithm used to produce this record.
     */
    algorithm?: string;

    /**
     * The reference frame of the alternate1 (Alt1) cartesian orbital state.
     */
    alt1ReferenceFrame?: string;

    /**
     * The reference frame of the alternate2 (Alt2) cartesian orbital state.
     */
    alt2ReferenceFrame?: string;

    /**
     * The actual area of the object at it's largest cross-section, expressed in
     * meters^2.
     */
    area?: number;

    /**
     * First derivative of drag/ballistic coefficient (m2/kg-s).
     */
    bDot?: number;

    /**
     * Model parameter value for center of mass offset (m).
     */
    cmOffset?: number;

    /**
     * Covariance matrix, in kilometer and second based units, in the specified
     * covReferenceFrame. If the covReferenceFrame is null it is assumed to be J2000.
     * The array values (1-21) represent the lower triangular half of the
     * position-velocity covariance matrix. The size of the covariance matrix is
     * dynamic, depending on whether the covariance for position only or position &
     * velocity. The covariance elements are position dependent within the array with
     * values ordered as follows:
     *
     * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR&nbsp;&nbsp;
     *
     * x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1
     *
     * y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;3
     *
     * z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;6
     *
     * x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;10
     *
     * y'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
     *
     * z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;
     *
     * The cov array should contain only the lower left triangle values from top left
     * down to bottom right, in order.
     *
     * If additional covariance terms are included for DRAG, SRP, and/or THRUST, the
     * matrix can be extended with the following order of elements:
     *
     * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR
     *
     * DRG&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;23&nbsp;&nbsp;24&nbsp;&nbsp;25&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;
     *
     * SRP&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;30&nbsp;&nbsp;31&nbsp;&nbsp;32&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;
     *
     * THR&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;38&nbsp;&nbsp;39&nbsp;&nbsp;40&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;44&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45&nbsp;
     */
    cov?: Array<number>;

    /**
     * The method used to generate the covariance during the orbit determination (OD)
     * that produced the state vector, or whether an arbitrary, non-calculated default
     * value was used (CALCULATED, DEFAULT).
     */
    covMethod?: string;

    /**
     * The reference frame of the covariance matrix elements. If the covReferenceFrame
     * is null it is assumed to be J2000.
     */
    covReferenceFrame?: 'J2000' | 'UVW' | 'EFG/TDR' | 'TEME' | 'GCRF';

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Optional source-provided and searchable metadata or descriptor of the data.
     */
    descriptor?: string;

    /**
     * The effective area of the object exposed to atmospheric drag, expressed in
     * meters^2.
     */
    dragArea?: number;

    /**
     * Area-to-mass ratio coefficient for atmospheric ballistic drag (m2/kg).
     */
    dragCoeff?: number;

    /**
     * The Drag Model used for this vector (e.g. HARRIS-PRIESTER, JAC70, JBH09, MSIS90,
     * NONE, etc.).
     */
    dragModel?: string;

    /**
     * Model parameter value for energy dissipation rate (EDR) (w/kg).
     */
    edr?: number;

    /**
     * Start time at which this state vector was the 'current' state vector for its
     * satellite.
     */
    effectiveFrom?: string;

    /**
     * End time at which this state vector was no longer the 'current' state vector for
     * its satellite.
     */
    effectiveUntil?: string;

    /**
     * The covariance matrix values represent the lower triangular half of the
     * covariance matrix in terms of equinoctial elements.&nbsp; The size of the
     * covariance matrix is dynamic.&nbsp; The values are outputted in order across
     * each row, i.e.:
     *
     * 1&nbsp;&nbsp; 2&nbsp;&nbsp; 3&nbsp;&nbsp; 4&nbsp;&nbsp; 5
     *
     * 6&nbsp;&nbsp; 7&nbsp;&nbsp; 8&nbsp;&nbsp; 9&nbsp; 10
     *
     * :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
     *
     * :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
     *
     * 51&nbsp; 52&nbsp; 53&nbsp; 54&nbsp; 55
     *
     * :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
     *
     * :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
     *
     * The ordering of values is as follows:
     *
     * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Af&nbsp;&nbsp;
     * Ag&nbsp;&nbsp; L&nbsp;&nbsp;&nbsp; N&nbsp;&nbsp; Chi&nbsp; Psi&nbsp;&nbsp;
     * B&nbsp;&nbsp; BDOT AGOM&nbsp; T&nbsp;&nbsp; C1&nbsp;&nbsp; C2&nbsp; ...
     *
     * Af&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1
     *
     * Ag&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp; 3
     *
     * L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
     * 4&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp; 6
     *
     * N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
     * 7&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp; 10
     *
     * Chi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11&nbsp;&nbsp; 12&nbsp;&nbsp;
     * 13&nbsp;&nbsp; 14&nbsp;&nbsp; 15
     *
     * Psi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 16&nbsp;&nbsp; 17&nbsp;&nbsp;
     * 18&nbsp;&nbsp; 19&nbsp;&nbsp; 20&nbsp;&nbsp; 21
     *
     * B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 22&nbsp;&nbsp;
     * 23&nbsp;&nbsp; 24 &nbsp;&nbsp;25&nbsp;&nbsp; 26&nbsp;&nbsp; 27&nbsp;&nbsp; 28
     *
     * BDOT&nbsp;&nbsp; 29&nbsp;&nbsp; 30&nbsp;&nbsp; 31&nbsp;&nbsp; 32&nbsp;&nbsp;
     * 33&nbsp;&nbsp; 34&nbsp;&nbsp; 35&nbsp;&nbsp; 36
     *
     * AGOM&nbsp; 37&nbsp;&nbsp; 38&nbsp;&nbsp; 39&nbsp;&nbsp; 40&nbsp;&nbsp;
     * 41&nbsp;&nbsp; 42&nbsp;&nbsp; 43&nbsp;&nbsp; 44&nbsp;&nbsp; 45
     *
     * T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 46&nbsp;&nbsp;
     * 47&nbsp;&nbsp; 48&nbsp;&nbsp; 49&nbsp;&nbsp; 50&nbsp;&nbsp; 51&nbsp;&nbsp;
     * 52&nbsp;&nbsp; 53&nbsp;&nbsp; 54&nbsp;&nbsp; 55
     *
     * C1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 56&nbsp;&nbsp; 57&nbsp;&nbsp;
     * 58&nbsp;&nbsp; 59&nbsp;&nbsp; 60&nbsp;&nbsp; 61&nbsp;&nbsp; 62&nbsp;&nbsp;
     * 63&nbsp;&nbsp; 64&nbsp;&nbsp; 65&nbsp;&nbsp; 66
     *
     * C2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 67&nbsp;&nbsp; 68&nbsp;&nbsp;
     * 69&nbsp;&nbsp; 70&nbsp;&nbsp; 71&nbsp; &nbsp;72&nbsp;&nbsp; 73&nbsp;&nbsp;
     * 74&nbsp;&nbsp; 75&nbsp;&nbsp; 76&nbsp;&nbsp; 77&nbsp;&nbsp; 78
     *
     * :
     *
     * :
     *
     * where C1, C2, etc, are the "consider parameters" that may be added to the
     * covariance matrix.&nbsp; The covariance matrix will be as large as the last
     * element/model parameter needed.&nbsp; In other words, if the DC solved for all 6
     * elements plus AGOM, the covariance matrix will be 9x9 (and the rows for B and
     * BDOT will be all zeros).&nbsp; If the covariance matrix is unavailable, the size
     * will be set to 0x0, and no data will follow.&nbsp; The cov field should contain
     * only the lower left triangle values from top left down to bottom right, in
     * order.
     */
    eqCov?: Array<number>;

    /**
     * Integrator error control.
     */
    errorControl?: number;

    /**
     * Boolean indicating use of fixed step size for this vector.
     */
    fixedStep?: boolean;

    /**
     * Geopotential model used for this vector (e.g. EGM-96, WGS-84, WGS-72, JGM-2, or
     * GEM-T3), including mm degree zonals, nn degree/order tesserals. E.g. EGM-96
     * 24Z,24T.
     */
    geopotentialModel?: string;

    /**
     * Number of terms used in the IAU 1980 nutation model (4, 50, or 106).
     */
    iau1980Terms?: number;

    /**
     * Unique identifier of the satellite on-orbit object, if correlated. For the
     * public catalog, the idOnOrbit is typically the satellite number as a string, but
     * may be a UUID for analyst or other unknown or untracked satellites.
     */
    idOnOrbit?: string;

    /**
     * Unique identifier of the OD solution record that produced this state vector.
     * This ID can be used to obtain additional information on an OrbitDetermination
     * object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For
     * example, the OrbitDetermination with idOrbitDetermination = abc would be queries
     * as /udl/orbitdetermination/abc.
     */
    idOrbitDetermination?: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    idStateVector?: string;

    /**
     * Integrator Mode.
     */
    integratorMode?: string;

    /**
     * Boolean indicating use of in-track thrust perturbations for this vector.
     */
    inTrackThrust?: boolean;

    /**
     * The end of the time interval containing the time of the last accepted
     * observation, in ISO 8601 UTC format with microsecond precision. For an exact
     * observation time, the firstObTime and lastObTime are the same.
     */
    lastObEnd?: string;

    /**
     * The start of the time interval containing the time of the last accepted
     * observation, in ISO 8601 UTC format with microsecond precision. For an exact
     * observation time, the firstObTime and lastObTime are the same.
     */
    lastObStart?: string;

    /**
     * Time of the next leap second after epoch in ISO 8601 UTC time. If the next leap
     * second is not known, the time of the previous leap second is used.
     */
    leapSecondTime?: string;

    /**
     * Boolean indicating use of lunar/solar perturbations for this vector.
     */
    lunarSolar?: boolean;

    /**
     * The mass of the object, in kilograms.
     */
    mass?: number;

    /**
     * The number of observations available for the OD of the object.
     */
    obsAvailable?: number;

    /**
     * The number of observations accepted for the OD of the object.
     */
    obsUsed?: number;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * Optional identifier provided by state vector source to indicate the target
     * onorbit object of this state vector. This may be an internal identifier and not
     * necessarily map to a valid satellite number.
     */
    origObjectId?: string;

    /**
     * Type of partial derivatives used (ANALYTIC, FULL NUM, or FAST NUM).
     */
    partials?: string;

    /**
     * The pedigree of state vector, or methods used for its generation to include
     * state update/orbit determination, propagation from another state, or a state
     * from a calibration satellite (e.g. ORBIT_UPDATE, PROPAGATION, CALIBRATION,
     * CONJUNCTION, FLIGHT_PLAN).
     */
    pedigree?: string;

    /**
     * Polar Wander Motion X (arc seconds).
     */
    polarMotionX?: number;

    /**
     * Polar Wander Motion Y (arc seconds).
     */
    polarMotionY?: number;

    /**
     * One sigma position uncertainty, in kilometers.
     */
    posUnc?: number;

    /**
     * Optional URI location in the document repository of the raw file parsed by the
     * system to produce this record. To download the raw file, prepend
     * https://udl-hostname/scs/download?id= to this value.
     */
    rawFileURI?: string;

    /**
     * The recommended OD time span calculated for the object, expressed in days.
     */
    recODSpan?: number;

    /**
     * The reference frame of the cartesian orbital states. If the referenceFrame is
     * null it is assumed to be J2000.
     */
    referenceFrame?: 'J2000' | 'EFG/TDR' | 'ECR/ECEF' | 'TEME' | 'ITRF' | 'GCRF';

    /**
     * The percentage of residuals accepted in the OD of the object.
     */
    residualsAcc?: number;

    /**
     * Epoch revolution number.
     */
    revNo?: number;

    /**
     * The Weighted Root Mean Squared (RMS) of the differential correction on the
     * target object that produced this vector. WRMS is a quality indicator of the
     * state vector update, with a value of 1.00 being optimal. WRMS applies to Batch
     * Least Squares (BLS) processes.
     */
    rms?: number;

    /**
     * Satellite/Catalog number of the target OnOrbit object.
     */
    satNo?: number;

    /**
     * Array containing the standard deviation of error in target object position, U, V
     * and W direction respectively (km).
     */
    sigmaPosUVW?: Array<number>;

    /**
     * Array containing the standard deviation of error in target object velocity, U, V
     * and W direction respectively (km/sec).
     */
    sigmaVelUVW?: Array<number>;

    /**
     * Average solar flux geomagnetic index.
     */
    solarFluxAPAvg?: number;

    /**
     * F10 (10.7 cm) solar flux value.
     */
    solarFluxF10?: number;

    /**
     * F10 (10.7 cm) solar flux 81-day average value.
     */
    solarFluxF10Avg?: number;

    /**
     * Boolean indicating use of solar radiation pressure perturbations for this
     * vector.
     */
    solarRadPress?: boolean;

    /**
     * Area-to-mass ratio coefficient for solar radiation pressure.
     */
    solarRadPressCoeff?: number;

    /**
     * Boolean indicating use of solid earth tide perturbations for this vector.
     */
    solidEarthTides?: boolean;

    /**
     * Optional array of UDL data (observation) UUIDs used to build this state vector.
     * See the associated sourcedDataTypes array for the specific types of observations
     * for the positionally corresponding UUIDs in this array (the two arrays must
     * match in size).
     */
    sourcedData?: Array<string>;

    /**
     * Optional array of UDL observation data types used to build this state vector
     * (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific
     * UUIDs of observations for the positionally corresponding data types in this
     * array (the two arrays must match in size).
     */
    sourcedDataTypes?: Array<'EO' | 'RADAR' | 'RF' | 'DOA' | 'ELSET' | 'SV'>;

    /**
     * The source data library from which this record was received. This could be a
     * remote or tactical UDL or another data library. If null, the record should be
     * assumed to have originated from the primary Enterprise UDL.
     */
    sourceDL?: string;

    /**
     * The effective area of the object exposed to solar radiation pressure, expressed
     * in meters^2.
     */
    srpArea?: number;

    /**
     * Integrator step mode (AUTO, TIME, or S).
     */
    stepMode?: string;

    /**
     * Initial integration step size (seconds).
     */
    stepSize?: number;

    /**
     * Initial step size selection (AUTO or MANUAL).
     */
    stepSizeSelection?: string;

    /**
     * Optional array of provider/source specific tags for this data, where each
     * element is no longer than 32 characters, used for implementing data owner
     * conditional access controls to restrict access to the data. Should be left null
     * by data providers unless conditional access controls are coordinated with the
     * UDL team.
     */
    tags?: Array<string>;

    /**
     * TAI (Temps Atomique International) minus UTC (Universal Time Coordinates) offset
     * in seconds.
     */
    taiUtc?: number;

    /**
     * Model parameter value for thrust acceleration (m/s2).
     */
    thrustAccel?: number;

    /**
     * The number of sensor tracks available for the OD of the object.
     */
    tracksAvail?: number;

    /**
     * The number of sensor tracks accepted for the OD of the object.
     */
    tracksUsed?: number;

    /**
     * Optional identifier to track a commercial or marketplace transaction executed to
     * produce this data.
     */
    transactionId?: string;

    /**
     * Boolean indicating this state vector was unable to be correlated to a known
     * object. This flag should only be set to true by data providers after an attempt
     * to correlate to an OnOrbit object was made and failed. If unable to correlate,
     * the 'origObjectId' field may be populated with an internal data provider
     * specific identifier.
     */
    uct?: boolean;

    /**
     * Rate of change of UT1 (milliseconds/day) - first derivative of ut1Utc.
     */
    ut1Rate?: number;

    /**
     * Universal Time-1 (UT1) minus UTC offset, in seconds.
     */
    ut1Utc?: number;

    /**
     * One sigma velocity uncertainty, in kilometers/second.
     */
    velUnc?: number;

    /**
     * Cartesian X acceleration of target, in kilometers/second^2, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    xaccel?: number;

    /**
     * Cartesian X position of the target, in kilometers, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    xpos?: number;

    /**
     * Cartesian X position of the target, in kilometers, in the specified
     * alt1ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    xposAlt1?: number;

    /**
     * Cartesian X position of the target, in kilometers, in the specified
     * alt2ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    xposAlt2?: number;

    /**
     * Cartesian X velocity of target, in kilometers/second, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    xvel?: number;

    /**
     * Cartesian X velocity of the target, in kilometers/second, in the specified
     * alt1ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    xvelAlt1?: number;

    /**
     * Cartesian X velocity of the target, in kilometers/second, in the specified
     * alt2ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    xvelAlt2?: number;

    /**
     * Cartesian Y acceleration of target, in kilometers/second^2, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    yaccel?: number;

    /**
     * Cartesian Y position of the target, in kilometers, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    ypos?: number;

    /**
     * Cartesian Y position of the target, in kilometers, in the specified
     * alt1ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    yposAlt1?: number;

    /**
     * Cartesian Y position of the target, in kilometers, in the specified
     * alt2ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    yposAlt2?: number;

    /**
     * Cartesian Y velocity of target, in kilometers/second, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    yvel?: number;

    /**
     * Cartesian Y velocity of the target, in kilometers/second, in the specified
     * alt1ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    yvelAlt1?: number;

    /**
     * Cartesian Y velocity of the target, in kilometers/second, in the specified
     * alt2ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    yvelAlt2?: number;

    /**
     * Cartesian Z acceleration of target, in kilometers/second^2, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    zaccel?: number;

    /**
     * Cartesian Z position of the target, in kilometers, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    zpos?: number;

    /**
     * Cartesian Z position of the target, in kilometers, in the specified
     * alt1ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    zposAlt1?: number;

    /**
     * Cartesian Z position of the target, in kilometers, in the specified
     * alt2ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    zposAlt2?: number;

    /**
     * Cartesian Z velocity of target, in kilometers/second, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    zvel?: number;

    /**
     * Cartesian Z velocity of the target, in kilometers/second, in the specified
     * alt1ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    zvelAlt1?: number;

    /**
     * Cartesian Z velocity of the target, in kilometers/second, in the specified
     * alt2ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    zvelAlt2?: number;
  }

  /**
   * This service provides operations for querying and manipulation of state vectors
   * for OnOrbit objects. State vectors are cartesian vectors of position (r) and
   * velocity (v) that, together with their time (epoch) (t), uniquely determine the
   * trajectory of the orbiting body in space. J2000 is the preferred coordinate
   * frame for all state vector positions/velocities in UDL, but in some cases data
   * may be in another frame depending on the provider and/or datatype. Please see
   * the 'Discover' tab in the storefront to confirm coordinate frames by data
   * provider.
   */
  export interface StateVector2 {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * Time of validity for state vector in ISO 8601 UTC datetime format, with
     * microsecond precision.
     */
    epoch: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * The actual time span used for the OD of the object, expressed in days.
     */
    actualODSpan?: number;

    /**
     * Optional algorithm used to produce this record.
     */
    algorithm?: string;

    /**
     * The reference frame of the alternate1 (Alt1) cartesian orbital state.
     */
    alt1ReferenceFrame?: string;

    /**
     * The reference frame of the alternate2 (Alt2) cartesian orbital state.
     */
    alt2ReferenceFrame?: string;

    /**
     * The actual area of the object at it's largest cross-section, expressed in
     * meters^2.
     */
    area?: number;

    /**
     * First derivative of drag/ballistic coefficient (m2/kg-s).
     */
    bDot?: number;

    /**
     * Model parameter value for center of mass offset (m).
     */
    cmOffset?: number;

    /**
     * Covariance matrix, in kilometer and second based units, in the specified
     * covReferenceFrame. If the covReferenceFrame is null it is assumed to be J2000.
     * The array values (1-21) represent the lower triangular half of the
     * position-velocity covariance matrix. The size of the covariance matrix is
     * dynamic, depending on whether the covariance for position only or position &
     * velocity. The covariance elements are position dependent within the array with
     * values ordered as follows:
     *
     * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR&nbsp;&nbsp;
     *
     * x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1
     *
     * y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;3
     *
     * z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;6
     *
     * x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;10
     *
     * y'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
     *
     * z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;
     *
     * The cov array should contain only the lower left triangle values from top left
     * down to bottom right, in order.
     *
     * If additional covariance terms are included for DRAG, SRP, and/or THRUST, the
     * matrix can be extended with the following order of elements:
     *
     * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR
     *
     * DRG&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;23&nbsp;&nbsp;24&nbsp;&nbsp;25&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;
     *
     * SRP&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;30&nbsp;&nbsp;31&nbsp;&nbsp;32&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;
     *
     * THR&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;38&nbsp;&nbsp;39&nbsp;&nbsp;40&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;44&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45&nbsp;
     */
    cov?: Array<number>;

    /**
     * The method used to generate the covariance during the orbit determination (OD)
     * that produced the state vector, or whether an arbitrary, non-calculated default
     * value was used (CALCULATED, DEFAULT).
     */
    covMethod?: string;

    /**
     * The reference frame of the covariance matrix elements. If the covReferenceFrame
     * is null it is assumed to be J2000.
     */
    covReferenceFrame?: 'J2000' | 'UVW' | 'EFG/TDR' | 'TEME' | 'GCRF';

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Optional source-provided and searchable metadata or descriptor of the data.
     */
    descriptor?: string;

    /**
     * The effective area of the object exposed to atmospheric drag, expressed in
     * meters^2.
     */
    dragArea?: number;

    /**
     * Area-to-mass ratio coefficient for atmospheric ballistic drag (m2/kg).
     */
    dragCoeff?: number;

    /**
     * The Drag Model used for this vector (e.g. HARRIS-PRIESTER, JAC70, JBH09, MSIS90,
     * NONE, etc.).
     */
    dragModel?: string;

    /**
     * Model parameter value for energy dissipation rate (EDR) (w/kg).
     */
    edr?: number;

    /**
     * Start time at which this state vector was the 'current' state vector for its
     * satellite.
     */
    effectiveFrom?: string;

    /**
     * End time at which this state vector was no longer the 'current' state vector for
     * its satellite.
     */
    effectiveUntil?: string;

    /**
     * The covariance matrix values represent the lower triangular half of the
     * covariance matrix in terms of equinoctial elements.&nbsp; The size of the
     * covariance matrix is dynamic.&nbsp; The values are outputted in order across
     * each row, i.e.:
     *
     * 1&nbsp;&nbsp; 2&nbsp;&nbsp; 3&nbsp;&nbsp; 4&nbsp;&nbsp; 5
     *
     * 6&nbsp;&nbsp; 7&nbsp;&nbsp; 8&nbsp;&nbsp; 9&nbsp; 10
     *
     * :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
     *
     * :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
     *
     * 51&nbsp; 52&nbsp; 53&nbsp; 54&nbsp; 55
     *
     * :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
     *
     * :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
     *
     * The ordering of values is as follows:
     *
     * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Af&nbsp;&nbsp;
     * Ag&nbsp;&nbsp; L&nbsp;&nbsp;&nbsp; N&nbsp;&nbsp; Chi&nbsp; Psi&nbsp;&nbsp;
     * B&nbsp;&nbsp; BDOT AGOM&nbsp; T&nbsp;&nbsp; C1&nbsp;&nbsp; C2&nbsp; ...
     *
     * Af&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1
     *
     * Ag&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp; 3
     *
     * L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
     * 4&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp; 6
     *
     * N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
     * 7&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp; 10
     *
     * Chi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11&nbsp;&nbsp; 12&nbsp;&nbsp;
     * 13&nbsp;&nbsp; 14&nbsp;&nbsp; 15
     *
     * Psi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 16&nbsp;&nbsp; 17&nbsp;&nbsp;
     * 18&nbsp;&nbsp; 19&nbsp;&nbsp; 20&nbsp;&nbsp; 21
     *
     * B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 22&nbsp;&nbsp;
     * 23&nbsp;&nbsp; 24 &nbsp;&nbsp;25&nbsp;&nbsp; 26&nbsp;&nbsp; 27&nbsp;&nbsp; 28
     *
     * BDOT&nbsp;&nbsp; 29&nbsp;&nbsp; 30&nbsp;&nbsp; 31&nbsp;&nbsp; 32&nbsp;&nbsp;
     * 33&nbsp;&nbsp; 34&nbsp;&nbsp; 35&nbsp;&nbsp; 36
     *
     * AGOM&nbsp; 37&nbsp;&nbsp; 38&nbsp;&nbsp; 39&nbsp;&nbsp; 40&nbsp;&nbsp;
     * 41&nbsp;&nbsp; 42&nbsp;&nbsp; 43&nbsp;&nbsp; 44&nbsp;&nbsp; 45
     *
     * T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 46&nbsp;&nbsp;
     * 47&nbsp;&nbsp; 48&nbsp;&nbsp; 49&nbsp;&nbsp; 50&nbsp;&nbsp; 51&nbsp;&nbsp;
     * 52&nbsp;&nbsp; 53&nbsp;&nbsp; 54&nbsp;&nbsp; 55
     *
     * C1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 56&nbsp;&nbsp; 57&nbsp;&nbsp;
     * 58&nbsp;&nbsp; 59&nbsp;&nbsp; 60&nbsp;&nbsp; 61&nbsp;&nbsp; 62&nbsp;&nbsp;
     * 63&nbsp;&nbsp; 64&nbsp;&nbsp; 65&nbsp;&nbsp; 66
     *
     * C2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 67&nbsp;&nbsp; 68&nbsp;&nbsp;
     * 69&nbsp;&nbsp; 70&nbsp;&nbsp; 71&nbsp; &nbsp;72&nbsp;&nbsp; 73&nbsp;&nbsp;
     * 74&nbsp;&nbsp; 75&nbsp;&nbsp; 76&nbsp;&nbsp; 77&nbsp;&nbsp; 78
     *
     * :
     *
     * :
     *
     * where C1, C2, etc, are the "consider parameters" that may be added to the
     * covariance matrix.&nbsp; The covariance matrix will be as large as the last
     * element/model parameter needed.&nbsp; In other words, if the DC solved for all 6
     * elements plus AGOM, the covariance matrix will be 9x9 (and the rows for B and
     * BDOT will be all zeros).&nbsp; If the covariance matrix is unavailable, the size
     * will be set to 0x0, and no data will follow.&nbsp; The cov field should contain
     * only the lower left triangle values from top left down to bottom right, in
     * order.
     */
    eqCov?: Array<number>;

    /**
     * Integrator error control.
     */
    errorControl?: number;

    /**
     * Boolean indicating use of fixed step size for this vector.
     */
    fixedStep?: boolean;

    /**
     * Geopotential model used for this vector (e.g. EGM-96, WGS-84, WGS-72, JGM-2, or
     * GEM-T3), including mm degree zonals, nn degree/order tesserals. E.g. EGM-96
     * 24Z,24T.
     */
    geopotentialModel?: string;

    /**
     * Number of terms used in the IAU 1980 nutation model (4, 50, or 106).
     */
    iau1980Terms?: number;

    /**
     * Unique identifier of the satellite on-orbit object, if correlated. For the
     * public catalog, the idOnOrbit is typically the satellite number as a string, but
     * may be a UUID for analyst or other unknown or untracked satellites.
     */
    idOnOrbit?: string;

    /**
     * Unique identifier of the OD solution record that produced this state vector.
     * This ID can be used to obtain additional information on an OrbitDetermination
     * object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For
     * example, the OrbitDetermination with idOrbitDetermination = abc would be queries
     * as /udl/orbitdetermination/abc.
     */
    idOrbitDetermination?: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    idStateVector?: string;

    /**
     * Integrator Mode.
     */
    integratorMode?: string;

    /**
     * Boolean indicating use of in-track thrust perturbations for this vector.
     */
    inTrackThrust?: boolean;

    /**
     * The end of the time interval containing the time of the last accepted
     * observation, in ISO 8601 UTC format with microsecond precision. For an exact
     * observation time, the firstObTime and lastObTime are the same.
     */
    lastObEnd?: string;

    /**
     * The start of the time interval containing the time of the last accepted
     * observation, in ISO 8601 UTC format with microsecond precision. For an exact
     * observation time, the firstObTime and lastObTime are the same.
     */
    lastObStart?: string;

    /**
     * Time of the next leap second after epoch in ISO 8601 UTC time. If the next leap
     * second is not known, the time of the previous leap second is used.
     */
    leapSecondTime?: string;

    /**
     * Boolean indicating use of lunar/solar perturbations for this vector.
     */
    lunarSolar?: boolean;

    /**
     * The mass of the object, in kilograms.
     */
    mass?: number;

    /**
     * The number of observations available for the OD of the object.
     */
    obsAvailable?: number;

    /**
     * The number of observations accepted for the OD of the object.
     */
    obsUsed?: number;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * Optional identifier provided by state vector source to indicate the target
     * onorbit object of this state vector. This may be an internal identifier and not
     * necessarily map to a valid satellite number.
     */
    origObjectId?: string;

    /**
     * Type of partial derivatives used (ANALYTIC, FULL NUM, or FAST NUM).
     */
    partials?: string;

    /**
     * The pedigree of state vector, or methods used for its generation to include
     * state update/orbit determination, propagation from another state, or a state
     * from a calibration satellite (e.g. ORBIT_UPDATE, PROPAGATION, CALIBRATION,
     * CONJUNCTION, FLIGHT_PLAN).
     */
    pedigree?: string;

    /**
     * Polar Wander Motion X (arc seconds).
     */
    polarMotionX?: number;

    /**
     * Polar Wander Motion Y (arc seconds).
     */
    polarMotionY?: number;

    /**
     * One sigma position uncertainty, in kilometers.
     */
    posUnc?: number;

    /**
     * Optional URI location in the document repository of the raw file parsed by the
     * system to produce this record. To download the raw file, prepend
     * https://udl-hostname/scs/download?id= to this value.
     */
    rawFileURI?: string;

    /**
     * The recommended OD time span calculated for the object, expressed in days.
     */
    recODSpan?: number;

    /**
     * The reference frame of the cartesian orbital states. If the referenceFrame is
     * null it is assumed to be J2000.
     */
    referenceFrame?: 'J2000' | 'EFG/TDR' | 'ECR/ECEF' | 'TEME' | 'ITRF' | 'GCRF';

    /**
     * The percentage of residuals accepted in the OD of the object.
     */
    residualsAcc?: number;

    /**
     * Epoch revolution number.
     */
    revNo?: number;

    /**
     * The Weighted Root Mean Squared (RMS) of the differential correction on the
     * target object that produced this vector. WRMS is a quality indicator of the
     * state vector update, with a value of 1.00 being optimal. WRMS applies to Batch
     * Least Squares (BLS) processes.
     */
    rms?: number;

    /**
     * Satellite/Catalog number of the target OnOrbit object.
     */
    satNo?: number;

    /**
     * Array containing the standard deviation of error in target object position, U, V
     * and W direction respectively (km).
     */
    sigmaPosUVW?: Array<number>;

    /**
     * Array containing the standard deviation of error in target object velocity, U, V
     * and W direction respectively (km/sec).
     */
    sigmaVelUVW?: Array<number>;

    /**
     * Average solar flux geomagnetic index.
     */
    solarFluxAPAvg?: number;

    /**
     * F10 (10.7 cm) solar flux value.
     */
    solarFluxF10?: number;

    /**
     * F10 (10.7 cm) solar flux 81-day average value.
     */
    solarFluxF10Avg?: number;

    /**
     * Boolean indicating use of solar radiation pressure perturbations for this
     * vector.
     */
    solarRadPress?: boolean;

    /**
     * Area-to-mass ratio coefficient for solar radiation pressure.
     */
    solarRadPressCoeff?: number;

    /**
     * Boolean indicating use of solid earth tide perturbations for this vector.
     */
    solidEarthTides?: boolean;

    /**
     * Optional array of UDL data (observation) UUIDs used to build this state vector.
     * See the associated sourcedDataTypes array for the specific types of observations
     * for the positionally corresponding UUIDs in this array (the two arrays must
     * match in size).
     */
    sourcedData?: Array<string>;

    /**
     * Optional array of UDL observation data types used to build this state vector
     * (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific
     * UUIDs of observations for the positionally corresponding data types in this
     * array (the two arrays must match in size).
     */
    sourcedDataTypes?: Array<'EO' | 'RADAR' | 'RF' | 'DOA' | 'ELSET' | 'SV'>;

    /**
     * The source data library from which this record was received. This could be a
     * remote or tactical UDL or another data library. If null, the record should be
     * assumed to have originated from the primary Enterprise UDL.
     */
    sourceDL?: string;

    /**
     * The effective area of the object exposed to solar radiation pressure, expressed
     * in meters^2.
     */
    srpArea?: number;

    /**
     * Integrator step mode (AUTO, TIME, or S).
     */
    stepMode?: string;

    /**
     * Initial integration step size (seconds).
     */
    stepSize?: number;

    /**
     * Initial step size selection (AUTO or MANUAL).
     */
    stepSizeSelection?: string;

    /**
     * Optional array of provider/source specific tags for this data, where each
     * element is no longer than 32 characters, used for implementing data owner
     * conditional access controls to restrict access to the data. Should be left null
     * by data providers unless conditional access controls are coordinated with the
     * UDL team.
     */
    tags?: Array<string>;

    /**
     * TAI (Temps Atomique International) minus UTC (Universal Time Coordinates) offset
     * in seconds.
     */
    taiUtc?: number;

    /**
     * Model parameter value for thrust acceleration (m/s2).
     */
    thrustAccel?: number;

    /**
     * The number of sensor tracks available for the OD of the object.
     */
    tracksAvail?: number;

    /**
     * The number of sensor tracks accepted for the OD of the object.
     */
    tracksUsed?: number;

    /**
     * Optional identifier to track a commercial or marketplace transaction executed to
     * produce this data.
     */
    transactionId?: string;

    /**
     * Boolean indicating this state vector was unable to be correlated to a known
     * object. This flag should only be set to true by data providers after an attempt
     * to correlate to an OnOrbit object was made and failed. If unable to correlate,
     * the 'origObjectId' field may be populated with an internal data provider
     * specific identifier.
     */
    uct?: boolean;

    /**
     * Rate of change of UT1 (milliseconds/day) - first derivative of ut1Utc.
     */
    ut1Rate?: number;

    /**
     * Universal Time-1 (UT1) minus UTC offset, in seconds.
     */
    ut1Utc?: number;

    /**
     * One sigma velocity uncertainty, in kilometers/second.
     */
    velUnc?: number;

    /**
     * Cartesian X acceleration of target, in kilometers/second^2, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    xaccel?: number;

    /**
     * Cartesian X position of the target, in kilometers, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    xpos?: number;

    /**
     * Cartesian X position of the target, in kilometers, in the specified
     * alt1ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    xposAlt1?: number;

    /**
     * Cartesian X position of the target, in kilometers, in the specified
     * alt2ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    xposAlt2?: number;

    /**
     * Cartesian X velocity of target, in kilometers/second, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    xvel?: number;

    /**
     * Cartesian X velocity of the target, in kilometers/second, in the specified
     * alt1ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    xvelAlt1?: number;

    /**
     * Cartesian X velocity of the target, in kilometers/second, in the specified
     * alt2ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    xvelAlt2?: number;

    /**
     * Cartesian Y acceleration of target, in kilometers/second^2, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    yaccel?: number;

    /**
     * Cartesian Y position of the target, in kilometers, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    ypos?: number;

    /**
     * Cartesian Y position of the target, in kilometers, in the specified
     * alt1ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    yposAlt1?: number;

    /**
     * Cartesian Y position of the target, in kilometers, in the specified
     * alt2ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    yposAlt2?: number;

    /**
     * Cartesian Y velocity of target, in kilometers/second, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    yvel?: number;

    /**
     * Cartesian Y velocity of the target, in kilometers/second, in the specified
     * alt1ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    yvelAlt1?: number;

    /**
     * Cartesian Y velocity of the target, in kilometers/second, in the specified
     * alt2ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    yvelAlt2?: number;

    /**
     * Cartesian Z acceleration of target, in kilometers/second^2, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    zaccel?: number;

    /**
     * Cartesian Z position of the target, in kilometers, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    zpos?: number;

    /**
     * Cartesian Z position of the target, in kilometers, in the specified
     * alt1ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    zposAlt1?: number;

    /**
     * Cartesian Z position of the target, in kilometers, in the specified
     * alt2ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    zposAlt2?: number;

    /**
     * Cartesian Z velocity of target, in kilometers/second, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    zvel?: number;

    /**
     * Cartesian Z velocity of the target, in kilometers/second, in the specified
     * alt1ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    zvelAlt1?: number;

    /**
     * Cartesian Z velocity of the target, in kilometers/second, in the specified
     * alt2ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    zvelAlt2?: number;
  }
}

/**
 * A Country may represent countries, multi-national consortiums, and international
 * organizations.
 */
export interface CountryFull {
  /**
   * The country code. Optimally, this value is the ISO 3166 Alpha-2-two-character
   * country code, however it can represent various consortiums that do not appear in
   * the ISO document.
   */
  code: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Source of the data.
   */
  source: string;

  /**
   * 3 Digit or other alternate country code.
   */
  codeAlt?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Federal Information Processing Standard (FIPS) two-character country code. This
   * field is used when the country code for FIPS differs from the country code for
   * ISO-3166 value. For example, the ISO-3166 Alpha-2-country code for Vanuatu is
   * VU, whereas Vanuatu's FIPS equivalent country code is NH.
   */
  fipsCode?: string;

  /**
   * ISO 3166 Alpha-3 country code. This is a three-character code that represents a
   * country name, which may be more closely related to the country name than its
   * corresponding Alpha-2 code.
   */
  iso3Code?: string;

  /**
   * Country name.
   */
  name?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

/**
 * Crew Services.
 */
export interface CrewFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Unique identifier of the formed crew provided by the originating source.
   * Provided for systems that require tracking of an internal system generated ID.
   */
  origCrewId: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Adjusted return time, in ISO 8601 UTC format with millisecond precision.
   */
  adjReturnTime?: string;

  /**
   * Last name of the adjusted return time approver.
   */
  adjReturnTimeApprover?: string;

  /**
   * The aircraft Model Design Series designation assigned for this crew.
   */
  aircraftMDS?: string;

  /**
   * Time the crew was alerted, in ISO 8601 UTC format with millisecond precision.
   */
  alertedTime?: string;

  /**
   * Type of alert for the crew (e.g., ALPHA for maximum readiness, BRAVO for
   * standby, etc.).
   */
  alertType?: string;

  /**
   * The crew's Aviation Resource Management System (ARMS) unit. If multiple units
   * exist, use the Aircraft Commander's Unit.
   */
  armsCrewUnit?: string;

  /**
   * Array of qualification codes assigned to this crew (e.g., AL for Aircraft
   * Leader, CS for Combat Systems Operator, etc.).
   */
  assignedQualCode?: Array<string>;

  /**
   * Unique identifier of the crew commander assigned by the originating source.
   */
  commanderId?: string;

  /**
   * Last four digits of the crew commander's social security number.
   */
  commanderLast4SSN?: string;

  /**
   * The name of the crew commander.
   */
  commanderName?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Flag indicating whether this crew task takes the crew home and out of the stage.
   */
  crewHome?: boolean;

  /**
   * CrewMembers Collection.
   */
  crewMembers?: Array<CrewFull.CrewMember>;

  /**
   * Name of the formed crew.
   */
  crewName?: string;

  /**
   * The resource management system managing and reporting data on this crew.
   */
  crewRMS?: string;

  /**
   * The crew's role on the mission (e.g., DEADHEAD, MEDICAL, PRIMARY).
   */
  crewRole?: string;

  /**
   * The military component that comprises the crew (e.g., ACTIVE, RESERVE, GUARD,
   * MIXED, UNKNOWN, etc.).
   */
  crewSource?: string;

  /**
   * The squadron the crew serves.
   */
  crewSquadron?: string;

  /**
   * The type of crew required to meet mission objectives (e.g., AIRDROP, AIRLAND,
   * AIR REFUELING, etc.).
   */
  crewType?: string;

  /**
   * The crew's squadron as identified in its resource management system. If the crew
   * is composed of members from multiple units, then the Crew Commander's unit
   * should be indicated as the crew unit.
   */
  crewUnit?: string;

  /**
   * The wing the crew serves.
   */
  crewWing?: string;

  /**
   * The International Civil Aviation Organization (ICAO) code of the airfield at
   * which the crew is currently located.
   */
  currentICAO?: string;

  /**
   * Crew Flight Duty Period (FDP) eligibility type.
   */
  fdpEligType?: string;

  /**
   * Flight Duty Period (FDP) type.
   */
  fdpType?: string;

  /**
   * The number of female enlisted crew members.
   */
  femaleEnlistedQty?: number;

  /**
   * The number of female officer crew members.
   */
  femaleOfficerQty?: number;

  /**
   * Authorization number used on the flight order.
   */
  fltAuthNum?: string;

  /**
   * Unique identifier of the Site at which the crew is currently located. This ID
   * can be used to obtain additional information on a Site using the 'get by ID'
   * operation (e.g. /udl/site/{id}). For example, the Site object with idSite = abc
   * would be queried as /udl/site/abc.
   */
  idSiteCurrent?: string;

  /**
   * Unique identifier of the Aircraft Sortie associated with this crew record.
   */
  idSortie?: string;

  /**
   * Initial start time of the crew's linked task that was delinked due to mission
   * closure, in ISO 8601 UTC format with millisecond precision.
   */
  initStartTime?: string;

  /**
   * The last time the crew can be alerted, in ISO 8601 UTC format with millisecond
   * precision.
   */
  lastAlertTime?: string;

  /**
   * Time the crew is legal for alert, in ISO 8601 UTC format with millisecond
   * precision.
   */
  legalAlertTime?: string;

  /**
   * Time the crew is legally authorized or scheduled to remain on standby for duty,
   * in ISO 8601 UTC format with millisecond precision.
   */
  legalBravoTime?: string;

  /**
   * Flag indicating whether this crew is part of a linked flying task.
   */
  linkedTask?: boolean;

  /**
   * The number of male enlisted crew members.
   */
  maleEnlistedQty?: number;

  /**
   * The number of male officer crew members.
   */
  maleOfficerQty?: number;

  /**
   * User-defined alias designation for the mission.
   */
  missionAlias?: string;

  /**
   * The mission ID the crew is supporting according to the source system.
   */
  missionId?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * The type of personnel that comprises the crew (e.g., AIRCREW, MEDCREW, etc.).
   */
  personnelType?: string;

  /**
   * Time the crew will be picked up from lodging, in ISO 8601 UTC format with
   * millisecond precision.
   */
  pickupTime?: string;

  /**
   * Flag indicating whether post-mission crew rest is applied to the last sortie of
   * a crew's task.
   */
  postRestApplied?: boolean;

  /**
   * End time of the crew rest period after the mission, in ISO 8601 UTC format with
   * millisecond precision.
   */
  postRestEnd?: string;

  /**
   * The scheduled delay or adjustment in the start time of a crew's rest period
   * after a mission, expressed as +/-HH:MM.
   */
  postRestOffset?: string;

  /**
   * Flag indicating whether pre-mission crew rest is applied to the first sortie of
   * a crew's task.
   */
  preRestApplied?: boolean;

  /**
   * Start time of the crew rest period before the mission, in ISO 8601 UTC format
   * with millisecond precision.
   */
  preRestStart?: string;

  /**
   * Array of qualification codes required for this crew (e.g., AL for Aircraft
   * Leader, CS for Combat Systems Operator, etc.).
   */
  reqQualCode?: Array<string>;

  /**
   * Scheduled return time, in ISO 8601 UTC format with millisecond precision.
   */
  returnTime?: string;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * The stage 1 qualifications the crew must have for a mission, such as having
   * basic knowledge of crew operations and aircraft systems.
   */
  stage1Qual?: string;

  /**
   * The stage 2 qualifications the crew must have for a mission, such as completion
   * of advanced mission-specific training.
   */
  stage2Qual?: string;

  /**
   * The stage 3 qualifications the crew must have for a mission, such as full
   * mission-ready certification and the capability of leading complex operations.
   */
  stage3Qual?: string;

  /**
   * Stage name for the crew. A stage is a pool of crews supporting a given operation
   * plan.
   */
  stageName?: string;

  /**
   * Time the crew entered the stage, in ISO 8601 UTC format with millisecond
   * precision.
   */
  stageTime?: string;

  /**
   * Crew status (e.g. NEEDCREW, ASSIGNED, APPROVED, NOTIFIED, PARTIAL, UNKNOWN,
   * etc.).
   */
  status?: string;

  /**
   * Flag indicating that one or more crew members requires transportation to the
   * departure location.
   */
  transportReq?: boolean;

  /**
   * Identifies the trip kit needed by the crew. A trip kit contains charts,
   * regulations, maps, etc. carried by the crew during missions.
   */
  tripKit?: string;

  /**
   * Time the row was updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

export namespace CrewFull {
  /**
   * Schema for Crew Member data.
   */
  export interface CrewMember {
    /**
     * Flag indicating whether this crew member has been alerted of the associated
     * task.
     */
    alerted?: boolean;

    /**
     * Flag indicating this crew member is assigned to all sorties of the crew
     * itinerary.
     */
    allSortie?: boolean;

    /**
     * Flag indicating whether this crew member has been approved for the associated
     * task.
     */
    approved?: boolean;

    /**
     * Flag indicating whether this crew member is attached to his/her squadron. Crew
     * members that are not attached are considered assigned.
     */
    attached?: boolean;

    /**
     * The military branch assignment of the crew member.
     */
    branch?: string;

    /**
     * Flag indicating this crew member is a civilian or non-military person.
     */
    civilian?: boolean;

    /**
     * Flag indicating this person is the aircraft commander.
     */
    commander?: boolean;

    /**
     * The crew position of the crew member.
     */
    crewPosition?: string;

    /**
     * The crew member's 10-digit DoD ID number.
     */
    dodID?: string;

    /**
     * The duty position of the crew member.
     */
    dutyPosition?: string;

    /**
     * The current duty status code of this crew member (e.g., AGR for Active Guard and
     * Reserve, IDT for Inactive Duty Training, etc.).
     */
    dutyStatus?: string;

    /**
     * Flag indicating whether this crew member has been notified of an event by email.
     */
    emailed?: boolean;

    /**
     * Flag indicating whether this crew member requires an additional amount of time
     * to report for duty.
     */
    extraTime?: boolean;

    /**
     * The first name of the crew member.
     */
    firstName?: string;

    /**
     * The earliest flying currency expiration date for this crew member, in ISO 8601
     * UTC format with millisecond precision.
     */
    fltCurrencyExp?: string;

    /**
     * The training task identifier associated with the flying currency expiration date
     * for this crew member.
     */
    fltCurrencyExpId?: string;

    /**
     * The date this crew member's records review was completed, in ISO 8601 UTC format
     * with millisecond precision.
     */
    fltRecDate?: string;

    /**
     * The date this crew member's records review is due, in ISO 8601 UTC format with
     * millisecond precision.
     */
    fltRecDue?: string;

    /**
     * The flying squadron assignment of the crew member.
     */
    flySquadron?: string;

    /**
     * Flag indicating whether this crew member is funded.
     */
    funded?: boolean;

    /**
     * Gender of the crew member.
     */
    gender?: string;

    /**
     * The earliest ground currency expiration date for this crew member, in ISO 8601
     * UTC format with millisecond precision.
     */
    gndCurrencyExp?: string;

    /**
     * The training task identifier associated with the ground currency expiration date
     * for this crew member.
     */
    gndCurrencyExpId?: string;

    /**
     * Flag indicating whether this crew member is grounded (i.e., his/her duties do
     * not include flying).
     */
    grounded?: boolean;

    /**
     * Date when this crew member starts acting as guest help for the squadron, in ISO
     * 8601 UTC format with millisecond precision.
     */
    guestStart?: string;

    /**
     * Date when this crew member stops acting as guest help for the squadron, in ISO
     * 8601 UTC format with millisecond precision.
     */
    guestStop?: string;

    /**
     * Last four digits of the crew member's social security number.
     */
    last4SSN?: string;

    /**
     * Date of the last flight for this crew member, in ISO 8601 UTC format with
     * millisecond precision.
     */
    lastFltDate?: string;

    /**
     * The last name of the crew member.
     */
    lastName?: string;

    /**
     * The squadron the crew member has been temporarily loaned to.
     */
    loanedTo?: string;

    /**
     * Crew member lodging location.
     */
    lodging?: string;

    /**
     * Time this crew member was actually alerted for the mission, in ISO 8601 UTC
     * format with millisecond precision.
     */
    memberActualAlertTime?: string;

    /**
     * Adjusted return time for the crew member, in ISO 8601 UTC format with
     * millisecond precision.
     */
    memberAdjReturnTime?: string;

    /**
     * Last name of the crew member's adjusted return time approver.
     */
    memberAdjReturnTimeApprover?: string;

    /**
     * Unique identifier of the crew member assigned by the originating source.
     */
    memberId?: string;

    /**
     * Initial start time of the crew member's linked task that was delinked due to
     * mission closure, in ISO 8601 UTC format with millisecond precision.
     */
    memberInitStartTime?: string;

    /**
     * The latest possible time the crew member can legally be alerted for a task, in
     * ISO 8601 UTC format with millisecond precision.
     */
    memberLastAlertTime?: string;

    /**
     * Time this crew member becomes eligible to be alerted for the mission, in ISO
     * 8601 UTC format with millisecond precision.
     */
    memberLegalAlertTime?: string;

    /**
     * Time this crew member will be picked up from lodging, in ISO 8601 UTC format
     * with millisecond precision.
     */
    memberPickupTime?: string;

    /**
     * The scheduled delay or adjustment in the start time of a crew member's rest
     * period after a mission, expressed as +/-HH:MM.
     */
    memberPostRestOffset?: string;

    /**
     * End time of this crew member's rest period after the mission, in ISO 8601 UTC
     * format with millisecond precision.
     */
    memberPostRestTime?: string;

    /**
     * Start time of this crew member's rest period before the mission, in ISO 8601 UTC
     * format with millisecond precision.
     */
    memberPreRestTime?: string;

    /**
     * Remarks concerning the crew member.
     */
    memberRemarks?: string;

    /**
     * Scheduled return time for this crew member, in ISO 8601 UTC format with
     * millisecond precision.
     */
    memberReturnTime?: string;

    /**
     * Time this crew member is scheduled to be alerted for the mission, in ISO 8601
     * UTC format with millisecond precision.
     */
    memberSchedAlertTime?: string;

    /**
     * The military component for the crew member (e.g., ACTIVE, RESERVE, GUARD,
     * UNKNOWN, etc.).
     */
    memberSource?: string;

    /**
     * Stage name for the crew member. A stage is a pool of crews supporting a given
     * operation plan.
     */
    memberStageName?: string;

    /**
     * Flag indicating whether this crew member needs transportation to the departure
     * location.
     */
    memberTransportReq?: boolean;

    /**
     * Amplifying details about the crew member type (e.g. RAVEN, FCC, COMCAM, AIRCREW,
     * MEP, OTHER, etc.).
     */
    memberType?: string;

    /**
     * The middle initial of the crew member.
     */
    middleInitial?: string;

    /**
     * Flag indicating whether this crew member has been notified of an event.
     */
    notified?: boolean;

    /**
     * Crew member lodging phone number.
     */
    phoneNumber?: string;

    /**
     * Code indicating a crew member's current physical fitness status and whether they
     * are medically cleared to fly (e.g., D for Duties Not Including Flying, E for
     * Physical Overdue, etc.).
     */
    physAvCode?: string;

    /**
     * Code indicating a crew member's physical availabiility status (e.g.,
     * DISQUALIFIED, OVERDUE, etc.).
     */
    physAvStatus?: string;

    /**
     * Due date for the crew member's physical, in ISO 8601 UTC format with millisecond
     * precision.
     */
    physDue?: string;

    /**
     * The rank of the crew member.
     */
    rank?: string;

    /**
     * Remark code used to designate attributes of this crew member. For more
     * information, contact the provider source.
     */
    remarkCode?: string;

    /**
     * The primary aircraft type for the crew member according to the personnel
     * resource management system indicated in the crewRMS field.
     */
    rmsMDS?: string;

    /**
     * Time this crew member is required to report for duty before this flight/mission,
     * in ISO 8601 UTC format with millisecond precision.
     */
    showTime?: string;

    /**
     * The squadron the crew member serves.
     */
    squadron?: string;

    /**
     * The date this crew member accomplished physiological or altitude chamber
     * training, in ISO 8601 UTC format with millisecond precision.
     */
    trainingDate?: string;

    /**
     * The Mattermost username of this crew member.
     */
    username?: string;

    /**
     * The wing the crew member serves.
     */
    wing?: string;
  }
}

/**
 * Collection providing hours of operation and other information specific to a day
 * of the week.
 */
export interface DailyOperationFull {
  /**
   * The day of the week to which this operational information pertains.
   */
  dayOfWeek?: 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY';

  /**
   * A collection containing the operational start and stop times scheduled for the
   * day of the week specified.
   */
  operatingHours?: Array<OperatingHoursFull>;

  /**
   * The name or type of operation to which this information pertains.
   */
  operationName?: string;

  /**
   * The name of the person who made the most recent change to this DailyOperation
   * data.
   */
  ophrsLastChangedBy?: string;

  /**
   * The datetime of the most recent change made to this DailyOperation data, in ISO
   * 8601 UTC format with millisecond precision.
   */
  ophrsLastChangedDate?: string;
}

/**
 * A diplomatic clearance is an authorization for an aircraft to traverse or land
 * within a specified country.
 */
export interface DiplomaticclearanceFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * The First Departure Date (FDD) the mission is scheduled for departure, in ISO
   * 8601 UTC format with millisecond precision.
   */
  firstDepDate: string;

  /**
   * Unique identifier of the Mission associated with this diplomatic clearance
   * record.
   */
  idMission: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system if not provided on
   * create operations.
   */
  id?: string;

  /**
   * The Aircraft and Personnel Automated Clearance System (APACS) system identifier
   * used to process and approve this clearance request.
   */
  apacsId?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Collection of diplomatic clearance details.
   */
  diplomaticClearanceDetails?: Array<DiplomaticclearanceFull.DiplomaticClearanceDetail>;

  /**
   * Collection of diplomatic clearance remarks.
   */
  diplomaticClearanceRemarks?: Array<DiplomaticclearanceFull.DiplomaticClearanceRemark>;

  /**
   * Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft
   * clearance requests.
   */
  dipWorksheetName?: string;

  /**
   * Suspense date for the diplomatic clearance worksheet to be worked, in ISO 8601
   * UTC format with millisecond precision.
   */
  docDeadline?: string;

  /**
   * Optional diplomatic clearance worksheet ID from external systems. This field has
   * no meaning within UDL and is provided as a convenience for systems that require
   * tracking of an internal system generated ID.
   */
  externalWorksheetId?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * Time the row was updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

export namespace DiplomaticclearanceFull {
  /**
   * Collection of diplomatic clearance details.
   */
  export interface DiplomaticClearanceDetail {
    /**
     * The type of action the aircraft can take with this diplomatic clearance (e.g. O
     * for Overfly, L for Land, etc.).
     */
    action?: string;

    /**
     * Specifies an alternate country code if the data provider code does not match a
     * UDL Country code value (ISO-3166-ALPHA-2). This field will be set to the value
     * provided by the source and should be used for all Queries specifying a Country
     * Code.
     */
    altCountryCode?: string;

    /**
     * Identifier of this diplomatic clearance issued by the host country.
     */
    clearanceId?: string;

    /**
     * Remarks concerning this diplomatic clearance.
     */
    clearanceRemark?: string;

    /**
     * The call sign of the sortie cleared with this diplomatic clearance.
     */
    clearedCallSign?: string;

    /**
     * The DoD Standard Country Code designator for the country issuing the diplomatic
     * clearance. This field will be set to "OTHR" if the source value does not match a
     * UDL Country code value (ISO-3166-ALPHA-2).
     */
    countryCode?: string;

    /**
     * Name of the country issuing this diplomatic clearance.
     */
    countryName?: string;

    /**
     * Earliest time the aircraft may enter the country, in ISO 8601 UTC format with
     * millisecond precision.
     */
    entryNET?: string;

    /**
     * The navigation point name where the aircraft must enter the country.
     */
    entryPoint?: string;

    /**
     * Latest time the aircraft may exit the country, in ISO 8601 UTC format with
     * millisecond precision.
     */
    exitNLT?: string;

    /**
     * The navigation point name where the aircraft must exit the country.
     */
    exitPoint?: string;

    /**
     * Optional clearance ID from external systems. This field has no meaning within
     * UDL and is provided as a convenience for systems that require tracking of an
     * internal system generated ID.
     */
    externalClearanceId?: string;

    /**
     * Unique identifier of the Aircraft Sortie associated with this diplomatic
     * clearance record.
     */
    idSortie?: string;

    /**
     * Identifies the Itinerary point of a sortie where an air event occurs.
     */
    legNum?: number;

    /**
     * The diplomatic clearance profile name used within clearance management systems.
     */
    profile?: string;

    /**
     * Flag indicating whether the clearance request requires ICAO specific
     * information.
     */
    reqICAO?: boolean;

    /**
     * Flag indicating whether entry/exit points are required for clearances.
     */
    reqPoint?: boolean;

    /**
     * The 1801 fileable route of flight string associated with this diplomatic
     * clearance. The route of flight string contains route designators, significant
     * points, change of speed/altitude, change of flight rules, and cruise climbs.
     */
    routeString?: string;

    /**
     * The placement of this diplomatic clearance within a sequence of clearances used
     * on a sortie. For example, a sequence value of 3 means that it is the third
     * diplomatic clearance the aircraft will use.
     */
    sequenceNum?: number;

    /**
     * Indicates the current status of the diplomatic clearance request.
     */
    status?: string;

    /**
     * Description of when this diplomatic clearance is valid.
     */
    validDesc?: string;

    /**
     * The end time of the validity of this diplomatic clearance, in ISO 8601 UTC
     * format with millisecond precision.
     */
    validEndTime?: string;

    /**
     * The start time of the validity of this diplomatic clearance, in ISO 8601 UTC
     * format with millisecond precision.
     */
    validStartTime?: string;

    /**
     * Remarks concerning the valid diplomatic clearance window.
     */
    windowRemark?: string;
  }

  /**
   * Collection of diplomatic clearance remarks.
   */
  export interface DiplomaticClearanceRemark {
    /**
     * Date the remark was published, in ISO 8601 UTC format, with millisecond
     * precision.
     */
    date?: string;

    /**
     * Global Decision Support System (GDSS) remark identifier.
     */
    gdssRemarkId?: string;

    /**
     * Text of the remark.
     */
    text?: string;

    /**
     * User who published the remark.
     */
    user?: string;
  }
}

/**
 * Historical drift rates for GEO Onorbit objects resulting from updates to
 * OnorbitDetails driftRate values.
 */
export interface DriftHistoryAbridged {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * GEO drift rate, if applicable in degrees per day.
   */
  driftRate?: number;

  /**
   * Time the drift rate was replaced with another value and no longer the current
   * value.
   */
  effectiveUntil?: string;

  /**
   * UUID of the parent Onorbit record.
   */
  idOnOrbit?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;
}

/**
 * Historical drift rates for GEO Onorbit objects resulting from updates to
 * OnorbitDetails driftRate values.
 */
export interface DriftHistoryFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * GEO drift rate, if applicable in degrees per day.
   */
  driftRate?: number;

  /**
   * Time the drift rate was replaced with another value and no longer the current
   * value.
   */
  effectiveUntil?: string;

  /**
   * UUID of the parent Onorbit record.
   */
  idOnOrbit?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;
}

/**
 * Known launch vehicle engines and their performance characteristics and limits. A
 * launch vehicle has 1 to many engines per stage.
 */
export interface Engine {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Engine name/variant.
   */
  name: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Read-only collection of additional EngineDetails by various sources for this
   * engine, ignored on create/update. These details must be created separately via
   * the /udl/enginedetails operations.
   */
  engineDetails?: Array<EngineDetailsFull>;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

/**
 * Known launch vehicle engine details and performance characteristics and limits
 * compiled by a particular source. A launch vehicle engine may have several
 * details records from multiple sources.
 */
export interface EngineDetailsFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Identifier of the parent engine record.
   */
  idEngine: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Launch engine maximum burn time in seconds.
   */
  burnTime?: number;

  /**
   * Engine chamber pressure in bars.
   */
  chamberPressure?: number;

  /**
   * Engine characteristic type (e.g. Electric, Mono-propellant, Bi-propellant,
   * etc.).
   */
  characteristicType?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic
   * Decomposition, etc.).
   */
  cycleType?: string;

  /**
   * Engine type or family.
   */
  family?: string;

  /**
   * Organization ID of the engine manufacturer.
   */
  manufacturerOrgId?: string;

  /**
   * Engine maximum number of firings.
   */
  maxFirings?: number;

  /**
   * Notes/Description of the engine.
   */
  notes?: string;

  /**
   * Engine nozzle expansion ratio.
   */
  nozzleExpansionRatio?: number;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Oxidizer type (e.g. Nitrogen Tetroxide, Liquid Oxygen, etc).
   */
  oxidizer?: string;

  /**
   * Propellant/fuel type of the engine (e.g. Liquid Hydrogen, Kerosene, Aerozine,
   * etc).
   */
  propellant?: string;

  /**
   * Engine maximum thrust at sea level in Kilo-Newtons.
   */
  seaLevelThrust?: number;

  /**
   * Launch engine specific impulse in seconds.
   */
  specificImpulse?: number;

  /**
   * Optional array of provider/source specific tags for this data, where each
   * element is no longer than 32 characters, used for implementing data owner
   * conditional access controls to restrict access to the data. Should be left null
   * by data providers unless conditional access controls are coordinated with the
   * UDL team.
   */
  tags?: Array<string>;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;

  /**
   * Engine maximum thrust in a vacuum in Kilo-Newtons.
   */
  vacuumThrust?: number;
}

/**
 * Known launch vehicle engines and their performance characteristics and limits. A
 * launch vehicle has 1 to many engines per stage.
 */
export interface EngineIngest {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Engine name/variant.
   */
  name: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;
}

/**
 * An entity is a generic representation of any object within a space/SSA system
 * such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An
 * entity can have an operating unit, a location (if terrestrial), and statuses.
 */
export interface EntityFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Unique entity name.
   */
  name: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR,
   * LASEREMITTER, NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).
   */
  type:
    | 'AIRCRAFT'
    | 'BUS'
    | 'COMM'
    | 'IR'
    | 'LASEREMITTER'
    | 'NAVIGATION'
    | 'ONORBIT'
    | 'RFEMITTER'
    | 'SCIENTIFIC'
    | 'SENSOR'
    | 'SITE'
    | 'VESSEL';

  /**
   * The country code. This value is typically the ISO 3166 Alpha-2 two-character
   * country code, however it can also represent various consortiums that do not
   * appear in the ISO document. The code must correspond to an existing country in
   * the UDL’s country API. Call udl/country/{code} to get any associated FIPS code,
   * ISO Alpha-3 code, or alternate code values that exist for the specified country
   * code.
   */
  countryCode?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Unique identifier of the record.
   */
  idEntity?: string;

  /**
   * Unique identifier of the entity location, if terrestrial/fixed.
   */
  idLocation?: string;

  /**
   * Onorbit identifier if this entity is part of an on-orbit object. For the public
   * catalog, the idOnOrbit is typically the satellite number as a string, but may be
   * a UUID for analyst or other unknown or untracked satellites.
   */
  idOnOrbit?: string;

  /**
   * Unique identifier of the associated operating unit object.
   */
  idOperatingUnit?: string;

  /**
   * Model representation of a location, which is a specific fixed point on the earth
   * and is used to denote the locations of fixed sensors, operating units, etc.
   */
  location?: LocationFull;

  /**
   * Model object representing on-orbit objects or satellites in the system.
   */
  onOrbit?: EntityFull.OnOrbit;

  /**
   * Model representation of a unit or organization which operates or controls a
   * space-related Entity such as an on-orbit payload, a sensor, etc. A contact may
   * belong to an organization.
   */
  operatingUnit?: OperatingunitFull;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Type of organization which owns this entity (e.g. Commercial, Government,
   * Academic, Consortium, etc).
   */
  ownerType?: 'Commercial' | 'Government' | 'Academic' | 'Consortium' | 'Other';

  /**
   * Read-only collection of RF bands utilized by this entity for communication
   * and/or operation.
   */
  rfBands?: Array<RfBandFull>;

  /**
   * Read-only collection of statuses which can be collected by multiple sources.
   */
  statusCollection?: Array<StatusFull>;

  /**
   * Boolean indicating if this entity is taskable.
   */
  taskable?: boolean;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;

  /**
   * List of URLs to additional details/documents for this entity.
   */
  urls?: Array<string>;
}

export namespace EntityFull {
  /**
   * Model object representing on-orbit objects or satellites in the system.
   */
  export interface OnOrbit {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * Satellite/Catalog number of the target on-orbit object.
     */
    satNo: number;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Alternate name of the on-orbit object.
     */
    altName?: string;

    /**
     * Read-only collection of antennas on this on-orbit object.
     */
    antennas?: Array<Shared.OnorbitAntennaFull>;

    /**
     * Read-only collection of batteries on this on-orbit object.
     */
    batteries?: Array<Shared.OnorbitBatteryFull>;

    /**
     * Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without
     * State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic,
     * Heliocentric, Interplanetary, Lagrangian, Docked).
     */
    category?:
      | 'Unknown'
      | 'On-Orbit'
      | 'Decayed'
      | 'Cataloged Without State'
      | 'Launch Nominal'
      | 'Analyst Satellite'
      | 'Cislunar'
      | 'Lunar'
      | 'Hyperbolic'
      | 'Heliocentric'
      | 'Interplanetary'
      | 'Lagrangian'
      | 'Docked';

    /**
     * Common name of the on-orbit object.
     */
    commonName?: string;

    /**
     * Constellation to which this satellite belongs.
     */
    constellation?: string;

    /**
     * The country code. This value is typically the ISO 3166 Alpha-2 two-character
     * country code, however it can also represent various consortiums that do not
     * appear in the ISO document. The code must correspond to an existing country in
     * the UDL’s country API. Call udl/country/{code} to get any associated FIPS code,
     * ISO Alpha-3 code, or alternate code values that exist for the specified country
     * code.
     */
    countryCode?: string;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Date of decay.
     */
    decayDate?: string;

    /**
     * For the public catalog, the idOnOrbit is typically the satellite number as a
     * string, but may be a UUID for analyst or other unknown or untracked satellites,
     * auto-generated by the system.
     */
    idOnOrbit?: string;

    /**
     * International Designator, typically of the format YYYYLLLAAA, where YYYY is the
     * launch year, LLL is the sequential launch number of that year, and AAA is an
     * optional launch piece designator for the launch.
     */
    intlDes?: string;

    /**
     * Date of launch.
     */
    launchDate?: string;

    /**
     * Id of the associated launchSite entity.
     */
    launchSiteId?: string;

    /**
     * Estimated lifetime of the on-orbit payload, if known.
     */
    lifetimeYears?: number;

    /**
     * Mission number of the on-orbit object.
     */
    missionNumber?: string;

    /**
     * Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED,
     * UNKNOWN.
     */
    objectType?: 'ROCKET BODY' | 'DEBRIS' | 'PAYLOAD' | 'PLATFORM' | 'MANNED' | 'UNKNOWN';

    /**
     * Read-only collection of details for this on-orbit object.
     */
    onorbitDetails?: Array<Shared.OnorbitDetailsFull>;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * Read-only collection of solar arrays on this on-orbit object.
     */
    solarArrays?: Array<Shared.OnorbitSolarArrayFull>;

    /**
     * Read-only collection of thrusters (engines) on this on-orbit object.
     */
    thrusters?: Array<Shared.OnorbitThrusterFull>;

    /**
     * Time the row was last updated in the database, auto-populated by the system.
     */
    updatedAt?: string;

    /**
     * Application user who updated the row in the database, auto-populated by the
     * system.
     */
    updatedBy?: string;
  }
}

/**
 * Model representation of observation data for electro-optical based sensor
 * phenomenologies. ECI J2K is the preferred reference frame for EOObservations,
 * however, several user-specified reference frames are accommodated. Users should
 * check the EOObservation record as well as the 'Discover' tab in the storefront
 * to confirm the coordinate frames used by the data provider.
 */
export interface EoObservationFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Ob detection time in ISO 8601 UTC, up to microsecond precision. Consumers should
   * contact the provider for details on their obTime specifications.
   */
  obTime: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Line of sight azimuth angle in degrees and topocentric frame. Reported value
   * should include all applicable corrections as specified on the source provider
   * data card. If uncertain, consumers should contact the provider for details on
   * the applied corrections.
   */
  azimuth?: number;

  /**
   * Sensor line of sight azimuth angle bias in degrees.
   */
  azimuthBias?: number;

  /**
   * Optional flag indicating whether the azimuth value is measured (true) or
   * computed (false). If null, consumers may consult the data provider for
   * information regarding whether the corresponding value is computed or measured.
   */
  azimuthMeasured?: boolean;

  /**
   * Rate of change of the line of sight azimuth in degrees per second.
   */
  azimuthRate?: number;

  /**
   * One sigma uncertainty in the line of sight azimuth angle, in degrees.
   */
  azimuthUnc?: number;

  /**
   * Background intensity for IR observations, in kw/sr/um.
   */
  bgIntensity?: number;

  /**
   * Method indicating telescope movement during collection (AUTOTRACK, MANUAL
   * AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).
   */
  collectMethod?: string;

  /**
   * Object Correlation Quality score of the observation when compared to a known
   * orbit state, (non-standardized). Users should consult data providers regarding
   * the expected range of values.
   */
  corrQuality?: number;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Line of sight declination, in degrees, in the specified referenceFrame. If
   * referenceFrame is null then J2K should be assumed. Reported value should include
   * all applicable corrections as specified on the source provider data card. If
   * uncertain, consumers should contact the provider for details on the applied
   * corrections.
   */
  declination?: number;

  /**
   * Sensor line of sight declination angle bias in degrees.
   */
  declinationBias?: number;

  /**
   * Optional flag indicating whether the declination value is measured (true) or
   * computed (false). If null, consumers may consult the data provider for
   * information regarding whether the corresponding value is computed or measured.
   */
  declinationMeasured?: boolean;

  /**
   * Line of sight declination rate of change, in degrees/sec, in the specified
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  declinationRate?: number;

  /**
   * One sigma uncertainty in the line of sight declination angle, in degrees.
   */
  declinationUnc?: number;

  /**
   * Optional source-provided and searchable metadata or descriptor of the data.
   */
  descriptor?: string;

  /**
   * Line of sight elevation in degrees and topocentric frame. Reported value should
   * include all applicable corrections as specified on the source provider data
   * card. If uncertain, consumers should contact the provider for details on the
   * applied corrections.
   */
  elevation?: number;

  /**
   * Sensor line of sight elevation bias in degrees.
   */
  elevationBias?: number;

  /**
   * Optional flag indicating whether the elevation value is measured (true) or
   * computed (false). If null, consumers may consult the data provider for
   * information regarding whether the corresponding value is computed or measured.
   */
  elevationMeasured?: boolean;

  /**
   * Rate of change of the line of sight elevation in degrees per second.
   */
  elevationRate?: number;

  /**
   * One sigma uncertainty in the line of sight elevation angle, in degrees.
   */
  elevationUnc?: number;

  /**
   * Model representation of additional detailed observation data for electro-optical
   * based sensor phenomenologies.
   */
  eoobservationDetails?: EoObservationFull.EoobservationDetails;

  /**
   * Image exposure duration in seconds. For observations performed using frame
   * stacking or synthetic tracking methods, the exposure duration should be the
   * total integration time. This field is highly recommended / required if the
   * observations are going to be used for photometric processing.
   */
  expDuration?: number;

  /**
   * The number of RSOs detected in the sensor field of view.
   */
  fovCount?: number;

  /**
   * The number of uncorrelated tracks in the field of view.
   */
  fovCountUCT?: number;

  /**
   * For GEO detections, the altitude in km.
   */
  geoalt?: number;

  /**
   * For GEO detections, the latitude in degrees north.
   */
  geolat?: number;

  /**
   * For GEO detections, the longitude in degrees east.
   */
  geolon?: number;

  /**
   * For GEO detections, the range in km.
   */
  georange?: number;

  /**
   * Unique identifier of the target on-orbit object, if correlated.
   */
  idOnOrbit?: string;

  /**
   * Unique identifier of the reporting sensor.
   */
  idSensor?: string;

  /**
   * Unique identifier of the Sky Imagery.
   */
  idSkyImagery?: string;

  /**
   * Intensity of the target for IR observations, in kw/sr/um.
   */
  intensity?: number;

  /**
   * One sigma uncertainty in the line of sight pointing in micro-radians.
   */
  losUnc?: number;

  /**
   * Line-of-sight cartesian X position of the target, in km, in the specified
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  losx?: number;

  /**
   * Line-of-sight cartesian X velocity of target, in km/sec, in the specified
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  losxvel?: number;

  /**
   * Line-of-sight cartesian Y position of the target, in km, in the specified
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  losy?: number;

  /**
   * Line-of-sight cartesian Y velocity of target, in km/sec, in the specified
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  losyvel?: number;

  /**
   * Line-of-sight cartesian Z position of the target, in km, in the specified
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  losz?: number;

  /**
   * Line-of-sight cartesian Z velocity of target, in km/sec, in the specified
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  loszvel?: number;

  /**
   * Measure of observed brightness calibrated against the Gaia G-band in units of
   * magnitudes.
   */
  mag?: number;

  /**
   * Formula: mag - 5.0 \* log_10(geo_range / 1000000.0).
   */
  magNormRange?: number;

  /**
   * Uncertainty of the observed brightness in units of magnitudes.
   */
  magUnc?: number;

  /**
   * Net object signature = counts / expDuration.
   */
  netObjSig?: number;

  /**
   * Net object signature uncertainty = counts uncertainty / expDuration.
   */
  netObjSigUnc?: number;

  /**
   * The position of this observation within a track (FENCE, FIRST, IN, LAST,
   * SINGLE). This identifier is optional and, if null, no assumption should be made
   * regarding whether other observations may or may not exist to compose a track.
   */
  obPosition?: string;

  /**
   * Model object representing on-orbit objects or satellites in the system.
   */
  onOrbit?: OnorbitFull;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Optional identifier provided by observation source to indicate the target
   * onorbit object of this observation. This may be an internal identifier and not
   * necessarily a valid satellite number.
   */
  origObjectId?: string;

  /**
   * Optional identifier provided by observation source to indicate the sensor
   * identifier which produced this observation. This may be an internal identifier
   * and not necessarily a valid sensor ID.
   */
  origSensorId?: string;

  /**
   * Boolean indicating that the target object was in a penumbral eclipse at the time
   * of this observation.
   */
  penumbra?: boolean;

  /**
   * Primary Extinction Coefficient, in Magnitudes. Primary Extinction is the
   * coefficient applied to the airmass to determine how much the observed visual
   * magnitude has been attenuated by the atmosphere. Extinction, in general,
   * describes the absorption and scattering of electromagnetic radiation by dust and
   * gas between an emitting astronomical object and the observer. See the
   * EOObservationDetails API for specification of extinction coefficients for
   * multiple spectral filters.
   */
  primaryExtinction?: number;

  /**
   * Primary Extinction Coefficient Uncertainty, in Magnitudes.
   */
  primaryExtinctionUnc?: number;

  /**
   * Line of sight right ascension, in degrees, in the specified referenceFrame. If
   * referenceFrame is null then J2K should be assumed. Reported value should include
   * all applicable corrections as specified on the source provider data card. If
   * uncertain, consumers should contact the provider for details on the applied
   * corrections.
   */
  ra?: number;

  /**
   * Sensor line of sight right ascension bias in degrees.
   */
  raBias?: number;

  /**
   * Optional flag indicating whether the ra value is measured (true) or computed
   * (false). If null, consumers may consult the data provider for information
   * regarding whether the corresponding value is computed or measured.
   */
  raMeasured?: boolean;

  /**
   * Line of sight range in km. If referenceFrame is null then J2K should be assumed.
   * Reported value should include all applicable corrections as specified on the
   * source provider data card. If uncertain, consumers should contact the provider
   * for details on the applied corrections.
   */
  range?: number;

  /**
   * Sensor line of sight range bias in km.
   */
  rangeBias?: number;

  /**
   * Optional flag indicating whether the range value is measured (true) or computed
   * (false). If null, consumers may consult the data provider for information
   * regarding whether the corresponding value is computed or measured.
   */
  rangeMeasured?: boolean;

  /**
   * Range rate in km/s. If referenceFrame is null then J2K should be assumed.
   * Reported value should include all applicable corrections as specified on the
   * source provider data card. If uncertain, consumers should contact the provider
   * for details on the applied corrections.
   */
  rangeRate?: number;

  /**
   * Optional flag indicating whether the rangeRate value is measured (true) or
   * computed (false). If null, consumers may consult the data provider for
   * information regarding whether the corresponding value is computed or measured.
   */
  rangeRateMeasured?: boolean;

  /**
   * One sigma uncertainty in the line of sight range rate, in kilometers/second.
   */
  rangeRateUnc?: number;

  /**
   * One sigma uncertainty in the line of sight range, in kilometers.
   */
  rangeUnc?: number;

  /**
   * Line of sight right ascension rate of change, in degrees/sec, in the specified
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  raRate?: number;

  /**
   * One sigma uncertainty in the line of sight right ascension angle, in degrees.
   */
  raUnc?: number;

  /**
   * Optional URI location in the document repository of the raw file parsed by the
   * system to produce this record. To download the raw file, prepend
   * https://udl-hostname/scs/download?id= to this value.
   */
  rawFileURI?: string;

  /**
   * The reference frame of the EOObservation measurements. If the referenceFrame is
   * null it is assumed to be J2000.
   */
  referenceFrame?: 'J2000' | 'GCRF' | 'ITRF' | 'TEME';

  /**
   * Satellite/Catalog number of the target on-orbit object.
   */
  satNo?: number;

  /**
   * Sensor altitude at obTime (if mobile/onorbit) in km.
   */
  senalt?: number;

  /**
   * Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be
   * obtained from sensor info. -90 to 90 degrees (negative values south of equator).
   */
  senlat?: number;

  /**
   * Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be
   * obtained from sensor info. -180 to 180 degrees (negative values west of Prime
   * Meridian).
   */
  senlon?: number;

  /**
   * The quaternion describing the rotation of the sensor in relation to the
   * body-fixed frame used for this system into the local geodetic frame, at
   * observation time (obTime). The array element order convention is scalar
   * component first, followed by the three vector components (qc, q1, q2, q3).
   */
  senQuat?: Array<number>;

  /**
   * The reference frame of the observing sensor state. If the senReferenceFrame is
   * null it is assumed to be J2000.
   */
  senReferenceFrame?: 'J2000' | 'EFG/TDR' | 'ECR/ECEF' | 'TEME' | 'ITRF' | 'GCRF';

  /**
   * Cartesian X velocity of the observing mobile/onorbit sensor at obTime, in
   * km/sec, in the specified senReferenceFrame. If senReferenceFrame is null then
   * J2K should be assumed.
   */
  senvelx?: number;

  /**
   * Cartesian Y velocity of the observing mobile/onorbit sensor at obTime, in
   * km/sec, in the specified senReferenceFrame. If senReferenceFrame is null then
   * J2K should be assumed.
   */
  senvely?: number;

  /**
   * Cartesian Z velocity of the observing mobile/onorbit sensor at obTime, in
   * km/sec, in the specified senReferenceFrame. If senReferenceFrame is null then
   * J2K should be assumed.
   */
  senvelz?: number;

  /**
   * Cartesian X position of the observing mobile/onorbit sensor at obTime, in km, in
   * the specified senReferenceFrame. If senReferenceFrame is null then J2K should be
   * assumed.
   */
  senx?: number;

  /**
   * Cartesian Y position of the observing mobile/onorbit sensor at obTime, in km, in
   * the specified senReferenceFrame. If senReferenceFrame is null then J2K should be
   * assumed.
   */
  seny?: number;

  /**
   * Cartesian Z position of the observing mobile/onorbit sensor at obTime, in km, in
   * the specified senReferenceFrame. If senReferenceFrame is null then J2K should be
   * assumed.
   */
  senz?: number;

  /**
   * Shutter delay in seconds.
   */
  shutterDelay?: number;

  /**
   * Average Sky Background signal, in Magnitudes. Sky Background refers to the
   * incoming light from an apparently empty part of the night sky.
   */
  skyBkgrnd?: number;

  /**
   * Angle from the sun to the equatorial plane.
   */
  solarDecAngle?: number;

  /**
   * The angle, in degrees, between the projections of the target-to-observer vector
   * and the target-to-sun vector onto the equatorial plane. The angle is represented
   * as negative when closing (i.e. before the opposition) and positive when opening
   * (after the opposition).
   */
  solarEqPhaseAngle?: number;

  /**
   * The angle, in degrees, between the target-to-observer vector and the
   * target-to-sun vector.
   */
  solarPhaseAngle?: number;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * Optional array of provider/source specific tags for this data, where each
   * element is no longer than 32 characters, used for implementing data owner
   * conditional access controls to restrict access to the data. Should be left null
   * by data providers unless conditional access controls are coordinated with the
   * UDL team.
   */
  tags?: Array<string>;

  /**
   * Optional identifier to indicate the specific tasking which produced this
   * observation.
   */
  taskId?: string;

  /**
   * Sensor timing bias in seconds.
   */
  timingBias?: number;

  /**
   * Optional identifier of the track to which this observation belongs.
   */
  trackId?: string;

  /**
   * Optional identifier to track a commercial or marketplace transaction executed to
   * produce this data.
   */
  transactionId?: string;

  /**
   * Read only field specifying the type of observation (e.g. OPTICAL, OPTICAL_IR,
   * LASER_RANGING, etc).
   */
  type?: string;

  /**
   * Boolean indicating this observation is part of an uncorrelated track or was
   * unable to be correlated to a known object. This flag should only be set to true
   * by data providers after an attempt to correlate to an on-orbit object was made
   * and failed. If unable to correlate, the 'origObjectId' field may be populated
   * with an internal data provider specific identifier.
   */
  uct?: boolean;

  /**
   * Boolean indicating that the target object was in umbral eclipse at the time of
   * this observation.
   */
  umbra?: boolean;

  /**
   * Formula: 2.5 \* log_10 (zero_mag_counts / expDuration).
   */
  zeroptd?: number;

  /**
   * This is the uncertainty in the zero point for the filter used for this
   * observation/row in units of mag. For use with differential photometry.
   */
  zeroPtdUnc?: number;
}

export namespace EoObservationFull {
  /**
   * Model representation of additional detailed observation data for electro-optical
   * based sensor phenomenologies.
   */
  export interface EoobservationDetails {
    /**
     * World Coordinate System (WCS) X pixel origin in astrometric fit.
     */
    acalCrPixX?: number;

    /**
     * World Coordinate System (WCS) Y pixel origin in astrometric fit.
     */
    acalCrPixY?: number;

    /**
     * World Coordinate System (WCS) equatorial coordinate X origin corresponding to
     * CRPIX in astrometric fit in degrees.
     */
    acalCrValX?: number;

    /**
     * World Coordinate System (WCS) equatorial coordinate Y origin corresponding to
     * CRPIX in astrometric fit in degrees.
     */
    acalCrValY?: number;

    /**
     * Number of stars used in astrometric fit.
     */
    acalNumStars?: number;

    /**
     * This is the background signal at or in the vicinity of the radiometric source
     * position. Specifically, this is the average background count level (DN/pixel)
     * divided by the exposure time in seconds of the background pixels used in the
     * photometric extraction. DN/pixel/sec.
     */
    backgroundSignal?: number;

    /**
     * Estimated 1-sigma uncertainty in the background signal at or in the vicinity of
     * the radiometric source position. DN/pixel/sec.
     */
    backgroundSignalUnc?: number;

    /**
     * The number of pixels binned horizontally.
     */
    binningHoriz?: number;

    /**
     * The number of pixels binned vertically.
     */
    binningVert?: number;

    /**
     * The x centroid position on the CCD of the target object in pixels.
     */
    ccdObjPosX?: number;

    /**
     * The y centroid position on the CCD of the target object in pixels.
     */
    ccdObjPosY?: number;

    /**
     * This is the pixel width of the target. This is either a frame-by-frame
     * measurement or a constant point spread function or synthetic aperture used in
     * the extraction.
     */
    ccdObjWidth?: number;

    /**
     * Operating temperature of CCD recorded during exposure or measured during
     * calibrations in K.
     */
    ccdTemp?: number;

    /**
     * Observed centroid column number on the focal plane in pixels (0 is left edge,
     * 0.5 is center of pixels along left of image).
     */
    centroidColumn?: number;

    /**
     * Observed centroid row number on the focal plane in pixels (0 is top edge, 0.5 is
     * center of pixels along top of image).
     */
    centroidRow?: number;

    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format, will be
     * set to EOObservation classificationMarking if blank.
     */
    classificationMarking?: string;

    /**
     * Color coefficient for filter n for a space-based sensor where there is no
     * atmospheric extinction. Must be present for all values n=1 to
     * numSpectralFilters, in incrementing order of n, and for no other values of n.
     */
    colorCoeffs?: Array<number>;

    /**
     * Spatial variance of image distribution in horizontal direction measured in
     * pixels squared.
     */
    columnVariance?: number;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * The reference number n, in neutralDensityFilters for the currently used neutral
     * density filter.
     */
    currentNeutralDensityFilterNum?: number;

    /**
     * The reference number, x, where x ranges from 1 to n, where n is the number
     * specified in spectralFilters that corresponds to the spectral filter given in
     * the corresponding spectralFilterNames.
     */
    currentSpectralFilterNum?: number;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     *
     * , will be set to EOObservation dataMode if blank.
     */
    dataMode?: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * Covariance (Y^2) in measured declination (Y) in deg^2.
     */
    declinationCov?: number;

    /**
     * An array of measurements that correspond to the distance from the streak center
     * measured from the optical image in pixels that show change over an interval of
     * time. The array length is dependent on the length of the streak. The
     * distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in
     * size.
     */
    distFromStreakCenter?: Array<number>;

    /**
     * Angle off element set reported in degrees.
     */
    does?: number;

    /**
     * The extinction coefficient computed for the nth filter. Must be present for all
     * values n=1 to numSpectralFilters, in incrementing order of n, and for no other
     * values of n. Units = mag/airmass.
     */
    extinctionCoeffs?: Array<number>;

    /**
     * This is the uncertainty in the extinction coefficient for the nth filter. Must
     * be present for all values n=1 to numSpectralFilters, in incrementing order of n,
     * and for no other values of n. -9999 for space-based sensors. Units =
     * mag/airmass.
     */
    extinctionCoeffsUnc?: Array<number>;

    /**
     * Some sensors have gain settings. This value is the gain used during the
     * observation in units e-/ADU. If no gain is used, the value = 1.
     */
    gain?: number;

    /**
     * Unique identifier of the parent EOObservation.
     */
    idEOObservation?: string;

    /**
     * Sensor instantaneous field of view (ratio of pixel pitch to focal length).
     */
    ifov?: number;

    /**
     * Instrumental magnitude of a sensor before corrections are applied for atmosphere
     * or to transform to standard magnitude scale.
     */
    magInstrumental?: number;

    /**
     * Uncertainty in the instrumental magnitude.
     */
    magInstrumentalUnc?: number;

    /**
     * Must be present for all values n=1 to numNeutralDensityFilters, in incrementing
     * order of n, and for no other values of n.
     */
    neutralDensityFilterNames?: Array<string>;

    /**
     * The transmission of the nth neutral density filter. Must be present for all
     * values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no
     * other values of n.
     */
    neutralDensityFilterTransmissions?: Array<number>;

    /**
     * This is the uncertainty in the transmission for the nth filter. Must be present
     * for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and
     * for no other values of n.
     */
    neutralDensityFilterTransmissionsUnc?: Array<number>;

    /**
     * Number of catalog stars in the detector field of view (FOV) with the target
     * object. Can be 0 for narrow FOV sensors.
     */
    numCatalogStars?: number;

    /**
     * Number of correlated stars in the FOV with the target object. Can be 0 for
     * narrow FOV sensors.
     */
    numCorrelatedStars?: number;

    /**
     * Number of detected stars in the FOV with the target object. Helps identify
     * frames with clouds.
     */
    numDetectedStars?: number;

    /**
     * The value is the number of neutral density filters used.
     */
    numNeutralDensityFilters?: number;

    /**
     * The value is the number of spectral filters used.
     */
    numSpectralFilters?: number;

    /**
     * Distance from the target object to the sun during the observation in meters.
     */
    objSunRange?: number;

    /**
     * Ob detection time in ISO 8601 UTC with microsecond precision, will be set to
     * EOObservation obTime if blank.
     */
    obTime?: string;

    /**
     * Optical Cross Section computed in units m(2)/ster.
     */
    opticalCrossSection?: number;

    /**
     * Uncertainty in Optical Cross Section computed in units m(2)/ster.
     */
    opticalCrossSectionUnc?: number;

    /**
     * Number of stars used in photometric fit count.
     */
    pcalNumStars?: number;

    /**
     * Peak Aperture Raw Counts is the value of the peak pixel in the real or synthetic
     * aperture containing the target signal.
     */
    peakApertureCount?: number;

    /**
     * Peak Background Raw Counts is the largest pixel value used in background signal.
     */
    peakBackgroundCount?: number;

    /**
     * Solar phase angle bisector vector. The vector that bisects the solar phase
     * angle. The phase angle bisector is the angle that is << of the value in #48.
     * Then calculate the point on the RA/DEC (ECI J2000.0) sphere that a vector at
     * this angle would intersect.
     */
    phaseAngBisect?: number;

    /**
     * Pixel array size (height) in pixels.
     */
    pixelArrayHeight?: number;

    /**
     * Pixel array size (width) in pixels.
     */
    pixelArrayWidth?: number;

    /**
     * Maximum valid pixel value, this is defined as 2^(number of bits per pixel). For
     * example, a CCD with 8-bitpixels, would have a maximum valid pixel value of 2^8
     * = 256. This can represent the saturation value of the detector, but some sensors
     * will saturate at a value significantly lower than full well depth. This is the
     * analog-to-digital conversion (ADC) saturation value.
     */
    pixelMax?: number;

    /**
     * Minimum valid pixel value, this is typically 0.
     */
    pixelMin?: number;

    /**
     * Predicted Azimuth angle of the target object from a ground -based sensor (no
     * atmospheric refraction correction required) in degrees. AZ_EL implies apparent
     * topocentric place in true of date reference frame as seen from the observer with
     * aberration due to the observer velocity and light travel time applied.
     */
    predictedAzimuth?: number;

    /**
     * Predicted Declination of the Target object from the frame of reference of the
     * sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric
     * origin and velocity aberration and subtracting the sensor geocentric position of
     * the sensor places in its reference frame.
     */
    predictedDeclination?: number;

    /**
     * Uncertainty of Predicted Declination of the Target object from the frame of
     * reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs
     * produce geocentric origin and velocity aberration and subtracting the sensor
     * geocentric position of the sensor places in its reference frame.
     */
    predictedDeclinationUnc?: number;

    /**
     * Predicted elevation angle of the target object from a ground -based sensor (no
     * atmospheric refraction correction required) in degrees. AZ_EL implies apparent
     * topocentric place in true of date reference frame as seen from the observer with
     * aberration due to the observer velocity and light travel time applied.
     */
    predictedElevation?: number;

    /**
     * Predicted Right Ascension of the Target object from the frame of reference of
     * the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce
     * geocentric origin and velocity aberration and subtracting the sensor geocentric
     * position of the sensor places in its reference frame.
     */
    predictedRa?: number;

    /**
     * Uncertainty of predicted Right Ascension of the Target object from the frame of
     * reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs
     * produce geocentric origin and velocity aberration and subtracting the sensor
     * geocentric position of the sensor places in its reference frame.
     */
    predictedRaUnc?: number;

    /**
     * Covariance (x^2) in measured Right Ascension (X) in deg^2.
     */
    raCov?: number;

    /**
     * Covariance (XY) in measured ra/declination (XY) in deg^2.
     */
    raDeclinationCov?: number;

    /**
     * Spatial covariance of image distribution across horizontal and vertical
     * directions measured in pixels squared.
     */
    rowColCov?: number;

    /**
     * Spatial variance of image distribution in vertical direction measured in pixels
     * squared.
     */
    rowVariance?: number;

    /**
     * Estimated signal-to-noise ratio (SNR) for the total radiometric signal. Under
     * some algorithms, this can be a constant per target (not per observation). Note:
     * this SNR applies to the total signal of the radiometric source (i.e.,
     * Net_Obj_Sig with units DN/sec), not to be confused with the SNR of the signal in
     * the peak pixel (i.e., DN/pixel/sec).
     */
    snrEst?: number;

    /**
     * Fraction of the sun that is illuminating the target object. This indicates if
     * the target is in the Earth’s penumbra or umbra. (It is 0 when object is in umbra
     * and 1 when object is fully illuminated.).
     */
    solarDiskFrac?: number;

    /**
     * Source of the data, will be set to EOObservation source if blank.
     */
    source?: string;

    /**
     * Array of the SpectralFilters keywords, must be present for all values n=1 to
     * numSpectralFilters, in incrementing order of n, and for no other values of n.
     */
    spectralFilters?: Array<string>;

    /**
     * This is the in-band solar magnitude at 1 A.U. Must be present for all values n=1
     * to numSpectralFilters, in incrementing order of n, and for no other values of n.
     * Units = mag.
     */
    spectralFilterSolarMag?: Array<number>;

    /**
     * This is the in-band average irradiance of a 0th mag source. Must be present for
     * all values n=1 to numSpectralFilters, in incrementing order of n, and for no
     * other values of n. Units = W/m2/nm.
     */
    spectralZMFL?: Array<number>;

    /**
     * Azimuth angle of the sun from a ground-based telescope (no atmospheric
     * refraction correction required) the observer with aberration due to the observer
     * velocity and light travel time applied in degrees.
     */
    sunAzimuth?: number;

    /**
     * Elevation angle of the sun from a ground-based telescope (no atmospheric
     * refraction correction required) in degrees.
     */
    sunElevation?: number;

    /**
     * Sun state vector in ECI J2000 coordinate frame in km.
     */
    sunStatePosX?: number;

    /**
     * Sun state vector in ECI J2000 coordinate frame in km.
     */
    sunStatePosY?: number;

    /**
     * Sun state vector in ECI J2000 coordinate frame in km.
     */
    sunStatePosZ?: number;

    /**
     * Sun state vector in ECI J2000 coordinate frame in km/sec.
     */
    sunStateVelX?: number;

    /**
     * Sun state vector in ECI J2000 coordinate frame in km/sec.
     */
    sunStateVelY?: number;

    /**
     * Sun state vector in ECI J2000 coordinate frame in km/sec.
     */
    sunStateVelZ?: number;

    /**
     * An array of surface brightness measurements in magnitudes per square arcsecond
     * from the optical image that show change over an interval of time. The array
     * length is dependent on the length of the streak. The distFromStreakCenter,
     * surfBrightness, and surfBrightnessUnc arrays will match in size.
     */
    surfBrightness?: Array<number>;

    /**
     * An array of surface brightness uncertainty measurements in magnitudes per square
     * arcsecond from the optical image that show change over an interval of time. The
     * array length is dependent on the length of the streak. The distFromStreakCenter,
     * surfBrightness, and surfBrightnessUnc arrays will match in size.
     */
    surfBrightnessUnc?: Array<number>;

    /**
     * Uncertainty in the times reported in UTC in seconds.
     */
    timesUnc?: number;

    /**
     * Time off element set reported in seconds.
     */
    toes?: number;

    /**
     * This is the value for the zero-point calculated for each filter denoted in
     * spectralFilters. It is the difference between the catalog mag and instrumental
     * mag for a set of standard stars. For use with All Sky photometry. Must be
     * present for all values n=1 to numSpectralFilters, in incrementing order of n,
     * and for no other values of n.
     */
    zeroPoints?: Array<number>;

    /**
     * This is the uncertainty in the zero point for the filter denoted in
     * spectralFilters. For use with All Sky photometry. Must be present for all values
     * n=1 to numSpectralFilters, in incrementing order of n, and for no other values
     * of n.
     */
    zeroPointsUnc?: Array<number>;
  }
}

/**
 * Model representation of Earth Orientation Parameters (EOP) produced by the IERS
 * (International Earth Rotation and Reference Systems Service). Earth Orientation
 * Parameters describe the irregularities of the earth's rotation. Technically,
 * they are the parameters which provide the rotation of the ITRS (International
 * Terrestrial Reference System) to the ICRS (International Celestial Reference
 * System) as a function of time. Universal time -- Universal time (UT1) is the
 * time of the earth clock, which performs one revolution in about 24h. It is
 * practically proportional to the sidereal time. The excess revolution time is
 * called length of day (LOD). Coordinates of the pole -- x and y are the
 * coordinates of the Celestial Ephemeris Pole (CEP) relative to the IRP, the IERS
 * Reference Pole. The CEP differs from the instantaneous rotation axis by
 * quasi-diurnal terms with amplitudes under 0.01" (see Seidelmann, 1982). The
 * x-axis is in the direction of the ITRF zero-meridian; the y-axis is in the
 * direction 90 degrees West longitude. Celestial pole offsets -- Celestial pole
 * offsets are described in the IAU Precession and Nutation models. The observed
 * differences with respect to the conventional celestial pole position defined by
 * the models are monitored and reported by the IERS. IERS Bulletins A and B
 * provide current information on the Earth's orientation in the IERS Reference
 * System. This includes Universal Time, coordinates of the terrestrial pole, and
 * celestial pole offsets. Bulletin A gives an advanced solution updated weekly;
 * the standard solution is given monthly in Bulletin B. Fields suffixed with 'B'
 * are Bulletin B values. All solutions are continuous within their respective
 * uncertainties. Bulletin A is issued by the IERS Rapid Service/Prediction Centre
 * at the U.S. Naval Observatory, Washington, DC and Bulletin B is issued by the
 * IERS Earth Orientation Centre at the Paris Observatory. IERS Bulletin A reports
 * the latest determinations for polar motion, UT1-UTC, and nutation offsets at
 * daily intervals based on a combination of contributed analysis results using
 * data from Very Long Baseline Interferometry (VLBI), Satellite Laser Ranging
 * (SLR), Global Positioning System (GPS) satellites, and Lunar Laser Ranging
 * (LLR). Predictions for variations a year into the future are also provided.
 * Meteorological predictions of variations in Atmospheric Angular Momentum (AAM)
 * are used to aid in the prediction of near-term UT1-UTC changes. This publication
 * is prepared by the IERS Rapid Service/Prediction Center.
 */
export interface EopFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Effective date/time for the EOP values in ISO8601 UTC format. The values could
   * be current or predicted.
   */
  eopDate: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * The Bulletin A offset in obliquity dDe1980 with respect to the IAU 1976 Theory
   * of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of
   * arc. Note: dEpsilon is not used when this record represents IAU 2000 data.
   */
  dEpsilon?: number;

  /**
   * The Bulletin B offset in obliquity dDe1980 with respect to the IAU 1976 Theory
   * of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of
   * arc. Note: dEpsilonB is not used when this record represents IAU 2000 data.
   */
  dEpsilonB?: number;

  /**
   * The estimated uncertainty/error in the dEpsilon value in milliseconds of arc.
   */
  dEpsilonUnc?: number;

  /**
   * The Bulletin A offset in longitude dDy1980 with respect to the IAU 1976 Theory
   * of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of
   * arc. Note: dPSI is not used when this record represents IAU 2000 data.
   */
  dPSI?: number;

  /**
   * The Bulletin B offset in longitude dDy1980 with respect to the IAU 1976 Theory
   * of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of
   * arc. Note: dPSIB is not used when this record represents IAU 2000 data.
   */
  dPSIB?: number;

  /**
   * The estimated uncertainty/error in the dPSI value in milliseconds of arc.
   */
  dPSIUnc?: number;

  /**
   * The Bulletin A celestial pole offset along x-axis with respect to the IAU 2000A
   * Theory of Precession and Nutation, measured in milliseconds of arc. Note: dX is
   * not used when this record represents IAU 1980 data.
   */
  dX?: number;

  /**
   * The Bulletin B celestial pole offset along the X-axis with respect to the IAU
   * 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note:
   * dXB is not used when this record represents IAU 1980 data.
   */
  dXB?: number;

  /**
   * The estimated uncertainty/error in the Bulletin A dX value, in milliseconds of
   * arc.
   */
  dXUnc?: number;

  /**
   * The Bulletin A celestial pole offset along y-axis with respect to the IAU 2000A
   * Theory of Precession and Nutation, measured in milliseconds of arc. Note: dY is
   * not used when this record represents IAU 1980 data.
   */
  dY?: number;

  /**
   * The Bulletin B celestial pole offset along the Y-axis with respect to the IAU
   * 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note:
   * dYB is not used when this record represents IAU 1980 data.
   */
  dYB?: number;

  /**
   * The estimated uncertainty/error in the Bulletin A dY value, in milliseconds of
   * arc.
   */
  dYUnc?: number;

  /**
   * Bulletin A length of day or LOD in milliseconds. Universal time (UT1) is the
   * time of the earth clock, which performs one revolution in about 24h. It is
   * practically proportional to the sidereal time. The excess revolution time is
   * called length of day (LOD).
   */
  lod?: number;

  /**
   * The estimated uncertainty/error in the lod value in seconds.
   */
  lodUnc?: number;

  /**
   * Flag indicating Issued (I), or Predicted (P) for this record's nutation values
   * (dPSI and dEpsilon).
   */
  nutationState?: 'I' | 'P';

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Flag indicating Issued (I), or Predicted (P) for this record's polar motion
   * values.
   */
  polarMotionState?: 'I' | 'P';

  /**
   * The Bulletin A X coordinate value of earth polar motion at eopDate. Polar motion
   * of the Earth is the motion of the Earth's rotational axis relative to its crust.
   * This is measured with respect to a reference frame in which the solid Earth is
   * fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame).
   * Measured in arc seconds.
   */
  polarMotionX?: number;

  /**
   * Bulletin B X coordinate value of earth polar motion at eopDate. Polar motion of
   * the Earth is the motion of the Earth's rotational axis relative to its crust.
   * This is measured with respect to a reference frame in which the solid Earth is
   * fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame).
   * Measured in arc seconds.
   */
  polarMotionXB?: number;

  /**
   * Estimated uncertainty/error in polarMotionX value in arc seconds.
   */
  polarMotionXUnc?: number;

  /**
   * The Bulletin A Y coordinate value of earth polar motion at eopDate. Polar motion
   * of the Earth is the motion of the Earth's rotational axis relative to its crust.
   * This is measured with respect to a reference frame in which the solid Earth is
   * fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame).
   * Measured in arc seconds.
   */
  polarMotionY?: number;

  /**
   * Bulletin B Y coordinate value of earth polar motion at eopDate. Polar motion of
   * the Earth is the motion of the Earth's rotational axis relative to its crust.
   * This is measured with respect to a reference frame in which the solid Earth is
   * fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame).
   * Measured in arc seconds.
   */
  polarMotionYB?: number;

  /**
   * Estimated uncertainty/error in polarMotionY value in arc seconds.
   */
  polarMotionYUnc?: number;

  /**
   * The IAU Theory of Precession and Theory of Nutation applied to the data in this
   * record. IAU1980 records employ the IAU 1976 Theory of Precession and IAU 1980
   * Theory of Nutation, and IAU2000 records employ the IAU 2000A Theory of
   * Precession and Nutation.
   */
  precessionNutationStd?: string;

  /**
   * Optional URI location in the document repository of the raw file parsed by the
   * system to produce this record. To download the raw file, prepend
   * https://udl-hostname/scs/download?id= to this value.
   */
  rawFileURI?: string;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;

  /**
   * The difference between the Bulletin A UT1 and UTC time scales as of eopDate in
   * seconds.
   */
  ut1UTC?: number;

  /**
   * The Bulletin B difference between the UT1 and UTC time scales as of eopDate in
   * seconds.
   */
  ut1UTCB?: number;

  /**
   * Flag indicating Issued (I), or Predicted (P) for this record''s Bulletin A
   * UT1-UTC values.
   */
  ut1UTCState?: 'I' | 'P';

  /**
   * The estimated uncertainty/error in the ut1UTC value in seconds.
   */
  ut1UTCUnc?: number;
}

/**
 * An ephemeris record is a position and velocity vector identifying the location
 * and trajectory of an on-orbit object at a specified time. Ephemeris points,
 * including covariance, are in kilometer and second based units in a user
 * specified reference frame, with ECI J2K being preferred. The EphemerisSet ID
 * (esId) links all points associated with an ephemeris set. The 'EphemerisSet'
 * record contains details of the underlying data and propagation models used in
 * the generation of the ephemeris. Ephemeris points must be retrieved by
 * specifying the parent EphemerisSet ID (esId).
 */
export interface EphemerisFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Time associated with the Ephemeris Point, in ISO8601 UTC format.
   */
  ts: string;

  /**
   * Cartesian X position of target, in km, in the specified EphemerisSet
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  xpos: number;

  /**
   * Cartesian X velocity of target, in km/sec, in the specified EphemerisSet
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  xvel: number;

  /**
   * Cartesian Y position of target, in km, in the specified EphemerisSet
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  ypos: number;

  /**
   * Cartesian Y velocity of target, in km/sec, in the specified EphemerisSet
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  yvel: number;

  /**
   * Cartesian Z position of target, in km, in the specified EphemerisSet
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  zpos: number;

  /**
   * Cartesian Z velocity of target, in km/sec, in the specified EphemerisSet
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  zvel: number;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Covariance matrix, in kilometer and second based units, in the specified
   * Ephemeris Set covReferenceFrame. If the covReferenceFrame from the EphemerisSet
   * table is null it is assumed to be J2000. The array values represent the lower
   * triangular half of the position-velocity covariance matrix. The size of the
   * covariance matrix is dynamic, depending on whether the covariance for position
   * only or position & velocity. The covariance elements are position dependent
   * within the array with values ordered as follows:
   *
   * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;y&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;y'&nbsp;z'&nbsp;&nbsp;
   *
   * x&nbsp;&nbsp;&nbsp;&nbsp;1
   *
   * y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
   *
   * z&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;6
   *
   * x'&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;10
   *
   * y'&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
   *
   * z'&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;
   * 21
   *
   * The array containing the covariance matrix elements will be of length 6 for
   * position only covariance, or length 21 for position-velocity covariance. The cov
   * array should contain only the lower left triangle values from top left down to
   * bottom right, in order.
   */
  cov?: Array<number>;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Unique identifier of the parent EphemerisSet, auto-generated by the system. The
   * esId (ephemerisSet id) is used to identify all individual ephemeris states
   * associated with a parent ephemerisSet.
   */
  esId?: string;

  /**
   * Unique identifier of the on-orbit satellite object.
   */
  idOnOrbit?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * Optional identifier provided by ephemeris source to indicate the target object
   * of this ephemeris. This may be an internal identifier and not necessarily map to
   * a valid satellite number.
   */
  origObjectId?: string;

  /**
   * Cartesian X acceleration of target, in km/sec^2, in the specified EphemerisSet
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  xaccel?: number;

  /**
   * Cartesian Y acceleration of target, in km/sec^2, in the specified EphemerisSet
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  yaccel?: number;

  /**
   * Cartesian Z acceleration of target, in km/sec^2, in the specified EphemerisSet
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  zaccel?: number;
}

/**
 * Casualty report and evacuation request. Used to report and request support to
 * evacuate friendly and enemy casualties.
 */
export interface EvacFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative
   * values south of equator).
   */
  pickupLat: number;

  /**
   * WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees
   * (negative values west of Prime Meridian).
   */
  pickupLon: number;

  /**
   * The request time, in ISO 8601 UTC format.
   */
  reqTime: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * The type of this medevac record (REQUEST, RESPONSE).
   */
  type: 'REQUEST' | 'RESPONSE';

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Identity and medical information on the patient to be evacuated.
   */
  casualtyInfo?: Array<EvacFull.CasualtyInfo>;

  /**
   * Radius of circular area about lat/lon point, in meters (1-sigma, if representing
   * error).
   */
  ce?: number;

  /**
   * The contact frequency, in Hz, of the agency or zone controller.
   */
  cntctFreq?: number;

  /**
   * Additional comments for the medevac mission.
   */
  comments?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Data defining any enemy intelligence reported by the requestor.
   */
  enemyData?: Array<EvacFull.EnemyData>;

  /**
   * Unique identifier of a weather report associated with this evacuation.
   */
  idWeatherReport?: string;

  /**
   * Height above lat/lon point, in meters (1-sigma, if representing linear error).
   */
  le?: number;

  /**
   * UUID identifying the medevac mission, which should remain the same on subsequent
   * posts related to the same medevac mission.
   */
  medevacId?: string;

  /**
   * Flag indicating whether the mission requires medical personnel.
   */
  medicReq?: boolean;

  /**
   * The operation type of the evacuation. (NOT SPECIFIED, AIR, GROUND, SURFACE).
   */
  missionType?: string;

  /**
   * Number of ambulatory personnel requiring evacuation.
   */
  numAmbulatory?: number;

  /**
   * The count of people requiring medevac.
   */
  numCasualties?: number;

  /**
   * Number of people Killed In Action.
   */
  numKIA?: number;

  /**
   * Number of littered personnel requiring evacuation.
   */
  numLitter?: number;

  /**
   * Number of people Wounded In Action.
   */
  numWIA?: number;

  /**
   * Amplifying data for the terrain describing important obstacles in or around the
   * zone.
   */
  obstaclesRemarks?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a
   * point height above ellipsoid, and negative values indicate a point height below
   * ellipsoid.
   */
  pickupAlt?: number;

  /**
   * The expected pickup time, in ISO 8601 UTC format.
   */
  pickupTime?: string;

  /**
   * Related document ids.
   */
  relatedDocs?: Array<RelatedDocumentFull>;

  /**
   * The call sign of this medevac requestor.
   */
  reqCallSign?: string;

  /**
   * Externally provided Medevac request number (e.g. MED.1.223908).
   */
  reqNum?: string;

  /**
   * Short description of the terrain features of the pickup location (WOODS, TREES,
   * PLOWED FIELDS, FLAT, STANDING WATER, MARSH, URBAN BUILT-UP AREA, MOUNTAIN, HILL,
   * SAND TD, ROCKY, VALLEY, METAMORPHIC ICE, UNKNOWN TD, SEA, NO STATEMENT).
   */
  terrain?: string;

  /**
   * Amplifying data for the terrain describing any notable additional terrain
   * features.
   */
  terrainRemarks?: string;

  /**
   * The call sign of the zone controller.
   */
  zoneContrCallSign?: string;

  /**
   * Flag indicating that the pickup site is hot and hostiles are in the area.
   */
  zoneHot?: boolean;

  /**
   * The expected marker identifying the pickup site (SMOKE ZONE MARKING, FLARES,
   * MIRROR, GLIDE ANGLE INDICATOR LIGHT, LIGHT ZONE MARKING, PANELS, FIRE, LASER
   * DESIGNATOR, STROBE LIGHTS, VEHICLE LIGHTS, COLORED SMOKE, WHITE PHOSPHERUS,
   * INFRARED, ILLUMINATION, FRATRICIDE FENCE).
   */
  zoneMarking?: string;

  /**
   * Color used for the pickup site marking (RED, WHITE, BLUE, YELLOW, GREEN, ORANGE,
   * BLACK, PURPLE, BROWN, TAN, GRAY, SILVER, CAMOUFLAGE, OTHER COLOR).
   */
  zoneMarkingColor?: string;

  /**
   * The name of the zone.
   */
  zoneName?: string;

  /**
   * The pickup site security (UNKNOWN ZONESECURITY, NO ENEMY, POSSIBLE ENEMY, ENEMY
   * IN AREA USE CAUTION, ENEMY IN AREA ARMED ESCORT REQUIRED).
   */
  zoneSecurity?: string;
}

export namespace EvacFull {
  export interface CasualtyInfo {
    /**
     * The patient age, in years.
     */
    age?: number;

    /**
     * Allergy information.
     */
    allergy?: Array<CasualtyInfo.Allergy>;

    /**
     * The patient blood type (A POS, B POS, AB POS, O POS, A NEG, B NEG, AB NEG, O
     * NEG).
     */
    bloodType?: string;

    /**
     * The body part involved for the patient (HEAD, NECK, ABDOMEN, UPPER EXTREMITIES,
     * BACK, FACE, LOWER EXTREMITIES, FRONT, OBSTETRICAL GYNECOLOGICAL, OTHER BODY
     * PART).
     */
    bodyPart?: string;

    /**
     * Array of the WGS-84 latitude (-90 to 90, negative values south of the equator)
     * in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in
     * degrees, and altitude, in meters, of the burial location. This array must
     * contain a minimum of 2 elements (latitude and longitude), and may contain an
     * optional 3rd element (altitude).
     */
    burialLocation?: Array<number>;

    /**
     * The call sign of this patient.
     */
    callSign?: string;

    /**
     * Unique identifier for the patient care provider.
     */
    careProviderUrn?: string;

    /**
     * Optional casualty key.
     */
    casualtyKey?: string;

    /**
     * The type of medical issue resulting in the need to evacuate the patient (NON
     * BATTLE, CUT, BURN, SICK, FRACTURE, AMPUTATION, PERFORATION, NUCLEAR, EXHAUSTION,
     * BIOLOGICAL, CHEMICAL, SHOCK, PUNCTURE WOUND, OTHER CUT, WOUNDED IN ACTION,
     * DENIAL, COMBAT STRESS).
     */
    casualtyType?: string;

    /**
     * Array of the WGS-84 latitude (-90 to 90, negative values south of the equator)
     * in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in
     * degrees, and altitude, in meters, of the collection point. This array must
     * contain a minimum of 2 elements (latitude and longitude), and may contain an
     * optional 3rd element (altitude).
     */
    collectionPoint?: Array<number>;

    /**
     * Additional comments on the patient's casualty information.
     */
    comments?: string;

    /**
     * Health condition information.
     */
    condition?: Array<CasualtyInfo.Condition>;

    /**
     * The contamination specified for the patient (NONE, RADIATION, BIOLOGICAL,
     * CHEMICAL).
     */
    contamType?: string;

    /**
     * The patient's general medical state (SICK IN QUARTERS, RETURN TO DUTY, EVACUATE
     * WOUNDED, EVACUATE DECEASED, INTERRED).
     */
    disposition?: string;

    /**
     * The expected disposition of this patient (R T D, EVACUATE, EVACUATE TO FORWARD
     * SURGICAL TEAM, EVACUATE TO COMBAT SUPPORT HOSPITAL, EVACUATE TO AERO MEDICAL
     * STAGING FACILITY, EVACUATE TO SUSTAINING BASE MEDICAL TREATMENT FACILITY).
     */
    dispositionType?: string;

    /**
     * Medical condition causation information.
     */
    etiology?: Array<CasualtyInfo.Etiology>;

    /**
     * The required evacuation method for this patient (AIR, GROUND, NOT EVACUATED).
     */
    evacType?: string;

    /**
     * The patient sex (MALE, FEMALE).
     */
    gender?: string;

    /**
     * Health state information.
     */
    healthState?: Array<CasualtyInfo.HealthState>;

    /**
     * Injury specifics.
     */
    injury?: Array<CasualtyInfo.Injury>;

    /**
     * Last 4 characters of the patient social security code, or equivalent.
     */
    last4SSN?: string;

    /**
     * Medication specifics.
     */
    medication?: Array<CasualtyInfo.Medication>;

    /**
     * The patient common or legal name.
     */
    name?: string;

    /**
     * The country code indicating the citizenship of the patient.
     */
    nationality?: string;

    /**
     * The career field of this patient.
     */
    occSpeciality?: string;

    /**
     * The patient service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND
     * MILITARY, FRIEND CIVILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY,
     * HOSTILE CIVILIAN).
     */
    patientIdentity?: string;

    /**
     * The patient service status (US MILITARY, US CIVILIAN, NON US MILITARY, NON US
     * CIVILIAN, ENEMY POW).
     */
    patientStatus?: string;

    /**
     * The patient pay grade or rank designation (O-10, O-9, O-8, O-7, O-6, O-5, O-4,
     * O-3, O-2, O-1, CWO-5, CWO-4, CWO-2, CWO-1, E -9, E-8, E-7, E-6, E-5, E-4, E-3,
     * E-2, E-1, NONE, CIVILIAN).
     */
    payGrade?: string;

    /**
     * The priority of the medevac mission for this patient (URGENT, PRIORITY, ROUTINE,
     * URGENT SURGERY, CONVENIENCE).
     */
    priority?: string;

    /**
     * The method used to generate this medevac report (DEVICE, GROUND COMBAT
     * PERSONNEL, EVACUATION PERSONNEL, ECHELON1 PERSONNEL, ECHELON2 PERSONNEL).
     */
    reportGen?: string;

    /**
     * Datetime of the compiling of the patients casualty report, in ISO 8601 UTC
     * format.
     */
    reportTime?: string;

    /**
     * The patient branch of service (AIR FORCE, ARMY, NAVY, MARINES, CIV, CONTR,
     * UNKNOWN SERVICE).
     */
    service?: string;

    /**
     * Array specifying if any special equipment is need for each of the evacuation of
     * this patient (EXTRACTION EQUIPMENT, SEMI RIGID LITTER, BACKBOARD, CERVICAL
     * COLLAR ,JUNGLE PENETRATOR, OXYGEN, WHOLE BLOOD, VENTILATOR, HOIST, NONE).
     */
    specMedEquip?: Array<string>;

    /**
     * Treatment information.
     */
    treatment?: Array<CasualtyInfo.Treatment>;

    /**
     * Information obtained for vital signs.
     */
    vitalSignData?: Array<CasualtyInfo.VitalSignData>;
  }

  export namespace CasualtyInfo {
    export interface Allergy {
      /**
       * Additional comments on the patient's allergy information.
       */
      comments?: string;

      /**
       * Type of patient allergy (e.g. PENICILLIN, SULFA, OTHER).
       */
      type?: string;
    }

    export interface Condition {
      /**
       * Body part location or body part referenced in condition. Intended as, but not
       * constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE
       * LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW
       * BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
       */
      bodyPart?: string;

      /**
       * Additional comments on the patient's condition.
       */
      comments?: string;

      /**
       * Datetime of the condition diagnosis in ISO 8601 UTC datetime format.
       */
      time?: string;

      /**
       * Health condition assessment. Intended as, but not constrained to, K07.1
       * Condition Type Enumeration (e.g. ACTIVITY HIGH, ACTIVITY LOW, ACTIVITY MEDIUM,
       * ACTIVITY NONE, AVPU ALERT, AVPU ALTERED MENTAL STATE, AVPU PAIN, AVPU
       * UNRESPONSIVE, etc.).
       */
      type?: string;
    }

    export interface Etiology {
      /**
       * The body part or location affected from the etiology. Intended as, but not
       * constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE
       * LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW
       * BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
       */
      bodyPart?: string;

      /**
       * Additional comments on the patient's etiology information.
       */
      comments?: string;

      /**
       * Datetime of the discovery of the etiology state in ISO 8601 UTC format.
       */
      time?: string;

      /**
       * The cause or manner of causation of the medical condition. Intended as, but not
       * constrained to, K07.1 EtiologyType Enumeration (e.g. ASSAULT, BUILDING COLLAPSE,
       * BURN CHEMICAL, BURN ELECTRICAL, BURN, BURN HOT LIQUID, BURN RADIATION, BURN
       * THERMAL, etc.).
       */
      type?: string;
    }

    export interface HealthState {
      /**
       * Medical color code used to quickly identify various medical state (e.g. AMBER,
       * BLACK, BLUE, GRAY, NORMAL, RED).
       */
      healthStateCode?: string;

      /**
       * Medical confidence factor.
       */
      medConfFactor?: number;

      /**
       * Datetime of the health state diagnosis in ISO 8601 UTC datetime format.
       */
      time?: string;

      /**
       * Generalized state of health type (BIOLOGICAL, CHEMICAL, COGNITIVE, HYDRATION,
       * LIFE SIGN, RADIATION, SHOCK, THERMAL).
       */
      type?: string;
    }

    export interface Injury {
      /**
       * Body part location of the injury. Intended as, but not constrained to, K07.1
       * Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT
       * BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW
       * FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
       */
      bodyPart?: string;

      /**
       * Additional comments on the patient's injury information.
       */
      comments?: string;

      /**
       * The time of the injury, in ISO 8601 UTC format.
       */
      time?: string;

      /**
       * Classification of the injury type (ABRASION, AMPUTATION IT, AVULATION,
       * BALLISTIC, BLAST WAVE, BURN 1ST DEGREE, BURN 2ND DEGREE, BURN 3RD DEGREE, BURN
       * INHALATION, BURN LOWER AIRWAY, CHEST FLAIL, CHEST OPEN, DEGLOVING, ECCHYMOSIS,
       * FRACTURE CLOSED, FRACTURE CREPITUS, FRACTURE IT, FRACTURE OPEN, HEMATOMA,
       * IRREGULAR CONSISTENCY, IRREGULAR CONSISTENCY RIDGED, IRREGULAR CONSISTENCY
       * SWOLLEN, IRREGULAR CONSISTENCY SWOLLEN DISTENDED, IRREGULAR CONSISTENCY TENDER,
       * IRREGULAR POSITION, IRREGULAR SHAPE, IRREGULAR SHAPE MISSHAPED, IRREGULAR SHAPE
       * NON SYMMETRICAL, LACERATION, NEUROVASCULAR COMPROMISE, NEUROVASCULAR INTACT,
       * PUNCTURE, SEAT BELT SIGN, STAB, TIC TIM).
       */
      type?: string;
    }

    export interface Medication {
      /**
       * Route of medication delivery (e.g. INJECTION, ORAL, etc.).
       */
      adminRoute?: string;

      /**
       * Body part location or body part referenced for medication. Intended as, but not
       * constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE
       * LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW
       * BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
       */
      bodyPart?: string;

      /**
       * Additional comments on the patient's medication information.
       */
      comments?: string;

      /**
       * Quantity of medicine or drug administered or recommended to be taken at a
       * particular time.
       */
      dose?: string;

      /**
       * The time that the medication was administered in ISO 8601 UTC format.
       */
      time?: string;

      /**
       * The type of medication administered. Intended as, but not constrained to, K07.1
       * Medication Enumeration (CEFOTETAN, ABRASION, ABX, AMOXILOXACIN, ANALGESIC,
       * COLLOID, CRYOPECIPITATES, CRYSTALLOID, EPINEPHRINE, ERTAPENEM, FENTANYL,
       * HEXTEND, LACTATED RINGERS, MOBIC, MORPHINE, NARCOTIC, NS, PENICILLIN, PLASMA,
       * PLATELETS, PRBC, TYLENOL, WHOLE BLOOD MT).
       */
      type?: string;
    }

    export interface Treatment {
      /**
       * Body part location or body part treated or to be treated. Intended as, but not
       * constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE
       * LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW
       * BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
       */
      bodyPart?: string;

      /**
       * Additional comments on the patient's treatment information.
       */
      comments?: string;

      /**
       * Datetime of the treatment in ISO 8601 UTC format.
       */
      time?: string;

      /**
       * Type of treatment administered or to be administered. Intended as, but not
       * constrained to, K07.1 Treatment Type Enumeration (e.g. AIRWAY ADJUNCT, AIRWAY
       * ASSISTED VENTILATION, AIRWAY COMBI TUBE USED, AIRWAY ET NT, AIRWAY INTUBATED,
       * AIRWAY NPA OPA APPLIED, AIRWAY PATIENT, AIRWAY POSITIONAL, AIRWAY SURGICAL CRIC,
       * BREATHING CHEST SEAL, BREATHING CHEST TUBE, etc.).
       */
      type?: string;
    }

    export interface VitalSignData {
      /**
       * Medical confidence factor.
       */
      medConfFactor?: number;

      /**
       * Datetime of the vital sign measurement in ISO 8601 UTC datetime format.
       */
      time?: string;

      /**
       * Patient vital sign measured (e.g. HEART RATE, PULSE RATE, RESPIRATION RATE,
       * TEMPERATURE CORE, etc.).
       */
      vitalSign?: string;

      /**
       * Vital sign value 1. The content of this field is dependent on the type of vital
       * sign being measured (see the vitalSign field).
       */
      vitalSign1?: number;

      /**
       * Vital sign value 2. The content of this field is dependent on the type of vital
       * sign being measured (see the vitalSign field).
       */
      vitalSign2?: number;
    }
  }

  export interface EnemyData {
    /**
     * Directions to known enemies in the operation area (NORTH, NORTHEAST, EAST,
     * SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST, SURROUNDED).
     */
    dirToEnemy?: string;

    /**
     * Comments provided by friendlies about the evac zone.
     */
    friendliesRemarks?: string;

    /**
     * Hot Landing Zone remarks.
     */
    hlzRemarks?: string;

    /**
     * The type of hostile fire received (SMALL ARMS, MORTAR, ARTILLERY, ROCKETS).
     */
    hostileFireType?: string;
  }
}

/**
 * Event Evolution is a unique service supporting the association of UDL records of
 * various data types to a common event or activity. The associations may be a one
 * time summary, aggregating sources of a past event, or of an ongoing activity
 * that evolves over a period of time.
 */
export interface EventEvolutionFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * User-provided unique identifier of this activity or event. This ID should remain
   * the same on subsequent updates in order to associate all records pertaining to
   * the activity or event.
   */
  eventId: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * The actual or estimated start time of the activity or event, in ISO 8601 UTC
   * format.
   */
  startTime: string;

  /**
   * Summary or description of the activity or event.
   */
  summary: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON
   * representation of the geometry/geography, of the image as projected on the
   * ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST
   * or PUT request that also specifies a valid 'area' or 'atext' field.
   */
  agjson?: string;

  /**
   * Number of dimensions of the geometry depicted by region.
   */
  andims?: number;

  /**
   * Geographical spatial_ref_sys for region.
   */
  asrid?: number;

  /**
   * Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known
   * Text representation of the geometry/geography, of the image as projected on the
   * ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored
   * if included with a POST or PUT request that also specifies a valid 'area' field.
   */
  atext?: string;

  /**
   * Type of region as projected on the ground.
   */
  atype?: string;

  /**
   * The activity or event type associated with this record (e.g. BREAKUP, DIRECT
   * FIRE, IED, LAUNCH, PROTEST, etc.). For Significant Activities, recommended but
   * not constrained to, CAMEO.Manual.1.1b3 Chapter 6. Note that the evolution of an
   * event may incorporate records of various types, for example, a LAUNCH event may
   * evolve into a BREAKUP event.
   */
  category?: string;

  /**
   * The country code. This value is typically the ISO 3166 Alpha-2 two-character
   * country code, however it can also represent various consortiums that do not
   * appear in the ISO document. The code must correspond to an existing country in
   * the UDL’s country API. Call udl/country/{code} to get any associated FIPS code,
   * ISO Alpha-3 code, or alternate code values that exist for the specified country
   * code.
   */
  countryCode?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Optional description of the relationship between the records provided in the
   * srcTyps/srcIds and the activity or event.
   */
  dataDescription?: string;

  /**
   * The actual or estimated start time of the activity or event, in ISO 8601 UTC
   * format.
   */
  endTime?: string;

  /**
   * Administrative boundaries of the first sub-national level. Level 1 is simply the
   * largest demarcation under whatever demarcation criteria has been determined by
   * the governing body. For example this may be the state/province in which a
   * terrestrial event takes place, or with which the event is attributed for
   * non-localized or non-terrestrial activity.
   */
  geoAdminLevel1?: string;

  /**
   * Administrative boundaries of the second sub-national level. Level 2 is simply
   * the second largest demarcation under whatever demarcation criteria has been
   * determined by the governing body. For example this may be the city/district in
   * which a terrestrial event takes place, or with which the event is attributed for
   * non-localized or non-terrestrial activity.
   */
  geoAdminLevel2?: string;

  /**
   * Administrative boundaries of the third sub-national level. Level 3 is simply the
   * third largest demarcation under whatever demarcation criteria has been
   * determined by the governing body.
   */
  geoAdminLevel3?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Flag indicating that this record is for the purpose of redacting one or more
   * previously specified records from association with this activity or event. If
   * this flag is set then all records indicated in srcTyps/srcIds should be removed
   * from event association.
   */
  redact?: boolean;

  /**
   * Array of UUIDs of the UDL data records that are related to the determination of
   * this activity or event. See the associated 'srcTyps' array for the specific
   * types of data, positionally corresponding to the UUIDs in this array. The
   * 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps
   * array element for the data type of the UUID and use the appropriate API
   * operation to retrieve that object.
   */
  srcIds?: Array<string>;

  /**
   * Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE,
   * POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that
   * are related to this activity or event. See the associated 'srcIds' array for the
   * record UUIDs, positionally corresponding to the record types in this array. The
   * 'srcTyps' and 'srcIds' arrays must match in size.
   */
  srcTyps?: Array<string>;

  /**
   * The status of this activity or event. (ACTIVE, CONCLUDED, UNKNOWN).
   */
  status?: string;

  /**
   * Optional array of provider/source specific tags for this data, where each
   * element is no longer than 32 characters, used for implementing data owner
   * conditional access controls to restrict access to the data. Should be left null
   * by data providers unless conditional access controls are coordinated with the
   * UDL team.
   */
  tags?: Array<string>;

  /**
   * List of URLs to before/after images of this point of interest entity.
   */
  url?: Array<string>;
}

/**
 * @deprecated
 */
export interface FileData {
  id?: string;

  /**
   * @deprecated
   */
  attributes?: FileData.Attributes;

  targetName?: string;

  targetPath?: string;

  /**
   * @deprecated
   */
  type?: 'file' | 'folder' | 'summary';
}

export namespace FileData {
  /**
   * @deprecated
   */
  export interface Attributes {
    id?: string;

    classification?: string;

    classificationMarking?: string;

    createdBy?: string;

    createdDate?: string;

    deleteOn?: number;

    description?: string;

    docTitle?: string;

    docType?: string;

    doi?: Array<string>;

    ellipseLat?: number;

    ellipseLon?: number;

    fileName?: string;

    intrinsicTitle?: string;

    keywords?: string;

    mediaTitle?: string;

    metaInfo?: string;

    milgrid?: string;

    milgridLat?: number;

    milgridLon?: number;

    modifiedBy?: string;

    modifiedDate?: string;

    name?: string;

    path?: string;

    read?: string;

    searchable?: boolean;

    searchAfter?: string;

    serialNumber?: string;

    size?: number;

    tags?: Array<string>;

    write?: string;
  }
}

/**
 * Flight Plan contains data specifying the details of an intended flight including
 * schedule and expected route.
 */
export interface FlightPlanFull {
  /**
   * The airfield identifier of the arrival location, International Civil Aviation
   * Organization (ICAO) code preferred.
   */
  arrAirfield: string;

  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * The airfield identifier of the departure location, International Civil Aviation
   * Organization (ICAO) code preferred.
   */
  depAirfield: string;

  /**
   * The generation time of this flight plan in ISO 8601 UTC format, with millisecond
   * precision.
   */
  genTS: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system if not provided on
   * create operations.
   */
  id?: string;

  /**
   * The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15
   * EAGLE, KC-130 HERCULES, etc.) of the aircraft associated with this flight plan.
   * Intended as, but not constrained to, MIL-STD-6016 environment dependent specific
   * type designations.
   */
  aircraftMDS?: string;

  /**
   * Collection of air refueling events occurring on this flight.
   */
  airRefuelEvents?: Array<FlightPlanFull.AirRefuelEvent>;

  /**
   * Air Mobility Command (AMC) mission identifier according to Mobility Air Forces
   * (MAF) encode/decode procedures.
   */
  amcMissionId?: string;

  /**
   * Fuel burned from the initial approach point to landing in pounds.
   */
  appLandingFuel?: number;

  /**
   * The first designated alternate arrival airfield, International Civil Aviation
   * Organization (ICAO) code preferred.
   */
  arrAlternate1?: string;

  /**
   * Fuel required to fly to alternate landing site 1 and land in pounds.
   */
  arrAlternate1Fuel?: number;

  /**
   * The second designated alternate arrival airfield, International Civil Aviation
   * Organization (ICAO) code preferred.
   */
  arrAlternate2?: string;

  /**
   * Fuel required to fly to alternate landing site 2 and land in pounds.
   */
  arrAlternate2Fuel?: number;

  /**
   * Additional fuel burned at landing/missed approach for icing during arrival in
   * pounds.
   */
  arrIceFuel?: number;

  /**
   * The arrival runway for this flight.
   */
  arrRunway?: string;

  /**
   * Array of Air Traffic Control (ATC) addresses.
   */
  atcAddresses?: Array<string>;

  /**
   * Average temperature deviation of the primary, divert, and alternate path for the
   * route between first Top of Climb and last Top of Descent in degrees Celsius.
   */
  avgTempDev?: number;

  /**
   * Fuel planned to be burned during the flight in pounds.
   */
  burnedFuel?: number;

  /**
   * The call sign assigned to the aircraft for this flight plan.
   */
  callSign?: string;

  /**
   * Remarks about the planned cargo associated with this flight plan.
   */
  cargoRemark?: string;

  /**
   * Fuel required from brake release to Top of Climb in pounds.
   */
  climbFuel?: number;

  /**
   * Time required from brake release to Top of Climb expressed as HH:MM.
   */
  climbTime?: string;

  /**
   * The amount of contingency fuel in pounds.
   */
  contingencyFuel?: number;

  /**
   * Array of country codes for the countries overflown during this flight in ISO
   * 3166-1 Alpha-2 format.
   */
  countryCodes?: Array<string>;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * The designated alternate departure airfield, International Civil Aviation
   * Organization (ICAO) code preferred.
   */
  depAlternate?: string;

  /**
   * The depressurization fuel required to fly from the Equal Time Point to the Last
   * Suitable/First Suitable airfield at depressurization altitude in pounds.
   */
  depressFuel?: number;

  /**
   * The departure runway for this flight.
   */
  depRunway?: string;

  /**
   * The percent degrade due to drag for this aircraft.
   */
  dragIndex?: number;

  /**
   * Additional fuel burned at landing/missed approach for an early descent in
   * pounds.
   */
  earlyDescentFuel?: number;

  /**
   * Total endurance time based on the fuel on board expressed as HH:MM.
   */
  enduranceTime?: string;

  /**
   * Fuel required to fly from Top of Climb to Top of Descent in pounds.
   */
  enrouteFuel?: number;

  /**
   * Time required to fly from Top of Climb to Top of Descent expressed as HH:MM.
   */
  enrouteTime?: string;

  /**
   * The list of equipment on the aircraft as defined in the Flight Information
   * Publications (FLIP) General Planning (GP) manual.
   */
  equipment?: string;

  /**
   * The estimated time of departure for the aircraft, in ISO 8601 UTC format, with
   * millisecond precision.
   */
  estDepTime?: string;

  /**
   * Array of Extended Operations (ETOPS) adequate landing airfields that are within
   * the mission region.
   */
  etopsAirfields?: Array<string>;

  /**
   * Array of Extended Operations (ETOPS) alternate suitable landing airfields that
   * are within the mission region.
   */
  etopsAltAirfields?: Array<string>;

  /**
   * The Extended Operations (ETOPS) rating used to calculate this flight plan.
   */
  etopsRating?: string;

  /**
   * The Extended Operations (ETOPS) validity window for the alternate airfield.
   */
  etopsValWindow?: string;

  /**
   * The source ID of the flight plan from the generating system.
   */
  externalId?: string;

  /**
   * Collection of messages associated with this flight plan indicating the severity,
   * the point where the message was generated, the path (Primary, Alternate, etc.),
   * and the text of the message.
   */
  flightPlanMessages?: Array<FlightPlanFull.FlightPlanMessage>;

  /**
   * Collection of point groups generated for this flight plan. Groups include point
   * sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point
   * (ETP).
   */
  flightPlanPointGroups?: Array<FlightPlanFull.FlightPlanPointGroup>;

  /**
   * Collection of waypoints associated with this flight plan.
   */
  flightPlanWaypoints?: Array<FlightPlanFull.FlightPlanWaypoint>;

  /**
   * The flight rules this flight plan is being filed under.
   */
  flightRules?: string;

  /**
   * The type of flight (MILITARY, CIVILIAN, etc).
   */
  flightType?: string;

  /**
   * The fuel degrade percentage used for this mission.
   */
  fuelDegrade?: number;

  /**
   * The GPS Receiver Autonomous Integrity Monitoring (RAIM) message. A RAIM system
   * assesses the integrity of the GPS signals. This system predicts outages for a
   * specified geographical area. These predictions are based on the location, path,
   * and scheduled GPS satellite outages.
   */
  gpsRAIM?: string;

  /**
   * Additional fuel burned at Top of Climb in pounds.
   */
  holdDownFuel?: number;

  /**
   * Additional fuel burned at the destination for holding in pounds.
   */
  holdFuel?: number;

  /**
   * Additional time for holding at the destination expressed as HH:MM.
   */
  holdTime?: string;

  /**
   * The UDL unique identifier of the aircraft associated with this flight plan.
   */
  idAircraft?: string;

  /**
   * The UDL unique identifier of the arrival airfield associated with this flight
   * plan.
   */
  idArrAirfield?: string;

  /**
   * The UDL unique identifier of the departure airfield associated with this flight
   * plan.
   */
  idDepAirfield?: string;

  /**
   * The amount of identified extra fuel carried and not available in the burn plan
   * in pounds.
   */
  identExtraFuel?: number;

  /**
   * The UDL unique identifier of the aircraft sortie associated with this flight
   * plan.
   */
  idSortie?: string;

  /**
   * A character string representation of the initial filed cruise speed for this
   * flight (prepended values of K, N, and M represent kilometers per hour, knots,
   * and Mach, respectively).
   */
  initialCruiseSpeed?: string;

  /**
   * A character string representation of the initial filed altitude level for this
   * flight (prepended values of F, S, A, and M represent flight level in hundreds of
   * feet, standard metric level in tens of meters, altitude in hundreds of feet, and
   * altitude in tens of meters, respectively).
   */
  initialFlightLevel?: string;

  /**
   * Fuel planned to be remaining on the airplane at landing in pounds.
   */
  landingFuel?: number;

  /**
   * The leg number of this flight plan.
   */
  legNum?: number;

  /**
   * The minimum fuel on board required to divert in pounds.
   */
  minDivertFuel?: number;

  /**
   * The mission index value for this mission. The mission index is the ratio of
   * time-related cost of aircraft operation to the cost of fuel.
   */
  msnIndex?: number;

  /**
   * Additional remarks for air traffic control for this flight.
   */
  notes?: string;

  /**
   * The number of aircraft flying this flight plan.
   */
  numAircraft?: number;

  /**
   * Additional fuel burned at Top of Descent for the operational condition in
   * pounds.
   */
  opConditionFuel?: number;

  /**
   * Operating weight of the aircraft in pounds.
   */
  opWeight?: number;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * Air Traffic Control address filing the flight plan.
   */
  originator?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Remarks from the planners concerning this flight plan.
   */
  plannerRemark?: string;

  /**
   * Total of all fuel required to complete the flight in pounds, including fuel to
   * be dispensed on a refueling mission.
   */
  rampFuel?: number;

  /**
   * Total fuel remaining at alternate landing site 1 in pounds.
   */
  remAlternate1Fuel?: number;

  /**
   * Total fuel remaining at alternate landing site 2 in pounds.
   */
  remAlternate2Fuel?: number;

  /**
   * The amount of reserve fuel in pounds.
   */
  reserveFuel?: number;

  /**
   * The 1801 fileable route of flight string for this flight. The route of flight
   * string contains route designators, significant points, change of speed/altitude,
   * change of flight rules, and cruise climbs.
   */
  routeString?: string;

  /**
   * Name of the planned Standard Instrument Departure (SID) procedure.
   */
  sid?: string;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * Name of the planned Standard Terminal Arrival (STAR) procedure.
   */
  star?: string;

  /**
   * Status of this flight plan (e.g., ACTIVE, APPROVED, PLANNED, etc.).
   */
  status?: string;

  /**
   * The tail number of the aircraft associated with this flight plan.
   */
  tailNumber?: string;

  /**
   * Fuel at takeoff, which is calculated as the ramp fuel minus the taxi fuel in
   * pounds.
   */
  takeoffFuel?: number;

  /**
   * Fuel required to start engines and taxi to the end of the runway in pounds.
   */
  taxiFuel?: number;

  /**
   * Additional fuel burned at Top of Descent for thunderstorm avoidance in pounds.
   */
  thunderAvoidFuel?: number;

  /**
   * Fuel remaining at Top of Climb in pounds.
   */
  tocFuel?: number;

  /**
   * Additional fuel burned at Top of Climb for icing in pounds.
   */
  tocIceFuel?: number;

  /**
   * Fuel remaining at Top of Descent in pounds.
   */
  todFuel?: number;

  /**
   * Additional fuel burned at Top of Descent for icing in pounds.
   */
  todIceFuel?: number;

  /**
   * The amount of unidentified extra fuel required to get to min landing in pounds.
   */
  unidentExtraFuel?: number;

  /**
   * The amount of unusable fuel in pounds.
   */
  unusableFuel?: number;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;

  /**
   * The wake turbulence category for this flight. The categories are assigned by the
   * International Civil Aviation Organization (ICAO) and are based on maximum
   * certified takeoff mass for the purpose of separating aircraft in flight due to
   * wake turbulence. Valid values include LIGHT, MEDIUM, LARGE, HEAVY, and SUPER.
   */
  wakeTurbCat?: string;

  /**
   * Wind factor for the first half of the route. This is the average wind factor
   * from first Top of Climb to the mid-time of the entire route in knots. A positive
   * value indicates a headwind, while a negative value indicates a tailwind.
   */
  windFac1?: number;

  /**
   * Wind factor for the second half of the route. This is the average wind factor
   * from the mid-time of the entire route to last Top of Descent in knots. A
   * positive value indicates a headwind, while a negative value indicates a
   * tailwind.
   */
  windFac2?: number;

  /**
   * Average wind factor from Top of Climb to Top of Descent in knots. A positive
   * value indicates a headwind, while a negative value indicates a tailwind.
   */
  windFacAvg?: number;

  /**
   * The date and time the weather valid period ends in ISO 8601 UTC format, with
   * millisecond precision.
   */
  wxValidEnd?: string;

  /**
   * The date and time the weather valid period begins in ISO 8601 UTC format, with
   * millisecond precision.
   */
  wxValidStart?: string;
}

export namespace FlightPlanFull {
  /**
   * Collection of air refueling events occurring on this flight.
   */
  export interface AirRefuelEvent {
    /**
     * Additional degrade for air refueling, cumulative with fuelDegrade field percent.
     */
    arDegrade?: number;

    /**
     * Fuel onloaded (use positive numbers) or fuel offloaded (use negative numbers) in
     * pounds.
     */
    arExchangedFuel?: number;

    /**
     * The number of this air refueling event within the flight plan.
     */
    arNum?: number;

    /**
     * Fuel required to fly from air refueling exit point to air refueling divert
     * alternate airfield in pounds.
     */
    divertFuel?: number;

    /**
     * Fuel remaining at the air refueling exit in pounds.
     */
    exitFuel?: number;
  }

  /**
   * Collection of messages associated with this flight plan indicating the severity,
   * the point where the message was generated, the path (Primary, Alternate, etc.),
   * and the text of the message.
   */
  export interface FlightPlanMessage {
    /**
     * The text of the message.
     */
    msgText?: string;

    /**
     * The flight path that generated the message (PRIMARY, ALTERNATE, etc.).
     */
    routePath?: string;

    /**
     * The severity of the message.
     */
    severity?: string;

    /**
     * The waypoint number for which the message was generated, or enter "PLAN" for a
     * message impacting the entire route.
     */
    wpNum?: string;
  }

  /**
   * Collection of point groups generated for this flight plan. Groups include point
   * sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point
   * (ETP).
   */
  export interface FlightPlanPointGroup {
    /**
     * Average fuel flow at which the fuel was calculated in pounds per hour.
     */
    avgFuelFlow?: number;

    /**
     * Average wind factor from the Extended Operations (ETOPS) point to the recovery
     * airfield in knots.
     */
    etopsAvgWindFactor?: number;

    /**
     * Distance from the Extended Operations (ETOPS) point to the recovery airfield in
     * nautical miles.
     */
    etopsDistance?: number;

    /**
     * Fuel required to fly from the Extended Operations (ETOPS) point to the recovery
     * airfield in pounds.
     */
    etopsReqFuel?: number;

    /**
     * Temperature deviation from the Extended Operations (ETOPS) point to the recovery
     * airfield in degrees Celsius.
     */
    etopsTempDev?: number;

    /**
     * Time to fly from the Extended Operations (ETOPS) point to the recovery airfield
     * expressed in HH:MM format.
     */
    etopsTime?: string;

    /**
     * Array of point data for this Point Group.
     */
    flightPlanPoints?: Array<FlightPlanPointGroup.FlightPlanPoint>;

    /**
     * Total time from takeoff when the point is reached expressed in HH:MM format.
     */
    fromTakeoffTime?: string;

    /**
     * Average wind factor from the Equal Time Point (ETP) to the first suitable
     * airfield in knots.
     */
    fsafAvgWindFactor?: number;

    /**
     * Distance from the Equal Time Point (ETP) to the first suitable airfield in
     * nautical miles.
     */
    fsafDistance?: number;

    /**
     * Fuel required to fly from the Equal Time Point (ETP) to the first suitable
     * airfield in pounds.
     */
    fsafReqFuel?: number;

    /**
     * Temperature deviation from the Equal Time Point (ETP) to the first suitable
     * airfield in degrees Celsius.
     */
    fsafTempDev?: number;

    /**
     * Time to fly from the Equal Time Point (ETP) to the first suitable airfield
     * expressed in HH:MM format.
     */
    fsafTime?: string;

    /**
     * Flight level of the point at which the fuel was calculated in feet.
     */
    fuelCalcAlt?: number;

    /**
     * True airspeed at which the fuel was calculated in knots.
     */
    fuelCalcSpd?: number;

    /**
     * Average wind factor from the Equal Time Point (ETP) to the last suitable
     * airfield in knots.
     */
    lsafAvgWindFactor?: number;

    /**
     * Distance from the Equal Time Point (ETP) to the last suitable airfield in
     * nautical miles.
     */
    lsafDistance?: number;

    /**
     * Name of the last suitable airfield, International Civil Aviation Organization
     * (ICAO) code preferred.
     */
    lsafName?: string;

    /**
     * Fuel required to fly from the Equal Time Point (ETP) to the last suitable
     * airfield in pounds.
     */
    lsafReqFuel?: number;

    /**
     * Temperature deviation from the Equal Time Point (ETP) to the last suitable
     * airfield in degrees Celsius.
     */
    lsafTempDev?: number;

    /**
     * Time to fly from the Equal Time Point (ETP) to the last suitable airfield
     * expressed in HH:MM format.
     */
    lsafTime?: string;

    /**
     * Amount of planned fuel on board when the point is reached in pounds.
     */
    plannedFuel?: number;

    /**
     * Name of the point group, usually Extended Operations (ETOPS), Critical Fuel
     * Point, and Equal Time Point (ETP) sections.
     */
    pointGroupName?: string;

    /**
     * Specifies which Point Group case requires the most fuel.
     */
    worstFuelCase?: string;
  }

  export namespace FlightPlanPointGroup {
    /**
     * Array of point data for this Point Group.
     */
    export interface FlightPlanPoint {
      /**
       * Estimated Time of Arrival (ETA) at this point in ISO 8601 UTC format, with
       * millisecond precision.
       */
      fppEta?: string;

      /**
       * WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative
       * values south of equator).
       */
      fppLat?: number;

      /**
       * WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative
       * values west of Prime Meridian).
       */
      fppLon?: number;

      /**
       * Fuel required at this point to execute an Equal Time Point (ETP) or Extended
       * Operations (ETOPS) plan in pounds.
       */
      fppReqFuel?: number;

      /**
       * Name of this point.
       */
      pointName?: string;
    }
  }

  /**
   * Collection of waypoints associated with this flight plan.
   */
  export interface FlightPlanWaypoint {
    /**
     * Points are designated by type as either a comment point or a waypoint. A comment
     * point conveys important information about the point for pilots but is not
     * entered into a flight management system. A waypoint is a point that is entered
     * into a flight management system and/or filed with Air Traffic Control.
     */
    type: string;

    /**
     * Name of the point. The name of a comment point identifies important information
     * about that point, e.g. Top of Climb. The name of a waypoint identifies the
     * location of that point.
     */
    waypointName: string;

    /**
     * The air-to-air Tactical Air Navigation (TACAN) channels used by the
     * receiver/tanker during air refueling.
     */
    aaTacanChannel?: string;

    /**
     * The air distance of this leg in nautical miles.
     */
    airDistance?: number;

    /**
     * The flight path flown for this leg.
     */
    airway?: string;

    /**
     * Altitude of a level, point, or object measured in feet above mean sea level.
     */
    alt?: number;

    /**
     * The ID of the air refueling track/anchor or fixed track.
     */
    arId?: string;

    /**
     * Point identifying an air refueling track/anchor or fixed track.
     */
    arpt?: string;

    /**
     * Actual Time of Arrival (ATA) at this waypoint in ISO 8601 UTC format, with
     * millisecond precision.
     */
    ata?: string;

    /**
     * The average calibrated airspeed (CAS) for this leg in knots.
     */
    avgCalAirspeed?: number;

    /**
     * The average drift angle for this leg in degrees from true north.
     */
    avgDriftAng?: number;

    /**
     * The average ground speed for this leg in knots.
     */
    avgGroundSpeed?: number;

    /**
     * The average true airspeed (TAS) for this leg in knots.
     */
    avgTrueAirspeed?: number;

    /**
     * The average wind direction for this leg in degrees from true north.
     */
    avgWindDir?: number;

    /**
     * The average wind speed for this leg in knots.
     */
    avgWindSpeed?: number;

    /**
     * The day low level altitude in feet above sea level for the leg ending at this
     * waypoint.
     */
    dayLowAlt?: number;

    /**
     * Estimated Time of Arrival (ETA) at this waypoint in ISO 8601 UTC format, with
     * millisecond precision.
     */
    eta?: string;

    /**
     * The amount of fuel onloaded or offloaded at this waypoint in pounds (negative
     * value for offload).
     */
    exchangedFuel?: number;

    /**
     * The leg fuel flow in pounds per hour.
     */
    fuelFlow?: number;

    /**
     * The icing intensity classification for this flight (LIGHT, MODERATE, etc).
     */
    iceCat?: string;

    /**
     * WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative
     * values south of equator).
     */
    lat?: number;

    /**
     * The planned alternate leg based on user-defined constraints, International Civil
     * Aviation Organization (ICAO) code preferred.
     */
    legAlternate?: string;

    /**
     * The percent degrade due to drag for this aircraft for this leg.
     */
    legDragIndex?: number;

    /**
     * The fuel degrade percentage used for this leg.
     */
    legFuelDegrade?: number;

    /**
     * The average Mach speed for this leg.
     */
    legMach?: number;

    /**
     * The mission index value for this leg. The mission index is the ratio of
     * time-related cost of aircraft operation to the cost of fuel.
     */
    legMsnIndex?: number;

    /**
     * The wind factor for this leg in knots. A positive value indicates a headwind,
     * while a negative value indicates a tailwind.
     */
    legWindFac?: number;

    /**
     * WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative
     * values west of Prime Meridian).
     */
    lon?: number;

    /**
     * The magnetic course at leg midpoint in degrees from true north.
     */
    magCourse?: number;

    /**
     * The magnetic heading at leg midpoint in degrees from true north.
     */
    magHeading?: number;

    /**
     * The magnetic variation for this leg in degrees.
     */
    magVar?: number;

    /**
     * Navigational Aid (NAVAID) identification code.
     */
    navaid?: string;

    /**
     * The night low level altitude in feet above sea level for the leg ending at this
     * waypoint.
     */
    nightLowAlt?: number;

    /**
     * The night vision goggle low level altitude in feet above sea level for the leg
     * ending at this waypoint.
     */
    nvgLowAlt?: number;

    /**
     * The wind direction at this specific point in degrees from true north.
     */
    pointWindDir?: number;

    /**
     * The wind velocity at this specific point in knots.
     */
    pointWindSpeed?: number;

    /**
     * The primary UHF radio frequency used for the air refueling track or anchor in
     * megahertz.
     */
    priFreq?: number;

    /**
     * The secondary UHF radio frequency used for the air refueling track or anchor in
     * megahertz.
     */
    secFreq?: number;

    /**
     * Tactical Air Navigation (TACAN) channel for the Navigational Aid (NAVAID).
     */
    tacanChannel?: string;

    /**
     * Average temperature deviation from standard day profile for this leg in degrees
     * Celsius.
     */
    tempDev?: number;

    /**
     * The thunderstorm intensity classification for this flight (LIGHT, MODERATE,
     * etc).
     */
    thunderCat?: string;

    /**
     * The total air distance to this waypoint in nautical miles.
     */
    totalAirDistance?: number;

    /**
     * The total distance flown to this waypoint calculated from point of departure in
     * nautical miles.
     */
    totalFlownDistance?: number;

    /**
     * The total distance remaining from this waypoint to the point of arrival in
     * nautical miles.
     */
    totalRemDistance?: number;

    /**
     * The total fuel remaining at this waypoint in pounds.
     */
    totalRemFuel?: number;

    /**
     * The total time accumulated from takeoff to this waypoint expressed as HH:MM.
     */
    totalTime?: string;

    /**
     * The total time remaining from this waypoint to the point of arrival expressed as
     * HH:MM.
     */
    totalTimeRem?: string;

    /**
     * The total fuel used to this waypoint from point of departure in pounds.
     */
    totalUsedFuel?: number;

    /**
     * The total weight of the aircraft at this waypoint in pounds.
     */
    totalWeight?: number;

    /**
     * The true course at leg midpoint in degrees from true north.
     */
    trueCourse?: number;

    /**
     * The turbulence intensity classification for this flight (LIGHT, MODERATE, etc).
     */
    turbCat?: string;

    /**
     * VHF Omni-directional Range (VOR) frequency for the Navigational Aid (NAVAID) in
     * megahertz.
     */
    vorFreq?: number;

    /**
     * The waypoint number on the route. Comment points do not get a waypoint number.
     */
    waypointNum?: number;

    /**
     * The zone/leg distance flown in nautical miles.
     */
    zoneDistance?: number;

    /**
     * The amount of fuel used on this zone/leg in pounds.
     */
    zoneFuel?: number;

    /**
     * The time to fly this zone/leg in minutes.
     */
    zoneTime?: number;
  }
}

/**
 * Model representation of a location, which is a specific fixed point on the earth
 * and is used to denote the locations of fixed sensors, operating units, etc.
 */
export interface LocationAbridged {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Location name.
   */
  name: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Altitude of the location, in kilometers.
   */
  altitude?: number;

  /**
   * The country code. This value is typically the ISO 3166 Alpha-2 two-character
   * country code, however it can also represent various consortiums that do not
   * appear in the ISO document. The code must correspond to an existing country in
   * the UDL’s country API. Call udl/country/{code} to get any associated FIPS code,
   * ISO Alpha-3 code, or alternate code values that exist for the specified country
   * code.
   */
  countryCode?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Unique identifier of the location, auto-generated by the system.
   */
  idLocation?: string;

  /**
   * WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values
   * south of equator).
   */
  lat?: number;

  /**
   * WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative
   * values west of Prime Meridian).
   */
  lon?: number;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;
}

/**
 * Model representation of a location, which is a specific fixed point on the earth
 * and is used to denote the locations of fixed sensors, operating units, etc.
 */
export interface LocationFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Location name.
   */
  name: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Altitude of the location, in kilometers.
   */
  altitude?: number;

  /**
   * The country code. This value is typically the ISO 3166 Alpha-2 two-character
   * country code, however it can also represent various consortiums that do not
   * appear in the ISO document. The code must correspond to an existing country in
   * the UDL’s country API. Call udl/country/{code} to get any associated FIPS code,
   * ISO Alpha-3 code, or alternate code values that exist for the specified country
   * code.
   */
  countryCode?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Unique identifier of the location, auto-generated by the system.
   */
  idLocation?: string;

  /**
   * WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values
   * south of equator).
   */
  lat?: number;

  /**
   * WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative
   * values west of Prime Meridian).
   */
  lon?: number;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

/**
 * Collection providing maximum on ground (MOG) information for specific aircraft
 * at the site associated with this SiteOperations record.
 */
export interface MaximumOnGroundFull {
  /**
   * The Model Design Series (MDS) designation of the aircraft to which this maximum
   * on ground (MOG) data pertains.
   */
  aircraftMDS?: string;

  /**
   * Maximum on ground (MOG) number of contingent aircraft based on spacing and
   * manpower, for the aircraft type specified.
   */
  contingencyMOG?: number;

  /**
   * The name of the person who made the most recent change to this maximum on ground
   * data.
   */
  mogLastChangedBy?: string;

  /**
   * The datetime of the most recent change made to this maximum on ground data, in
   * ISO 8601 UTC format with millisecond precision.
   */
  mogLastChangedDate?: string;

  /**
   * Maximum on ground (MOG) number of parking wide-body aircraft based on spacing
   * and manpower, for the aircraft type specified.
   */
  wideParkingMOG?: number;

  /**
   * Maximum on ground (MOG) number of working wide-body aircraft based on spacing
   * and manpower, for the aircraft type specified.
   */
  wideWorkingMOG?: number;
}

/**
 * Model representation of client generated notification data. Contains a message
 * type and message body field to store notification information.
 */
export interface NotificationFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * The message body content as a text string, XML, JSON, etc. If JSON is used for
   * the msgBody, it should be 'inline' with the notification message JSON (without
   * quotation marks or escape characters). Size of the msg body cannot be over 1MB.
   */
  msgBody: string;

  /**
   * Source provided message type.
   */
  msgType: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * The date and time the notification was created, auto-generated by the system.
   */
  createdAt?: string;

  /**
   * The user that created the notification.
   */
  createdBy?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * Optional array of provider/source specific tags for this data, used for
   * implementing data owner conditional access controls to restrict access to the
   * data.
   */
  tags?: Array<string>;
}

/**
 * These services provide spacecraft positional data derived from on-board
 * navigational sensors. Navigational points are provided in kilometers and in a
 * user specified reference frame, with ECI J2K being preferred.
 */
export interface OnboardnavigationFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Start time of the sensor data, in ISO 8601 UTC format.
   */
  startTime: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Arrays of spacecraft delta position (X, Y, Z), in km, in the specified
   * referenceFrame, between the onboard state and the last accepted sensor position.
   */
  deltaPos?: Array<Array<number>>;

  /**
   * End time of the sensor data, in ISO 8601 UTC format.
   */
  endTime?: string;

  /**
   * Unique identifier of the parent EphemerisSet, if this data is correlated with an
   * Ephemeris. If multiple nav sensor records are required, this ID may be
   * associated with each of those records if each is synced to the ephemeris points.
   */
  esId?: string;

  /**
   * Unique identifier of the primary satellite on-orbit object.
   */
  idOnOrbit?: string;

  /**
   * Unique identifier of the last onboard state vector.
   */
  idStateVector?: string;

  /**
   * Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame,
   * based on the onboard magnetometer, at each epoch.
   */
  mag?: Array<Array<number>>;

  /**
   * Model object representing on-orbit objects or satellites in the system.
   */
  onOrbit?: OnorbitFull;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Optional identifier provided by the data source to indicate the target object of
   * this record. This may be an internal identifier and not necessarily map to a
   * valid satellite number.
   */
  origObjectId?: string;

  /**
   * The reference frame in which the sensor derived positions are provided. If the
   * referenceFrame is null it is assumed to be J2000. Note that this frame is
   * assumed to apply to all of the sensor data in this record. If onboard sensors
   * process positional estimates in different frames then separate records should be
   * generated.
   */
  referenceFrame?: 'J2000' | 'EFG/TDR' | 'ECR/ECEF' | 'TEME' | 'ITRF' | 'GCRF';

  /**
   * Satellite/catalog number of the target on-orbit object.
   */
  satNo?: number;

  /**
   * The last load time of the current star catalog onboard this spacecraft.
   */
  starCatLoadTime?: string;

  /**
   * The name or identifier the star catalog in use.
   */
  starCatName?: string;

  /**
   * Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame,
   * based on the onboard star tracker, at each epoch.
   */
  starTracker?: Array<Array<number>>;

  /**
   * Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame,
   * based on the onboard sun sensor, at each epoch.
   */
  sunSensor?: Array<Array<number>>;

  /**
   * Array of epochs of the observations, in ISO 8601 UTC format. The epochs are
   * assumed to correspond to all sensor data in this record. If sensors do not share
   * a common epoch then separate records should be generated.
   */
  ts?: Array<string>;
}

export interface OnorbitAntennaFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * ID of the antenna.
   */
  idAntenna: string;

  /**
   * ID of the on-orbit object.
   */
  idOnOrbit: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Model representation of information on on-orbit/spacecraft communication
   * antennas. A spacecraft may have multiple antennas and each antenna can have
   * multiple 'details' records compiled by different sources.
   */
  antenna?: AntennaFull;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

export interface OnorbitBatteryFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * ID of the battery.
   */
  idBattery: string;

  /**
   * ID of the on-orbit object.
   */
  idOnOrbit: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Model representation of specific spacecraft battery types.
   */
  battery?: BatteryFull;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * The number of batteries on the spacecraft of the type identified by idBattery.
   */
  quantity?: number;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

/**
 * Contains details of the OnOrbit object.
 */
export interface OnorbitDetailsFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * UUID of the parent Onorbit record.
   */
  idOnOrbit: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Mass of fuel and disposables at launch time in kilograms.
   */
  additionalMass?: number;

  /**
   * The radius used for long-term debris environment projection analyses that is not
   * as conservative as COLA Radius, in meters.
   */
  adeptRadius?: number;

  /**
   * The total beginning of life delta V of the spacecraft, in meters per second.
   */
  bolDeltaV?: number;

  /**
   * Spacecraft beginning of life fuel mass, in orbit, in kilograms.
   */
  bolFuelMass?: number;

  /**
   * Average cross sectional area of the bus in meters squared.
   */
  busCrossSection?: number;

  /**
   * Type of the bus on the spacecraft.
   */
  busType?: string;

  /**
   * Maximum dimension of the box circumscribing the spacecraft (d = sqrt(a*a + b*b +
   * c\*c) where a is the tip-to-tip dimension, b and c are perpendicular to that.)
   * in meters.
   */
  colaRadius?: number;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Average cross sectional area in meters squared.
   */
  crossSection?: number;

  /**
   * The estimated total current mass of the spacecraft, in kilograms.
   */
  currentMass?: number;

  /**
   * The 1-sigma uncertainty of the total spacecraft delta V, in meters per second.
   */
  deltaVUnc?: number;

  /**
   * Array of the estimated mass of each deployable object, in kilograms. Must
   * contain the same number of elements as the value of numDeployable.
   */
  depEstMasses?: Array<number>;

  /**
   * Array of the 1-sigma uncertainty of the mass for each deployable object, in
   * kilograms. Must contain the same number of elements as the value of
   * numDeployable.
   */
  depMassUncs?: Array<number>;

  /**
   * Array of satellite deployable objects. Must contain the same number of elements
   * as the value of numDeployable.
   */
  depNames?: Array<string>;

  /**
   * GEO drift rate, if applicable in degrees per day.
   */
  driftRate?: number;

  /**
   * Spacecraft dry mass (without fuel or disposables) in kilograms.
   */
  dryMass?: number;

  /**
   * Estimated maximum burn duration for the object, in seconds.
   */
  estDeltaVDuration?: number;

  /**
   * Estimated remaining fuel for the object in kilograms.
   */
  fuelRemaining?: number;

  /**
   * GEO slot if applicable, in degrees. -180 (West of Prime Meridian) to 180 degrees
   * (East of Prime Meridian). Prime Meridian is 0.
   */
  geoSlot?: number;

  /**
   * The name of the source who last provided an observation for this idOnOrbit.
   */
  lastObSource?: string;

  /**
   * Time of last reported observation for this object in ISO 8601 UTC with
   * microsecond precision.
   */
  lastObTime?: string;

  /**
   * Nominal mass of spacecraft and fuel at launch time, in kilograms.
   */
  launchMass?: number;

  /**
   * Maximum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
   */
  launchMassMax?: number;

  /**
   * Minimum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
   */
  launchMassMin?: number;

  /**
   * Boolean indicating whether a spacecraft is maneuverable. Note that a spacecraft
   * may have propulsion capability but may not be maneuverable due to lack of fuel,
   * anomalous condition, or other operational constraints.
   */
  maneuverable?: boolean;

  /**
   * Maximum delta V available for this on-orbit spacecraft, in meters per second.
   */
  maxDeltaV?: number;

  /**
   * Maximum dimension across the spacecraft (e.g., tip-to-tip across the solar panel
   * arrays) in meters.
   */
  maxRadius?: number;

  /**
   * Array of the type of missions the spacecraft performs. Must contain the same
   * number of elements as the value of numMission.
   */
  missionTypes?: Array<string>;

  /**
   * The number of sub-satellites or deployable objects on the spacecraft.
   */
  numDeployable?: number;

  /**
   * The number of distinct missions the spacecraft performs.
   */
  numMission?: number;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Current/latest radar cross section in meters squared.
   */
  rcs?: number;

  /**
   * Maximum radar cross section in meters squared.
   */
  rcsMax?: number;

  /**
   * Mean radar cross section in meters squared.
   */
  rcsMean?: number;

  /**
   * Minimum radar cross section in meters squared.
   */
  rcsMin?: number;

  /**
   * The reference source, sources, or URL from which the data in this record was
   * obtained.
   */
  refSource?: string;

  /**
   * Spacecraft deployed area of solar array in meters squared.
   */
  solarArrayArea?: number;

  /**
   * The 1-sigma uncertainty of the total spacecraft mass, in kilograms.
   */
  totalMassUnc?: number;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;

  /**
   * Current/latest visual magnitude in M.
   */
  vismag?: number;

  /**
   * Maximum visual magnitude in M.
   */
  vismagMax?: number;

  /**
   * Mean visual magnitude in M.
   */
  vismagMean?: number;

  /**
   * Minimum visual magnitude in M.
   */
  vismagMin?: number;
}

/**
 * Model object representing on-orbit objects or satellites in the system.
 */
export interface OnorbitFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Satellite/Catalog number of the target on-orbit object.
   */
  satNo: number;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Alternate name of the on-orbit object.
   */
  altName?: string;

  /**
   * Read-only collection of antennas on this on-orbit object.
   */
  antennas?: Array<OnorbitAntennaFull>;

  /**
   * Read-only collection of batteries on this on-orbit object.
   */
  batteries?: Array<OnorbitBatteryFull>;

  /**
   * Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without
   * State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic,
   * Heliocentric, Interplanetary, Lagrangian, Docked).
   */
  category?:
    | 'Unknown'
    | 'On-Orbit'
    | 'Decayed'
    | 'Cataloged Without State'
    | 'Launch Nominal'
    | 'Analyst Satellite'
    | 'Cislunar'
    | 'Lunar'
    | 'Hyperbolic'
    | 'Heliocentric'
    | 'Interplanetary'
    | 'Lagrangian'
    | 'Docked';

  /**
   * Common name of the on-orbit object.
   */
  commonName?: string;

  /**
   * Constellation to which this satellite belongs.
   */
  constellation?: string;

  /**
   * The country code. This value is typically the ISO 3166 Alpha-2 two-character
   * country code, however it can also represent various consortiums that do not
   * appear in the ISO document. The code must correspond to an existing country in
   * the UDL’s country API. Call udl/country/{code} to get any associated FIPS code,
   * ISO Alpha-3 code, or alternate code values that exist for the specified country
   * code.
   */
  countryCode?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Date of decay.
   */
  decayDate?: string;

  /**
   * Read-only entity details (only returned/used on detail queries).
   */
  entityCollection?: Array<OnorbitFull.EntityCollection>;

  /**
   * For the public catalog, the idOnOrbit is typically the satellite number as a
   * string, but may be a UUID for analyst or other unknown or untracked satellites,
   * auto-generated by the system.
   */
  idOnOrbit?: string;

  /**
   * International Designator, typically of the format YYYYLLLAAA, where YYYY is the
   * launch year, LLL is the sequential launch number of that year, and AAA is an
   * optional launch piece designator for the launch.
   */
  intlDes?: string;

  /**
   * Date of launch.
   */
  launchDate?: string;

  /**
   * Id of the associated launchSite entity.
   */
  launchSiteId?: string;

  /**
   * Estimated lifetime of the on-orbit payload, if known.
   */
  lifetimeYears?: number;

  /**
   * Mission number of the on-orbit object.
   */
  missionNumber?: string;

  /**
   * Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED,
   * UNKNOWN.
   */
  objectType?: 'ROCKET BODY' | 'DEBRIS' | 'PAYLOAD' | 'PLATFORM' | 'MANNED' | 'UNKNOWN';

  /**
   * Read-only collection of details for this on-orbit object.
   */
  onorbitDetails?: Array<OnorbitDetailsFull>;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Read-only collection of solar arrays on this on-orbit object.
   */
  solarArrays?: Array<OnorbitSolarArrayFull>;

  /**
   * Read-only collection of thrusters (engines) on this on-orbit object.
   */
  thrusters?: Array<OnorbitThrusterFull>;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

export namespace OnorbitFull {
  /**
   * An entity is a generic representation of any object within a space/SSA system
   * such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An
   * entity can have an operating unit, a location (if terrestrial), and statuses.
   */
  export interface EntityCollection {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * Unique entity name.
     */
    name: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR,
     * LASEREMITTER, NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).
     */
    type:
      | 'AIRCRAFT'
      | 'BUS'
      | 'COMM'
      | 'IR'
      | 'LASEREMITTER'
      | 'NAVIGATION'
      | 'ONORBIT'
      | 'RFEMITTER'
      | 'SCIENTIFIC'
      | 'SENSOR'
      | 'SITE'
      | 'VESSEL';

    /**
     * The country code. This value is typically the ISO 3166 Alpha-2 two-character
     * country code, however it can also represent various consortiums that do not
     * appear in the ISO document. The code must correspond to an existing country in
     * the UDL’s country API. Call udl/country/{code} to get any associated FIPS code,
     * ISO Alpha-3 code, or alternate code values that exist for the specified country
     * code.
     */
    countryCode?: string;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Unique identifier of the record.
     */
    idEntity?: string;

    /**
     * Unique identifier of the entity location, if terrestrial/fixed.
     */
    idLocation?: string;

    /**
     * Onorbit identifier if this entity is part of an on-orbit object. For the public
     * catalog, the idOnOrbit is typically the satellite number as a string, but may be
     * a UUID for analyst or other unknown or untracked satellites.
     */
    idOnOrbit?: string;

    /**
     * Unique identifier of the associated operating unit object.
     */
    idOperatingUnit?: string;

    /**
     * Model representation of a location, which is a specific fixed point on the earth
     * and is used to denote the locations of fixed sensors, operating units, etc.
     */
    location?: Shared.LocationFull;

    /**
     * Model representation of a unit or organization which operates or controls a
     * space-related Entity such as an on-orbit payload, a sensor, etc. A contact may
     * belong to an organization.
     */
    operatingUnit?: Shared.OperatingunitFull;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * Type of organization which owns this entity (e.g. Commercial, Government,
     * Academic, Consortium, etc).
     */
    ownerType?: 'Commercial' | 'Government' | 'Academic' | 'Consortium' | 'Other';

    /**
     * Read-only collection of RF bands utilized by this entity for communication
     * and/or operation.
     */
    rfBands?: Array<Shared.RfBandFull>;

    /**
     * Read-only collection of statuses which can be collected by multiple sources.
     */
    statusCollection?: Array<Shared.StatusFull>;

    /**
     * Boolean indicating if this entity is taskable.
     */
    taskable?: boolean;

    /**
     * Terrestrial identifier of this entity, if applicable.
     */
    terrestrialId?: string;

    /**
     * Time the row was last updated in the database, auto-populated by the system.
     */
    updatedAt?: string;

    /**
     * Application user who updated the row in the database, auto-populated by the
     * system.
     */
    updatedBy?: string;

    /**
     * List of URLs to additional details/documents for this entity.
     */
    urls?: Array<string>;
  }
}

export interface OnorbitSolarArrayFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * ID of the on-orbit object.
   */
  idOnOrbit: string;

  /**
   * ID of the SolarArray.
   */
  idSolarArray: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * The number of solar arrays on the spacecraft of the type identified by
   * idSolarArray.
   */
  quantity?: number;

  /**
   * Model representation of information on on-orbit/spacecraft solar arrays. A
   * spacecraft may have multiple solar arrays and each solar array can have multiple
   * 'details' records compiled by different sources.
   */
  solarArray?: SolarArrayFull;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

export interface OnorbitThrusterFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * ID of the Engine.
   */
  idEngine: string;

  /**
   * ID of the on-orbit object.
   */
  idOnOrbit: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Known launch vehicle engines and their performance characteristics and limits. A
   * launch vehicle has 1 to many engines per stage.
   */
  engine?: Engine;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * The number of engines/thrusters on the spacecraft of the type identified by
   * idEngine.
   */
  quantity?: number;

  /**
   * The type of thruster associated with this record (e.g. LAE, Hydrazine REA,
   * etc.).
   */
  type?: string;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

/**
 * Status information for OnorbitThruster objects.
 */
export interface OnorbitthrusterstatusFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * ID of the associated OnorbitThruster record. This ID can be used to obtain
   * additional information on an onorbit thruster object using the 'get by ID'
   * operation (e.g. /udl/onorbitthruster/{id}). For example, the OnorbitThruster
   * object with idOnorbitThruster = abc would be queried as
   * /udl/onorbitthruster/abc.
   */
  idOnorbitThruster: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Datetime of the thruster status observation in ISO 8601 UTC datetime format with
   * millisecond precision.
   */
  statusTime: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Estimated available delta-velocity for this thruster, in meters per second.
   */
  estDeltaV?: number;

  /**
   * Total fuel mass available for this thruster's type, in kilograms.
   */
  fuelMass?: number;

  /**
   * 1-sigma uncertainty of the total fuel mass available for this thruster type, in
   * kilograms.
   */
  fuelMassUnc?: number;

  /**
   * Specific impulse for this thruster, in seconds.
   */
  isp?: number;

  /**
   * Maximum available delta-velocity for this thruster, in meters per second.
   */
  maxDeltaV?: number;

  /**
   * Minimum available delta-velocity for this thruster, in meters per second.
   */
  minDeltaV?: number;

  /**
   * Identifier of this thruster.
   */
  name?: string;

  /**
   * Flag indicating if this thruster is operational.
   */
  operational?: boolean;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Average available propellant mass for this thruster's type, in kilograms.
   */
  propMassAvg?: number;

  /**
   * Maximum available propellant mass for this thruster's type, in kilograms.
   */
  propMassMax?: number;

  /**
   * Median available propellant mass for this thruster's type, in kilograms.
   */
  propMassMedian?: number;

  /**
   * Minimum available propellant mass for this thruster's type, in kilograms.
   */
  propMassMin?: number;

  /**
   * Maximum available thrust for this thruster, in newtons.
   */
  thrustMax?: number;

  /**
   * Total delta-velocity available for this thruster's type, in meters per second.
   */
  totalDeltaV?: number;
}

/**
 * A collection containing the operational start and stop times scheduled for the
 * day of the week specified.
 */
export interface OperatingHoursFull {
  /**
   * The Zulu (UTC) operational start time, expressed in ISO 8601 format as HH:MM.
   */
  opStartTime?: string;

  /**
   * The Zulu (UTC) operational stop time, expressed in ISO 8601 format as HH:MM.
   */
  opStopTime?: string;
}

/**
 * Remarks contain amplifying information for a specific service. The information
 * may contain context and interpretations for consumer use.
 */
export interface OperatingUnitRemarkFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * The ID of the operating unit to which this remark applies.
   */
  idOperatingUnit: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * The text of the remark.
   */
  text: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Unique identifier of the unit remark record from the originating system.
   */
  altRmkId?: string;

  /**
   * The remark type identifier. For example, the Mobility Air Forces (MAF) remark
   * code, defined in the Airfield Suitability and Restriction Report (ASRR).
   */
  code?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * The name of the remark.
   */
  name?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The remark type (e.g. Caution, Information, Misc, Restriction, etc.).
   */
  type?: string;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

/**
 * Model representation of a unit or organization which operates or controls a
 * space-related Entity such as an on-orbit payload, a sensor, etc. A contact may
 * belong to an organization.
 */
export interface OperatingunitFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Name of the operating unit.
   */
  name: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic
   * coordinates reside.
   */
  airDefArea?: string;

  /**
   * The DoD Standard country code designator for the country or political entity to
   * which the operating unit owes its allegiance. This field will be set to "OTHR"
   * if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
   */
  allegiance?: string;

  /**
   * Specifies an alternate allegiance code if the data provider code is not part of
   * an official Country Code standard such as ISO-3166 or FIPS. This field will be
   * set to the value provided by the source and should be used for all Queries
   * specifying allegiance.
   */
  altAllegiance?: string;

  /**
   * Specifies an alternate country code if the data provider code is not part of an
   * official Country Code standard such as ISO-3166 or FIPS. This field will be set
   * to the value provided by the source and should be used for all Queries
   * specifying a Country Code.
   */
  altCountryCode?: string;

  /**
   * Unique identifier of the operating unit record from the originating system.
   */
  altOperatingUnitId?: string;

  /**
   * Indicates the importance of the operating unit to the OES or MIR system. This
   * data element is restricted to update by DIA (DB-4). Valid values are: 0 - Does
   * not meet criteria above 1 - Primary importance to system 2 - Secondary
   * importance to system 3 - Tertiary importance to system O - Other. Explain in
   * Remarks.
   */
  classRating?: string;

  /**
   * The physical manner of being or state of existence of the operating unit. A
   * physical condition that must be considered in the determining of a course of
   * action. The specific usage and enumerations contained in this field may be found
   * in the documentation provided in the referenceDoc field. If referenceDoc not
   * provided, users may consult the data provider.
   */
  condition?: string;

  /**
   * Availability of the operating unit relative to its condition. Indicates the
   * reason the operating unit is not fully operational. The specific usage and
   * enumerations contained in this field may be found in the documentation provided
   * in the referenceDoc field. If referenceDoc not provided, users may consult the
   * data provider.
   */
  conditionAvail?: string;

  /**
   * Indicates any of the magnitudes that serve to define the position of a point by
   * reference to a fixed figure, system of lines, etc.
   *
   * Pos. 1-2. Latitude Degrees [00-90]
   *
   * Pos. 3-4. Latitude Minutes [00-59]
   *
   * Pos. 5-6. Latitude Seconds [00-59]
   *
   * Pos. 7-9. Latitude Thousandths Of Seconds [000-999]
   *
   * Pos. 10. Latitude Hemisphere [NS]
   *
   * Pos. 11-13. Longitude Degrees [00-180]
   *
   * Pos. 14-15. Longitude Minutes [00-59]
   *
   * Pos. 16-17. Longitude Seconds [00-59]
   *
   * Pos. 18-20. Longitude Thousandths Of Seconds [000-999]
   *
   * Pos. 21. Longitude Hemisphere [EW]
   *
   * Pos. 1-21. Unknown Latitude and Unknown Longitude [000000000U000000000U]
   */
  coord?: string;

  /**
   * A mathematical model of the earth used to calculate coordinates on a map. US
   * Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied
   * countries with local datums. The datum must be specified to ensure accuracy of
   * coordinates. The specific usage and enumerations contained in this field may be
   * found in the documentation provided in the referenceDoc field. If referenceDoc
   * not provided, users may consult the data provider.
   */
  coordDatum?: string;

  /**
   * Indicates the plus or minus error assessed against the method used to derive the
   * coordinate.
   */
  coordDerivAcc?: number;

  /**
   * The DoD Standard country code designator for the country or political entity to
   * which the operating unit geographic coordinates reside . This field will be set
   * to "OTHR" if the source value does not match a UDL country code value
   * (ISO-3166-ALPHA-2).
   */
  countryCode?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * A code describing the amount of operating unit participation in a deployment.
   * The specific usage and enumerations contained in this field may be found in the
   * documentation provided in the referenceDoc field. If referenceDoc not provided,
   * users may consult the data provider.
   */
  deployStatus?: string;

  /**
   * Description of the operating unit.
   */
  description?: string;

  /**
   * Combat status of a divisional or equivalent operating unit. Currently, this data
   * element applies only to operating units of the Former Soviet Union. The specific
   * usage and enumerations contained in this field may be found in the documentation
   * provided in the referenceDoc field. If referenceDoc not provided, users may
   * consult the data provider.
   */
  divCat?: string;

  /**
   * Organizational level of the operating unit. The specific usage and enumerations
   * contained in this field may be found in the documentation provided in the
   * referenceDoc field. If referenceDoc not provided, users may consult the data
   * provider.
   */
  echelon?: string;

  /**
   * Indicates the major group or level to which an echelon belongs. The specific
   * usage and enumerations contained in this field may be found in the documentation
   * provided in the referenceDoc field. If referenceDoc not provided, users may
   * consult the data provider.
   */
  echelonTier?: string;

  /**
   * Ground elevation of the geographic coordinates referenced to (above or below)
   * Mean Sea Level (MSL) vertical datum.
   */
  elevMsl?: number;

  /**
   * Indicates the confidence level expressed as a percent that a specific geometric
   * spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned
   * to within a specified vertical accuracy.
   */
  elevMslConfLvl?: number;

  /**
   * Indicates the plus or minus error assessed against the method used to derive the
   * elevation.
   */
  elevMslDerivAcc?: number;

  /**
   * The Intelligence Confidence Level or the Reliability/degree of confidence that
   * the analyst has assigned to the data within this record. The numerical range is
   * from 1 to 9 with 1 representing the highest confidence level.
   */
  eval?: number;

  /**
   * The country code of the observed flag flown.
   */
  flagFlown?: string;

  /**
   * Naval fleet to which an operating unit is assigned. The specific usage and
   * enumerations contained in this field may be found in the documentation provided
   * in the referenceDoc field. If referenceDoc not provided, users may consult the
   * data provider.
   */
  fleetId?: string;

  /**
   * An aggregation of military units within a single service (i.e., ARMY, AIR FORCE,
   * etc.) which operates under a single authority to accomplish a common mission.
   * The specific usage and enumerations contained in this field may be found in the
   * documentation provided in the referenceDoc field. If referenceDoc not provided,
   * users may consult the data provider.
   */
  force?: string;

  /**
   * The specific name for a given force. For example, Force = ADF (Air Defense
   * Force) and Force Name = Army Air Defense Force.
   */
  forceName?: string;

  /**
   * Functional Production Area (FPA) under the Shared Production Program (SPP).
   * Producers are defined per country per FPA. The specific usage and enumerations
   * contained in this field may be found in the documentation provided in the
   * referenceDoc field. If referenceDoc not provided, users may consult the data
   * provider.
   */
  fpa?: string;

  /**
   * Principal combat-related role that an operating unit is organized, structured
   * and equipped to perform. Or, the specialized military or paramilitary branch in
   * which an individual serves, their specialization. The specific usage and
   * enumerations contained in this field may be found in the documentation provided
   * in the referenceDoc field. If referenceDoc not provided, users may consult the
   * data provider.
   */
  functRole?: string;

  /**
   * The distance between Mean Sea Level and a referenced ellipsoid.
   */
  geoidalMslSep?: number;

  /**
   * Unique identifier of the contact for this operating unit.
   */
  idContact?: string;

  /**
   * Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER,
   * NEUTRAL, PENDING, SUSPECT, UNKNOWN):
   *
   * ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics,
   * behavior, and/or origin.
   *
   * FRIEND: Track object supporting friendly forces and belonging to a declared
   * friendly nation or entity.
   *
   * HOSTILE: Track object belonging to an opposing nation, party, group, or entity
   * deemed to contribute to a threat to friendly forces or their mission due to its
   * behavior, characteristics, nationality, or origin.
   *
   * FAKER: Friendly track, object, or entity acting as an exercise hostile.
   *
   * JOKER: Friendly track, object, or entity acting as an exercise suspect.
   *
   * NEUTRAL: Track object whose characteristics, behavior, nationality, and/or
   * origin indicate that it is neither supporting nor opposing friendly forces or
   * their mission.
   *
   * PENDING: Track object which has not been evaluated.
   *
   * SUSPECT: Track object deemed potentially hostile due to the object
   * characteristics, behavior, nationality, and/or origin.
   *
   * UNKNOWN: Track object which has been evaluated and does not meet criteria for
   * any standard identity.
   */
  ident?: string;

  /**
   * Unique identifier of the location record for this operating unit.
   */
  idLocation?: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  idOperatingUnit?: string;

  /**
   * Unique identifier of the organization record for this operating unit.
   */
  idOrganization?: string;

  /**
   * WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values
   * south of equator).
   */
  lat?: number;

  /**
   * Model representation of a location, which is a specific fixed point on the earth
   * and is used to denote the locations of fixed sensors, operating units, etc.
   */
  location?: LocationFull;

  /**
   * Location name for the coordinates.
   */
  locName?: string;

  /**
   * Indicates the reason that the operating unit is at that location. The specific
   * usage and enumerations contained in this field may be found in the documentation
   * provided in the referenceDoc field. If referenceDoc not provided, users may
   * consult the data provider.
   */
  locReason?: string;

  /**
   * WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative
   * values west of Prime Meridian).
   */
  lon?: number;

  /**
   * This field contains a value indicating whether the record is a master unit
   * record (True) or a detail record (False). Master records contain basic
   * information that does not change over time for each unit that has been selected
   * to be projected.
   */
  masterUnit?: boolean;

  /**
   * The Military Grid Reference System is the geocoordinate standard used by NATO
   * militaries for locating points on Earth. The MGRS is derived from the Universal
   * Transverse Mercator (UTM) grid system and the Universal Polar Stereographic
   * (UPS) grid system, but uses a different labeling convention. The MGRS is used as
   * geocode for the entire Earth. Example of an milgrid coordinate, or grid
   * reference, would be 4QFJ12345678, which consists of three parts: 4Q (grid zone
   * designator, GZD) FJ (the 100,000-meter square identifier) 12345678 (numerical
   * location; easting is 1234 and northing is 5678, in this case specifying a
   * location with 10 m resolution).
   */
  milGrid?: string;

  /**
   * Indicates the grid system used in the development of the milGrid coordinates.
   * Values are:
   *
   * UPS - Universal Polar System
   *
   * UTM - Universal Transverse Mercator
   */
  milGridSys?: string;

  /**
   * Indicates the principal type of mission that an operating unit is organized and
   * equipped to perform. The specific usage and enumerations contained in this field
   * may be found in the documentation provided in the referenceDoc field. If
   * referenceDoc not provided, users may consult the data provider.
   */
  msnPrimary?: string;

  /**
   * Indicates the principal specialty type of mission that an operating unit is
   * organized and equipped to perform. The specific usage and enumerations contained
   * in this field may be found in the documentation provided in the referenceDoc
   * field. If referenceDoc not provided, users may consult the data provider.
   */
  msnPrimarySpecialty?: string;

  /**
   * Remarks contain amplifying information for a specific service. The information
   * may contain context and interpretations for consumer use.
   */
  operatingUnitRemarks?: Array<OperatingUnitRemarkFull>;

  /**
   * The Degree to which an operating unit is ready to perform the overall
   * operational mission(s) for which it was organized and equipped. The specific
   * usage and enumerations contained in this field may be found in the documentation
   * provided in the referenceDoc field. If referenceDoc not provided, users may
   * consult the data provider.
   */
  operStatus?: string;

  /**
   * An organization such as a corporation, manufacturer, consortium, government,
   * etc. An organization may have parent and child organizations as well as link to
   * a former organization if this org previously existed as another organization.
   */
  organization?: OrganizationFull;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * Political subdivision in which the geographic coordinates reside. The specific
   * usage and enumerations contained in this field may be found in the documentation
   * provided in the referenceDoc field. If referenceDoc not provided, users may
   * consult the data provider.
   */
  polSubdiv?: string;

  /**
   * Validity and currency of the data in the record to be used in conjunction with
   * the other elements in the record as defined by SOPs. Values are: A - Active I -
   * Inactive K - Acknowledged L - Local Q - A nominated (NOM) or Data Change Request
   * (DCR) record R - Production reduced by CMD decision W - Working Record.
   */
  recStatus?: string;

  /**
   * The reference documentiation that specifies the usage and enumerations contained
   * in this record. If referenceDoc not provided, users may consult the data
   * provider.
   */
  referenceDoc?: string;

  /**
   * Responsible Producer - Organization that is responsible for the maintenance of
   * the record.
   */
  resProd?: string;

  /**
   * Date on which the data in the record was last reviewed by the responsible
   * analyst for accuracy and currency. This date cannot be greater than the current
   * date.
   */
  reviewDate?: string;

  /**
   * This field contains a value indicating whether the record is a stylized
   * operating unit record (True) or a regular operating unit record (False). A
   * stylized operating unit is a type of operating unit with one set of equipment
   * that can be assigned to one or more superiors. A stylized operating unit is
   * generally useful for lower echelon operating units where the number of operating
   * units and types of equipment are equal for multiple organizations. In lieu of
   * creating unique operating unit records for each operating unit, a template is
   * created for the operating unit and its equipment. This template enables the user
   * to assign the operating unit to multiple organizations.
   */
  stylizedUnit?: boolean;

  /**
   * A standard scheme for symbol coding enabling the transfer, display and use of
   * symbols and graphics among information systems, as per MIL-STD 2525B, and
   * supported by the element AFFILIATION.
   */
  symCode?: string;

  /**
   * An optional identifier for this operating unit that may be composed from items
   * such as the originating organization, allegiance, one-up number, etc.
   */
  unitIdentifier?: string;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;

  /**
   * Universal Transverse Mercator (UTM) grid coordinates. Pos. 1-2, UTM Zone Column
   * [01-60 Pos. 3, UTM Zone Row [C-HJ-NP-X] Pos. 4, UTM False Easting [0-9] Pos.
   * 5-9, UTM Meter Easting [0-9][0-9][0-9][0-9][0-9] Pos. 10-11, UTM False Northing
   * [0-9][0-9] Pos. 12-16, UTM Meter Northing [0-9][0-9][0-9][0-9][0-9].
   */
  utm?: string;

  /**
   * World Aeronautical Chart identifier for the area in which a designated operating
   * unit is located.
   */
  wac?: string;
}

/**
 * Collection providing relevant information in the event of deviations/exceptions
 * to normal operations.
 */
export interface OperationalDeviationFull {
  /**
   * The Model Design Series (MDS) designation of the aircraft affected by this
   * operational deviation.
   */
  affectedAircraftMDS?: string;

  /**
   * The maximum on ground (MOG) number for aircraft affected by this operational
   * deviation.
   */
  affectedMOG?: number;

  /**
   * On ground time for aircraft affected by this operational deviation.
   */
  aircraftOnGroundTime?: string;

  /**
   * Rest time for crew affected by this operational deviation.
   */
  crewRestTime?: string;

  /**
   * The name of the person who made the most recent change to this
   * OperationalDeviation data.
   */
  odLastChangedBy?: string;

  /**
   * The datetime of the most recent change made to this OperationalDeviation data,
   * in ISO 8601 UTC format with millisecond precision.
   */
  odLastChangedDate?: string;

  /**
   * Text remark regarding this operational deviation.
   */
  odRemark?: string;
}

/**
 * Collection of planning information associated with this SiteOperations record.
 */
export interface OperationalPlanningFull {
  /**
   * The end date of this operational planning, in ISO8601 UTC format with
   * millisecond precision.
   */
  opEndDate?: string;

  /**
   * The name of the person who made the most recent change made to this
   * OperationalPlanning data.
   */
  opLastChangedBy?: string;

  /**
   * The datetime of the most recent change made to this OperationalPlanning data, in
   * ISO8601 UTC format with millisecond precision.
   */
  opLastChangedDate?: string;

  /**
   * Remark text regarding this operation planning.
   */
  opRemark?: string;

  /**
   * The person, unit, organization, etc. responsible for this operation planning.
   */
  opSource?: string;

  /**
   * The start date of this operational planning, in ISO8601 UTC format with
   * millisecond precision.
   */
  opStartDate?: string;

  /**
   * The status of this operational planning.
   */
  opStatus?: string;
}

/**
 * Model representation of additional detailed organization data as collected by a
 * particular source.
 */
export interface OrganizationDetailsFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Unique identifier of the parent organization.
   */
  idOrganization: string;

  /**
   * Organization details name.
   */
  name: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Street number of the organization.
   */
  address1?: string;

  /**
   * Field for additional organization address information such as PO Box and unit
   * number.
   */
  address2?: string;

  /**
   * Contains the third line of address information for an organization.
   */
  address3?: string;

  /**
   * Designated broker for this organization.
   */
  broker?: string;

  /**
   * For organizations of type CORPORATION, the name of the Chief Executive Officer.
   */
  ceo?: string;

  /**
   * For organizations of type CORPORATION, the name of the Chief Financial Officer.
   */
  cfo?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * For organizations of type CORPORATION, the name of the Chief Technology Officer.
   */
  cto?: string;

  /**
   * Organization description.
   */
  description?: string;

  /**
   * For organizations of type CORPORATION, the company EBITDA value as of
   * financialYearEndDate in US Dollars.
   */
  ebitda?: number;

  /**
   * Listed contact email address for the organization.
   */
  email?: string;

  /**
   * For organizations of type CORPORATION, notes on company financials.
   */
  financialNotes?: string;

  /**
   * For organizations of type CORPORATION, the effective financial year end date for
   * revenue, EBITDA, and profit values.
   */
  financialYearEndDate?: string;

  /**
   * Satellite fleet planning notes for this organization.
   */
  fleetPlanNotes?: string;

  /**
   * Former organization ID (if this organization previously existed as another
   * organization).
   */
  formerOrgId?: string;

  /**
   * Total number of FTEs in this organization.
   */
  ftes?: number;

  /**
   * Administrative boundaries of the first sub-national level. Level 1 is simply the
   * largest demarcation under whatever demarcation criteria has been determined by
   * the governing body. For example, this may be a state or province.
   */
  geoAdminLevel1?: string;

  /**
   * Administrative boundaries of the second sub-national level. Level 2 is simply
   * the second largest demarcation under whatever demarcation criteria has been
   * determined by the governing body. For example, this may be a county or district.
   */
  geoAdminLevel2?: string;

  /**
   * Administrative boundaries of the third sub-national level. Level 3 is simply the
   * third largest demarcation under whatever demarcation criteria has been
   * determined by the governing body. For example, this may be a city or township.
   */
  geoAdminLevel3?: string;

  /**
   * Mass ranking for this organization.
   */
  massRanking?: number;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Parent organization ID of this organization if it is a child organization.
   */
  parentOrgId?: string;

  /**
   * A postal code, such as PIN or ZIP Code, is a series of letters or digits or both
   * included in the postal address of the organization.
   */
  postalCode?: string;

  /**
   * For organizations of type CORPORATION, total annual profit as of
   * financialYearEndDate in US Dollars.
   */
  profit?: number;

  /**
   * For organizations of type CORPORATION, total annual revenue as of
   * financialYearEndDate in US Dollars.
   */
  revenue?: number;

  /**
   * Revenue ranking for this organization.
   */
  revenueRanking?: number;

  /**
   * The name of the risk manager for the organization.
   */
  riskManager?: string;

  /**
   * Notes on the services provided by the organization.
   */
  servicesNotes?: string;

  /**
   * Optional array of provider/source specific tags for this data, where each
   * element is no longer than 32 characters, used for implementing data owner
   * conditional access controls to restrict access to the data. Should be left null
   * by data providers unless conditional access controls are coordinated with the
   * UDL team.
   */
  tags?: Array<string>;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

/**
 * An organization such as a corporation, manufacturer, consortium, government,
 * etc. An organization may have parent and child organizations as well as link to
 * a former organization if this org previously existed as another organization.
 */
export interface OrganizationFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Organization name.
   */
  name: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Type of organization (e.g. GOVERNMENT, CORPORATION, CONSORTIUM, ACADEMIC).
   */
  type: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Boolean indicating if this organization is currently active.
   */
  active?: boolean;

  /**
   * Subtype or category of the organization (e.g. Private company, stock market
   * quoted company, subsidiary, goverment department/agency, etc).
   */
  category?: string;

  /**
   * Country of the physical location of the organization. This value is typically
   * the ISO 3166 Alpha-2 two-character country code. However, it can also represent
   * various consortiums that do not appear in the ISO document. The code must
   * correspond to an existing country in the UDL’s country API. Call
   * udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or
   * alternate code values that exist for the specified country code.
   */
  countryCode?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Organization description.
   */
  description?: string;

  /**
   * Optional externally provided identifier for this row.
   */
  externalId?: string;

  /**
   * Country of registration or ownership of the organization. This value is
   * typically the ISO 3166 Alpha-2 two-character country code, however it can also
   * represent various consortiums that do not appear in the ISO document. The code
   * must correspond to an existing country in the UDL’s country API. Call
   * udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or
   * alternate code values that exist for the specified country code.
   */
  nationality?: string;

  /**
   * Read-only collection of additional OrganizationDetails by various sources for
   * this organization, ignored on create/update. These details must be created
   * separately via the /udl/organizationdetails operations.
   */
  organizationDetails?: Array<OrganizationDetailsFull>;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

export interface ParamDescriptor {
  classificationMarking?: string;

  derived?: boolean;

  description?: string;

  elemMatch?: boolean;

  format?: string;

  histQuerySupported?: boolean;

  histTupleSupported?: boolean;

  name?: string;

  required?: boolean;

  restQuerySupported?: boolean;

  restTupleSupported?: boolean;

  type?: string;

  unitOfMeasure?: string;

  utcDate?: boolean;
}

/**
 * Collection detailing operational pathways at the Site associated with this
 * SiteOperations record.
 */
export interface PathwayFull {
  /**
   * Text defining this pathway from its constituent parts.
   */
  pwDefinition?: string;

  /**
   * The name of the person who made the most recent change to this Pathway data.
   */
  pwLastChangedBy?: string;

  /**
   * The datetime of the most recent change made to this Pathway data, in ISO 8601
   * UTC format with millisecond precision.
   */
  pwLastChangedDate?: string;

  /**
   * The type of paths that constitute this pathway.
   */
  pwType?: string;

  /**
   * The intended use of this pathway.
   */
  pwUsage?: string;
}

export interface RelatedDocumentFull {
  /**
   * List of data sources related to this document.
   */
  dataSourceRefs?: Array<SofDataSourceRefFull>;

  /**
   * The document id of the related document.
   */
  documentId?: string;
}

/**
 * Details on a particular Radio Frequency (RF) band, also known as a carrier,
 * which may be in use by any type of Entity for communications or operations.
 */
export interface RfBandFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Unique identifier of the parent Entity which uses this band.
   */
  idEntity: string;

  /**
   * RF Band name.
   */
  name: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Name of the band of this RF range (e.g.
   * X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more
   * details and descriptions of each band name.
   */
  band?: string;

  /**
   * RF Band frequency range bandwidth in megahertz.
   */
  bandwidth?: number;

  /**
   * Array of frequency range bandwidth settings, in megahertz for this RFBand. If
   * this array is specified then it must be the same size as the frequencySettings
   * array. A null value may be used for one or more of the frequencies in the
   * frequencySettings array if there is no corresponding value for a given
   * frequency.
   */
  bandwidthSettings?: Array<number>;

  /**
   * Angle between the half-power (-3 dB) points of the main lobe of the antenna, in
   * degrees.
   */
  beamwidth?: number;

  /**
   * Array of beamwidth settings, in degrees for this RFBand. If this array is
   * specified then it must be the same size as the frequencySettings array. A null
   * value may be used for one or more of the frequencies in the frequencySettings
   * array if there is no corresponding value for a given frequency.
   */
  beamwidthSettings?: Array<number>;

  /**
   * Center frequency of RF frequency range, if applicable, in megahertz.
   */
  centerFreq?: number;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Array of delay settings, in seconds for this RFBand. If this array is specified
   * then it must be the same size as the frequencySettings array. A null value may
   * be used for one or more of the frequencies in the frequencySettings array if
   * there is no corresponding value for a given frequency.
   */
  delaySettings?: Array<number>;

  /**
   * RF Range edge gain, in decibel relative to isotrope.
   */
  edgeGain?: number;

  /**
   * EIRP is defined as the RMS power input in decibel watts required to a lossless
   * half-wave dipole antenna to give the same maximum power density far from the
   * antenna as the actual transmitter. It is equal to the power input to the
   * transmitter's antenna multiplied by the antenna gain relative to a half-wave
   * dipole. Effective radiated power and effective isotropic radiated power both
   * measure the amount of power a radio transmitter and antenna (or other source of
   * electromagnetic waves) radiates in a specific direction: in the direction of
   * maximum signal strength (the main lobe) of its radiation pattern.
   */
  eirp?: number;

  /**
   * Effective Radiated Power (ERP) is the total power in decibel watts radiated by
   * an actual antenna relative to a half-wave dipole rather than a theoretical
   * isotropic antenna. A half-wave dipole has a gain of 2.15 dB compared to an
   * isotropic antenna. EIRP(dB) = ERP (dB)+2.15 dB or EIRP (W) = 1.64\*ERP(W).
   * Effective radiated power and effective isotropic radiated power both measure the
   * amount of power a radio transmitter and antenna (or other source of
   * electromagnetic waves) radiates in a specific direction: in the direction of
   * maximum signal strength (the main lobe) of its radiation pattern.
   */
  erp?: number;

  /**
   * End/maximum of transmit RF frequency range, if applicable, in megahertz.
   */
  freqMax?: number;

  /**
   * Start/minimum of transmit RF frequency range, if applicable, in megahertz.
   */
  freqMin?: number;

  /**
   * Array of frequency settings, in megahertz for this RFBand. This array and the
   * settings arrays must match in size.
   */
  frequencySettings?: Array<number>;

  /**
   * Array of gain settings, in decibels for this RFBand. If this array is specified
   * then it must be the same size as the frequencySettings array. A null value may
   * be used for one or more of the frequencies in the frequencySettings array if
   * there is no corresponding value for a given frequency.
   */
  gainSettings?: Array<number>;

  /**
   * RF Band mode (e.g. TX, RX).
   */
  mode?: 'TX' | 'RX';

  /**
   * Array of signal noise settings, in decibels for this RFBand. If this array is
   * specified then it must be the same size as the frequencySettings array. A null
   * value may be used for one or more of the frequencies in the frequencySettings
   * array if there is no corresponding value for a given frequency.
   */
  noiseSettings?: Array<number>;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * RF Range maximum gain, in decibel relative to isotrope.
   */
  peakGain?: number;

  /**
   * Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to
   * Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L -
   * (Left Hand Circularly Polarized) Rotating left relative to the Earth's surface,
   * R - (Right Hand Circularly Polarized) Rotating right relative to the Earth's
   * surface.
   */
  polarization?: 'H' | 'V' | 'R' | 'L';

  /**
   * Purpose or use of the RF Band -- COMM = communications, TTC =
   * Telemetry/Tracking/Control, OPS = Operations, OTHER = Other.
   */
  purpose?: 'COMM' | 'TTC' | 'OPS' | 'OTHER';

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

export interface SofDataSourceRefFull {
  /**
   * Data source id.
   */
  dataSourceId?: string;

  /**
   * end position.
   */
  endPosition?: string;

  /**
   * paragraph number.
   */
  paragraphNumber?: string;

  /**
   * sentence number.
   */
  sentenceNumber?: string;

  /**
   * start position.
   */
  startPosition?: string;
}

/**
 * Model representation of Information on spacecraft SolarArrayDetails. A
 * SolarArray may have multiple details records compiled by various sources.
 */
export interface SolarArrayDetailsFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Unique identifier of the parent SolarArray.
   */
  idSolarArray: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Solar Array area in square meters.
   */
  area?: number;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Solar array description/notes.
   */
  description?: string;

  /**
   * Solar array junction technology (e.g. Triple).
   */
  junctionTechnology?: string;

  /**
   * An organization such as a corporation, manufacturer, consortium, government,
   * etc. An organization may have parent and child organizations as well as link to
   * a former organization if this org previously existed as another organization.
   */
  manufacturerOrg?: OrganizationFull;

  /**
   * Unique identifier of the organization that manufactures the solar array.
   */
  manufacturerOrgId?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Solar Array span in meters.
   */
  span?: number;

  /**
   * Optional array of provider/source specific tags for this data, where each
   * element is no longer than 32 characters, used for implementing data owner
   * conditional access controls to restrict access to the data. Should be left null
   * by data providers unless conditional access controls are coordinated with the
   * UDL team.
   */
  tags?: Array<string>;

  /**
   * Solar array technology (e.g. Ga-As).
   */
  technology?: string;

  /**
   * Type of solar array (e.g. U Shaped).
   */
  type?: string;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

/**
 * Model representation of information on on-orbit/spacecraft solar arrays. A
 * spacecraft may have multiple solar arrays and each solar array can have multiple
 * 'details' records compiled by different sources.
 */
export interface SolarArrayFull {
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Solar Array name.
   */
  name: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Read-only collection of additional SolarArrayDetails by various sources for this
   * organization, ignored on create/update. These details must be created separately
   * via the /udl/solararraydetails operations.
   */
  solarArrayDetails?: Array<SolarArrayDetailsFull>;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

/**
 * Model representation of information on on-orbit/spacecraft solar arrays. A
 * spacecraft may have multiple solar arrays and each solar array can have multiple
 * 'details' records compiled by different sources.
 */
export interface SolarArrayIngest {
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Solar Array name.
   */
  name: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;
}

/**
 * SortiePPR is a regulatory requirement where operators must obtain permissions to
 * full operational access to a runway, taxiway, or airport service.
 */
export interface SortiePprFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Unique identifier of the Aircraft Sortie associated with this prior permission
   * required (PPR) record.
   */
  idSortie: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Time the prior permission required (PPR) valid window ends, in ISO 8601 UTC
   * format with millisecond precision.
   */
  endTime?: string;

  /**
   * Optional ID from external systems. This field has no meaning within UDL and is
   * provided as a convenience for systems that require tracking of an internal
   * system generated ID.
   */
  externalId?: string;

  /**
   * Identifier of the prior permission required (PPR) grantor.
   */
  grantor?: string;

  /**
   * The prior permission required (PPR) number issued by the airfield for a sortie.
   */
  number?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Remarks concerning the prior permission required (PPR) for a sortie.
   */
  remarks?: string;

  /**
   * The username of the prior permission required (PPR) requestor.
   */
  requestor?: string;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * Time the prior permission required (PPR) valid window begins, in ISO 8601 UTC
   * format with millisecond precision.
   */
  startTime?: string;

  /**
   * Type of prior permission required (PPR) for a sortie (M - Military or C -
   * Civilian). Enum: [M, C].
   */
  type?: 'M' | 'C';

  /**
   * Time the row was updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

/**
 * This service provides operations for querying and manipulation of state vectors
 * for OnOrbit objects. State vectors are cartesian vectors of position (r) and
 * velocity (v) that, together with their time (epoch) (t), uniquely determine the
 * trajectory of the orbiting body in space. J2000 is the preferred coordinate
 * frame for all state vector positions/velocities in UDL, but in some cases data
 * may be in another frame depending on the provider and/or datatype. Please see
 * the 'Discover' tab in the storefront to confirm coordinate frames by data
 * provider.
 */
export interface StateVectorFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Time of validity for state vector in ISO 8601 UTC datetime format, with
   * microsecond precision.
   */
  epoch: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * The actual time span used for the OD of the object, expressed in days.
   */
  actualODSpan?: number;

  /**
   * Optional algorithm used to produce this record.
   */
  algorithm?: string;

  /**
   * The reference frame of the alternate1 (Alt1) cartesian orbital state.
   */
  alt1ReferenceFrame?: string;

  /**
   * The reference frame of the alternate2 (Alt2) cartesian orbital state.
   */
  alt2ReferenceFrame?: string;

  /**
   * The actual area of the object at it's largest cross-section, expressed in
   * meters^2.
   */
  area?: number;

  /**
   * First derivative of drag/ballistic coefficient (m2/kg-s).
   */
  bDot?: number;

  /**
   * Model parameter value for center of mass offset (m).
   */
  cmOffset?: number;

  /**
   * Covariance matrix, in kilometer and second based units, in the specified
   * covReferenceFrame. If the covReferenceFrame is null it is assumed to be J2000.
   * The array values (1-21) represent the lower triangular half of the
   * position-velocity covariance matrix. The size of the covariance matrix is
   * dynamic, depending on whether the covariance for position only or position &
   * velocity. The covariance elements are position dependent within the array with
   * values ordered as follows:
   *
   * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR&nbsp;&nbsp;
   *
   * x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1
   *
   * y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;3
   *
   * z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;6
   *
   * x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;10
   *
   * y'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
   *
   * z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;
   *
   * The cov array should contain only the lower left triangle values from top left
   * down to bottom right, in order.
   *
   * If additional covariance terms are included for DRAG, SRP, and/or THRUST, the
   * matrix can be extended with the following order of elements:
   *
   * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR
   *
   * DRG&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;23&nbsp;&nbsp;24&nbsp;&nbsp;25&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;
   *
   * SRP&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;30&nbsp;&nbsp;31&nbsp;&nbsp;32&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;
   *
   * THR&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;38&nbsp;&nbsp;39&nbsp;&nbsp;40&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;44&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45&nbsp;
   */
  cov?: Array<number>;

  /**
   * The method used to generate the covariance during the orbit determination (OD)
   * that produced the state vector, or whether an arbitrary, non-calculated default
   * value was used (CALCULATED, DEFAULT).
   */
  covMethod?: string;

  /**
   * The reference frame of the covariance matrix elements. If the covReferenceFrame
   * is null it is assumed to be J2000.
   */
  covReferenceFrame?: 'J2000' | 'UVW' | 'EFG/TDR' | 'TEME' | 'GCRF';

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Optional source-provided and searchable metadata or descriptor of the data.
   */
  descriptor?: string;

  /**
   * The effective area of the object exposed to atmospheric drag, expressed in
   * meters^2.
   */
  dragArea?: number;

  /**
   * Area-to-mass ratio coefficient for atmospheric ballistic drag (m2/kg).
   */
  dragCoeff?: number;

  /**
   * The Drag Model used for this vector (e.g. HARRIS-PRIESTER, JAC70, JBH09, MSIS90,
   * NONE, etc.).
   */
  dragModel?: string;

  /**
   * Model parameter value for energy dissipation rate (EDR) (w/kg).
   */
  edr?: number;

  /**
   * Start time at which this state vector was the 'current' state vector for its
   * satellite.
   */
  effectiveFrom?: string;

  /**
   * End time at which this state vector was no longer the 'current' state vector for
   * its satellite.
   */
  effectiveUntil?: string;

  /**
   * The covariance matrix values represent the lower triangular half of the
   * covariance matrix in terms of equinoctial elements.&nbsp; The size of the
   * covariance matrix is dynamic.&nbsp; The values are outputted in order across
   * each row, i.e.:
   *
   * 1&nbsp;&nbsp; 2&nbsp;&nbsp; 3&nbsp;&nbsp; 4&nbsp;&nbsp; 5
   *
   * 6&nbsp;&nbsp; 7&nbsp;&nbsp; 8&nbsp;&nbsp; 9&nbsp; 10
   *
   * :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
   *
   * :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
   *
   * 51&nbsp; 52&nbsp; 53&nbsp; 54&nbsp; 55
   *
   * :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
   *
   * :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
   *
   * The ordering of values is as follows:
   *
   * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Af&nbsp;&nbsp;
   * Ag&nbsp;&nbsp; L&nbsp;&nbsp;&nbsp; N&nbsp;&nbsp; Chi&nbsp; Psi&nbsp;&nbsp;
   * B&nbsp;&nbsp; BDOT AGOM&nbsp; T&nbsp;&nbsp; C1&nbsp;&nbsp; C2&nbsp; ...
   *
   * Af&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1
   *
   * Ag&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp; 3
   *
   * L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
   * 4&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp; 6
   *
   * N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
   * 7&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp; 10
   *
   * Chi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11&nbsp;&nbsp; 12&nbsp;&nbsp;
   * 13&nbsp;&nbsp; 14&nbsp;&nbsp; 15
   *
   * Psi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 16&nbsp;&nbsp; 17&nbsp;&nbsp;
   * 18&nbsp;&nbsp; 19&nbsp;&nbsp; 20&nbsp;&nbsp; 21
   *
   * B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 22&nbsp;&nbsp;
   * 23&nbsp;&nbsp; 24 &nbsp;&nbsp;25&nbsp;&nbsp; 26&nbsp;&nbsp; 27&nbsp;&nbsp; 28
   *
   * BDOT&nbsp;&nbsp; 29&nbsp;&nbsp; 30&nbsp;&nbsp; 31&nbsp;&nbsp; 32&nbsp;&nbsp;
   * 33&nbsp;&nbsp; 34&nbsp;&nbsp; 35&nbsp;&nbsp; 36
   *
   * AGOM&nbsp; 37&nbsp;&nbsp; 38&nbsp;&nbsp; 39&nbsp;&nbsp; 40&nbsp;&nbsp;
   * 41&nbsp;&nbsp; 42&nbsp;&nbsp; 43&nbsp;&nbsp; 44&nbsp;&nbsp; 45
   *
   * T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 46&nbsp;&nbsp;
   * 47&nbsp;&nbsp; 48&nbsp;&nbsp; 49&nbsp;&nbsp; 50&nbsp;&nbsp; 51&nbsp;&nbsp;
   * 52&nbsp;&nbsp; 53&nbsp;&nbsp; 54&nbsp;&nbsp; 55
   *
   * C1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 56&nbsp;&nbsp; 57&nbsp;&nbsp;
   * 58&nbsp;&nbsp; 59&nbsp;&nbsp; 60&nbsp;&nbsp; 61&nbsp;&nbsp; 62&nbsp;&nbsp;
   * 63&nbsp;&nbsp; 64&nbsp;&nbsp; 65&nbsp;&nbsp; 66
   *
   * C2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 67&nbsp;&nbsp; 68&nbsp;&nbsp;
   * 69&nbsp;&nbsp; 70&nbsp;&nbsp; 71&nbsp; &nbsp;72&nbsp;&nbsp; 73&nbsp;&nbsp;
   * 74&nbsp;&nbsp; 75&nbsp;&nbsp; 76&nbsp;&nbsp; 77&nbsp;&nbsp; 78
   *
   * :
   *
   * :
   *
   * where C1, C2, etc, are the "consider parameters" that may be added to the
   * covariance matrix.&nbsp; The covariance matrix will be as large as the last
   * element/model parameter needed.&nbsp; In other words, if the DC solved for all 6
   * elements plus AGOM, the covariance matrix will be 9x9 (and the rows for B and
   * BDOT will be all zeros).&nbsp; If the covariance matrix is unavailable, the size
   * will be set to 0x0, and no data will follow.&nbsp; The cov field should contain
   * only the lower left triangle values from top left down to bottom right, in
   * order.
   */
  eqCov?: Array<number>;

  /**
   * Integrator error control.
   */
  errorControl?: number;

  /**
   * Boolean indicating use of fixed step size for this vector.
   */
  fixedStep?: boolean;

  /**
   * Geopotential model used for this vector (e.g. EGM-96, WGS-84, WGS-72, JGM-2, or
   * GEM-T3), including mm degree zonals, nn degree/order tesserals. E.g. EGM-96
   * 24Z,24T.
   */
  geopotentialModel?: string;

  /**
   * Number of terms used in the IAU 1980 nutation model (4, 50, or 106).
   */
  iau1980Terms?: number;

  /**
   * Unique identifier of the satellite on-orbit object, if correlated. For the
   * public catalog, the idOnOrbit is typically the satellite number as a string, but
   * may be a UUID for analyst or other unknown or untracked satellites.
   */
  idOnOrbit?: string;

  /**
   * Unique identifier of the OD solution record that produced this state vector.
   * This ID can be used to obtain additional information on an OrbitDetermination
   * object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For
   * example, the OrbitDetermination with idOrbitDetermination = abc would be queries
   * as /udl/orbitdetermination/abc.
   */
  idOrbitDetermination?: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  idStateVector?: string;

  /**
   * Integrator Mode.
   */
  integratorMode?: string;

  /**
   * Boolean indicating use of in-track thrust perturbations for this vector.
   */
  inTrackThrust?: boolean;

  /**
   * The end of the time interval containing the time of the last accepted
   * observation, in ISO 8601 UTC format with microsecond precision. For an exact
   * observation time, the firstObTime and lastObTime are the same.
   */
  lastObEnd?: string;

  /**
   * The start of the time interval containing the time of the last accepted
   * observation, in ISO 8601 UTC format with microsecond precision. For an exact
   * observation time, the firstObTime and lastObTime are the same.
   */
  lastObStart?: string;

  /**
   * Time of the next leap second after epoch in ISO 8601 UTC time. If the next leap
   * second is not known, the time of the previous leap second is used.
   */
  leapSecondTime?: string;

  /**
   * Boolean indicating use of lunar/solar perturbations for this vector.
   */
  lunarSolar?: boolean;

  /**
   * The mass of the object, in kilograms.
   */
  mass?: number;

  /**
   * The number of observations available for the OD of the object.
   */
  obsAvailable?: number;

  /**
   * The number of observations accepted for the OD of the object.
   */
  obsUsed?: number;

  /**
   * Model object representing on-orbit objects or satellites in the system.
   */
  onOrbit?: OnorbitFull;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Optional identifier provided by state vector source to indicate the target
   * onorbit object of this state vector. This may be an internal identifier and not
   * necessarily map to a valid satellite number.
   */
  origObjectId?: string;

  /**
   * Type of partial derivatives used (ANALYTIC, FULL NUM, or FAST NUM).
   */
  partials?: string;

  /**
   * The pedigree of state vector, or methods used for its generation to include
   * state update/orbit determination, propagation from another state, or a state
   * from a calibration satellite (e.g. ORBIT_UPDATE, PROPAGATION, CALIBRATION,
   * CONJUNCTION, FLIGHT_PLAN).
   */
  pedigree?: string;

  /**
   * Polar Wander Motion X (arc seconds).
   */
  polarMotionX?: number;

  /**
   * Polar Wander Motion Y (arc seconds).
   */
  polarMotionY?: number;

  /**
   * One sigma position uncertainty, in kilometers.
   */
  posUnc?: number;

  /**
   * Optional URI location in the document repository of the raw file parsed by the
   * system to produce this record. To download the raw file, prepend
   * https://udl-hostname/scs/download?id= to this value.
   */
  rawFileURI?: string;

  /**
   * The recommended OD time span calculated for the object, expressed in days.
   */
  recODSpan?: number;

  /**
   * The reference frame of the cartesian orbital states. If the referenceFrame is
   * null it is assumed to be J2000.
   */
  referenceFrame?: 'J2000' | 'EFG/TDR' | 'ECR/ECEF' | 'TEME' | 'ITRF' | 'GCRF';

  /**
   * The percentage of residuals accepted in the OD of the object.
   */
  residualsAcc?: number;

  /**
   * Epoch revolution number.
   */
  revNo?: number;

  /**
   * The Weighted Root Mean Squared (RMS) of the differential correction on the
   * target object that produced this vector. WRMS is a quality indicator of the
   * state vector update, with a value of 1.00 being optimal. WRMS applies to Batch
   * Least Squares (BLS) processes.
   */
  rms?: number;

  /**
   * Satellite/Catalog number of the target OnOrbit object.
   */
  satNo?: number;

  /**
   * Array containing the standard deviation of error in target object position, U, V
   * and W direction respectively (km).
   */
  sigmaPosUVW?: Array<number>;

  /**
   * Array containing the standard deviation of error in target object velocity, U, V
   * and W direction respectively (km/sec).
   */
  sigmaVelUVW?: Array<number>;

  /**
   * Average solar flux geomagnetic index.
   */
  solarFluxAPAvg?: number;

  /**
   * F10 (10.7 cm) solar flux value.
   */
  solarFluxF10?: number;

  /**
   * F10 (10.7 cm) solar flux 81-day average value.
   */
  solarFluxF10Avg?: number;

  /**
   * Boolean indicating use of solar radiation pressure perturbations for this
   * vector.
   */
  solarRadPress?: boolean;

  /**
   * Area-to-mass ratio coefficient for solar radiation pressure.
   */
  solarRadPressCoeff?: number;

  /**
   * Boolean indicating use of solid earth tide perturbations for this vector.
   */
  solidEarthTides?: boolean;

  /**
   * Optional array of UDL data (observation) UUIDs used to build this state vector.
   * See the associated sourcedDataTypes array for the specific types of observations
   * for the positionally corresponding UUIDs in this array (the two arrays must
   * match in size).
   */
  sourcedData?: Array<string>;

  /**
   * Optional array of UDL observation data types used to build this state vector
   * (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific
   * UUIDs of observations for the positionally corresponding data types in this
   * array (the two arrays must match in size).
   */
  sourcedDataTypes?: Array<'EO' | 'RADAR' | 'RF' | 'DOA' | 'ELSET' | 'SV'>;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * The effective area of the object exposed to solar radiation pressure, expressed
   * in meters^2.
   */
  srpArea?: number;

  /**
   * Integrator step mode (AUTO, TIME, or S).
   */
  stepMode?: string;

  /**
   * Initial integration step size (seconds).
   */
  stepSize?: number;

  /**
   * Initial step size selection (AUTO or MANUAL).
   */
  stepSizeSelection?: string;

  /**
   * Optional array of provider/source specific tags for this data, where each
   * element is no longer than 32 characters, used for implementing data owner
   * conditional access controls to restrict access to the data. Should be left null
   * by data providers unless conditional access controls are coordinated with the
   * UDL team.
   */
  tags?: Array<string>;

  /**
   * TAI (Temps Atomique International) minus UTC (Universal Time Coordinates) offset
   * in seconds.
   */
  taiUtc?: number;

  /**
   * Model parameter value for thrust acceleration (m/s2).
   */
  thrustAccel?: number;

  /**
   * The number of sensor tracks available for the OD of the object.
   */
  tracksAvail?: number;

  /**
   * The number of sensor tracks accepted for the OD of the object.
   */
  tracksUsed?: number;

  /**
   * Optional identifier to track a commercial or marketplace transaction executed to
   * produce this data.
   */
  transactionId?: string;

  /**
   * Boolean indicating this state vector was unable to be correlated to a known
   * object. This flag should only be set to true by data providers after an attempt
   * to correlate to an OnOrbit object was made and failed. If unable to correlate,
   * the 'origObjectId' field may be populated with an internal data provider
   * specific identifier.
   */
  uct?: boolean;

  /**
   * Rate of change of UT1 (milliseconds/day) - first derivative of ut1Utc.
   */
  ut1Rate?: number;

  /**
   * Universal Time-1 (UT1) minus UTC offset, in seconds.
   */
  ut1Utc?: number;

  /**
   * One sigma velocity uncertainty, in kilometers/second.
   */
  velUnc?: number;

  /**
   * Cartesian X acceleration of target, in kilometers/second^2, in the specified
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  xaccel?: number;

  /**
   * Cartesian X position of the target, in kilometers, in the specified
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  xpos?: number;

  /**
   * Cartesian X position of the target, in kilometers, in the specified
   * alt1ReferenceFrame. Alternate reference frames are optional and are intended to
   * allow a data source to provide an equivalent vector in a different cartesian
   * frame than the primary vector.
   */
  xposAlt1?: number;

  /**
   * Cartesian X position of the target, in kilometers, in the specified
   * alt2ReferenceFrame. Alternate reference frames are optional and are intended to
   * allow a data source to provide an equivalent vector in a different cartesian
   * frame than the primary vector.
   */
  xposAlt2?: number;

  /**
   * Cartesian X velocity of target, in kilometers/second, in the specified
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  xvel?: number;

  /**
   * Cartesian X velocity of the target, in kilometers/second, in the specified
   * alt1ReferenceFrame. Alternate reference frames are optional and are intended to
   * allow a data source to provide an equivalent vector in a different cartesian
   * frame than the primary vector.
   */
  xvelAlt1?: number;

  /**
   * Cartesian X velocity of the target, in kilometers/second, in the specified
   * alt2ReferenceFrame. Alternate reference frames are optional and are intended to
   * allow a data source to provide an equivalent vector in a different cartesian
   * frame than the primary vector.
   */
  xvelAlt2?: number;

  /**
   * Cartesian Y acceleration of target, in kilometers/second^2, in the specified
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  yaccel?: number;

  /**
   * Cartesian Y position of the target, in kilometers, in the specified
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  ypos?: number;

  /**
   * Cartesian Y position of the target, in kilometers, in the specified
   * alt1ReferenceFrame. Alternate reference frames are optional and are intended to
   * allow a data source to provide an equivalent vector in a different cartesian
   * frame than the primary vector.
   */
  yposAlt1?: number;

  /**
   * Cartesian Y position of the target, in kilometers, in the specified
   * alt2ReferenceFrame. Alternate reference frames are optional and are intended to
   * allow a data source to provide an equivalent vector in a different cartesian
   * frame than the primary vector.
   */
  yposAlt2?: number;

  /**
   * Cartesian Y velocity of target, in kilometers/second, in the specified
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  yvel?: number;

  /**
   * Cartesian Y velocity of the target, in kilometers/second, in the specified
   * alt1ReferenceFrame. Alternate reference frames are optional and are intended to
   * allow a data source to provide an equivalent vector in a different cartesian
   * frame than the primary vector.
   */
  yvelAlt1?: number;

  /**
   * Cartesian Y velocity of the target, in kilometers/second, in the specified
   * alt2ReferenceFrame. Alternate reference frames are optional and are intended to
   * allow a data source to provide an equivalent vector in a different cartesian
   * frame than the primary vector.
   */
  yvelAlt2?: number;

  /**
   * Cartesian Z acceleration of target, in kilometers/second^2, in the specified
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  zaccel?: number;

  /**
   * Cartesian Z position of the target, in kilometers, in the specified
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  zpos?: number;

  /**
   * Cartesian Z position of the target, in kilometers, in the specified
   * alt1ReferenceFrame. Alternate reference frames are optional and are intended to
   * allow a data source to provide an equivalent vector in a different cartesian
   * frame than the primary vector.
   */
  zposAlt1?: number;

  /**
   * Cartesian Z position of the target, in kilometers, in the specified
   * alt2ReferenceFrame. Alternate reference frames are optional and are intended to
   * allow a data source to provide an equivalent vector in a different cartesian
   * frame than the primary vector.
   */
  zposAlt2?: number;

  /**
   * Cartesian Z velocity of target, in kilometers/second, in the specified
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  zvel?: number;

  /**
   * Cartesian Z velocity of the target, in kilometers/second, in the specified
   * alt1ReferenceFrame. Alternate reference frames are optional and are intended to
   * allow a data source to provide an equivalent vector in a different cartesian
   * frame than the primary vector.
   */
  zvelAlt1?: number;

  /**
   * Cartesian Z velocity of the target, in kilometers/second, in the specified
   * alt2ReferenceFrame. Alternate reference frames are optional and are intended to
   * allow a data source to provide an equivalent vector in a different cartesian
   * frame than the primary vector.
   */
  zvelAlt2?: number;
}

/**
 * Status for a particular Entity. An entity may have multiple status records
 * collected by various sources.
 */
export interface StatusFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Unique identifier of the parent entity.
   */
  idEntity: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * The declassification date of this data, in ISO 8601 UTC format.
   */
  declassificationDate?: string;

  /**
   * Declassification string of this data.
   */
  declassificationString?: string;

  /**
   * The sources or SCG references from which the classification of this data is
   * derived.
   */
  derivedFrom?: string;

  /**
   * Comments describing the status creation and or updates to an entity.
   */
  notes?: string;

  /**
   * Operation capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).
   */
  opsCap?: 'FMC' | 'NMC' | 'PMC' | 'UNK';

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Overall state of the entity, if applicable (e.g. UNKNOWN, DEAD, ACTIVE, RF
   * ACTIVE, STANDBY).
   */
  state?: 'UNKNOWN' | 'DEAD' | 'ACTIVE' | 'RF ACTIVE' | 'STANDBY';

  subStatusCollection?: Array<SubStatusFull>;

  /**
   * System capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).
   */
  sysCap?: 'FMC' | 'NMC' | 'PMC' | 'UNK';

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

/**
 * Additional sub-system or capability status for the parent entity.
 */
export interface SubStatusFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Descriptions and/or comments associated with the sub-status.
   */
  notes: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Status of the sub-system/capability, e.g. FMC, NMC, PMC, UNK.
   */
  status: 'FMC' | 'NMC' | 'PMC' | 'UNK';

  /**
   * Id of the parent status.
   */
  statusId: string;

  /**
   * Parent entity's sub-system or capability status: mwCap, mdCap, ssCap, etc.
   */
  type: 'mwCap' | 'ssCap' | 'mdCap';

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Time the row was updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

/**
 * Additional sub-system or capability status for the parent entity.
 */
export interface SubStatusIngest {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Descriptions and/or comments associated with the sub-status.
   */
  notes: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Status of the sub-system/capability, e.g. FMC, NMC, PMC, UNK.
   */
  status: 'FMC' | 'NMC' | 'PMC' | 'UNK';

  /**
   * Id of the parent status.
   */
  statusId: string;

  /**
   * Parent entity's sub-system or capability status: mwCap, mdCap, ssCap, etc.
   */
  type: 'mwCap' | 'ssCap' | 'mdCap';

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;
}

/**
 * Collection documenting operational waivers that have been issued for the Site
 * associated with this record.
 */
export interface WaiverFull {
  /**
   * The expiration date of this waiver, in ISO8601 UTC format with millisecond
   * precision.
   */
  expirationDate?: string;

  /**
   * Boolean indicating whether or not this waiver has expired.
   */
  hasExpired?: boolean;

  /**
   * The issue date of this waiver, in ISO8601 UTC format with millisecond precision.
   */
  issueDate?: string;

  /**
   * The name of the person who issued this waiver.
   */
  issuerName?: string;

  /**
   * The name of the person requesting this waiver.
   */
  requesterName?: string;

  /**
   * The phone number of the person requesting this waiver.
   */
  requesterPhoneNumber?: string;

  /**
   * The unit requesting this waiver.
   */
  requestingUnit?: string;

  /**
   * Description of the entities to which this waiver applies.
   */
  waiverAppliesTo?: string;

  /**
   * The description of this waiver.
   */
  waiverDescription?: string;

  /**
   * The name of the person who made the most recent change to this Waiver data.
   */
  waiverLastChangedBy?: string;

  /**
   * The datetime of the most recent change made to this waiver data, in ISO8601 UTC
   * format with millisecond precision.
   */
  waiverLastChangedDate?: string;
}

export type AircraftsortieFullsOffsetPage = OffsetPage<AircraftsortieFull>;

export type AirTransportMissionFullsOffsetPage = OffsetPage<AirTransportMissionFull>;

export type AircraftstatusFullsOffsetPage = OffsetPage<AircraftstatusFull>;

export type AirfieldstatusFullsOffsetPage = OffsetPage<AirfieldstatusFull>;

export type AIsFullsOffsetPage = OffsetPage<AIsFull>;

export type AttitudesetFullsOffsetPage = OffsetPage<AttitudesetFull>;

export type CollectRequestFullsOffsetPage = OffsetPage<CollectRequestFull>;

export type CollectResponseFullsOffsetPage = OffsetPage<CollectResponseFull>;

export type DiplomaticclearanceFullsOffsetPage = OffsetPage<DiplomaticclearanceFull>;

export type DriftHistoryAbridgedsOffsetPage = OffsetPage<DriftHistoryAbridged>;

export type EopFullsOffsetPage = OffsetPage<EopFull>;

export type EphemerisFullsOffsetPage = OffsetPage<EphemerisFull>;

export type EvacFullsOffsetPage = OffsetPage<EvacFull>;

export type EventEvolutionFullsOffsetPage = OffsetPage<EventEvolutionFull>;

export type LocationAbridgedsOffsetPage = OffsetPage<LocationAbridged>;

export type NotificationFullsOffsetPage = OffsetPage<NotificationFull>;

export type EoObservationFullsOffsetPage = OffsetPage<EoObservationFull>;

export type OnboardnavigationFullsOffsetPage = OffsetPage<OnboardnavigationFull>;

export type OnorbitthrusterstatusFullsOffsetPage = OffsetPage<OnorbitthrusterstatusFull>;

export type FileDataOffsetPage = OffsetPage<FileData>;

export type SortiePprFullsOffsetPage = OffsetPage<SortiePprFull>;

export type StateVectorFullsOffsetPage = OffsetPage<StateVectorFull>;
