// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../resource';
import * as Core from '../../core';
import * as HistoryAPI from './history';
import {
  History,
  HistoryCountParams,
  HistoryCountResponse,
  HistoryQueryParams,
  HistoryQueryResponse,
} from './history';

export class GroundImagery extends APIResource {
  history: HistoryAPI.History = new HistoryAPI.History(this._client);

  /**
   * Service operation to dynamically query historical data by a variety of query
   * parameters not specified in this API documentation, then write that data to the
   * Secure Content Store. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   */
  historyAodr(query: GroundImageryHistoryAodrParams, options?: Core.RequestOptions): Core.APIPromise<void> {
    return this._client.get('/udl/groundimagery/history/aodr', {
      query,
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }

  /**
   * The ground imagery service allows for contribution of images. This service
   * operation requires a zip file in the body of the POST request. The zip file must
   * contain exactly two files. <h3> 1) A json file with any file name that ends in
   * .json e.g. MyDataFile.json The contents of the json file must be valid according
   * to the schema for Ground Imagery. 2) A binary image file of the specified types
   * allowed for GroundImagery. </h3> The metadata and image files will be stored and
   * associated with each other allowing queries of the data retrieval of the binary
   * images. This operation is intended to be used for automated feeds into UDL. A
   * specific role is required to perform this service operation. Please contact the
   * UDL team for assistance.
   */
  uploadZip(body: GroundImageryUploadZipParams, options?: Core.RequestOptions): Core.APIPromise<void> {
    return this._client.post('/filedrop/udl-groundimagery', {
      body,
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }
}

export interface GroundImageryHistoryAodrParams {
  /**
   * Timestamp the image was captured/produced. (YYYY-MM-DDTHH:MM:SS.ssssssZ)
   */
  imageTime: string;

  /**
   * optional, fields for retrieval. When omitted, ALL fields are assumed. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
   * query fields that can be selected.
   */
  columns?: string;

  /**
   * optional, notification method for the created file link. When omitted, EMAIL is
   * assumed. Current valid values are: EMAIL, SMS.
   */
  notification?: string;

  /**
   * optional, field delimiter when the created file is not JSON. Must be a single
   * character chosen from this set: (',', ';', ':', '|'). When omitted, "," is used.
   * It is strongly encouraged that your field delimiter be a character unlikely to
   * occur within the data.
   */
  outputDelimiter?: string;

  /**
   * optional, output format for the file. When omitted, JSON is assumed. Current
   * valid values are: JSON and CSV.
   */
  outputFormat?: string;
}

export interface GroundImageryUploadZipParams {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Name of the image file.
   */
  filename: string;

  /**
   * Timestamp the image was captured/produced.
   */
  imageTime: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * MD5 value of the file. The ingest/create operation will automatically generate
   * the value.
   */
  checksumValue?: string;

  /**
   * Size of the image file. Units in bytes. If filesize is provided without an
   * associated file, it defaults to 0.
   */
  filesize?: number;

  /**
   * Optional, field indicating type of image, NITF, PNG, etc.
   */
  format?: string;

  /**
   * Optional ID of the sensor that produced this ground image.
   */
  idSensor?: string;

  /**
   * Optional array of keywords for this image.
   */
  keywords?: Array<string>;

  /**
   * Optional name/description associated with this image.
   */
  name?: string;

  /**
   * Description and notes of the image.
   */
  notes?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * Optional identifier provided by source to indicate the sensor identifier used to
   * detect this event. This may be an internal identifier and not necessarily a
   * valid sensor ID.
   */
  origSensorId?: string;

  /**
   * Geographical region or polygon (lon/lat pairs) of the image as projected on the
   * ground in geoJSON or geoText format. This is an optional convenience field only
   * used for create operations. The system will auto-detect the format (Well Known
   * Text or GeoJSON) and populate both regionText and regionGeoJSON fields
   * appropriately. When omitted, regionText or regionGeoJSON is expected.
   */
  region?: string;

  /**
   * Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON
   * representation of the geometry/geography, of the image as projected on the
   * ground. Reference: https://geojson.org/. Ignored if included with a create
   * operation that also specifies a valid region or regionText.
   */
  regionGeoJSON?: string;

  /**
   * Number of dimensions of the geometry depicted by region.
   */
  regionNDims?: number;

  /**
   * Geographical spatial_ref_sys for region.
   */
  regionSRid?: number;

  /**
   * Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known
   * Text representation of the geometry/geography, of the image as projected on the
   * ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored
   * if included with a create operation that also specifies a valid region.
   */
  regionText?: string;

  /**
   * Type of region as projected on the ground.
   */
  regionType?: string;

  /**
   * Optional identifier of the subject/target of the image, useful for correlating
   * multiple images of the same subject.
   */
  subjectId?: string;

  /**
   * Optional array of provider/source specific tags for this data, where each
   * element is no longer than 32 characters, used for implementing data owner
   * conditional access controls to restrict access to the data. Should be left null
   * by data providers unless conditional access controls are coordinated with the
   * UDL team.
   */
  tags?: Array<string>;

  /**
   * Optional identifier to track a commercial or marketplace transaction executed to
   * produce this data.
   */
  transactionId?: string;
}

GroundImagery.History = History;

export declare namespace GroundImagery {
  export {
    type GroundImageryHistoryAodrParams as GroundImageryHistoryAodrParams,
    type GroundImageryUploadZipParams as GroundImageryUploadZipParams,
  };

  export {
    History as History,
    type HistoryCountResponse as HistoryCountResponse,
    type HistoryQueryResponse as HistoryQueryResponse,
    type HistoryCountParams as HistoryCountParams,
    type HistoryQueryParams as HistoryQueryParams,
  };
}
