// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../resource';
import * as Core from '../core';
import * as AirfieldstatusAPI from './airfieldstatus/airfieldstatus';

export class AirfieldStatus extends APIResource {
  /**
   * Service operation to get a single airfield status record by its unique ID passed
   * as a path parameter.
   */
  retrieve(
    params: AirfieldStatusRetrieveParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<AirfieldstatusAPI.AirfieldstatusFull> {
    const { path_id, body_id } = params;
    return this._client.get(`/udl/airfieldstatus/${path_id}`, options);
  }

  /**
   * Service operation to update a single airfield status record. A specific role is
   * required to perform this service operation. Please contact the UDL team for
   * assistance.
   */
  update(params: AirfieldStatusUpdateParams, options?: Core.RequestOptions): Core.APIPromise<void> {
    const { path_id, body_id, body_id, ...body } = params;
    return this._client.put(`/udl/airfieldstatus/${path_id}`, {
      body: { id: body_id, id: body_id, ...body },
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }

  /**
   * Service operation to delete a Status object specified by the passed ID path
   * parameter. A specific role is required to perform this service operation. Please
   * contact the UDL team for assistance.
   */
  delete(params: AirfieldStatusDeleteParams, options?: Core.RequestOptions): Core.APIPromise<void> {
    const { path_id, body_id } = params;
    return this._client.delete(`/udl/airfieldstatus/${path_id}`, {
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }

  /**
   * Service operation to dynamically query data and only return specified
   * columns/fields. Requested columns are specified by the 'columns' query parameter
   * and should be a comma separated list of valid fields for the specified data
   * type. classificationMarking is always returned. See the queryhelp operation
   * (/udl/<datatype>/queryhelp) for more details on valid/required query parameter
   * information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5
   * hours would return the satNo and period of elsets with an epoch greater than 5
   * hours ago.
   */
  tuple(
    params: AirfieldStatusTupleParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<AirfieldStatusTupleResponse> {
    const { columns } = params;
    return this._client.get('/udl/airfieldstatus/tuple', options);
  }
}

export type AirfieldStatusTupleResponse = Array<AirfieldstatusAPI.AirfieldstatusFull>;

export interface AirfieldStatusRetrieveParams {
  /**
   * Path param:
   */
  path_id: string;

  /**
   * Body param: The ID of the AirfieldStatus to retrieve.
   */
  body_id: string;
}

export interface AirfieldStatusUpdateParams {
  /**
   * Path param:
   */
  path_id: string;

  /**
   * Body param: The ID of the Airfield Status to update.
   */
  body_id: string;

  /**
   * Body param: Classification marking of the data in IC/CAPCO Portion-marked
   * format.
   */
  classificationMarking: string;

  /**
   * Body param: Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST
   * data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: string;

  /**
   * Body param: Unique identifier of the Airfield for which this status is
   * referencing.
   */
  idAirfield: string;

  /**
   * Body param: Source of the data.
   */
  source: string;

  /**
   * Body param: Unique identifier of the record, auto-generated by the system.
   */
  body_id?: string;

  /**
   * Body param: Alternate airfield identifier provided by the source.
   */
  altAirfieldId?: string;

  /**
   * Body param: The category of aircraft rescue and fire fighting (ARFF) services
   * that are currently available at the airfield. Entries should include the code
   * (FAA or ICAO) and the category.
   */
  arffCat?: string;

  /**
   * Body param: Maximum on ground (MOG) number of high-reach/wide-body cargo
   * aircraft that can be serviced simultaneously based on spacing and manpower at
   * the time of status.
   */
  cargoMOG?: number;

  /**
   * Body param: Time the row was created in the database, auto-populated by the
   * system.
   */
  createdAt?: string;

  /**
   * Body param: Application user who created the row in the database, auto-populated
   * by the system.
   */
  createdBy?: string;

  /**
   * Body param: Maximum on ground (MOG) number of fleet aircraft that can be
   * serviced simultaneously based on spacing and manpower at the time of status.
   */
  fleetServiceMOG?: number;

  /**
   * Body param: Maximum on ground (MOG) number of aircraft that can be
   * simultaneously refueled based on spacing and manpower at the time of status.
   */
  fuelMOG?: number;

  /**
   * Body param: Array of quantities for each fuel type at the airfield, in
   * kilograms. The values in this array must correspond to the position index in
   * fuelTypes. This array must be the same length as fuelTypes.
   */
  fuelQtys?: Array<number>;

  /**
   * Body param: Array of fuel types available at the airfield. This array must be
   * the same length as fuelQtys.
   */
  fuelTypes?: Array<string>;

  /**
   * Body param: The expected time to receive ground support equipment (e.g. power
   * units, air units, cables, hoses, etc.), in minutes.
   */
  gseTime?: number;

  /**
   * Body param: The level of medical support and capabilities available at the
   * airfield.
   */
  medCap?: string;

  /**
   * Body param: Description of the current status of the airfield.
   */
  message?: string;

  /**
   * Body param: Array of quantities for each material handling equipment types at
   * the airfield. The values in this array must correspond to the position index in
   * mheTypes. This array must be the same length as mheTypes.
   */
  mheQtys?: Array<number>;

  /**
   * Body param: Array of material handling equipment types at the airfield. This
   * array must be the same length as mheQtys.
   */
  mheTypes?: Array<string>;

  /**
   * Body param: Maximum on ground (MOG) number of aircraft that can be
   * simultaneously ground handled for standard maintenance based on spacing and
   * manpower at the time of status.
   */
  mxMOG?: number;

  /**
   * Body param: Maximum on ground (MOG) number of parking narrow-body aircraft based
   * on spacing and manpower at the time of status.
   */
  narrowParkingMOG?: number;

  /**
   * Body param: Maximum on ground (MOG) number of working narrow-body aircraft based
   * on spacing and manpower at the time of status.
   */
  narrowWorkingMOG?: number;

  /**
   * Body param: The number of aircraft that are currently on ground (COG) at the
   * airfield.
   */
  numCOG?: number;

  /**
   * Body param: Maximum on ground (MOG) number of aircraft due to items not directly
   * related to the airfield infrastructure or aircraft servicing capability based on
   * spacing and manpower at the time of status.
   */
  operatingMOG?: number;

  /**
   * Body param: Originating system or organization which produced the data, if
   * different from the source. The origin may be different than the source if the
   * source was a mediating system which forwarded the data on behalf of the origin
   * system. If null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * Body param: The originating source network on which this record was created,
   * auto-populated by the system.
   */
  origNetwork?: string;

  /**
   * Body param: Maximum on ground (MOG) number of high-reach/wide-body passenger
   * aircraft that can be serviced simultaneously based on spacing and manpower at
   * the time of status.
   */
  passengerServiceMOG?: number;

  /**
   * Body param: The primary frequency which the airfield is currently operating, in
   * megahertz.
   */
  priFreq?: number;

  /**
   * Body param: The number or ID of primary runway at the airfield.
   */
  priRwyNum?: string;

  /**
   * Body param: The primary runway condition reading value used for determining
   * runway braking action, from 0 to 26. A value of 0 indicates braking action is
   * poor or non-existent, where a value of 26 indicates braking action is good.
   */
  rwyCondReading?: number;

  /**
   * Body param: The primary runway friction factor which is dependent on the surface
   * friction between the tires of the aircraft and the runway surface, from 0
   * to 100. A lower number indicates less friction and less braking response.
   */
  rwyFrictionFactor?: number;

  /**
   * Body param: Array of markings currently on the primary runway.
   */
  rwyMarkings?: Array<string>;

  /**
   * Body param: Array of slot types that an airfield requires a particular aircraft
   * provide in order to consume a slot at this location.
   */
  slotTypesReq?: Array<string>;

  /**
   * Body param: The source data library from which this record was received. This
   * could be a remote or tactical UDL or another data library. If null, the record
   * should be assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * Body param: Maximum on ground (MOG) number of parking wide-body aircraft based
   * on spacing and manpower at the time of status.
   */
  wideParkingMOG?: number;

  /**
   * Body param: Maximum on ground (MOG) number of working wide-body aircraft based
   * on spacing and manpower at the time of status.
   */
  wideWorkingMOG?: number;
}

export interface AirfieldStatusDeleteParams {
  /**
   * Path param:
   */
  path_id: string;

  /**
   * Body param: The ID of the AirfieldStatus to delete.
   */
  body_id: string;
}

export interface AirfieldStatusTupleParams {
  /**
   * Comma-separated list of valid field names for this data type to be returned in
   * the response. Only the fields specified will be returned as well as the
   * classification marking of the data, if applicable. See the �queryhelp� operation
   * for a complete list of possible fields.
   */
  columns: string;
}

export declare namespace AirfieldStatus {
  export {
    type AirfieldStatusTupleResponse as AirfieldStatusTupleResponse,
    type AirfieldStatusRetrieveParams as AirfieldStatusRetrieveParams,
    type AirfieldStatusUpdateParams as AirfieldStatusUpdateParams,
    type AirfieldStatusDeleteParams as AirfieldStatusDeleteParams,
    type AirfieldStatusTupleParams as AirfieldStatusTupleParams,
  };
}
