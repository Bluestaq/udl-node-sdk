// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../resource';
import * as Core from '../../core';

export class Effectrequests extends APIResource {
  /**
   * Service operation to take multiple EffectRequests as a POST body and ingest into
   * the database. This operation is intended to be used for automated feeds into
   * UDL. A specific role is required to perform this service operation. Please
   * contact the UDL team for assistance.
   */
  create(body: EffectrequestCreateParams, options?: Core.RequestOptions): Core.APIPromise<void> {
    return this._client.post('/filedrop/udl-effectrequest', {
      body,
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }
}

export type EffectrequestCreateParams = Array<EffectrequestCreateParams.Body>;

export namespace EffectrequestCreateParams {
  /**
   * A request for various effects on a target.
   */
  export interface Body {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: string;

    /**
     * List of effects to be achieved on the target (e.g. COVER, DECEIVE, DEGRADE,
     * DENY, DESTROY, DISRUPT, DIVERSION, DIVERT, FIX, INSPECT, INTERCEPT, ISOLATE,
     * MANIPULATE, NEUTRALIZE, SHADOW, SUPPRESS, etc.). The effects included in this
     * list are connected by implied AND.
     */
    effectList: Array<string>;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    /**
     * Specific descriptive instantiation of the effect, e.g., playbook to be used.
     */
    context?: string;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * The indicator of deadline of the bid request (e.g. BETWEEN, IMMEDIATE,
     * NOEARLIERTHAN, NOLATERTHAN, etc.): BETWEEN:&nbsp;Produce effect any time between
     * the given start and end times, equal penalty for being early or late
     * IMMEDIATE:&nbsp;Start as soon as possible, earlier is always better
     * NOEARLIERTHAN:&nbsp;Produce effect at this time or later. Large penalty for
     * being earlier, no reward for being later NOLATERTHAN:&nbsp;Produce effect no
     * later than the given startTime. Large penalty for being later, no reward for
     * being even earlier as long as the effect starts by the given time.
     */
    deadlineType?: string;

    /**
     * The time the effect should end, in ISO8601 UTC format.
     */
    endTime?: string;

    /**
     * The extenal system identifier of this request. A human readable unique id.
     */
    externalRequestId?: string;

    /**
     * Array of the the metric classes to be evaluated (e.g. Cost, GoalAchievement,
     * OpportunityCost, Risk, Timeliness, Unavailable, etc.). See the associated
     * 'metricWeights' array for the weighting values, positionally corresponding to
     * these types. The 'metricTypes' and 'metricWeights' arrays must match in size.
     */
    metricTypes?: Array<string>;

    /**
     * Array of the weights for the metric in the final evaluation score. Normalized (0
     * to 1). See the associated 'metricTypes' array for the metric classes,
     * positionally corresponding to these values. The 'metricTypes' and
     * 'metricWeights' arrays must match in size.
     */
    metricWeights?: Array<number>;

    /**
     * The type or class of the preference model used to evaluate this offer.
     */
    modelClass?: string;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * The priority (LOW, MEDIUM, HIGH) of this request.
     */
    priority?: string;

    /**
     * The time the effect should start, in ISO8601 UTC format.
     */
    startTime?: string;

    /**
     * State of this effect request (e.g. CREATED, UPDATED, DELETED, etc.).
     */
    state?: string;

    /**
     * The record ID, depending on the type identified in targetSrcType, of the
     * requested target. This identifier corresponds to either poi.poiid or track.trkId
     * from their respective schemas.
     */
    targetSrcId?: string;

    /**
     * The source type of the targetId identifier (POI, TRACK).
     */
    targetSrcType?: string;
  }
}

export declare namespace Effectrequests {
  export { type EffectrequestCreateParams as EffectrequestCreateParams };
}
