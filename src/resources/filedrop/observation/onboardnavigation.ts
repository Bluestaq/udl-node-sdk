// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../../resource';
import * as Core from '../../../core';

export class Onboardnavigation extends APIResource {
  /**
   * Service operation to take a list of onboard navigation records as a POST body
   * and ingest into the database. This operation is intended to be used for
   * automated feeds into UDL. A specific role is required to perform this service
   * operation. Please contact the UDL team for assistance.
   */
  create(body: OnboardnavigationCreateParams, options?: Core.RequestOptions): Core.APIPromise<void> {
    return this._client.post('/filedrop/udl-onboardnavigation', {
      body,
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }
}

export type OnboardnavigationCreateParams = Array<OnboardnavigationCreateParams.Body>;

export namespace OnboardnavigationCreateParams {
  /**
   * These services provide spacecraft positional data derived from on-board
   * navigational sensors. Navigational points are provided in kilometers and in a
   * user specified reference frame, with ECI J2K being preferred.
   */
  export interface Body {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Start time of the sensor data, in ISO 8601 UTC format.
     */
    startTime: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Arrays of spacecraft delta position (X, Y, Z), in km, in the specified
     * referenceFrame, between the onboard state and the last accepted sensor position.
     */
    deltaPos?: Array<Array<number>>;

    /**
     * End time of the sensor data, in ISO 8601 UTC format.
     */
    endTime?: string;

    /**
     * Unique identifier of the parent EphemerisSet, if this data is correlated with an
     * Ephemeris. If multiple nav sensor records are required, this ID may be
     * associated with each of those records if each is synced to the ephemeris points.
     */
    esId?: string;

    /**
     * Unique identifier of the primary satellite on-orbit object.
     */
    idOnOrbit?: string;

    /**
     * Unique identifier of the last onboard state vector.
     */
    idStateVector?: string;

    /**
     * Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame,
     * based on the onboard magnetometer, at each epoch.
     */
    mag?: Array<Array<number>>;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * Optional identifier provided by the data source to indicate the target object of
     * this record. This may be an internal identifier and not necessarily map to a
     * valid satellite number.
     */
    origObjectId?: string;

    /**
     * The reference frame in which the sensor derived positions are provided. If the
     * referenceFrame is null it is assumed to be J2000. Note that this frame is
     * assumed to apply to all of the sensor data in this record. If onboard sensors
     * process positional estimates in different frames then separate records should be
     * generated.
     */
    referenceFrame?: string;

    /**
     * Satellite/catalog number of the target on-orbit object.
     */
    satNo?: number;

    /**
     * The last load time of the current star catalog onboard this spacecraft.
     */
    starCatLoadTime?: string;

    /**
     * The name or identifier the star catalog in use.
     */
    starCatName?: string;

    /**
     * Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame,
     * based on the onboard star tracker, at each epoch.
     */
    starTracker?: Array<Array<number>>;

    /**
     * Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame,
     * based on the onboard sun sensor, at each epoch.
     */
    sunSensor?: Array<Array<number>>;

    /**
     * Array of epochs of the observations, in ISO 8601 UTC format. The epochs are
     * assumed to correspond to all sensor data in this record. If sensors do not share
     * a common epoch then separate records should be generated.
     */
    ts?: Array<string>;
  }
}

export declare namespace Onboardnavigation {
  export { type OnboardnavigationCreateParams as OnboardnavigationCreateParams };
}
