// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../resource';
import * as Core from '../../core';

export class Evac extends APIResource {
  /**
   * Service operation to take a list of Evac events as a POST body and ingest into
   * the database. Requires a specific role, please contact the UDL team to gain
   * access. This operation is intended to be used for automated feeds into UDL.
   */
  create(body: EvacCreateParams, options?: Core.RequestOptions): Core.APIPromise<void> {
    return this._client.post('/filedrop/udl-evac', {
      body,
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }
}

export type EvacCreateParams = Array<EvacCreateParams.Body>;

export namespace EvacCreateParams {
  /**
   * Casualty report and evacuation request. Used to report and request support to
   * evacuate friendly and enemy casualties.
   */
  export interface Body {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: string;

    /**
     * WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative
     * values south of equator).
     */
    pickupLat: number;

    /**
     * WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees
     * (negative values west of Prime Meridian).
     */
    pickupLon: number;

    /**
     * The request time, in ISO 8601 UTC format.
     */
    reqTime: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * The type of this medevac record (REQUEST, RESPONSE).
     */
    type: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    casualtyInfo?: Array<Body.CasualtyInfo>;

    /**
     * Radius of circular area about lat/lon point, in meters (1-sigma, if representing
     * error).
     */
    ce?: number;

    /**
     * The contact frequency, in Hz, of the agency or zone controller.
     */
    cntctFreq?: number;

    /**
     * Additional comments for the medevac mission.
     */
    comments?: string;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    enemyData?: Array<Body.EnemyData>;

    /**
     * Unique identifier of a weather report associated with this evacuation.
     */
    idWeatherReport?: string;

    /**
     * Height above lat/lon point, in meters (1-sigma, if representing linear error).
     */
    le?: number;

    /**
     * UUID identifying the medevac mission, which should remain the same on subsequent
     * posts related to the same medevac mission.
     */
    medevacId?: string;

    /**
     * Flag indicating whether the mission requires medical personnel.
     */
    medicReq?: boolean;

    /**
     * The operation type of the evacuation. (NOT SPECIFIED, AIR, GROUND, SURFACE).
     */
    missionType?: string;

    /**
     * Number of ambulatory personnel requiring evacuation.
     */
    numAmbulatory?: number;

    /**
     * The count of people requiring medevac.
     */
    numCasualties?: number;

    /**
     * Number of people Killed In Action.
     */
    numKIA?: number;

    /**
     * Number of littered personnel requiring evacuation.
     */
    numLitter?: number;

    /**
     * Number of people Wounded In Action.
     */
    numWIA?: number;

    /**
     * Amplifying data for the terrain describing important obstacles in or around the
     * zone.
     */
    obstaclesRemarks?: string;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a
     * point height above ellipsoid, and negative values indicate a point height below
     * ellipsoid.
     */
    pickupAlt?: number;

    /**
     * The expected pickup time, in ISO 8601 UTC format.
     */
    pickupTime?: string;

    /**
     * The call sign of this medevac requestor.
     */
    reqCallSign?: string;

    /**
     * Externally provided Medevac request number (e.g. MED.1.223908).
     */
    reqNum?: string;

    /**
     * Short description of the terrain features of the pickup location (WOODS, TREES,
     * PLOWED FIELDS, FLAT, STANDING WATER, MARSH, URBAN BUILT-UP AREA, MOUNTAIN, HILL,
     * SAND TD, ROCKY, VALLEY, METAMORPHIC ICE, UNKNOWN TD, SEA, NO STATEMENT).
     */
    terrain?: string;

    /**
     * Amplifying data for the terrain describing any notable additional terrain
     * features.
     */
    terrainRemarks?: string;

    /**
     * The call sign of the zone controller.
     */
    zoneContrCallSign?: string;

    /**
     * Flag indicating that the pickup site is hot and hostiles are in the area.
     */
    zoneHot?: boolean;

    /**
     * The expected marker identifying the pickup site (SMOKE ZONE MARKING, FLARES,
     * MIRROR, GLIDE ANGLE INDICATOR LIGHT, LIGHT ZONE MARKING, PANELS, FIRE, LASER
     * DESIGNATOR, STROBE LIGHTS, VEHICLE LIGHTS, COLORED SMOKE, WHITE PHOSPHERUS,
     * INFRARED, ILLUMINATION, FRATRICIDE FENCE).
     */
    zoneMarking?: string;

    /**
     * Color used for the pickup site marking (RED, WHITE, BLUE, YELLOW, GREEN, ORANGE,
     * BLACK, PURPLE, BROWN, TAN, GRAY, SILVER, CAMOUFLAGE, OTHER COLOR).
     */
    zoneMarkingColor?: string;

    /**
     * The name of the zone.
     */
    zoneName?: string;

    /**
     * The pickup site security (UNKNOWN ZONESECURITY, NO ENEMY, POSSIBLE ENEMY, ENEMY
     * IN AREA USE CAUTION, ENEMY IN AREA ARMED ESCORT REQUIRED).
     */
    zoneSecurity?: string;
  }

  export namespace Body {
    /**
     * Identity and medical information on the patient to be evacuated.
     */
    export interface CasualtyInfo {
      /**
       * The patient age, in years.
       */
      age?: number;

      /**
       * Allergy information.
       */
      allergy?: Array<CasualtyInfo.Allergy>;

      /**
       * The patient blood type (A POS, B POS, AB POS, O POS, A NEG, B NEG, AB NEG, O
       * NEG).
       */
      bloodType?: string;

      /**
       * The body part involved for the patient (HEAD, NECK, ABDOMEN, UPPER EXTREMITIES,
       * BACK, FACE, LOWER EXTREMITIES, FRONT, OBSTETRICAL GYNECOLOGICAL, OTHER BODY
       * PART).
       */
      bodyPart?: string;

      /**
       * Array of the WGS-84 latitude (-90 to 90, negative values south of the equator)
       * in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in
       * degrees, and altitude, in meters, of the burial location. This array must
       * contain a minimum of 2 elements (latitude and longitude), and may contain an
       * optional 3rd element (altitude).
       */
      burialLocation?: Array<number>;

      /**
       * The call sign of this patient.
       */
      callSign?: string;

      /**
       * Unique identifier for the patient care provider.
       */
      careProviderUrn?: string;

      /**
       * Optional casualty key.
       */
      casualtyKey?: string;

      /**
       * The type of medical issue resulting in the need to evacuate the patient (NON
       * BATTLE, CUT, BURN, SICK, FRACTURE, AMPUTATION, PERFORATION, NUCLEAR, EXHAUSTION,
       * BIOLOGICAL, CHEMICAL, SHOCK, PUNCTURE WOUND, OTHER CUT, WOUNDED IN ACTION,
       * DENIAL, COMBAT STRESS).
       */
      casualtyType?: string;

      /**
       * Array of the WGS-84 latitude (-90 to 90, negative values south of the equator)
       * in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in
       * degrees, and altitude, in meters, of the collection point. This array must
       * contain a minimum of 2 elements (latitude and longitude), and may contain an
       * optional 3rd element (altitude).
       */
      collectionPoint?: Array<number>;

      /**
       * Additional comments on the patient's casualty information.
       */
      comments?: string;

      /**
       * Health condition information.
       */
      condition?: Array<CasualtyInfo.Condition>;

      /**
       * The contamination specified for the patient (NONE, RADIATION, BIOLOGICAL,
       * CHEMICAL).
       */
      contamType?: string;

      /**
       * The patient's general medical state (SICK IN QUARTERS, RETURN TO DUTY, EVACUATE
       * WOUNDED, EVACUATE DECEASED, INTERRED).
       */
      disposition?: string;

      /**
       * The expected disposition of this patient (R T D, EVACUATE, EVACUATE TO FORWARD
       * SURGICAL TEAM, EVACUATE TO COMBAT SUPPORT HOSPITAL, EVACUATE TO AERO MEDICAL
       * STAGING FACILITY, EVACUATE TO SUSTAINING BASE MEDICAL TREATMENT FACILITY).
       */
      dispositionType?: string;

      /**
       * Medical condition causation information.
       */
      etiology?: Array<CasualtyInfo.Etiology>;

      /**
       * The required evacuation method for this patient (AIR, GROUND, NOT EVACUATED).
       */
      evacType?: string;

      /**
       * The patient sex (MALE, FEMALE).
       */
      gender?: string;

      /**
       * Health state information.
       */
      healthState?: Array<CasualtyInfo.HealthState>;

      /**
       * Injury specifics.
       */
      injury?: Array<CasualtyInfo.Injury>;

      /**
       * Last 4 characters of the patient social security code, or equivalent.
       */
      last4SSN?: string;

      /**
       * Medication specifics.
       */
      medication?: Array<CasualtyInfo.Medication>;

      /**
       * The patient common or legal name.
       */
      name?: string;

      /**
       * The country code indicating the citizenship of the patient.
       */
      nationality?: string;

      /**
       * The career field of this patient.
       */
      occSpeciality?: string;

      /**
       * The patient service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND
       * MILITARY, FRIEND CIVILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY,
       * HOSTILE CIVILIAN).
       */
      patientIdentity?: string;

      /**
       * The patient service status (US MILITARY, US CIVILIAN, NON US MILITARY, NON US
       * CIVILIAN, ENEMY POW).
       */
      patientStatus?: string;

      /**
       * The patient pay grade or rank designation (O-10, O-9, O-8, O-7, O-6, O-5, O-4,
       * O-3, O-2, O-1, CWO-5, CWO-4, CWO-2, CWO-1, E -9, E-8, E-7, E-6, E-5, E-4, E-3,
       * E-2, E-1, NONE, CIVILIAN).
       */
      payGrade?: string;

      /**
       * The priority of the medevac mission for this patient (URGENT, PRIORITY, ROUTINE,
       * URGENT SURGERY, CONVENIENCE).
       */
      priority?: string;

      /**
       * The method used to generate this medevac report (DEVICE, GROUND COMBAT
       * PERSONNEL, EVACUATION PERSONNEL, ECHELON1 PERSONNEL, ECHELON2 PERSONNEL).
       */
      reportGen?: string;

      /**
       * Datetime of the compiling of the patients casualty report, in ISO 8601 UTC
       * format.
       */
      reportTime?: string;

      /**
       * The patient branch of service (AIR FORCE, ARMY, NAVY, MARINES, CIV, CONTR,
       * UNKNOWN SERVICE).
       */
      service?: string;

      /**
       * Array specifying if any special equipment is need for each of the evacuation of
       * this patient (EXTRACTION EQUIPMENT, SEMI RIGID LITTER, BACKBOARD, CERVICAL
       * COLLAR ,JUNGLE PENETRATOR, OXYGEN, WHOLE BLOOD, VENTILATOR, HOIST, NONE).
       */
      specMedEquip?: Array<string>;

      /**
       * Treatment information.
       */
      treatment?: Array<CasualtyInfo.Treatment>;

      /**
       * Information obtained for vital signs.
       */
      vitalSignData?: Array<CasualtyInfo.VitalSignData>;
    }

    export namespace CasualtyInfo {
      /**
       * Allergy information.
       */
      export interface Allergy {
        /**
         * Additional comments on the patient's allergy information.
         */
        comments?: string;

        /**
         * Type of patient allergy (e.g. PENICILLIN, SULFA, OTHER).
         */
        type?: string;
      }

      /**
       * The group path from transmitter to receiver.
       */
      export interface Condition {
        /**
         * Body part location or body part referenced in condition. Intended as, but not
         * constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE
         * LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW
         * BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
         */
        bodyPart?: string;

        /**
         * Additional comments on the patient's condition.
         */
        comments?: string;

        /**
         * Datetime of the condition diagnosis in ISO 8601 UTC datetime format.
         */
        time?: string;

        /**
         * Health condition assessment. Intended as, but not constrained to, K07.1
         * Condition Type Enumeration (e.g. ACTIVITY HIGH, ACTIVITY LOW, ACTIVITY MEDIUM,
         * ACTIVITY NONE, AVPU ALERT, AVPU ALTERED MENTAL STATE, AVPU PAIN, AVPU
         * UNRESPONSIVE, etc.).
         */
        type?: string;
      }

      /**
       * Medical condition causation information.
       */
      export interface Etiology {
        /**
         * The body part or location affected from the etiology. Intended as, but not
         * constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE
         * LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW
         * BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
         */
        bodyPart?: string;

        /**
         * Additional comments on the patient's etiology information.
         */
        comments?: string;

        /**
         * Datetime of the discovery of the etiology state in ISO 8601 UTC format.
         */
        time?: string;

        /**
         * The cause or manner of causation of the medical condition. Intended as, but not
         * constrained to, K07.1 EtiologyType Enumeration (e.g. ASSAULT, BUILDING COLLAPSE,
         * BURN CHEMICAL, BURN ELECTRICAL, BURN, BURN HOT LIQUID, BURN RADIATION, BURN
         * THERMAL, etc.).
         */
        type?: string;
      }

      /**
       * Health state information.
       */
      export interface HealthState {
        /**
         * Medical color code used to quickly identify various medical state (e.g. AMBER,
         * BLACK, BLUE, GRAY, NORMAL, RED).
         */
        healthStateCode?: string;

        /**
         * Medical confidence factor.
         */
        medConfFactor?: number;

        /**
         * Datetime of the health state diagnosis in ISO 8601 UTC datetime format.
         */
        time?: string;

        /**
         * Generalized state of health type (BIOLOGICAL, CHEMICAL, COGNITIVE, HYDRATION,
         * LIFE SIGN, RADIATION, SHOCK, THERMAL).
         */
        type?: string;
      }

      /**
       * Injury specifics.
       */
      export interface Injury {
        /**
         * Body part location of the injury. Intended as, but not constrained to, K07.1
         * Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT
         * BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW
         * FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
         */
        bodyPart?: string;

        /**
         * Additional comments on the patient's injury information.
         */
        comments?: string;

        /**
         * The time of the injury, in ISO 8601 UTC format.
         */
        time?: string;

        /**
         * Classification of the injury type (ABRASION, AMPUTATION IT, AVULATION,
         * BALLISTIC, BLAST WAVE, BURN 1ST DEGREE, BURN 2ND DEGREE, BURN 3RD DEGREE, BURN
         * INHALATION, BURN LOWER AIRWAY, CHEST FLAIL, CHEST OPEN, DEGLOVING, ECCHYMOSIS,
         * FRACTURE CLOSED, FRACTURE CREPITUS, FRACTURE IT, FRACTURE OPEN, HEMATOMA,
         * IRREGULAR CONSISTENCY, IRREGULAR CONSISTENCY RIDGED, IRREGULAR CONSISTENCY
         * SWOLLEN, IRREGULAR CONSISTENCY SWOLLEN DISTENDED, IRREGULAR CONSISTENCY TENDER,
         * IRREGULAR POSITION, IRREGULAR SHAPE, IRREGULAR SHAPE MISSHAPED, IRREGULAR SHAPE
         * NON SYMMETRICAL, LACERATION, NEUROVASCULAR COMPROMISE, NEUROVASCULAR INTACT,
         * PUNCTURE, SEAT BELT SIGN, STAB, TIC TIM).
         */
        type?: string;
      }

      /**
       * Medication specifics.
       */
      export interface Medication {
        /**
         * Route of medication delivery (e.g. INJECTION, ORAL, etc.).
         */
        adminRoute?: string;

        /**
         * Body part location or body part referenced for medication. Intended as, but not
         * constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE
         * LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW
         * BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
         */
        bodyPart?: string;

        /**
         * Additional comments on the patient's medication information.
         */
        comments?: string;

        /**
         * Quantity of medicine or drug administered or recommended to be taken at a
         * particular time.
         */
        dose?: string;

        /**
         * The time that the medication was administered in ISO 8601 UTC format.
         */
        time?: string;

        /**
         * The type of medication administered. Intended as, but not constrained to, K07.1
         * Medication Enumeration (CEFOTETAN, ABRASION, ABX, AMOXILOXACIN, ANALGESIC,
         * COLLOID, CRYOPECIPITATES, CRYSTALLOID, EPINEPHRINE, ERTAPENEM, FENTANYL,
         * HEXTEND, LACTATED RINGERS, MOBIC, MORPHINE, NARCOTIC, NS, PENICILLIN, PLASMA,
         * PLATELETS, PRBC, TYLENOL, WHOLE BLOOD MT).
         */
        type?: string;
      }

      /**
       * Treatment information.
       */
      export interface Treatment {
        /**
         * Body part location or body part treated or to be treated. Intended as, but not
         * constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE
         * LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW
         * BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
         */
        bodyPart?: string;

        /**
         * Additional comments on the patient's treatment information.
         */
        comments?: string;

        /**
         * Datetime of the treatment in ISO 8601 UTC format.
         */
        time?: string;

        /**
         * Type of treatment administered or to be administered. Intended as, but not
         * constrained to, K07.1 Treatment Type Enumeration (e.g. AIRWAY ADJUNCT, AIRWAY
         * ASSISTED VENTILATION, AIRWAY COMBI TUBE USED, AIRWAY ET NT, AIRWAY INTUBATED,
         * AIRWAY NPA OPA APPLIED, AIRWAY PATIENT, AIRWAY POSITIONAL, AIRWAY SURGICAL CRIC,
         * BREATHING CHEST SEAL, BREATHING CHEST TUBE, etc.).
         */
        type?: string;
      }

      /**
       * Information obtained for vital signs.
       */
      export interface VitalSignData {
        /**
         * Medical confidence factor.
         */
        medConfFactor?: number;

        /**
         * Datetime of the vital sign measurement in ISO 8601 UTC datetime format.
         */
        time?: string;

        /**
         * Patient vital sign measured (e.g. HEART RATE, PULSE RATE, RESPIRATION RATE,
         * TEMPERATURE CORE, etc.).
         */
        vitalSign?: string;

        /**
         * Vital sign value 1. The content of this field is dependent on the type of vital
         * sign being measured (see the vitalSign field).
         */
        vitalSign1?: number;

        /**
         * Vital sign value 2. The content of this field is dependent on the type of vital
         * sign being measured (see the vitalSign field).
         */
        vitalSign2?: number;
      }
    }

    /**
     * Data defining any enemy intelligence reported by the requestor.
     */
    export interface EnemyData {
      /**
       * Directions to known enemies in the operation area (NORTH, NORTHEAST, EAST,
       * SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST, SURROUNDED).
       */
      dirToEnemy?: string;

      /**
       * Comments provided by friendlies about the evac zone.
       */
      friendliesRemarks?: string;

      /**
       * Hot Landing Zone remarks.
       */
      hlzRemarks?: string;

      /**
       * The type of hostile fire received (SMALL ARMS, MORTAR, ARTILLERY, ROCKETS).
       */
      hostileFireType?: string;
    }
  }
}

export declare namespace Evac {
  export { type EvacCreateParams as EvacCreateParams };
}
