// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../resource';
import * as Core from '../core';
import * as AircraftSortieAPI from './air-operations/aircraft-sortie';

export class AircraftSorties extends APIResource {
  /**
   * Service operation to get a single AircraftSortie record by its unique ID passed
   * as a path parameter.
   */
  retrieve(
    params: AircraftSortyRetrieveParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<AircraftSortieAPI.AircraftsortieFull> {
    const { path_id, body_id } = params;
    return this._client.get(`/udl/aircraftsortie/${path_id}`, options);
  }

  /**
   * Service operation to update a single AircraftSortie. A specific role is required
   * to perform this service operation. Please contact the UDL team for assistance.
   */
  update(params: AircraftSortyUpdateParams, options?: Core.RequestOptions): Core.APIPromise<void> {
    const { path_id, body_id, body_id, ...body } = params;
    return this._client.put(`/udl/aircraftsortie/${path_id}`, {
      body: { id: body_id, id: body_id, ...body },
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }

  /**
   * Service operation to provide detailed information on available dynamic query
   * parameters for a particular data type.
   */
  queryhelp(options?: Core.RequestOptions): Core.APIPromise<void> {
    return this._client.get('/udl/aircraftsortie/queryhelp', {
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }

  /**
   * Service operation to dynamically query data and only return specified
   * columns/fields. Requested columns are specified by the 'columns' query parameter
   * and should be a comma separated list of valid fields for the specified data
   * type. classificationMarking is always returned. See the queryhelp operation
   * (/udl/<datatype>/queryhelp) for more details on valid/required query parameter
   * information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5
   * hours would return the satNo and period of elsets with an epoch greater than 5
   * hours ago.
   */
  tuple(
    params: AircraftSortyTupleParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<AircraftSortyTupleResponse> {
    const { columns, plannedDepTime } = params;
    return this._client.get('/udl/aircraftsortie/tuple', options);
  }
}

export type AircraftSortyTupleResponse = Array<AircraftSortieAPI.AircraftsortieFull>;

export interface AircraftSortyRetrieveParams {
  /**
   * Path param:
   */
  path_id: string;

  /**
   * Body param: The ID of the AircraftSortie to find.
   */
  body_id: string;
}

export interface AircraftSortyUpdateParams {
  /**
   * Path param:
   */
  path_id: string;

  /**
   * Body param: The ID of the AircraftSortie to update.
   */
  body_id: string;

  /**
   * Body param: Classification marking of the data in IC/CAPCO Portion-marked
   * format.
   */
  classificationMarking: string;

  /**
   * Body param: Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST
   * data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: string;

  /**
   * Body param: The scheduled time that the Aircraft sortie is planned to depart, in
   * ISO 8601 UTC format with millisecond precision.
   */
  plannedDepTime: string;

  /**
   * Body param: Source of the data.
   */
  source: string;

  /**
   * Body param: Unique identifier of the record, auto-generated by the system.
   */
  body_id?: string;

  /**
   * Body param: The actual arrival time, in ISO 8601 UTC format with millisecond
   * precision.
   */
  actualArrTime?: string;

  /**
   * Body param: The actual time the Aircraft comes to a complete stop in its parking
   * position, in ISO 8601 UTC format with millisecond precision.
   */
  actualBlockInTime?: string;

  /**
   * Body param: The actual time the Aircraft begins to taxi from its parking
   * position, in ISO 8601 UTC format with millisecond precision.
   */
  actualBlockOutTime?: string;

  /**
   * Body param: The actual departure time, in ISO 8601 UTC format.
   */
  actualDepTime?: string;

  /**
   * Body param: The Automatic Dependent Surveillance-Broadcast (ADS-B) device
   * identifier.
   */
  aircraftADSB?: string;

  /**
   * Body param: Alternate Aircraft Identifier provided by source.
   */
  aircraftAltId?: string;

  /**
   * Body param: Aircraft event text.
   */
  aircraftEvent?: string;

  /**
   * Body param: The aircraft Model Design Series designation assigned to this
   * sortie.
   */
  aircraftMDS?: string;

  /**
   * Body param: Remarks concerning the aircraft.
   */
  aircraftRemarks?: string;

  /**
   * Body param: The amount of time allowed between launch order and takeoff, in
   * seconds.
   */
  alertStatus?: number;

  /**
   * Body param: The Alert Status code.
   */
  alertStatusCode?: string;

  /**
   * Body param: The Air Mobility Command (AMC) mission number of the sortie.
   */
  amcMsnNum?: string;

  /**
   * Body param: The type of mission (e.g. SAAM, CHNL, etc.).
   */
  amcMsnType?: string;

  /**
   * Body param: The arrival Federal Aviation Administration (FAA) code of this
   * sortie.
   */
  arrFAA?: string;

  /**
   * Body param: The arrival International Aviation Transport Association (IATA) code
   * of this sortie.
   */
  arrIATA?: string;

  /**
   * Body param: The arrival International Civil Aviation Organization (ICAO) of this
   * sortie.
   */
  arrICAO?: string;

  /**
   * Body param: The itinerary identifier of the arrival location.
   */
  arrItinerary?: number;

  /**
   * Body param: Purpose code at the arrival location of this sortie.
   */
  arrPurposeCode?: string;

  /**
   * Body param: The call sign assigned to the aircraft on this sortie.
   */
  callSign?: string;

  /**
   * Body param: Description of the cargo configuration (e.g. C-1, C-2, C-3, DV-1,
   * DV-2, AE-1, etc.) currently on board the aircraft. Configuration meanings are
   * determined by the data source.
   */
  cargoConfig?: string;

  /**
   * Body param: The last name of the aircraft commander.
   */
  commanderName?: string;

  /**
   * Body param: Time the row was created in the database, auto-populated by the
   * system.
   */
  createdAt?: string;

  /**
   * Body param: Application user who created the row in the database, auto-populated
   * by the system.
   */
  createdBy?: string;

  /**
   * Body param: The current state of this sortie.
   */
  currentState?: string;

  /**
   * Body param: The primary delay code.
   */
  delayCode?: string;

  /**
   * Body param: The departure Federal Aviation Administration (FAA) code of this
   * sortie.
   */
  depFAA?: string;

  /**
   * Body param: The departure International Aviation Transport Association (IATA)
   * code of this sortie.
   */
  depIATA?: string;

  /**
   * Body param: The departure International Civil Aviation Organization (ICAO) of
   * this sortie.
   */
  depICAO?: string;

  /**
   * Body param: The itinerary identifier of the departure location.
   */
  depItinerary?: number;

  /**
   * Body param: Purpose code at the departure location of this sortie.
   */
  depPurposeCode?: string;

  /**
   * Body param: Due home date by which the aircraft must return to its home station,
   * in ISO 8601 UTC format with millisecond precision.
   */
  dhd?: string;

  /**
   * Body param: Reason the aircraft must return to home station by its due home
   * date.
   */
  dhdReason?: string;

  /**
   * Body param: The current estimated time that the Aircraft is planned to arrive,
   * in ISO 8601 UTC format with millisecond precision.
   */
  estArrTime?: string;

  /**
   * Body param: The estimated time the Aircraft will come to a complete stop in its
   * parking position, in ISO 8601 UTC format with millisecond precision.
   */
  estBlockInTime?: string;

  /**
   * Body param: The estimated time the Aircraft will begin to taxi from its parking
   * position, in ISO 8601 UTC format with millisecond precision.
   */
  estBlockOutTime?: string;

  /**
   * Body param: The current estimated time that the Aircraft is planned to depart,
   * in ISO 8601 UTC format with millisecond precision.
   */
  estDepTime?: string;

  /**
   * Body param: Name of the uploaded PDF.
   */
  filename?: string;

  /**
   * Body param: Size of the supporting PDF, in bytes.
   */
  filesize?: number;

  /**
   * Body param: The planned flight time for this sortie, in minutes.
   */
  flightTime?: number;

  /**
   * Body param: Desk phone number of the flight manager assigned to the sortie. Null
   * when no flight manager is assigned.
   */
  fmDeskNum?: string;

  /**
   * Body param: Last name of the flight manager assigned to the sortie. Null when no
   * flight manager is assigned.
   */
  fmName?: string;

  /**
   * Body param: Mass of fuel required for this leg of the sortie, in kilograms.
   */
  fuelReq?: number;

  /**
   * Body param: Scheduled ground time, in minutes.
   */
  gndTime?: number;

  /**
   * Body param: Unique identifier of the aircraft.
   */
  idAircraft?: string;

  /**
   * Body param: The unique identifier of the mission to which this sortie is
   * assigned.
   */
  idMission?: string;

  /**
   * Body param: Joint Chiefs of Staff priority of this sortie.
   */
  jcsPriority?: string;

  /**
   * Body param: The leg number of this sortie.
   */
  legNum?: number;

  /**
   * Body param: The external system line number of this sortie.
   */
  lineNumber?: number;

  /**
   * Body param: The mission ID according to the source system.
   */
  missionId?: string;

  /**
   * Body param: Time the associated mission data was last updated in relation to the
   * aircraft assignment, in ISO 8601 UTC format with millisecond precision. If this
   * time is coming from an external system, it may not sync with the latest mission
   * time associated to this record.
   */
  missionUpdate?: string;

  /**
   * Body param: Remarks concerning the sortie objective.
   */
  objectiveRemarks?: string;

  /**
   * Body param: Originating system or organization which produced the data, if
   * different from the source. The origin may be different than the source if the
   * source was a mediating system which forwarded the data on behalf of the origin
   * system. If null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * Body param: The originating source network on which this record was created,
   * auto-populated by the system.
   */
  origNetwork?: string;

  /**
   * Body param: The sortie identifier provided by the originating source.
   */
  origSortieId?: string;

  /**
   * Body param: Liquid oxygen onboard the aircraft for the crew compartment, in
   * liters.
   */
  oxyOnCrew?: number;

  /**
   * Body param: Liquid oxygen onboard the aircraft for the troop compartment, in
   * liters.
   */
  oxyOnPax?: number;

  /**
   * Body param: Liquid oxygen required on the aircraft for the crew compartment, in
   * liters.
   */
  oxyReqCrew?: number;

  /**
   * Body param: Liquid oxygen required on the aircraft for the troop compartment, in
   * liters.
   */
  oxyReqPax?: number;

  /**
   * Body param: The status of the supporting document.
   */
  paperStatus?: string;

  /**
   * Body param: The version number of the crew paper.
   */
  papersVersion?: string;

  /**
   * Body param: The POI parking location.
   */
  parkingLoc?: string;

  /**
   * Body param: The number of passengers tasked for this sortie.
   */
  passengers?: number;

  /**
   * Body param: The scheduled time that the Aircraft sortie is planned to arrive, in
   * ISO 8601 UTC format with millisecond precision.
   */
  plannedArrTime?: string;

  /**
   * Body param: The prior permission required (PPR) status.
   */
  pprStatus?: string;

  /**
   * Body param: The planned primary Standard Conventional Load of the aircraft for
   * this sortie.
   */
  primarySCL?: string;

  /**
   * Body param: When crew papers are associated to this sortie, the system updates
   * this value. This field is the URI location in the document repository of that
   * raw file. To download the raw file, prepend
   * https://udl-hostname/scs/download?id= to this field's value.
   */
  rawFileURI?: string;

  /**
   * Body param: Aircraft configuration required for the mission.
   */
  reqConfig?: string;

  /**
   * Body param: Remarks concerning the results of this sortie.
   */
  resultRemarks?: string;

  /**
   * Body param: Type of Ravens required for this sortie (N - None, R - Raven
   * (Security Team) required, C6 - Consider ravens (Ground time over 6 hours), R6 -
   * Ravens required (Ground time over 6 hours)).
   */
  rvnReq?: string;

  /**
   * Body param: Remarks concerning the schedule.
   */
  scheduleRemarks?: string;

  /**
   * Body param: The planned secondary Standard Conventional Load of the aircraft for
   * this sortie.
   */
  secondarySCL?: string;

  /**
   * Body param: Indicates the group responsible for recording the completion time of
   * the next event in the sequence of events assigned to this sortie (e.g. OPS -
   * Operations, MX - Maintenance, TR - Transportation, etc.).
   */
  soe?: string;

  /**
   * Body param: The scheduled UTC date for this sortie, in ISO 8601 date-only format
   * (ex. YYYY-MM-DD).
   */
  sortieDate?: string;

  /**
   * Body param: The source data library from which this record was received. This
   * could be a remote or tactical UDL or another data library. If null, the record
   * should be assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * Body param: The tail number of the aircraft assigned to this sortie.
   */
  tailNumber?: string;
}

export interface AircraftSortyTupleParams {
  /**
   * Comma-separated list of valid field names for this data type to be returned in
   * the response. Only the fields specified will be returned as well as the
   * classification marking of the data, if applicable. See the �queryhelp� operation
   * for a complete list of possible fields.
   */
  columns: string;

  /**
   * The scheduled time that the Aircraft sortie is planned to depart, in ISO 8601
   * UTC format with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)
   */
  plannedDepTime: string;
}

export declare namespace AircraftSorties {
  export {
    type AircraftSortyTupleResponse as AircraftSortyTupleResponse,
    type AircraftSortyRetrieveParams as AircraftSortyRetrieveParams,
    type AircraftSortyUpdateParams as AircraftSortyUpdateParams,
    type AircraftSortyTupleParams as AircraftSortyTupleParams,
  };
}
