// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../resource';
import * as Core from '../../core';
import * as AntennasAPI from '../antennas';
import * as BatteriesAPI from '../batteries';
import * as EnginesAPI from '../engines';
import * as EntitiesAPI from '../entities';

export class History extends APIResource {
  /**
   * Service operation to dynamically query historical data by a variety of query
   * parameters not specified in this API documentation. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   */
  list(params: HistoryListParams, options?: Core.RequestOptions): Core.APIPromise<HistoryListResponse> {
    const { obTime, columns } = params;
    return this._client.get('/udl/eoobservation/history', options);
  }

  /**
   * Service operation to dynamically query historical data by a variety of query
   * parameters not specified in this API documentation, then write that data to the
   * Secure Content Store. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   */
  aodr(params: HistoryAodrParams, options?: Core.RequestOptions): Core.APIPromise<void> {
    const { obTime, columns, notification, outputDelimiter, outputFormat } = params;
    return this._client.get('/udl/eoobservation/history/aodr', {
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }

  /**
   * Service operation to return the count of records satisfying the specified query
   * parameters. This operation is useful to determine how many records pass a
   * particular query criteria without retrieving large amounts of data. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
   * valid/required query parameter information.
   */
  count(params: HistoryCountParams, options?: Core.RequestOptions): Core.APIPromise<string> {
    const { obTime } = params;
    return this._client.get('/udl/eoobservation/history/count', {
      ...options,
      headers: { Accept: 'text/plain', ...options?.headers },
    });
  }
}

/**
 * Model representation of observation data for electro-optical based sensor
 * phenomenologies. ECI J2K is the preferred reference frame for EOObservations,
 * however, several user-specified reference frames are accommodated. Users should
 * check the EOObservation record as well as the 'Discover' tab in the storefront
 * to confirm the coordinate frames used by the data provider.
 */
export interface EoObservationFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: string;

  /**
   * Ob detection time in ISO 8601 UTC with microsecond precision.
   */
  obTime: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Line of sight azimuth angle in degrees and topocentric frame.
   */
  azimuth?: number;

  /**
   * Sensor line of sight azimuth angle bias in degrees.
   */
  azimuthBias?: number;

  /**
   * Rate of change of the line of sight azimuth in degrees per second.
   */
  azimuthRate?: number;

  /**
   * One sigma uncertainty in the line of sight azimuth angle, in degrees.
   */
  azimuthUnc?: number;

  /**
   * Background intensity for IR observations, in kw/sr/um.
   */
  bgIntensity?: number;

  /**
   * Method indicating telescope movement during collection (AUTOTRACK, MANUAL
   * AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).
   */
  collectMethod?: string;

  /**
   * Object Correlation Quality value (non-standardized). Users should consult data
   * providers regarding the expected range of values.
   */
  corrQuality?: number;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Line of sight declination, in degrees, in the specified referenceFrame. If
   * referenceFrame is null then J2K should be assumed.
   */
  declination?: number;

  /**
   * Sensor line of sight declination angle bias in degrees.
   */
  declinationBias?: number;

  /**
   * Line of sight declination rate of change, in degrees/sec, in the specified
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  declinationRate?: number;

  /**
   * One sigma uncertainty in the line of sight declination angle, in degrees.
   */
  declinationUnc?: number;

  /**
   * Optional source-provided and searchable metadata or descriptor of the data.
   */
  descriptor?: string;

  /**
   * Line of sight elevation in degrees and topocentric frame.
   */
  elevation?: number;

  /**
   * Sensor line of sight elevation bias in degrees.
   */
  elevationBias?: number;

  /**
   * Rate of change of the line of sight elevation in degrees per second.
   */
  elevationRate?: number;

  /**
   * One sigma uncertainty in the line of sight elevation angle, in degrees.
   */
  elevationUnc?: number;

  /**
   * Model representation of additional detailed observation data for electro-optical
   * based sensor phenomenologies.
   */
  eoobservationDetails?: EoObservationFull.EoobservationDetails;

  /**
   * Image exposure duration in seconds.
   */
  expDuration?: number;

  /**
   * The number of RSOs detected in the sensor field of view.
   */
  fovCount?: number;

  /**
   * For GEO detections, the altitude in km.
   */
  geoalt?: number;

  /**
   * For GEO detections, the latitude in degrees north.
   */
  geolat?: number;

  /**
   * For GEO detections, the longitude in degrees east.
   */
  geolon?: number;

  /**
   * For GEO detections, the range in km.
   */
  georange?: number;

  /**
   * Unique identifier of the target on-orbit object, if correlated.
   */
  idOnOrbit?: string;

  /**
   * Unique identifier of the reporting sensor.
   */
  idSensor?: string;

  /**
   * Unique identifier of the Sky Imagery.
   */
  idSkyImagery?: string;

  /**
   * Intensity of the target for IR observations, in kw/sr/um.
   */
  intensity?: number;

  /**
   * One sigma uncertainty in the line of sight pointing in micro-radians.
   */
  losUnc?: number;

  /**
   * Line-of-sight cartesian X position of the target, in km, in the specified
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  losx?: number;

  /**
   * Line-of-sight cartesian X velocity of target, in km/sec, in the specified
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  losxvel?: number;

  /**
   * Line-of-sight cartesian Y position of the target, in km, in the specified
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  losy?: number;

  /**
   * Line-of-sight cartesian Y velocity of target, in km/sec, in the specified
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  losyvel?: number;

  /**
   * Line-of-sight cartesian Z position of the target, in km, in the specified
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  losz?: number;

  /**
   * Line-of-sight cartesian Z velocity of target, in km/sec, in the specified
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  loszvel?: number;

  /**
   * Calibrated magnitude in units of magnitudes.
   */
  mag?: number;

  /**
   * Formula: mag - 5.0 \* log_10(geo_range / 1000000.0).
   */
  magNormRange?: number;

  /**
   * Uncertainty of calibrated magnitude in units of magnitudes.
   */
  magUnc?: number;

  /**
   * Net object signature = counts / expDuration.
   */
  netObjSig?: number;

  /**
   * Net object signature uncertainty = counts uncertainty / expDuration.
   */
  netObjSigUnc?: number;

  /**
   * The position of this observation within a track (FENCE, FIRST, IN, LAST,
   * SINGLE). This identifier is optional and, if null, no assumption should be made
   * regarding whether other observations may or may not exist to compose a track.
   */
  obPosition?: string;

  /**
   * Model object representing on-orbit objects or satellites in the system.
   */
  onOrbit?: EoObservationFull.OnOrbit;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Optional identifier provided by observation source to indicate the target
   * onorbit object of this observation. This may be an internal identifier and not
   * necessarily a valid satellite number.
   */
  origObjectId?: string;

  /**
   * Optional identifier provided by observation source to indicate the sensor
   * identifier which produced this observation. This may be an internal identifier
   * and not necessarily a valid sensor ID.
   */
  origSensorId?: string;

  /**
   * Boolean indicating that the target object was in a penumbral eclipse at the time
   * of this observation.
   */
  penumbra?: boolean;

  /**
   * Primary Extinction Coefficient, in Magnitudes. Primary Extinction is the
   * coefficient applied to the airmass to determine how much the observed visual
   * magnitude has been attenuated by the atmosphere. Extinction, in general,
   * describes the absorption and scattering of electromagnetic radiation by dust and
   * gas between an emitting astronomical object and the observer. See the
   * EOObservationDetails API for specification of extinction coefficients for
   * multiple spectral filters.
   */
  primaryExtinction?: number;

  /**
   * Primary Extinction Coefficient Uncertainty, in Magnitudes.
   */
  primaryExtinctionUnc?: number;

  /**
   * Line of sight right ascension, in degrees, in the specified referenceFrame. If
   * referenceFrame is null then J2K should be assumed.
   */
  ra?: number;

  /**
   * Sensor line of sight right ascension bias in degrees.
   */
  raBias?: number;

  /**
   * Line of sight range in km.
   */
  range?: number;

  /**
   * Sensor line of sight range bias in km.
   */
  rangeBias?: number;

  /**
   * Rate of change of the line of sight range in km/sec.
   */
  rangeRate?: number;

  /**
   * One sigma uncertainty in the line of sight range rate, in kilometers/second.
   */
  rangeRateUnc?: number;

  /**
   * One sigma uncertainty in the line of sight range, in kilometers.
   */
  rangeUnc?: number;

  /**
   * Line of sight right ascension rate of change, in degrees/sec, in the specified
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  raRate?: number;

  /**
   * One sigma uncertainty in the line of sight right ascension angle, in degrees.
   */
  raUnc?: number;

  /**
   * Optional URI location in the document repository of the raw file parsed by the
   * system to produce this record. To download the raw file, prepend
   * https://udl-hostname/scs/download?id= to this value.
   */
  rawFileURI?: string;

  /**
   * The reference frame of the EOObservation measurements. If the referenceFrame is
   * null it is assumed to be J2000.
   */
  referenceFrame?: string;

  /**
   * Satellite/Catalog number of the target on-orbit object.
   */
  satNo?: number;

  /**
   * Sensor altitude at obTime (if mobile/onorbit) in km.
   */
  senalt?: number;

  /**
   * Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be
   * obtained from sensor info. -90 to 90 degrees (negative values south of equator).
   */
  senlat?: number;

  /**
   * Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be
   * obtained from sensor info. -180 to 180 degrees (negative values west of Prime
   * Meridian).
   */
  senlon?: number;

  /**
   * The quaternion describing the rotation of the sensor in relation to the
   * body-fixed frame used for this system into the local geodetic frame, at
   * observation time (obTime). The array element order convention is scalar
   * component first, followed by the three vector components (qc, q1, q2, q3).
   */
  senQuat?: Array<number>;

  /**
   * The reference frame of the observing sensor state. If the senReferenceFrame is
   * null it is assumed to be J2000.
   */
  senReferenceFrame?: string;

  /**
   * Cartesian X velocity of the observing mobile/onorbit sensor at obTime, in
   * km/sec, in the specified senReferenceFrame. If senReferenceFrame is null then
   * J2K should be assumed.
   */
  senvelx?: number;

  /**
   * Cartesian Y velocity of the observing mobile/onorbit sensor at obTime, in
   * km/sec, in the specified senReferenceFrame. If senReferenceFrame is null then
   * J2K should be assumed.
   */
  senvely?: number;

  /**
   * Cartesian Z velocity of the observing mobile/onorbit sensor at obTime, in
   * km/sec, in the specified senReferenceFrame. If senReferenceFrame is null then
   * J2K should be assumed.
   */
  senvelz?: number;

  /**
   * Cartesian X position of the observing mobile/onorbit sensor at obTime, in km, in
   * the specified senReferenceFrame. If senReferenceFrame is null then J2K should be
   * assumed.
   */
  senx?: number;

  /**
   * Cartesian Y position of the observing mobile/onorbit sensor at obTime, in km, in
   * the specified senReferenceFrame. If senReferenceFrame is null then J2K should be
   * assumed.
   */
  seny?: number;

  /**
   * Cartesian Z position of the observing mobile/onorbit sensor at obTime, in km, in
   * the specified senReferenceFrame. If senReferenceFrame is null then J2K should be
   * assumed.
   */
  senz?: number;

  /**
   * Shutter delay in seconds.
   */
  shutterDelay?: number;

  /**
   * Average Sky Background signal, in Magnitudes. Sky Background refers to the
   * incoming light from an apparently empty part of the night sky.
   */
  skyBkgrnd?: number;

  /**
   * Angle from the sun to the equatorial plane.
   */
  solarDecAngle?: number;

  /**
   * The angle, in degrees, between the projections of the target-to-observer vector
   * and the target-to-sun vector onto the equatorial plane. The angle is represented
   * as negative when closing and positive when opening.
   */
  solarEqPhaseAngle?: number;

  /**
   * The angle, in degrees, between the target-to-observer vector and the
   * target-to-sun vector.
   */
  solarPhaseAngle?: number;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * Optional array of provider/source specific tags for this data, where each
   * element is no longer than 32 characters, used for implementing data owner
   * conditional access controls to restrict access to the data. Should be left null
   * by data providers unless conditional access controls are coordinated with the
   * UDL team.
   */
  tags?: Array<string>;

  /**
   * Optional identifier to indicate the specific tasking which produced this
   * observation.
   */
  taskId?: string;

  /**
   * Sensor timing bias in seconds.
   */
  timingBias?: number;

  /**
   * Optional identifier of the track to which this observation belongs.
   */
  trackId?: string;

  /**
   * Optional identifier to track a commercial or marketplace transaction executed to
   * produce this data.
   */
  transactionId?: string;

  /**
   * Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR,
   * RF, etc).
   */
  type?: string;

  /**
   * Boolean indicating this observation is part of an uncorrelated track or was
   * unable to be correlated to a known object. This flag should only be set to true
   * by data providers after an attempt to correlate to an on-orbit object was made
   * and failed. If unable to correlate, the 'origObjectId' field may be populated
   * with an internal data provider specific identifier.
   */
  uct?: boolean;

  /**
   * Boolean indicating that the target object was in umbral eclipse at the time of
   * this observation.
   */
  umbra?: boolean;

  /**
   * Formula: 2.5 \* log_10 (zero_mag_counts / expDuration).
   */
  zeroptd?: number;

  /**
   * This is the uncertainty in the zero point for the filter used for this
   * observation/row in units of mag. For use with differential photometry.
   */
  zeroPtdUnc?: number;
}

export namespace EoObservationFull {
  /**
   * Model representation of additional detailed observation data for electro-optical
   * based sensor phenomenologies.
   */
  export interface EoobservationDetails {
    /**
     * World Coordinate System (WCS) X pixel origin in astrometric fit.
     */
    acalCrPixX?: number;

    /**
     * World Coordinate System (WCS) Y pixel origin in astrometric fit.
     */
    acalCrPixY?: number;

    /**
     * World Coordinate System (WCS) equatorial coordinate X origin corresponding to
     * CRPIX in astrometric fit in degrees.
     */
    acalCrValX?: number;

    /**
     * World Coordinate System (WCS) equatorial coordinate Y origin corresponding to
     * CRPIX in astrometric fit in degrees.
     */
    acalCrValY?: number;

    /**
     * Number of stars used in astrometric fit.
     */
    acalNumStars?: number;

    /**
     * This is the background signal at or in the vicinity of the radiometric source
     * position. Specifically, this is the average background count level (DN/pixel)
     * divided by the exposure time in seconds of the background pixels used in the
     * photometric extraction. DN/pixel/sec.
     */
    backgroundSignal?: number;

    /**
     * Estimated 1-sigma uncertainty in the background signal at or in the vicinity of
     * the radiometric source position. DN/pixel/sec.
     */
    backgroundSignalUnc?: number;

    /**
     * The number of pixels binned horizontally.
     */
    binningHoriz?: number;

    /**
     * The number of pixels binned vertically.
     */
    binningVert?: number;

    /**
     * The x centroid position on the CCD of the target object in pixels.
     */
    ccdObjPosX?: number;

    /**
     * The y centroid position on the CCD of the target object in pixels.
     */
    ccdObjPosY?: number;

    /**
     * This is the pixel width of the target. This is either a frame-by-frame
     * measurement or a constant point spread function or synthetic aperture used in
     * the extraction.
     */
    ccdObjWidth?: number;

    /**
     * Operating temperature of CCD recorded during exposure or measured during
     * calibrations in K.
     */
    ccdTemp?: number;

    /**
     * Observed centroid column number on the focal plane in pixels (0 is left edge,
     * 0.5 is center of pixels along left of image).
     */
    centroidColumn?: number;

    /**
     * Observed centroid row number on the focal plane in pixels (0 is top edge, 0.5 is
     * center of pixels along top of image).
     */
    centroidRow?: number;

    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format, will be
     * set to EOObservation classificationMarking if blank.
     */
    classificationMarking?: string;

    /**
     * Color coefficient for filter n for a space-based sensor where there is no
     * atmospheric extinction. Must be present for all values n=1 to
     * numSpectralFilters, in incrementing order of n, and for no other values of n.
     */
    colorCoeffs?: Array<number>;

    /**
     * Spatial variance of image distribution in horizontal direction measured in
     * pixels squared.
     */
    columnVariance?: number;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * The reference number n, in neutralDensityFilters for the currently used neutral
     * density filter.
     */
    currentNeutralDensityFilterNum?: number;

    /**
     * The reference number, x, where x ranges from 1 to n, where n is the number
     * specified in spectralFilters that corresponds to the spectral filter given in
     * the corresponding spectralFilterNames.
     */
    currentSpectralFilterNum?: number;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     *
     * , will be set to EOObservation dataMode if blank.
     */
    dataMode?: string;

    /**
     * Covariance (Y^2) in measured declination (Y) in deg^2.
     */
    declinationCov?: number;

    /**
     * An array of measurements that correspond to the distance from the streak center
     * measured from the optical image in pixels that show change over an interval of
     * time. The array length is dependent on the length of the streak. The
     * distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in
     * size.
     */
    distFromStreakCenter?: Array<number>;

    /**
     * Degrees Off Element Set.
     */
    does?: number;

    /**
     * The extinction coefficient computed for the nth filter. Must be present for all
     * values n=1 to numSpectralFilters, in incrementing order of n, and for no other
     * values of n. Units = mag/airmass.
     */
    extinctionCoeffs?: Array<number>;

    /**
     * This is the uncertainty in the extinction coefficient for the nth filter. Must
     * be present for all values n=1 to numSpectralFilters, in incrementing order of n,
     * and for no other values of n. -9999 for space-based sensors. Units =
     * mag/airmass.
     */
    extinctionCoeffsUnc?: Array<number>;

    /**
     * Some sensors have gain settings. This value is the gain used during the
     * observation in units e-/ADU. If no gain is used, the value = 1.
     */
    gain?: number;

    /**
     * Unique identifier of the parent EOObservation.
     */
    idEOObservation?: string;

    /**
     * Sensor instantaneous field of view (ratio of pixel pitch to focal length).
     */
    ifov?: number;

    /**
     * Instrumental magnitude of a sensor before corrections are applied for atmosphere
     * or to transform to standard magnitude scale.
     */
    magInstrumental?: number;

    /**
     * Uncertainty in the instrumental magnitude.
     */
    magInstrumentalUnc?: number;

    /**
     * Must be present for all values n=1 to numNeutralDensityFilters, in incrementing
     * order of n, and for no other values of n.
     */
    neutralDensityFilterNames?: Array<string>;

    /**
     * The transmission of the nth neutral density filter. Must be present for all
     * values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no
     * other values of n.
     */
    neutralDensityFilterTransmissions?: Array<number>;

    /**
     * This is the uncertainty in the transmission for the nth filter. Must be present
     * for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and
     * for no other values of n.
     */
    neutralDensityFilterTransmissionsUnc?: Array<number>;

    /**
     * Number of catalog stars in the detector field of view (FOV) with the target
     * object. Can be 0 for narrow FOV sensors.
     */
    numCatalogStars?: number;

    /**
     * Number of correlated stars in the FOV with the target object. Can be 0 for
     * narrow FOV sensors.
     */
    numCorrelatedStars?: number;

    /**
     * Number of detected stars in the FOV with the target object. Helps identify
     * frames with clouds.
     */
    numDetectedStars?: number;

    /**
     * The value is the number of neutral density filters used.
     */
    numNeutralDensityFilters?: number;

    /**
     * The value is the number of spectral filters used.
     */
    numSpectralFilters?: number;

    /**
     * Distance from the target object to the sun during the observation in meters.
     */
    objSunRange?: number;

    /**
     * Ob detection time in ISO 8601 UTC with microsecond precision, will be set to
     * EOObservation obTime if blank.
     */
    obTime?: string;

    /**
     * Optical Cross Section computed in units m(2)/ster.
     */
    opticalCrossSection?: number;

    /**
     * Uncertainty in Optical Cross Section computed in units m(2)/ster.
     */
    opticalCrossSectionUnc?: number;

    /**
     * Number of stars used in photometric fit count.
     */
    pcalNumStars?: number;

    /**
     * Peak Aperture Raw Counts is the value of the peak pixel in the real or synthetic
     * aperture containing the target signal.
     */
    peakApertureCount?: number;

    /**
     * Peak Background Raw Counts is the largest pixel value used in background signal.
     */
    peakBackgroundCount?: number;

    /**
     * Solar phase angle bisector vector. The vector that bisects the solar phase
     * angle. The phase angle bisector is the angle that is << of the value in #48.
     * Then calculate the point on the RA/DEC (ECI J2000.0) sphere that a vector at
     * this angle would intersect.
     */
    phaseAngBisect?: number;

    /**
     * Pixel array size (height) in pixels.
     */
    pixelArrayHeight?: number;

    /**
     * Pixel array size (width) in pixels.
     */
    pixelArrayWidth?: number;

    /**
     * Maximum valid pixel value, this is defined as 2^(number of bits per pixel). For
     * example, a CCD with 8-bitpixels, would have a maximum valid pixel value of 2^8
     * = 256. This can represent the saturation value of the detector, but some sensors
     * will saturate at a value significantly lower than full well depth. This is the
     * analog-to-digital conversion (ADC) saturation value.
     */
    pixelMax?: number;

    /**
     * Minimum valid pixel value, this is typically 0.
     */
    pixelMin?: number;

    /**
     * Predicted Azimuth angle of the target object from a ground -based sensor (no
     * atmospheric refraction correction required). AZ_EL implies apparent topocentric
     * place in true of date reference frame as seen from the observer with aberration
     * due to the observer velocity and light travel time applied.
     */
    predictedAzimuth?: number;

    /**
     * Predicted Declination of the Target object from the frame of reference of the
     * sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric
     * origin and velocity aberration and subtracting the sensor geocentric position of
     * the sensor places in its reference frame.
     */
    predictedDeclination?: number;

    /**
     * Uncertainty of Predicted Declination of the Target object from the frame of
     * reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs
     * produce geocentric origin and velocity aberration and subtracting the sensor
     * geocentric position of the sensor places in its reference frame.
     */
    predictedDeclinationUnc?: number;

    /**
     * Predicted elevation angle of the target object from a ground -based sensor (no
     * atmospheric refraction correction required). AZ_EL implies apparent topocentric
     * place in true of date reference frame as seen from the observer with aberration
     * due to the observer velocity and light travel time applied.
     */
    predictedElevation?: number;

    /**
     * Predicted Right Ascension of the Target object from the frame of reference of
     * the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce
     * geocentric origin and velocity aberration and subtracting the sensor geocentric
     * position of the sensor places in its reference frame.
     */
    predictedRa?: number;

    /**
     * Uncertainty of predicted Right Ascension of the Target object from the frame of
     * reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs
     * produce geocentric origin and velocity aberration and subtracting the sensor
     * geocentric position of the sensor places in its reference frame.
     */
    predictedRaUnc?: number;

    /**
     * Covariance (x^2) in measured Right Ascension (X) in deg^2.
     */
    raCov?: number;

    /**
     * Covariance (XY) in measured ra/declination (XY) in deg^2.
     */
    raDeclinationCov?: number;

    /**
     * Spatial covariance of image distribution across horizontal and vertical
     * directions measured in pixels squared.
     */
    rowColCov?: number;

    /**
     * Spatial variance of image distribution in vertical direction measured in pixels
     * squared.
     */
    rowVariance?: number;

    /**
     * Estimated signal-to-noise ratio (SNR) for the total radiometric signal. Under
     * some algorithms, this can be a constant per target (not per observation). Note:
     * this SNR applies to the total signal of the radiometric source (i.e.,
     * Net_Obj_Sig with units DN/sec), not to be confused with the SNR of the signal in
     * the peak pixel (i.e., DN/pixel/sec).
     */
    snrEst?: number;

    /**
     * Fraction of the sun that is illuminating the target object. This indicates if
     * the target is in the Earth�s penumbra or umbra. (It is 0 when object is in umbra
     * and 1 when object is fully illuminated.).
     */
    solarDiskFrac?: number;

    /**
     * Source of the data, will be set to EOObservation source if blank.
     */
    source?: string;

    /**
     * Array of the SpectralFilters keywords, must be present for all values n=1 to
     * numSpectralFilters, in incrementing order of n, and for no other values of n.
     */
    spectralFilters?: Array<string>;

    /**
     * This is the in-band solar magnitude at 1 A.U. Must be present for all values n=1
     * to numSpectralFilters, in incrementing order of n, and for no other values of n.
     * Units = mag.
     */
    spectralFilterSolarMag?: Array<number>;

    /**
     * This is the in-band average irradiance of a 0th mag source. Must be present for
     * all values n=1 to numSpectralFilters, in incrementing order of n, and for no
     * other values of n. Units = W/m2/nm.
     */
    spectralZMFL?: Array<number>;

    /**
     * Azimuth angle of the sun from a ground-based telescope (no atmospheric
     * refraction correction required) the observer with aberration due to the observer
     * velocity and light travel time applied.
     */
    sunAzimuth?: number;

    /**
     * Elevation angle of the sun from a ground-based telescope (no atmospheric
     * refraction correction required).
     */
    sunElevation?: number;

    /**
     * Sun state vector in ECI J2000 coordinate frame in km.
     */
    sunStatePosX?: number;

    /**
     * Sun state vector in ECI J2000 coordinate frame in km.
     */
    sunStatePosY?: number;

    /**
     * Sun state vector in ECI J2000 coordinate frame in km.
     */
    sunStatePosZ?: number;

    /**
     * Sun state vector in ECI J2000 coordinate frame in km/sec.
     */
    sunStateVelX?: number;

    /**
     * Sun state vector in ECI J2000 coordinate frame in km/sec.
     */
    sunStateVelY?: number;

    /**
     * Sun state vector in ECI J2000 coordinate frame in km/sec.
     */
    sunStateVelZ?: number;

    /**
     * An array of surface brightness measurements in magnitudes per square arcsecond
     * from the optical image that show change over an interval of time. The array
     * length is dependent on the length of the streak. The distFromStreakCenter,
     * surfBrightness, and surfBrightnessUnc arrays will match in size.
     */
    surfBrightness?: Array<number>;

    /**
     * An array of surface brightness uncertainty measurements in magnitudes per square
     * arcsecond from the optical image that show change over an interval of time. The
     * array length is dependent on the length of the streak. The distFromStreakCenter,
     * surfBrightness, and surfBrightnessUnc arrays will match in size.
     */
    surfBrightnessUnc?: Array<number>;

    /**
     * Uncertainty in the times reported in UTC in seconds.
     */
    timesUnc?: number;

    /**
     * Time off element set.
     */
    toes?: number;

    /**
     * This is the value for the zero-point calculated for each filter denoted in
     * spectralFilters. It is the difference between the catalog mag and instrumental
     * mag for a set of standard stars. For use with All Sky photometry. Must be
     * present for all values n=1 to numSpectralFilters, in incrementing order of n,
     * and for no other values of n.
     */
    zeroPoints?: Array<number>;

    /**
     * This is the uncertainty in the zero point for the filter denoted in
     * spectralFilters. For use with All Sky photometry. Must be present for all values
     * n=1 to numSpectralFilters, in incrementing order of n, and for no other values
     * of n.
     */
    zeroPointsUnc?: Array<number>;
  }

  /**
   * Model object representing on-orbit objects or satellites in the system.
   */
  export interface OnOrbit {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: string;

    /**
     * Satellite/Catalog number of the target on-orbit object.
     */
    satNo: number;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Alternate name of the on-orbit object.
     */
    altName?: string;

    /**
     * Read-only collection of antennas on this on-orbit object.
     */
    antennas?: Array<OnOrbit.Antenna>;

    /**
     * Read-only collection of batteries on this on-orbit object.
     */
    batteries?: Array<OnOrbit.Battery>;

    /**
     * Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without
     * State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic,
     * Heliocentric, Interplanetary, Lagrangian, Docked).
     */
    category?: string;

    /**
     * Common name of the on-orbit object.
     */
    commonName?: string;

    /**
     * Constellation to which this satellite belongs.
     */
    constellation?: string;

    /**
     * The country code. This value is typically the ISO 3166 Alpha-2 two-character
     * country code, however it can also represent various consortiums that do not
     * appear in the ISO document. The code must correspond to an existing country in
     * the UDL�s country API. Call udl/country/{code} to get any associated FIPS code,
     * ISO Alpha-3 code, or alternate code values that exist for the specified country
     * code.
     */
    countryCode?: string;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Date of decay.
     */
    decayDate?: string;

    entityCollection?: Array<EntitiesAPI.EntityFull>;

    /**
     * For the public catalog, the idOnOrbit is typically the satellite number as a
     * string, but may be a UUID for analyst or other unknown or untracked satellites,
     * auto-generated by the system.
     */
    idOnOrbit?: string;

    /**
     * International Designator, typically of the format YYYYLLLAAA, where YYYY is the
     * launch year, LLL is the sequential launch number of that year, and AAA is an
     * optional launch piece designator for the launch.
     */
    intlDes?: string;

    /**
     * Date of launch.
     */
    launchDate?: string;

    /**
     * Id of the associated launchSite entity.
     */
    launchSiteId?: string;

    /**
     * Estimated lifetime of the on-orbit payload, if known.
     */
    lifetimeYears?: number;

    /**
     * Mission number of the on-orbit object.
     */
    missionNumber?: string;

    /**
     * Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED,
     * UNKNOWN.
     */
    objectType?: string;

    /**
     * Read-only collection of details for this on-orbit object.
     */
    onorbitDetails?: Array<OnOrbit.OnorbitDetail>;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * Read-only collection of solar arrays on this on-orbit object.
     */
    solarArrays?: Array<OnOrbit.SolarArray>;

    /**
     * Read-only collection of thrusters (engines) on this on-orbit object.
     */
    thrusters?: Array<OnOrbit.Thruster>;

    /**
     * Time the row was last updated in the database, auto-populated by the system.
     */
    updatedAt?: string;

    /**
     * Application user who updated the row in the database, auto-populated by the
     * system.
     */
    updatedBy?: string;
  }

  export namespace OnOrbit {
    /**
     * Read-only collection of antennas on this on-orbit object.
     */
    export interface Antenna {
      /**
       * Classification marking of the data in IC/CAPCO Portion-marked format.
       */
      classificationMarking: string;

      /**
       * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
       *
       * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
       * may include both real and simulated data.
       *
       * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
       * events, and analysis.
       *
       * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
       * datasets.
       *
       * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
       * requirements, and for validating technical, functional, and performance
       * characteristics.
       */
      dataMode: string;

      /**
       * ID of the antenna.
       */
      idAntenna: string;

      /**
       * ID of the on-orbit object.
       */
      idOnOrbit: string;

      /**
       * Source of the data.
       */
      source: string;

      /**
       * Unique identifier of the record, auto-generated by the system.
       */
      id?: string;

      /**
       * Model representation of information on on-orbit/spacecraft communication
       * antennas. A spacecraft may have multiple antennas and each antenna can have
       * multiple 'details' records compiled by different sources.
       */
      antenna?: AntennasAPI.AntennaFull;

      /**
       * Time the row was created in the database, auto-populated by the system.
       */
      createdAt?: string;

      /**
       * Application user who created the row in the database, auto-populated by the
       * system.
       */
      createdBy?: string;

      /**
       * Originating system or organization which produced the data, if different from
       * the source. The origin may be different than the source if the source was a
       * mediating system which forwarded the data on behalf of the origin system. If
       * null, the source may be assumed to be the origin.
       */
      origin?: string;

      /**
       * The originating source network on which this record was created, auto-populated
       * by the system.
       */
      origNetwork?: string;

      /**
       * Time the row was last updated in the database, auto-populated by the system.
       */
      updatedAt?: string;

      /**
       * Application user who updated the row in the database, auto-populated by the
       * system.
       */
      updatedBy?: string;
    }

    /**
     * Read-only collection of batteries on this on-orbit object.
     */
    export interface Battery {
      /**
       * Classification marking of the data in IC/CAPCO Portion-marked format.
       */
      classificationMarking: string;

      /**
       * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
       *
       * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
       * may include both real and simulated data.
       *
       * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
       * events, and analysis.
       *
       * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
       * datasets.
       *
       * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
       * requirements, and for validating technical, functional, and performance
       * characteristics.
       */
      dataMode: string;

      /**
       * ID of the battery.
       */
      idBattery: string;

      /**
       * ID of the on-orbit object.
       */
      idOnOrbit: string;

      /**
       * Source of the data.
       */
      source: string;

      /**
       * Unique identifier of the record, auto-generated by the system.
       */
      id?: string;

      /**
       * Model representation of specific spacecraft battery types.
       */
      battery?: BatteriesAPI.BatteryFull;

      /**
       * Time the row was created in the database, auto-populated by the system.
       */
      createdAt?: string;

      /**
       * Application user who created the row in the database, auto-populated by the
       * system.
       */
      createdBy?: string;

      /**
       * Originating system or organization which produced the data, if different from
       * the source. The origin may be different than the source if the source was a
       * mediating system which forwarded the data on behalf of the origin system. If
       * null, the source may be assumed to be the origin.
       */
      origin?: string;

      /**
       * The originating source network on which this record was created, auto-populated
       * by the system.
       */
      origNetwork?: string;

      /**
       * The number of batteries on the spacecraft of the type identified by idBattery.
       */
      quantity?: number;

      /**
       * Time the row was last updated in the database, auto-populated by the system.
       */
      updatedAt?: string;

      /**
       * Application user who updated the row in the database, auto-populated by the
       * system.
       */
      updatedBy?: string;
    }

    /**
     * Contains details of the OnOrbit object.
     */
    export interface OnorbitDetail {
      /**
       * Classification marking of the data in IC/CAPCO Portion-marked format.
       */
      classificationMarking: string;

      /**
       * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
       *
       * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
       * may include both real and simulated data.
       *
       * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
       * events, and analysis.
       *
       * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
       * datasets.
       *
       * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
       * requirements, and for validating technical, functional, and performance
       * characteristics.
       */
      dataMode: string;

      /**
       * UUID of the parent Onorbit record.
       */
      idOnOrbit: string;

      /**
       * Source of the data.
       */
      source: string;

      /**
       * Unique identifier of the record, auto-generated by the system.
       */
      id?: string;

      /**
       * Mass of fuel and disposables at launch time in kilograms.
       */
      additionalMass?: number;

      /**
       * The radius used for long-term debris environment projection analyses that is not
       * as conservative as COLA Radius, in meters.
       */
      adeptRadius?: number;

      /**
       * The total beginning of life delta V of the spacecraft, in meters per second.
       */
      bolDeltaV?: number;

      /**
       * Spacecraft beginning of life fuel mass, in orbit, in kilograms.
       */
      bolFuelMass?: number;

      /**
       * Average cross sectional area of the bus in meters squared.
       */
      busCrossSection?: number;

      /**
       * Type of the bus on the spacecraft.
       */
      busType?: string;

      /**
       * Maximum dimension of the box circumscribing the spacecraft (d = sqrt(a*a + b*b +
       * c\*c) where a is the tip-to-tip dimension, b and c are perpendicular to that.)
       * in meters.
       */
      colaRadius?: number;

      /**
       * Time the row was created in the database, auto-populated by the system.
       */
      createdAt?: string;

      /**
       * Application user who created the row in the database, auto-populated by the
       * system.
       */
      createdBy?: string;

      /**
       * Average cross sectional area in meters squared.
       */
      crossSection?: number;

      /**
       * The estimated total current mass of the spacecraft, in kilograms.
       */
      currentMass?: number;

      /**
       * The 1-sigma uncertainty of the total spacecraft delta V, in meters per second.
       */
      deltaVUnc?: number;

      /**
       * Array of the estimated mass of each deployable object, in kilograms. Must
       * contain the same number of elements as the value of numDeployable.
       */
      depEstMasses?: Array<number>;

      /**
       * Array of the 1-sigma uncertainty of the mass for each deployable object, in
       * kilograms. Must contain the same number of elements as the value of
       * numDeployable.
       */
      depMassUncs?: Array<number>;

      /**
       * Array of satellite deployable objects. Must contain the same number of elements
       * as the value of numDeployable.
       */
      depNames?: Array<string>;

      /**
       * GEO drift rate, if applicable in degrees per day.
       */
      driftRate?: number;

      /**
       * Spacecraft dry mass (without fuel or disposables) in kilograms.
       */
      dryMass?: number;

      /**
       * Estimated maximum burn duration for the object, in seconds.
       */
      estDeltaVDuration?: number;

      /**
       * Estimated remaining fuel for the object in kilograms.
       */
      fuelRemaining?: number;

      /**
       * GEO slot if applicable, in degrees. -180 (West of Prime Meridian) to 180 degrees
       * (East of Prime Meridian). Prime Meridian is 0.
       */
      geoSlot?: number;

      /**
       * The name of the source who last provided an observation for this idOnOrbit.
       */
      lastObSource?: string;

      /**
       * Time of last reported observation for this object in ISO 8601 UTC with
       * microsecond precision.
       */
      lastObTime?: string;

      /**
       * Nominal mass of spacecraft and fuel at launch time, in kilograms.
       */
      launchMass?: number;

      /**
       * Maximum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
       */
      launchMassMax?: number;

      /**
       * Minimum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
       */
      launchMassMin?: number;

      /**
       * Boolean indicating whether a spacecraft is maneuverable. Note that a spacecraft
       * may have propulsion capability but may not be maneuverable due to lack of fuel,
       * anomalous condition, or other operational constraints.
       */
      maneuverable?: boolean;

      /**
       * Maximum delta V available for this on-orbit spacecraft, in meters per second.
       */
      maxDeltaV?: number;

      /**
       * Maximum dimension across the spacecraft (e.g., tip-to-tip across the solar panel
       * arrays) in meters.
       */
      maxRadius?: number;

      /**
       * Array of the type of missions the spacecraft performs. Must contain the same
       * number of elements as the value of numMission.
       */
      missionTypes?: Array<string>;

      /**
       * The number of sub-satellites or deployable objects on the spacecraft.
       */
      numDeployable?: number;

      /**
       * The number of distinct missions the spacecraft performs.
       */
      numMission?: number;

      /**
       * Originating system or organization which produced the data, if different from
       * the source. The origin may be different than the source if the source was a
       * mediating system which forwarded the data on behalf of the origin system. If
       * null, the source may be assumed to be the origin.
       */
      origin?: string;

      /**
       * The originating source network on which this record was created, auto-populated
       * by the system.
       */
      origNetwork?: string;

      /**
       * Current/latest radar cross section in meters squared.
       */
      rcs?: number;

      /**
       * Maximum radar cross section in meters squared.
       */
      rcsMax?: number;

      /**
       * Mean radar cross section in meters squared.
       */
      rcsMean?: number;

      /**
       * Minimum radar cross section in meters squared.
       */
      rcsMin?: number;

      /**
       * The reference source, sources, or URL from which the data in this record was
       * obtained.
       */
      refSource?: string;

      /**
       * Spacecraft deployed area of solar array in meters squared.
       */
      solarArrayArea?: number;

      /**
       * The 1-sigma uncertainty of the total spacecraft mass, in kilograms.
       */
      totalMassUnc?: number;

      /**
       * Time the row was last updated in the database, auto-populated by the system.
       */
      updatedAt?: string;

      /**
       * Application user who updated the row in the database, auto-populated by the
       * system.
       */
      updatedBy?: string;

      /**
       * Current/latest visual magnitude in M.
       */
      vismag?: number;

      /**
       * Maximum visual magnitude in M.
       */
      vismagMax?: number;

      /**
       * Mean visual magnitude in M.
       */
      vismagMean?: number;

      /**
       * Minimum visual magnitude in M.
       */
      vismagMin?: number;
    }

    /**
     * Read-only collection of solar arrays on this on-orbit object.
     */
    export interface SolarArray {
      /**
       * Classification marking of the data in IC/CAPCO Portion-marked format.
       */
      classificationMarking: string;

      /**
       * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
       *
       * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
       * may include both real and simulated data.
       *
       * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
       * events, and analysis.
       *
       * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
       * datasets.
       *
       * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
       * requirements, and for validating technical, functional, and performance
       * characteristics.
       */
      dataMode: string;

      /**
       * ID of the on-orbit object.
       */
      idOnOrbit: string;

      /**
       * ID of the SolarArray.
       */
      idSolarArray: string;

      /**
       * Source of the data.
       */
      source: string;

      /**
       * Unique identifier of the record, auto-generated by the system.
       */
      id?: string;

      /**
       * Time the row was created in the database, auto-populated by the system.
       */
      createdAt?: string;

      /**
       * Application user who created the row in the database, auto-populated by the
       * system.
       */
      createdBy?: string;

      /**
       * Originating system or organization which produced the data, if different from
       * the source. The origin may be different than the source if the source was a
       * mediating system which forwarded the data on behalf of the origin system. If
       * null, the source may be assumed to be the origin.
       */
      origin?: string;

      /**
       * The originating source network on which this record was created, auto-populated
       * by the system.
       */
      origNetwork?: string;

      /**
       * The number of solar arrays on the spacecraft of the type identified by
       * idSolarArray.
       */
      quantity?: number;

      /**
       * Model representation of information on on-orbit/spacecraft solar arrays. A
       * spacecraft may have multiple solar arrays and each solar array can have multiple
       * 'details' records compiled by different sources.
       */
      solarArray?: SolarArray.SolarArray;

      /**
       * Time the row was last updated in the database, auto-populated by the system.
       */
      updatedAt?: string;

      /**
       * Application user who updated the row in the database, auto-populated by the
       * system.
       */
      updatedBy?: string;
    }

    export namespace SolarArray {
      /**
       * Model representation of information on on-orbit/spacecraft solar arrays. A
       * spacecraft may have multiple solar arrays and each solar array can have multiple
       * 'details' records compiled by different sources.
       */
      export interface SolarArray {
        /**
         * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
         *
         * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
         * may include both real and simulated data.
         *
         * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
         * events, and analysis.
         *
         * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
         * datasets.
         *
         * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
         * requirements, and for validating technical, functional, and performance
         * characteristics.
         */
        dataMode: string;

        /**
         * Solar Array name.
         */
        name: string;

        /**
         * Source of the data.
         */
        source: string;

        /**
         * Unique identifier of the record, auto-generated by the system.
         */
        id?: string;

        /**
         * Time the row was created in the database, auto-populated by the system.
         */
        createdAt?: string;

        /**
         * Application user who created the row in the database, auto-populated by the
         * system.
         */
        createdBy?: string;

        /**
         * Originating system or organization which produced the data, if different from
         * the source. The origin may be different than the source if the source was a
         * mediating system which forwarded the data on behalf of the origin system. If
         * null, the source may be assumed to be the origin.
         */
        origin?: string;

        /**
         * The originating source network on which this record was created, auto-populated
         * by the system.
         */
        origNetwork?: string;

        /**
         * Read-only collection of additional SolarArrayDetails by various sources for this
         * organization, ignored on create/update. These details must be created separately
         * via the /udl/solararraydetails operations.
         */
        solarArrayDetails?: Array<SolarArray.SolarArrayDetail>;

        /**
         * Time the row was last updated in the database, auto-populated by the system.
         */
        updatedAt?: string;

        /**
         * Application user who updated the row in the database, auto-populated by the
         * system.
         */
        updatedBy?: string;
      }

      export namespace SolarArray {
        /**
         * Model representation of Information on spacecraft SolarArrayDetails. A
         * SolarArray may have multiple details records compiled by various sources.
         */
        export interface SolarArrayDetail {
          /**
           * Classification marking of the data in IC/CAPCO Portion-marked format.
           */
          classificationMarking: string;

          /**
           * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
           *
           * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
           * may include both real and simulated data.
           *
           * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
           * events, and analysis.
           *
           * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
           * datasets.
           *
           * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
           * requirements, and for validating technical, functional, and performance
           * characteristics.
           */
          dataMode: string;

          /**
           * Unique identifier of the parent SolarArray.
           */
          idSolarArray: string;

          /**
           * Source of the data.
           */
          source: string;

          /**
           * Unique identifier of the record, auto-generated by the system.
           */
          id?: string;

          /**
           * Solar Array area in square meters.
           */
          area?: number;

          /**
           * Time the row was created in the database, auto-populated by the system.
           */
          createdAt?: string;

          /**
           * Application user who created the row in the database, auto-populated by the
           * system.
           */
          createdBy?: string;

          /**
           * Solar array description/notes.
           */
          description?: string;

          /**
           * Solar array junction technology (e.g. Triple).
           */
          junctionTechnology?: string;

          /**
           * An organization such as a corporation, manufacturer, consortium, government,
           * etc. An organization may have parent and child organizations as well as link to
           * a former organization if this org previously existed as another organization.
           */
          manufacturerOrg?: SolarArrayDetail.ManufacturerOrg;

          /**
           * Unique identifier of the organization that manufactures the solar array.
           */
          manufacturerOrgId?: string;

          /**
           * Originating system or organization which produced the data, if different from
           * the source. The origin may be different than the source if the source was a
           * mediating system which forwarded the data on behalf of the origin system. If
           * null, the source may be assumed to be the origin.
           */
          origin?: string;

          /**
           * The originating source network on which this record was created, auto-populated
           * by the system.
           */
          origNetwork?: string;

          /**
           * Solar Array span in meters.
           */
          span?: number;

          /**
           * Optional array of provider/source specific tags for this data, where each
           * element is no longer than 32 characters, used for implementing data owner
           * conditional access controls to restrict access to the data. Should be left null
           * by data providers unless conditional access controls are coordinated with the
           * UDL team.
           */
          tags?: Array<string>;

          /**
           * Solar array technology (e.g. Ga-As).
           */
          technology?: string;

          /**
           * Type of solar array (e.g. U Shaped).
           */
          type?: string;

          /**
           * Time the row was last updated in the database, auto-populated by the system.
           */
          updatedAt?: string;

          /**
           * Application user who updated the row in the database, auto-populated by the
           * system.
           */
          updatedBy?: string;
        }

        export namespace SolarArrayDetail {
          /**
           * An organization such as a corporation, manufacturer, consortium, government,
           * etc. An organization may have parent and child organizations as well as link to
           * a former organization if this org previously existed as another organization.
           */
          export interface ManufacturerOrg {
            /**
             * Classification marking of the data in IC/CAPCO Portion-marked format.
             */
            classificationMarking: string;

            /**
             * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
             *
             * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
             * may include both real and simulated data.
             *
             * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
             * events, and analysis.
             *
             * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
             * datasets.
             *
             * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
             * requirements, and for validating technical, functional, and performance
             * characteristics.
             */
            dataMode: string;

            /**
             * Organization name.
             */
            name: string;

            /**
             * Source of the data.
             */
            source: string;

            /**
             * Type of organization (e.g. GOVERNMENT, CORPORATION, CONSORTIUM, ACADEMIC).
             */
            type: string;

            /**
             * Unique identifier of the record, auto-generated by the system.
             */
            id?: string;

            /**
             * Boolean indicating if this organization is currently active.
             */
            active?: boolean;

            /**
             * Subtype or category of the organization (e.g. Private company, stock market
             * quoted company, subsidiary, goverment department/agency, etc).
             */
            category?: string;

            /**
             * Country of the physical location of the organization. This value is typically
             * the ISO 3166 Alpha-2 two-character country code. However, it can also represent
             * various consortiums that do not appear in the ISO document. The code must
             * correspond to an existing country in the UDL�s country API. Call
             * udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or
             * alternate code values that exist for the specified country code.
             */
            countryCode?: string;

            /**
             * Time the row was created in the database, auto-populated by the system.
             */
            createdAt?: string;

            /**
             * Application user who created the row in the database, auto-populated by the
             * system.
             */
            createdBy?: string;

            /**
             * Organization description.
             */
            description?: string;

            /**
             * Optional externally provided identifier for this row.
             */
            externalId?: string;

            /**
             * Country of registration or ownership of the organization. This value is
             * typically the ISO 3166 Alpha-2 two-character country code, however it can also
             * represent various consortiums that do not appear in the ISO document. The code
             * must correspond to an existing country in the UDL�s country API. Call
             * udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or
             * alternate code values that exist for the specified country code.
             */
            nationality?: string;

            /**
             * Read-only collection of additional OrganizationDetails by various sources for
             * this organization, ignored on create/update. These details must be created
             * separately via the /udl/organizationdetails operations.
             */
            organizationDetails?: Array<ManufacturerOrg.OrganizationDetail>;

            /**
             * Originating system or organization which produced the data, if different from
             * the source. The origin may be different than the source if the source was a
             * mediating system which forwarded the data on behalf of the origin system. If
             * null, the source may be assumed to be the origin.
             */
            origin?: string;

            /**
             * The originating source network on which this record was created, auto-populated
             * by the system.
             */
            origNetwork?: string;

            /**
             * Time the row was last updated in the database, auto-populated by the system.
             */
            updatedAt?: string;

            /**
             * Application user who updated the row in the database, auto-populated by the
             * system.
             */
            updatedBy?: string;
          }

          export namespace ManufacturerOrg {
            /**
             * Model representation of additional detailed organization data as collected by a
             * particular source.
             */
            export interface OrganizationDetail {
              /**
               * Classification marking of the data in IC/CAPCO Portion-marked format.
               */
              classificationMarking: string;

              /**
               * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
               *
               * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
               * may include both real and simulated data.
               *
               * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
               * events, and analysis.
               *
               * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
               * datasets.
               *
               * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
               * requirements, and for validating technical, functional, and performance
               * characteristics.
               */
              dataMode: string;

              /**
               * Unique identifier of the parent organization.
               */
              idOrganization: string;

              /**
               * Organization details name.
               */
              name: string;

              /**
               * Source of the data.
               */
              source: string;

              /**
               * Unique identifier of the record, auto-generated by the system.
               */
              id?: string;

              /**
               * Street number of the organization.
               */
              address1?: string;

              /**
               * Field for additional organization address information such as PO Box and unit
               * number.
               */
              address2?: string;

              /**
               * Contains the third line of address information for an organization.
               */
              address3?: string;

              /**
               * Designated broker for this organization.
               */
              broker?: string;

              /**
               * For organizations of type CORPORATION, the name of the Chief Executive Officer.
               */
              ceo?: string;

              /**
               * For organizations of type CORPORATION, the name of the Chief Financial Officer.
               */
              cfo?: string;

              /**
               * Time the row was created in the database, auto-populated by the system.
               */
              createdAt?: string;

              /**
               * Application user who created the row in the database, auto-populated by the
               * system.
               */
              createdBy?: string;

              /**
               * For organizations of type CORPORATION, the name of the Chief Technology Officer.
               */
              cto?: string;

              /**
               * Organization description.
               */
              description?: string;

              /**
               * For organizations of type CORPORATION, the company EBITDA value as of
               * financialYearEndDate in US Dollars.
               */
              ebitda?: number;

              /**
               * Listed contact email address for the organization.
               */
              email?: string;

              /**
               * For organizations of type CORPORATION, notes on company financials.
               */
              financialNotes?: string;

              /**
               * For organizations of type CORPORATION, the effective financial year end date for
               * revenue, EBITDA, and profit values.
               */
              financialYearEndDate?: string;

              /**
               * Satellite fleet planning notes for this organization.
               */
              fleetPlanNotes?: string;

              /**
               * Former organization ID (if this organization previously existed as another
               * organization).
               */
              formerOrgId?: string;

              /**
               * Total number of FTEs in this organization.
               */
              ftes?: number;

              /**
               * Administrative boundaries of the first sub-national level. Level 1 is simply the
               * largest demarcation under whatever demarcation criteria has been determined by
               * the governing body. For example, this may be a state or province.
               */
              geoAdminLevel1?: string;

              /**
               * Administrative boundaries of the second sub-national level. Level 2 is simply
               * the second largest demarcation under whatever demarcation criteria has been
               * determined by the governing body. For example, this may be a county or district.
               */
              geoAdminLevel2?: string;

              /**
               * Administrative boundaries of the third sub-national level. Level 3 is simply the
               * third largest demarcation under whatever demarcation criteria has been
               * determined by the governing body. For example, this may be a city or township.
               */
              geoAdminLevel3?: string;

              /**
               * Mass ranking for this organization.
               */
              massRanking?: number;

              /**
               * Originating system or organization which produced the data, if different from
               * the source. The origin may be different than the source if the source was a
               * mediating system which forwarded the data on behalf of the origin system. If
               * null, the source may be assumed to be the origin.
               */
              origin?: string;

              /**
               * The originating source network on which this record was created, auto-populated
               * by the system.
               */
              origNetwork?: string;

              /**
               * Parent organization ID of this organization if it is a child organization.
               */
              parentOrgId?: string;

              /**
               * A postal code, such as PIN or ZIP Code, is a series of letters or digits or both
               * included in the postal address of the organization.
               */
              postalCode?: string;

              /**
               * For organizations of type CORPORATION, total annual profit as of
               * financialYearEndDate in US Dollars.
               */
              profit?: number;

              /**
               * For organizations of type CORPORATION, total annual revenue as of
               * financialYearEndDate in US Dollars.
               */
              revenue?: number;

              /**
               * Revenue ranking for this organization.
               */
              revenueRanking?: number;

              /**
               * The name of the risk manager for the organization.
               */
              riskManager?: string;

              /**
               * Notes on the services provided by the organization.
               */
              servicesNotes?: string;

              /**
               * Optional array of provider/source specific tags for this data, where each
               * element is no longer than 32 characters, used for implementing data owner
               * conditional access controls to restrict access to the data. Should be left null
               * by data providers unless conditional access controls are coordinated with the
               * UDL team.
               */
              tags?: Array<string>;

              /**
               * Time the row was last updated in the database, auto-populated by the system.
               */
              updatedAt?: string;

              /**
               * Application user who updated the row in the database, auto-populated by the
               * system.
               */
              updatedBy?: string;
            }
          }
        }
      }
    }

    /**
     * Read-only collection of thrusters (engines) on this on-orbit object.
     */
    export interface Thruster {
      /**
       * Classification marking of the data in IC/CAPCO Portion-marked format.
       */
      classificationMarking: string;

      /**
       * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
       *
       * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
       * may include both real and simulated data.
       *
       * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
       * events, and analysis.
       *
       * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
       * datasets.
       *
       * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
       * requirements, and for validating technical, functional, and performance
       * characteristics.
       */
      dataMode: string;

      /**
       * ID of the Engine.
       */
      idEngine: string;

      /**
       * ID of the on-orbit object.
       */
      idOnOrbit: string;

      /**
       * Source of the data.
       */
      source: string;

      /**
       * Unique identifier of the record, auto-generated by the system.
       */
      id?: string;

      /**
       * Time the row was created in the database, auto-populated by the system.
       */
      createdAt?: string;

      /**
       * Application user who created the row in the database, auto-populated by the
       * system.
       */
      createdBy?: string;

      /**
       * Known launch vehicle engines and their performance characteristics and limits. A
       * launch vehicle has 1 to many engines per stage.
       */
      engine?: EnginesAPI.Engine;

      /**
       * Originating system or organization which produced the data, if different from
       * the source. The origin may be different than the source if the source was a
       * mediating system which forwarded the data on behalf of the origin system. If
       * null, the source may be assumed to be the origin.
       */
      origin?: string;

      /**
       * The originating source network on which this record was created, auto-populated
       * by the system.
       */
      origNetwork?: string;

      /**
       * The number of engines/thrusters on the spacecraft of the type identified by
       * idEngine.
       */
      quantity?: number;

      /**
       * The type of thruster associated with this record (e.g. LAE, Hydrazine REA,
       * etc.).
       */
      type?: string;

      /**
       * Time the row was last updated in the database, auto-populated by the system.
       */
      updatedAt?: string;

      /**
       * Application user who updated the row in the database, auto-populated by the
       * system.
       */
      updatedBy?: string;
    }
  }
}

export type HistoryListResponse = Array<EoObservationFull>;

export type HistoryCountResponse = string;

export interface HistoryListParams {
  /**
   * Ob detection time in ISO 8601 UTC with microsecond precision.
   * (YYYY-MM-DDTHH:MM:SS.ssssssZ)
   */
  obTime: string;

  /**
   * optional, fields for retrieval. When omitted, ALL fields are assumed. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
   * query fields that can be selected.
   */
  columns?: string;
}

export interface HistoryAodrParams {
  /**
   * Ob detection time in ISO 8601 UTC with microsecond precision.
   * (YYYY-MM-DDTHH:MM:SS.ssssssZ)
   */
  obTime: string;

  /**
   * optional, fields for retrieval. When omitted, ALL fields are assumed. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
   * query fields that can be selected.
   */
  columns?: string;

  /**
   * optional, notification method for the created file link. When omitted, EMAIL is
   * assumed. Current valid values are: EMAIL, SMS.
   */
  notification?: string;

  /**
   * optional, field delimiter when the created file is not JSON. Must be a single
   * character chosen from this set: (',', ';', ':', '|'). When omitted, "," is used.
   * It is strongly encouraged that your field delimiter be a character unlikely to
   * occur within the data.
   */
  outputDelimiter?: string;

  /**
   * optional, output format for the file. When omitted, JSON is assumed. Current
   * valid values are: JSON and CSV.
   */
  outputFormat?: string;
}

export interface HistoryCountParams {
  /**
   * Ob detection time in ISO 8601 UTC with microsecond precision.
   * (YYYY-MM-DDTHH:MM:SS.ssssssZ)
   */
  obTime: string;
}

export declare namespace History {
  export {
    type EoObservationFull as EoObservationFull,
    type HistoryListResponse as HistoryListResponse,
    type HistoryCountResponse as HistoryCountResponse,
    type HistoryListParams as HistoryListParams,
    type HistoryAodrParams as HistoryAodrParams,
    type HistoryCountParams as HistoryCountParams,
  };
}
