// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../resource';
import * as Core from '../core';

export class ItemTrackings extends APIResource {
  /**
   * Service operation to take multiple itemtracking records as a POST body and
   * ingest into the database. This operation is intended to be used for automated
   * feeds into UDL. A specific role is required to perform this service operation.
   * Please contact the UDL team for assistance.
   */
  create(body: ItemTrackingCreateParams, options?: Core.RequestOptions): Core.APIPromise<void> {
    return this._client.post('/filedrop/udl-itemtracking', {
      body,
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }
}

export type ItemTrackingCreateParams = Array<ItemTrackingCreateParams.Body>;

export namespace ItemTrackingCreateParams {
  export interface Body {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: string;

    /**
     * The tracking identifier of an item or person. May be similar in representation
     * of a barcode or UPC.
     */
    scanCode: string;

    /**
     * The ID of the scanner or input device.
     */
    scannerId: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * The timestamp of the scan, in ISO 8601 UTC format with millisecond precision.
     */
    ts: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * The United States distinguished visitor code of the person scanned, only
     * applicable to people.
     */
    dvCode?: string;

    /**
     * The UDL ID of the item this record is associated with.
     */
    idItem?: string;

    /**
     * Array of keys that may be associated with this tracked item.
     */
    keys?: Array<string>;

    /**
     * WGS84 latitude where the item was scanned, in degrees.
     */
    lat?: number;

    /**
     * WGS84 longitude where the item was scanned, in degrees.
     */
    lon?: number;

    /**
     * Optional notes or comments about the tracking data.
     */
    notes?: string;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * The type of scan for tracking the item within it's journey (e.g. IN, OUT,
     * RECEIVED, DELIVERED, TRANSIT, ABANDONDED, REFUSED, UNABLE, RETURNED, HELD,
     * OTHER). For example, received and delivered are for when an item is received
     * from or delivered to the end customer. In and out are for stops in between such
     * as being loaded on an airplane or received at a warehouse.
     */
    scanType?: string;

    /**
     * The algorithm name or standard that generated the scanCode (e.g. UPC-A, EAN-13,
     * GTIN, SSCC, bID, JAN, etc.).
     */
    scGenTool?: string;

    /**
     * The source data library from which this record was received. This could be a
     * remote or tactical UDL or another data library. If null, the record should be
     * assumed to have originated from the primary Enterprise UDL.
     */
    sourceDL?: string;

    /**
     * The type of item that is being scanned (e.g. CARGO, PERSON, MAIL, MICAP, OTHER).
     */
    type?: string;

    /**
     * Array of values for the keys that may be associated to this tracked item. The
     * entries in this array must correspond to the position index in the keys array.
     * This array must be the same length as keys.
     */
    values?: Array<string>;
  }
}

export declare namespace ItemTrackings {
  export { type ItemTrackingCreateParams as ItemTrackingCreateParams };
}
