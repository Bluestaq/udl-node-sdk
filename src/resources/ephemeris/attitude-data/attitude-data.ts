// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../../core/resource';
import * as HistoryAPI from './history';
import {
  History,
  HistoryAodrParams,
  HistoryCountParams,
  HistoryCountResponse,
  HistoryRetrieveParams,
  HistoryRetrieveResponse,
} from './history';
import { APIPromise } from '../../../core/api-promise';
import { buildHeaders } from '../../../internal/headers';
import { RequestOptions } from '../../../internal/request-options';

export class AttitudeData extends APIResource {
  history: HistoryAPI.History = new HistoryAPI.History(this._client);

  /**
   * Service operation to dynamically query data by a variety of query parameters not
   * specified in this API documentation. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   */
  list(query: AttitudeDataListParams, options?: RequestOptions): APIPromise<AttitudeDataListResponse> {
    return this._client.get('/udl/attitudedata', { query, ...options });
  }

  /**
   * Service operation to return the count of records satisfying the specified query
   * parameters. This operation is useful to determine how many records pass a
   * particular query criteria without retrieving large amounts of data. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
   * valid/required query parameter information.
   */
  count(query: AttitudeDataCountParams, options?: RequestOptions): APIPromise<string> {
    return this._client.get('/udl/attitudedata/count', {
      query,
      ...options,
      headers: buildHeaders([{ Accept: 'text/plain' }, options?.headers]),
    });
  }
}

/**
 * These services provide operations for posting and querying attitude of on-orbit
 * objects. Attitude describes the orientation of an object, which can be
 * represented by quaternions or euler angles. The AttitudeSet ID (asId) identifies
 * the 'AttitudeSet' record which contains details of the underlying data as well
 * as a collection of attitude points. Points must be retrieved by first
 * identifying a desired AttitudeSet and pulling its points by that AttitudeSet ID
 * 'asId'.
 */
export interface AttitudeDataAbridged {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Time associated with this attitude record, in ISO 8601 UTC format, with
   * microsecond precision.
   */
  ts: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Unique identifier of the parent AttitudeSet associated with this record.
   */
  asId?: string;

  /**
   * Coning angle in degrees.
   */
  coningAngle?: number;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Precession axis declination (ECI J2000 frame) in degrees.
   */
  declination?: number;

  /**
   * Unique identifier of the on-orbit satellite to which this attitude record
   * applies.
   */
  idOnOrbit?: string;

  /**
   * Label specifying type of rotational motion of target.
   */
  motionType?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Optional identifier provided by the record source to indicate the target object
   * of this attitude record. This may be an internal identifier and not necessarily
   * map to a valid satellite number.
   */
  origObjectId?: string;

  /**
   * Precession period in seconds.
   */
  precPeriod?: number;

  /**
   * Quaternion vector component 1.
   */
  q1?: number;

  /**
   * Derivative of quaternion vector component 1.
   */
  q1Dot?: number;

  /**
   * Quaternion vector component 2.
   */
  q2?: number;

  /**
   * Derivative of quaternion vector component 2.
   */
  q2Dot?: number;

  /**
   * Quaternion vector component 3.
   */
  q3?: number;

  /**
   * Derivative of quaternion vector component 3.
   */
  q3Dot?: number;

  /**
   * Quaternion scalar component.
   */
  qc?: number;

  /**
   * Derivative of quaternion scalar component.
   */
  qcDot?: number;

  /**
   * Precession axis right ascension (ECI J2000 frame) in degrees.
   */
  ra?: number;

  /**
   * Satellite/catalog number of the on-orbit object to which this attitude record
   * applies.
   */
  satNo?: number;

  /**
   * Spin period in seconds.
   */
  spinPeriod?: number;

  /**
   * Array of X body rotation Euler angle(s), in degrees (-180 to 180). For repeated
   * axis rotations, the array elements should be placed in the order that the angles
   * apply in the sequence.
   */
  xAngle?: Array<number>;

  /**
   * Array of X body rotation rate(s), in degrees per second. For repeated axis
   * rotations, the array elements should be placed in the order that the rates apply
   * in the sequence. Attitude rates are expressed in frame1 with respect to frame2.
   */
  xRate?: Array<number>;

  /**
   * Array of Y body rotation Euler angle(s), in degrees (-180 to 180). For repeated
   * axis rotations, the array elements should be placed in the order that the angles
   * apply in the sequence.
   */
  yAngle?: Array<number>;

  /**
   * Array of Y body rotation rate(s), in degrees per second. For repeated axis
   * rotations, the array elements should be placed in the order that the rates apply
   * in the sequence. Attitude rates are expressed in frame1 with respect to frame2.
   */
  yRate?: Array<number>;

  /**
   * Array of Z body rotation Euler angle(s), in degrees (-180 to 180). For repeated
   * axis rotations, the array elements should be placed in the order that the angles
   * apply in the sequence.
   */
  zAngle?: Array<number>;

  /**
   * Array of Z body rotation rate(s), in degrees per second. For repeated axis
   * rotations, the array elements should be placed in the order that the rates apply
   * in the sequence Attitude rates are expressed in frame1 with respect to frame2.
   */
  zRate?: Array<number>;
}

export type AttitudeDataListResponse = Array<AttitudeDataAbridged>;

export type AttitudeDataCountResponse = string;

export interface AttitudeDataListParams {
  /**
   * Unique identifier of the parent AttitudeSet associated with this record. (uuid)
   */
  asId: string;

  firstResult?: number;

  maxResults?: number;
}

export interface AttitudeDataCountParams {
  /**
   * Unique identifier of the parent AttitudeSet associated with this record. (uuid)
   */
  asId: string;

  firstResult?: number;

  maxResults?: number;
}

AttitudeData.History = History;

export declare namespace AttitudeData {
  export {
    type AttitudeDataAbridged as AttitudeDataAbridged,
    type AttitudeDataListResponse as AttitudeDataListResponse,
    type AttitudeDataCountResponse as AttitudeDataCountResponse,
    type AttitudeDataListParams as AttitudeDataListParams,
    type AttitudeDataCountParams as AttitudeDataCountParams,
  };

  export {
    History as History,
    type HistoryRetrieveResponse as HistoryRetrieveResponse,
    type HistoryCountResponse as HistoryCountResponse,
    type HistoryRetrieveParams as HistoryRetrieveParams,
    type HistoryAodrParams as HistoryAodrParams,
    type HistoryCountParams as HistoryCountParams,
  };
}
