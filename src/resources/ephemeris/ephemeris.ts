// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../resource';
import * as Core from '../../core';
import * as HistoryAPI from './history';
import {
  History,
  HistoryAodrParams,
  HistoryCountParams,
  HistoryCountResponse,
  HistoryListParams,
  HistoryListResponse,
} from './history';
import * as AttitudeDataAPI from './attitude-data/attitude-data';
import {
  AttitudeData,
  AttitudeDataAbridged,
  AttitudeDataCountParams,
  AttitudeDataCountResponse,
  AttitudeDataListParams,
  AttitudeDataListResponse,
} from './attitude-data/attitude-data';

export class Ephemeris extends APIResource {
  attitudeData: AttitudeDataAPI.AttitudeData = new AttitudeDataAPI.AttitudeData(this._client);
  history: HistoryAPI.History = new HistoryAPI.History(this._client);

  /**
   * Service operation to dynamically query data by a variety of query parameters not
   * specified in this API documentation. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   */
  list(params: EphemerisListParams, options?: Core.RequestOptions): Core.APIPromise<EphemerisListResponse> {
    const { esId } = params;
    return this._client.get('/udl/ephemeris', options);
  }

  /**
   * Service operation to return the count of records satisfying the specified query
   * parameters. This operation is useful to determine how many records pass a
   * particular query criteria without retrieving large amounts of data. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
   * valid/required query parameter information.
   */
  count(params: EphemerisCountParams, options?: Core.RequestOptions): Core.APIPromise<string> {
    const { esId } = params;
    return this._client.get('/udl/ephemeris/count', {
      ...options,
      headers: { Accept: 'text/plain', ...options?.headers },
    });
  }

  /**
   * Service operation to provide detailed information on available dynamic query
   * parameters for a particular data type.
   */
  queryhelp(options?: Core.RequestOptions): Core.APIPromise<void> {
    return this._client.get('/udl/ephemeris/queryhelp', {
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }
}

/**
 * An ephemeris record is a position and velocity vector identifying the location
 * and trajectory of an on-orbit object at a specified time. Ephemeris points,
 * including covariance, are in kilometer and second based units in a user
 * specified reference frame, with ECI J2K being preferred. The EphemerisSet ID
 * (esId) links all points associated with an ephemeris set. The 'EphemerisSet'
 * record contains details of the underlying data and propagation models used in
 * the generation of the ephemeris. Ephemeris points must be retrieved by
 * specifying the parent EphemerisSet ID (esId).
 */
export interface EphemerisAbridged {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Time associated with the Ephemeris Point, in ISO8601 UTC format.
   */
  ts: string;

  /**
   * Cartesian X position of target, in km, in the specified EphemerisSet
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  xpos: number;

  /**
   * Cartesian X velocity of target, in km/sec, in the specified EphemerisSet
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  xvel: number;

  /**
   * Cartesian Y position of target, in km, in the specified EphemerisSet
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  ypos: number;

  /**
   * Cartesian Y velocity of target, in km/sec, in the specified EphemerisSet
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  yvel: number;

  /**
   * Cartesian Z position of target, in km, in the specified EphemerisSet
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  zpos: number;

  /**
   * Cartesian Z velocity of target, in km/sec, in the specified EphemerisSet
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  zvel: number;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Covariance matrix, in kilometer and second based units, in the specified
   * Ephemeris Set covReferenceFrame. If the covReferenceFrame from the EphemerisSet
   * table is null it is assumed to be J2000. The array values represent the lower
   * triangular half of the position-velocity covariance matrix. The size of the
   * covariance matrix is dynamic, depending on whether the covariance for position
   * only or position & velocity. The covariance elements are position dependent
   * within the array with values ordered as follows:
   *
   * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;y&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;y'&nbsp;z'&nbsp;&nbsp;
   *
   * x&nbsp;&nbsp;&nbsp;&nbsp;1
   *
   * y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
   *
   * z&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;6
   *
   * x'&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;10
   *
   * y'&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
   *
   * z'&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;
   * 21
   *
   * The array containing the covariance matrix elements will be of length 6 for
   * position only covariance, or length 21 for position-velocity covariance. The cov
   * array should contain only the lower left triangle values from top left down to
   * bottom right, in order.
   */
  cov?: Array<number>;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Unique identifier of the parent EphemerisSet, auto-generated by the system. The
   * esId (ephemerisSet id) is used to identify all individual ephemeris states
   * associated with a parent ephemerisSet.
   */
  esId?: string;

  /**
   * Unique identifier of the on-orbit satellite object.
   */
  idOnOrbit?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * Optional identifier provided by ephemeris source to indicate the target object
   * of this ephemeris. This may be an internal identifier and not necessarily map to
   * a valid satellite number.
   */
  origObjectId?: string;

  /**
   * Cartesian X acceleration of target, in km/sec^2, in the specified EphemerisSet
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  xaccel?: number;

  /**
   * Cartesian Y acceleration of target, in km/sec^2, in the specified EphemerisSet
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  yaccel?: number;

  /**
   * Cartesian Z acceleration of target, in km/sec^2, in the specified EphemerisSet
   * referenceFrame. If referenceFrame is null then J2K should be assumed.
   */
  zaccel?: number;
}

export type EphemerisListResponse = Array<EphemerisAbridged>;

export type EphemerisCountResponse = string;

export interface EphemerisListParams {
  /**
   * Unique identifier of the parent EphemerisSet, auto-generated by the system. The
   * esId (ephemerisSet id) is used to identify all individual ephemeris states
   * associated with a parent ephemerisSet. (uuid)
   */
  esId: string;
}

export interface EphemerisCountParams {
  /**
   * Unique identifier of the parent EphemerisSet, auto-generated by the system. The
   * esId (ephemerisSet id) is used to identify all individual ephemeris states
   * associated with a parent ephemerisSet. (uuid)
   */
  esId: string;
}

Ephemeris.AttitudeData = AttitudeData;
Ephemeris.History = History;

export declare namespace Ephemeris {
  export {
    type EphemerisAbridged as EphemerisAbridged,
    type EphemerisListResponse as EphemerisListResponse,
    type EphemerisCountResponse as EphemerisCountResponse,
    type EphemerisListParams as EphemerisListParams,
    type EphemerisCountParams as EphemerisCountParams,
  };

  export {
    AttitudeData as AttitudeData,
    type AttitudeDataAbridged as AttitudeDataAbridged,
    type AttitudeDataListResponse as AttitudeDataListResponse,
    type AttitudeDataCountResponse as AttitudeDataCountResponse,
    type AttitudeDataListParams as AttitudeDataListParams,
    type AttitudeDataCountParams as AttitudeDataCountParams,
  };

  export {
    History as History,
    type HistoryListResponse as HistoryListResponse,
    type HistoryCountResponse as HistoryCountResponse,
    type HistoryListParams as HistoryListParams,
    type HistoryAodrParams as HistoryAodrParams,
    type HistoryCountParams as HistoryCountParams,
  };
}
