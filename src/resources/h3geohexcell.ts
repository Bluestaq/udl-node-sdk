// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../core/resource';
import { APIPromise } from '../core/api-promise';
import { buildHeaders } from '../internal/headers';
import { RequestOptions } from '../internal/request-options';

export class H3geohexcell extends APIResource {
  /**
   * Service operation to dynamically query data by a variety of query parameters not
   * specified in this API documentation. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   */
  list(query: H3geohexcellListParams, options?: RequestOptions): APIPromise<H3geohexcellListResponse> {
    return this._client.get('/udl/h3geohexcell', { query, ...options });
  }

  /**
   * Service operation to return the count of records satisfying the specified query
   * parameters. This operation is useful to determine how many records pass a
   * particular query criteria without retrieving large amounts of data. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
   * valid/required query parameter information.
   */
  count(query: H3geohexcellCountParams, options?: RequestOptions): APIPromise<string> {
    return this._client.get('/udl/h3geohexcell/count', {
      query,
      ...options,
      headers: buildHeaders([{ Accept: 'text/plain' }, options?.headers]),
    });
  }

  /**
   * Service operation to provide detailed information on available dynamic query
   * parameters for a particular data type.
   */
  queryhelp(options?: RequestOptions): APIPromise<void> {
    return this._client.get('/udl/h3geohexcell/queryhelp', {
      ...options,
      headers: buildHeaders([{ Accept: '*/*' }, options?.headers]),
    });
  }

  /**
   * Service operation to dynamically query data and only return specified
   * columns/fields. Requested columns are specified by the 'columns' query parameter
   * and should be a comma separated list of valid fields for the specified data
   * type. classificationMarking is always returned. See the queryhelp operation
   * (/udl/<datatype>/queryhelp) for more details on valid/required query parameter
   * information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5
   * hours would return the satNo and period of elsets with an epoch greater than 5
   * hours ago.
   */
  tuple(query: H3geohexcellTupleParams, options?: RequestOptions): APIPromise<H3geohexcellTupleResponse> {
    return this._client.get('/udl/h3geohexcell/tuple', { query, ...options });
  }
}

export type H3geohexcellListResponse = Array<H3geohexcellListResponse.H3geohexcellListResponseItem>;

export namespace H3geohexcellListResponse {
  /**
   * Model representation of a hex cell array containing data for a set of
   * observations.
   */
  export interface H3geohexcellListResponseItem {
    /**
     * The H3 index represented as a 16 character hexadecimal string.
     */
    cellId: string;

    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    /**
     * The mean altitude of the set of observations within this cell, measured in
     * kilometers.
     */
    altMean?: number;

    /**
     * The standard deviation of alttitude in the set of observations within this cell,
     * measured in kilometers.
     */
    altSigma?: number;

    /**
     * The anomaly score for probable manufactured interference or RF interference;
     * calculated as a ratio of #anomalous obs / #total obs or coverage.
     */
    anomScoreInterference?: number;

    /**
     * The anomaly score for probable spoofing; calculated as a ratio of #anomalous obs
     * / #total obs or coverage.
     */
    anomScoreSpoofing?: number;

    /**
     * The percentage degree of change in the aggregated observables for a particular
     * H3 bin.
     */
    changeScore?: number;

    /**
     * The total number of available observations in the H3 cell during the start/end
     * times.
     */
    coverage?: number;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Unique identifier of the parent H3 Geo record containing this hex cell.
     */
    idH3Geo?: string;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * The max received power monitor (RPM) output value for the set of data contained
     * within this cell.
     */
    rpmMax?: number;

    /**
     * The mean received power monitor (RPM) output value for the set of data contained
     * within this cell.
     */
    rpmMean?: number;

    /**
     * The median received power monitor (RPM) output value for the set of data
     * contained within this cell.
     */
    rpmMedian?: number;

    /**
     * The min received power monitor (RPM) output value for the set of data contained
     * within this cell.
     */
    rpmMin?: number;

    /**
     * The standard deviation of the received power monitor (RPM) output value for the
     * set of data contained within this cell.
     */
    rpmSigma?: number;

    /**
     * The source data library from which this record was received. This could be a
     * remote or tactical UDL or another data library. If null, the record should be
     * assumed to have originated from the primary Enterprise UDL.
     */
    sourceDL?: string;
  }
}

export type H3geohexcellCountResponse = string;

export type H3geohexcellTupleResponse = Array<H3geohexcellTupleResponse.H3geohexcellTupleResponseItem>;

export namespace H3geohexcellTupleResponse {
  /**
   * Model representation of a hex cell array containing data for a set of
   * observations.
   */
  export interface H3geohexcellTupleResponseItem {
    /**
     * The H3 index represented as a 16 character hexadecimal string.
     */
    cellId: string;

    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    /**
     * The mean altitude of the set of observations within this cell, measured in
     * kilometers.
     */
    altMean?: number;

    /**
     * The standard deviation of alttitude in the set of observations within this cell,
     * measured in kilometers.
     */
    altSigma?: number;

    /**
     * The anomaly score for probable manufactured interference or RF interference;
     * calculated as a ratio of #anomalous obs / #total obs or coverage.
     */
    anomScoreInterference?: number;

    /**
     * The anomaly score for probable spoofing; calculated as a ratio of #anomalous obs
     * / #total obs or coverage.
     */
    anomScoreSpoofing?: number;

    /**
     * The percentage degree of change in the aggregated observables for a particular
     * H3 bin.
     */
    changeScore?: number;

    /**
     * The total number of available observations in the H3 cell during the start/end
     * times.
     */
    coverage?: number;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Unique identifier of the parent H3 Geo record containing this hex cell.
     */
    idH3Geo?: string;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * The max received power monitor (RPM) output value for the set of data contained
     * within this cell.
     */
    rpmMax?: number;

    /**
     * The mean received power monitor (RPM) output value for the set of data contained
     * within this cell.
     */
    rpmMean?: number;

    /**
     * The median received power monitor (RPM) output value for the set of data
     * contained within this cell.
     */
    rpmMedian?: number;

    /**
     * The min received power monitor (RPM) output value for the set of data contained
     * within this cell.
     */
    rpmMin?: number;

    /**
     * The standard deviation of the received power monitor (RPM) output value for the
     * set of data contained within this cell.
     */
    rpmSigma?: number;

    /**
     * The source data library from which this record was received. This could be a
     * remote or tactical UDL or another data library. If null, the record should be
     * assumed to have originated from the primary Enterprise UDL.
     */
    sourceDL?: string;
  }
}

export interface H3geohexcellListParams {
  /**
   * Unique identifier of the parent H3 Geo record containing this hex cell. (uuid)
   */
  idH3Geo: string;

  firstResult?: number;

  maxResults?: number;
}

export interface H3geohexcellCountParams {
  /**
   * Unique identifier of the parent H3 Geo record containing this hex cell. (uuid)
   */
  idH3Geo: string;

  firstResult?: number;

  maxResults?: number;
}

export interface H3geohexcellTupleParams {
  /**
   * Comma-separated list of valid field names for this data type to be returned in
   * the response. Only the fields specified will be returned as well as the
   * classification marking of the data, if applicable. See the ‘queryhelp’ operation
   * for a complete list of possible fields.
   */
  columns: string;

  /**
   * Unique identifier of the parent H3 Geo record containing this hex cell. (uuid)
   */
  idH3Geo: string;

  firstResult?: number;

  maxResults?: number;
}

export declare namespace H3geohexcell {
  export {
    type H3geohexcellListResponse as H3geohexcellListResponse,
    type H3geohexcellCountResponse as H3geohexcellCountResponse,
    type H3geohexcellTupleResponse as H3geohexcellTupleResponse,
    type H3geohexcellListParams as H3geohexcellListParams,
    type H3geohexcellCountParams as H3geohexcellCountParams,
    type H3geohexcellTupleParams as H3geohexcellTupleParams,
  };
}
