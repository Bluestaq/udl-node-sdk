// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../resource';
import * as Core from '../core';

export class UdlStarcatalog extends APIResource {
  /**
   * Service operation to take multiple StarCatalog records as a POST body and ingest
   * into the database. This operation is intended to be used for automated feeds
   * into UDL. A specific role is required to perform this service operation. Please
   * contact the UDL team for assistance.
   */
  create(body: UdlStarcatalogCreateParams, options?: Core.RequestOptions): Core.APIPromise<void> {
    return this._client.post('/filedrop/udl-starcatalog', {
      body,
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }
}

export type UdlStarcatalogCreateParams = Array<UdlStarcatalogCreateParams.Body>;

export namespace UdlStarcatalogCreateParams {
  /**
   * The star catalog provides the position, proper motion, parallax, and photometric
   * magnitudes at various bandpasses of a star.
   */
  export interface Body {
    /**
     * Originating astrometric catalog for this object. Enum: [GAIADR3, HIPPARCOS,
     * USNOBSC].
     */
    astrometryOrigin: string;

    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * The ID of this object in the specific catalog associated with this record.
     */
    csId: number;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: string;

    /**
     * Barycentric declination of the source in International Celestial Reference
     * System (ICRS) at the reference epoch, in degrees.
     */
    dec: number;

    /**
     * Barycentric right ascension of the source in the International Celestial
     * Reference System (ICRS) frame at the reference epoch, in degrees.
     */
    ra: number;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Reference epoch to which the astrometric source parameters are referred,
     * expressed as Julian Year in Barycentric Coordinate Time (TCB).
     */
    starEpoch: number;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    /**
     * Gaia DR3 optical photometric Bp-band magnitude in the Vega scale.
     */
    bpmag?: number;

    /**
     * Gaia DR3 optical Bp-band magnitude uncertainty in the Vega scale.
     */
    bpmagUnc?: number;

    /**
     * The version of the catalog associated with this object.
     */
    catVersion?: string;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Uncertainty of the declination of the source, in milliarcseconds, at the
     * reference epoch.
     */
    decUnc?: number;

    /**
     * The ID of this object in the Gaia DR3 Catalog.
     */
    gaiadr3CatId?: number;

    /**
     * Gaia DR3 optical photometric G-band magnitude in the Vega scale.
     */
    gmag?: number;

    /**
     * Gaia DR3 optical photometric G-band magnitude uncertainty in the Vega scale.
     */
    gmagUnc?: number;

    /**
     * The ID of this object in the Guidance and Navagation Control (GNC) Catalog.
     */
    gncCatId?: number;

    /**
     * The ID of this object in the Hipparcos Catalog.
     */
    hipCatId?: number;

    /**
     * Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared
     * photometric H-band magnitude in the Vega scale.
     */
    hmag?: number;

    /**
     * Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared
     * photometric H-band magnitude uncertainty in the Vega scale.
     */
    hmagUnc?: number;

    /**
     * Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared
     * photometric J-band magnitude in the Vega scale.
     */
    jmag?: number;

    /**
     * Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared
     * photometric J-band magnitude uncertainty in the Vega scale.
     */
    jmagUnc?: number;

    /**
     * Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared
     * photometric K-band magnitude in the Vega scale.
     */
    kmag?: number;

    /**
     * Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared
     * photometric K-band magnitude uncertainty in the Vega scale.
     */
    kmagUnc?: number;

    /**
     * Flag indicating that this is a multiple object source.
     */
    multFlag?: boolean;

    /**
     * Distance between source and nearest neighbor, in arcseconds.
     */
    neighborDistance?: number;

    /**
     * Flag indicating that the nearest catalog neighbor is closer than 4.6 arcseconds.
     */
    neighborFlag?: boolean;

    /**
     * The catalog ID of the nearest neighbor to this source.
     */
    neighborId?: number;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * Absolute stellar parallax of the source, in milliarcseconds.
     */
    parallax?: number;

    /**
     * Uncertainty of the stellar parallax, in milliarcseconds.
     */
    parallaxUnc?: number;

    /**
     * Proper motion in declination of the source, in milliarcseconds/year, at the
     * reference epoch.
     */
    pmdec?: number;

    /**
     * Uncertainty of proper motion in declination, in milliarcseconds/year.
     */
    pmdecUnc?: number;

    /**
     * Proper motion in right ascension of the source, in milliarcseconds/year, at the
     * reference epoch.
     */
    pmra?: number;

    /**
     * Uncertainty of proper motion in right ascension, in milliarcseconds/year.
     */
    pmraUnc?: number;

    /**
     * Flag indicating that the proper motion uncertainty in either ra or dec is
     * greater than 10 milliarcseconds/year.
     */
    pmUncFlag?: boolean;

    /**
     * Flag indicating that the position uncertainty in either ra or dec is greater
     * than 100 milliarcseconds.
     */
    posUncFlag?: boolean;

    /**
     * Uncertainty of the right ascension of the source, in milliarcseconds, at the
     * reference epoch.
     */
    raUnc?: number;

    /**
     * Gaia DR3 optical Rp-band magnitude in the Vega scale.
     */
    rpmag?: number;

    /**
     * Gaia DR3 optical photometric Rp-band magnitude uncertainty in the Vega scale.
     */
    rpmagUnc?: number;

    /**
     * Photocentric shift caused by neighbors, in arcseconds.
     */
    shift?: number;

    /**
     * Flag indicating that the photocentric shift is greater than 50 milliarcseconds.
     */
    shiftFlag?: boolean;

    /**
     * Time the row was updated in the database.
     */
    updatedAt?: string;

    /**
     * Application user who updated the row in the database.
     */
    updatedBy?: string;

    /**
     * Flag indicating that the source exhibits variable magnitude.
     */
    varFlag?: boolean;
  }
}

export declare namespace UdlStarcatalog {
  export { type UdlStarcatalogCreateParams as UdlStarcatalogCreateParams };
}
