// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../resource';
import * as Core from '../../core';

export class AircraftSorties extends APIResource {
  /**
   * Service operation to take one or many aircraft sortie records as a POST body and
   * ingest into the database. This operation is intended to be used for automated
   * feeds into UDL. A specific role is required to perform this service operation.
   * Please contact the UDL team for assistance.
   */
  create(body: AircraftSortyCreateParams, options?: Core.RequestOptions): Core.APIPromise<void> {
    return this._client.post('/filedrop/udl-aircraftsortie', {
      body,
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }
}

export type AircraftSortyCreateParams = Array<AircraftSortyCreateParams.Body>;

export namespace AircraftSortyCreateParams {
  /**
   * Information related to the planning, load, status, and deployment or dispatch of
   * one aircraft to carry out a mission.
   */
  export interface Body {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: string;

    /**
     * The scheduled time that the Aircraft sortie is planned to depart, in ISO 8601
     * UTC format with millisecond precision.
     */
    plannedDepTime: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    /**
     * The actual arrival time, in ISO 8601 UTC format with millisecond precision.
     */
    actualArrTime?: string;

    /**
     * The actual time the Aircraft comes to a complete stop in its parking position,
     * in ISO 8601 UTC format with millisecond precision.
     */
    actualBlockInTime?: string;

    /**
     * The actual time the Aircraft begins to taxi from its parking position, in ISO
     * 8601 UTC format with millisecond precision.
     */
    actualBlockOutTime?: string;

    /**
     * The actual departure time, in ISO 8601 UTC format.
     */
    actualDepTime?: string;

    /**
     * The Automatic Dependent Surveillance-Broadcast (ADS-B) device identifier.
     */
    aircraftADSB?: string;

    /**
     * Alternate Aircraft Identifier provided by source.
     */
    aircraftAltId?: string;

    /**
     * Aircraft event text.
     */
    aircraftEvent?: string;

    /**
     * The aircraft Model Design Series designation assigned to this sortie.
     */
    aircraftMDS?: string;

    /**
     * Remarks concerning the aircraft.
     */
    aircraftRemarks?: string;

    /**
     * The amount of time allowed between launch order and takeoff, in seconds.
     */
    alertStatus?: number;

    /**
     * The Alert Status code.
     */
    alertStatusCode?: string;

    /**
     * The Air Mobility Command (AMC) mission number of the sortie.
     */
    amcMsnNum?: string;

    /**
     * The type of mission (e.g. SAAM, CHNL, etc.).
     */
    amcMsnType?: string;

    /**
     * The arrival Federal Aviation Administration (FAA) code of this sortie.
     */
    arrFAA?: string;

    /**
     * The arrival International Aviation Transport Association (IATA) code of this
     * sortie.
     */
    arrIATA?: string;

    /**
     * The arrival International Civil Aviation Organization (ICAO) of this sortie.
     */
    arrICAO?: string;

    /**
     * The itinerary identifier of the arrival location.
     */
    arrItinerary?: number;

    /**
     * Purpose code at the arrival location of this sortie.
     */
    arrPurposeCode?: string;

    /**
     * The call sign assigned to the aircraft on this sortie.
     */
    callSign?: string;

    /**
     * Description of the cargo configuration (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1,
     * etc.) currently on board the aircraft. Configuration meanings are determined by
     * the data source.
     */
    cargoConfig?: string;

    /**
     * The last name of the aircraft commander.
     */
    commanderName?: string;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * The current state of this sortie.
     */
    currentState?: string;

    /**
     * The primary delay code.
     */
    delayCode?: string;

    /**
     * The departure Federal Aviation Administration (FAA) code of this sortie.
     */
    depFAA?: string;

    /**
     * The departure International Aviation Transport Association (IATA) code of this
     * sortie.
     */
    depIATA?: string;

    /**
     * The departure International Civil Aviation Organization (ICAO) of this sortie.
     */
    depICAO?: string;

    /**
     * The itinerary identifier of the departure location.
     */
    depItinerary?: number;

    /**
     * Purpose code at the departure location of this sortie.
     */
    depPurposeCode?: string;

    /**
     * Due home date by which the aircraft must return to its home station, in ISO 8601
     * UTC format with millisecond precision.
     */
    dhd?: string;

    /**
     * Reason the aircraft must return to home station by its due home date.
     */
    dhdReason?: string;

    /**
     * The current estimated time that the Aircraft is planned to arrive, in ISO 8601
     * UTC format with millisecond precision.
     */
    estArrTime?: string;

    /**
     * The estimated time the Aircraft will come to a complete stop in its parking
     * position, in ISO 8601 UTC format with millisecond precision.
     */
    estBlockInTime?: string;

    /**
     * The estimated time the Aircraft will begin to taxi from its parking position, in
     * ISO 8601 UTC format with millisecond precision.
     */
    estBlockOutTime?: string;

    /**
     * The current estimated time that the Aircraft is planned to depart, in ISO 8601
     * UTC format with millisecond precision.
     */
    estDepTime?: string;

    /**
     * Name of the uploaded PDF.
     */
    filename?: string;

    /**
     * Size of the supporting PDF, in bytes.
     */
    filesize?: number;

    /**
     * The planned flight time for this sortie, in minutes.
     */
    flightTime?: number;

    /**
     * Desk phone number of the flight manager assigned to the sortie. Null when no
     * flight manager is assigned.
     */
    fmDeskNum?: string;

    /**
     * Last name of the flight manager assigned to the sortie. Null when no flight
     * manager is assigned.
     */
    fmName?: string;

    /**
     * Mass of fuel required for this leg of the sortie, in kilograms.
     */
    fuelReq?: number;

    /**
     * Scheduled ground time, in minutes.
     */
    gndTime?: number;

    /**
     * Unique identifier of the aircraft.
     */
    idAircraft?: string;

    /**
     * The unique identifier of the mission to which this sortie is assigned.
     */
    idMission?: string;

    /**
     * Joint Chiefs of Staff priority of this sortie.
     */
    jcsPriority?: string;

    /**
     * The leg number of this sortie.
     */
    legNum?: number;

    /**
     * The external system line number of this sortie.
     */
    lineNumber?: number;

    /**
     * The mission ID according to the source system.
     */
    missionId?: string;

    /**
     * Time the associated mission data was last updated in relation to the aircraft
     * assignment, in ISO 8601 UTC format with millisecond precision. If this time is
     * coming from an external system, it may not sync with the latest mission time
     * associated to this record.
     */
    missionUpdate?: string;

    /**
     * Remarks concerning the sortie objective.
     */
    objectiveRemarks?: string;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * The sortie identifier provided by the originating source.
     */
    origSortieId?: string;

    /**
     * Liquid oxygen onboard the aircraft for the crew compartment, in liters.
     */
    oxyOnCrew?: number;

    /**
     * Liquid oxygen onboard the aircraft for the troop compartment, in liters.
     */
    oxyOnPax?: number;

    /**
     * Liquid oxygen required on the aircraft for the crew compartment, in liters.
     */
    oxyReqCrew?: number;

    /**
     * Liquid oxygen required on the aircraft for the troop compartment, in liters.
     */
    oxyReqPax?: number;

    /**
     * The status of the supporting document.
     */
    paperStatus?: string;

    /**
     * The version number of the crew paper.
     */
    papersVersion?: string;

    /**
     * The POI parking location.
     */
    parkingLoc?: string;

    /**
     * The number of passengers tasked for this sortie.
     */
    passengers?: number;

    /**
     * The scheduled time that the Aircraft sortie is planned to arrive, in ISO 8601
     * UTC format with millisecond precision.
     */
    plannedArrTime?: string;

    /**
     * The prior permission required (PPR) status.
     */
    pprStatus?: string;

    /**
     * The planned primary Standard Conventional Load of the aircraft for this sortie.
     */
    primarySCL?: string;

    /**
     * When crew papers are associated to this sortie, the system updates this value.
     * This field is the URI location in the document repository of that raw file. To
     * download the raw file, prepend https://udl-hostname/scs/download?id= to this
     * field's value.
     */
    rawFileURI?: string;

    /**
     * Aircraft configuration required for the mission.
     */
    reqConfig?: string;

    /**
     * Remarks concerning the results of this sortie.
     */
    resultRemarks?: string;

    /**
     * Type of Ravens required for this sortie (N - None, R - Raven (Security Team)
     * required, C6 - Consider ravens (Ground time over 6 hours), R6 - Ravens required
     * (Ground time over 6 hours)).
     */
    rvnReq?: string;

    /**
     * Remarks concerning the schedule.
     */
    scheduleRemarks?: string;

    /**
     * The planned secondary Standard Conventional Load of the aircraft for this
     * sortie.
     */
    secondarySCL?: string;

    /**
     * Indicates the group responsible for recording the completion time of the next
     * event in the sequence of events assigned to this sortie (e.g. OPS - Operations,
     * MX - Maintenance, TR - Transportation, etc.).
     */
    soe?: string;

    /**
     * The scheduled UTC date for this sortie, in ISO 8601 date-only format (ex.
     * YYYY-MM-DD).
     */
    sortieDate?: string;

    /**
     * The source data library from which this record was received. This could be a
     * remote or tactical UDL or another data library. If null, the record should be
     * assumed to have originated from the primary Enterprise UDL.
     */
    sourceDL?: string;

    /**
     * The tail number of the aircraft assigned to this sortie.
     */
    tailNumber?: string;
  }
}

export declare namespace AircraftSorties {
  export { type AircraftSortyCreateParams as AircraftSortyCreateParams };
}
