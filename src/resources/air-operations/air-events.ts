// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../resource';
import * as Core from '../../core';

export class AirEvents extends APIResource {
  /**
   * Service operation to take multiple airevent records as a POST body and ingest
   * into the database. This operation is intended to be used for automated feeds
   * into UDL. A specific role is required to perform this service operation. Please
   * contact the UDL team for assistance.
   */
  create(body: AirEventCreateParams, options?: Core.RequestOptions): Core.APIPromise<void> {
    return this._client.post('/filedrop/udl-airevent', {
      body,
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }
}

export type AirEventCreateParams = Array<AirEventCreateParams.Body>;

export namespace AirEventCreateParams {
  /**
   * Information related to an air event (e.g. FUEL TRANSFER, AIR DROP) and the
   * associated aircraft.
   */
  export interface Body {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Type of air event (e.g. FUEL TRANSFER, AIR DROP, etc).
     */
    type: string;

    /**
     * Unique identifier of the record, auto-generated by the system if not provided on
     * create operations.
     */
    id?: string;

    /**
     * The actual arrival time of the aircraft at the air event, in ISO 8601 UTC format
     * with millisecond precision.
     */
    actualArrTime?: string;

    /**
     * The actual departure time of the aircraft from the air event, in ISO 8601 UTC
     * format with millisecond precision.
     */
    actualDepTime?: string;

    /**
     * The Air Refueling Control Time is the planned time the tanker aircraft will
     * transfer fuel to the receiver aircraft, in ISO 8601 UTC format, with millisecond
     * precision.
     */
    arct?: string;

    /**
     * Type of process used by AMC to schedule this air refueling event. Possible
     * values are A (Matched Long Range), F (Matched AMC Short Notice), N (Unmatched
     * Theater Operation Short Notice (Theater Assets)), R, Unmatched Long Range, S
     * (Soft Air Refueling), T (Matched Theater Operation Short Notice (Theater
     * Assets)), V (Unmatched AMC Short Notice), X (Unmatched Theater Operation Short
     * Notice (AMC Assets)), Y (Matched Theater Operation Short Notice (AMC Assets)), Z
     * (Other Air Refueling).
     */
    arEventType?: string;

    /**
     * The purpose of the air event at the arrival location. Can be either descriptive
     * text such as 'fuel onload' or a purpose code specified by the provider, such as
     * 'A'.
     */
    arrPurpose?: string;

    /**
     * Identifier of the air refueling track, if applicable.
     */
    arTrackId?: string;

    /**
     * Name of the air refueling track, if applicable.
     */
    arTrackName?: string;

    /**
     * Altitude of this air event, in feet.
     */
    baseAlt?: number;

    /**
     * Flag indicating that this air refueling event has been cancelled.
     */
    cancelled?: boolean;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * The purpose of the air event at the departure location. Can be either
     * descriptive text such as 'fuel onload' or a purpose code specified by the
     * provider, such as 'A'.
     */
    depPurpose?: string;

    /**
     * The current estimated arrival time of the aircraft at the air event, in ISO 8601
     * UTC format with millisecond precision.
     */
    estArrTime?: string;

    /**
     * The current estimated departure time of the aircraft from the air event, in ISO
     * 8601 UTC format with millisecond precision.
     */
    estDepTime?: string;

    /**
     * Optional air event ID from external systems. This field has no meaning within
     * UDL and is provided as a convenience for systems that require tracking of an
     * internal system generated ID.
     */
    externalAirEventId?: string;

    /**
     * Optional air refueling track ID from external systems. This field has no meaning
     * within UDL and is provided as a convenience for systems that require tracking of
     * an internal system generated ID.
     */
    externalARTrackId?: string;

    /**
     * The UDL unique identifier of the mission associated with this air event.
     */
    idMission?: string;

    /**
     * The UDL unique identifier of the sortie associated with this air event.
     */
    idSortie?: string;

    /**
     * Identifies the Itinerary point of a sortie where an air event occurs.
     */
    legNum?: number;

    /**
     * The location representing this air event specified as a feature Id. Locations
     * specified include air refueling track Ids and air drop event locations.
     */
    location?: string;

    /**
     * The number of tankers requested for an air refueling event.
     */
    numTankers?: number;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * The scheduled arrival time of the aircraft at the air event, in ISO 8601 UTC
     * format with millisecond precision.
     */
    plannedArrTime?: string;

    /**
     * The scheduled departure time of the aircraft from the air event, in ISO 8601 UTC
     * format with millisecond precision.
     */
    plannedDepTime?: string;

    /**
     * Priority of this air event.
     */
    priority?: string;

    /**
     * Collection of receiver aircraft associated with this Air Event.
     */
    receivers?: Array<Body.Receiver>;

    /**
     * Collection of remarks associated with this Air Event.
     */
    remarks?: Array<Body.Remark>;

    /**
     * Flag indicating if the receiver unit has requested flying an air refueling track
     * in both directions.
     */
    revTrack?: boolean;

    /**
     * The Rendezvous Control Time is the planned time the tanker and receiver aircraft
     * will rendezvous for an en route type air refueling event, in ISO 8601 UTC
     * format, with millisecond precision.
     */
    rzct?: string;

    /**
     * Rendezvous point for the tanker and receiver during this air refueling event.
     * Possible values are AN (Anchor Nav Point), AP (Anchor Pattern), CP (Control
     * Point), ET (Entry Point), EX (Exit Point), IP (Initial Point), NC (Nav Check
     * Point).
     */
    rzPoint?: string;

    /**
     * Type of rendezvous used for this air refueling event. Possible values are BUD
     * (Buddy), EN (Enroute), GCI (Ground Control), PP (Point Parallel).
     */
    rzType?: string;

    /**
     * Flag indicating that the receiver unit has requested flying a short portion of
     * an air refueling track.
     */
    shortTrack?: boolean;

    /**
     * The source data library from which this record was received. This could be a
     * remote or tactical UDL or another data library. If null, the record should be
     * assumed to have originated from the primary Enterprise UDL.
     */
    sourceDL?: string;

    /**
     * Status of this air refueling event track reservation. Receivers are responsible
     * for scheduling or reserving air refueling tracks. Possible values are A
     * (Altitude Reservation), R (Reserved), or Q (Questionable).
     */
    statusCode?: string;

    /**
     * Collection of tanker aircraft associated with this Air Event.
     */
    tankers?: Array<Body.Tanker>;

    /**
     * Length of time the receiver unit has requested for an air event, in hours.
     */
    trackTime?: number;

    /**
     * Time the row was updated in the database, auto-populated by the system.
     */
    updatedAt?: string;

    /**
     * Application user who updated the row in the database, auto-populated by the
     * system.
     */
    updatedBy?: string;
  }

  export namespace Body {
    /**
     * Collection of receiver aircraft associated with this Air Event.
     */
    export interface Receiver {
      /**
       * Alternate mission identifier of this receiver provided by source.
       */
      altReceiverMissionId?: string;

      /**
       * The Air Mobility Command (AMC) mission identifier of this receiver.
       */
      amcReceiverMissionId?: string;

      /**
       * Optional receiver identifier from external systems. This field has no meaning
       * within UDL and is provided as a convenience for systems that require tracking of
       * an internal system generated ID.
       */
      externalReceiverId?: string;

      /**
       * Total weight of the fuel transferred to this receiver during an air refueling
       * event, in pounds.
       */
      fuelOn?: number;

      /**
       * The UDL ID of the airfield this receiver is associated with for this event.
       */
      idReceiverAirfield?: string;

      /**
       * The UDL ID of the mission this receiver is associated with for this event.
       */
      idReceiverMission?: string;

      /**
       * The UDL ID of the aircraft sortie this receiver is associated with for this
       * event.
       */
      idReceiverSortie?: string;

      /**
       * Number of aircraft contained within one receiver coordination record for an air
       * refueling event.
       */
      numRecAircraft?: number;

      /**
       * The package identifier for the receiver in an air refueling event.
       */
      packageId?: string;

      /**
       * The call sign assigned to this receiver.
       */
      receiverCallSign?: string;

      /**
       * Position of this receiver within a group of receivers in an air refueling event.
       */
      receiverCellPosition?: number;

      /**
       * Coordination record identifier of this receiver.
       */
      receiverCoord?: string;

      /**
       * Type of fuel delivery method used by the receiver during an air refueling event
       * (BOOM, DROGUE, BOTH).
       */
      receiverDeliveryMethod?: string;

      /**
       * Location the receiver is deployed to for an air refueling event.
       */
      receiverDeployedICAO?: string;

      /**
       * Name of the receiver exercise associated with an air refueling event.
       */
      receiverExercise?: string;

      /**
       * Type of fuel being transferred to the receiver in an air refueling event.
       */
      receiverFuelType?: string;

      /**
       * Identifies the itinerary point of a mission that this receiver is linked to.
       */
      receiverLegNum?: number;

      /**
       * The Model Design Series designation of this receiver.
       */
      receiverMDS?: string;

      /**
       * The wing or unit that owns this receiver.
       */
      receiverOwner?: string;

      /**
       * The name and/or number of the point of contact for this receiver.
       */
      receiverPOC?: string;

      /**
       * The major command level (MAJCOM) or foreign military sales (FMS) name of the
       * receiver's organization. The tanker flying hours used for an air refueling event
       * are logged against the receiver MAJCOM or foreign government being supported.
       */
      recOrg?: string;

      /**
       * Indicates the unique number by Unit ID, which identifies an air refueling event.
       */
      sequenceNum?: string;
    }

    /**
     * Collection of remarks associated with this Air Event.
     */
    export interface Remark {
      /**
       * Date the remark was published, in ISO 8601 UTC format, with millisecond
       * precision.
       */
      date?: string;

      /**
       * Optional remark ID from external systems. This field has no meaning within UDL
       * and is provided as a convenience for systems that require tracking of an
       * internal system generated ID.
       */
      externalRemarkId?: string;

      /**
       * Text of the remark.
       */
      text?: string;

      /**
       * User who published the remark.
       */
      user?: string;
    }

    /**
     * Collection of tanker aircraft associated with this Air Event.
     */
    export interface Tanker {
      /**
       * Alternate mission identifier of this tanker provided by source.
       */
      altTankerMissionId?: string;

      /**
       * The Air Mobility Command (AMC) mission identifier of this tanker.
       */
      amcTankerMissionId?: string;

      /**
       * Flag indicating that this tanker is flying a dual role mission in an air
       * refueling event.
       */
      dualRole?: boolean;

      /**
       * Optional tanker identifier from external systems. This field has no meaning
       * within UDL and is provided as a convenience for systems that require tracking of
       * an internal system generated ID.
       */
      externalTankerId?: string;

      /**
       * Total weight of the fuel transferred from this tanker during an air refueling
       * event, in pounds.
       */
      fuelOff?: number;

      /**
       * The UDL ID of the airfield this tanker is associated with for this event.
       */
      idTankerAirfield?: string;

      /**
       * The UDL ID of the mission this tanker is associated with for this event.
       */
      idTankerMission?: string;

      /**
       * The UDL ID of the aircraft sortie this tanker is associated with for this event.
       */
      idTankerSortie?: string;

      /**
       * The call sign assigned to this tanker.
       */
      tankerCallSign?: string;

      /**
       * Position of this tanker within a group of tankers in an air refueling event.
       */
      tankerCellPosition?: number;

      /**
       * Coordination record identifier of this tanker.
       */
      tankerCoord?: string;

      /**
       * Type of fuel delivery method used by the tanker during an air refueling event
       * (BOOM, DROGUE, BOTH).
       */
      tankerDeliveryMethod?: string;

      /**
       * Location the tanker has been deployed to in preparation for an air refueling
       * event.
       */
      tankerDeployedICAO?: string;

      /**
       * Type of fuel being transferred from the tanker in an air refueling event.
       */
      tankerFuelType?: string;

      /**
       * Identifies the itinerary point of a mission that this tanker is linked to.
       */
      tankerLegNum?: number;

      /**
       * The Model Design Series designation of this tanker.
       */
      tankerMDS?: string;

      /**
       * The wing or unit that owns this tanker.
       */
      tankerOwner?: string;

      /**
       * The name and/or number of the point of contact for this tanker.
       */
      tankerPOC?: string;
    }
  }
}

export declare namespace AirEvents {
  export { type AirEventCreateParams as AirEventCreateParams };
}
