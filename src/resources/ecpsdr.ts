// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../resource';
import * as Core from '../core';

export class Ecpsdr extends APIResource {
  /**
   * Service operation to take multiple ECPSDR as a POST body and ingest into the
   * database. This operation is intended to be used for automated feeds into UDL. A
   * specific role is required to perform this service operation. Please contact the
   * UDL team for assistance.
   */
  unvalidatedPublish(
    body: EcpsdrUnvalidatedPublishParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<void> {
    return this._client.post('/filedrop/udl-ecpsdr', {
      body,
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }
}

export type EcpsdrUnvalidatedPublishParams = Array<EcpsdrUnvalidatedPublishParams.Body>;

export namespace EcpsdrUnvalidatedPublishParams {
  /**
   * Supports Sensor Data Records (SDR) from space-borne Energetic Charged Particle
   * (ECP) Sensors. SDR contains sensor status telemetry and raw dosimeter
   * measurements of the space environment.
   */
  export interface Body {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * Time stamp of time packet receipt on ground, in ISO 8601 UTC format with
     * millisecond precision.
     */
    msgTime: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * The type of data associated with this record (STANDARD, TRANSIENT).
     */
    type: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    /**
     * Internal 5V current monitor for analog supply line. This is sensor status
     * telemetry. See vRef for conversion factor to Volts.
     */
    asl5VCurrMon?: number;

    /**
     * CDS Charge Plate voltage monitor. See vRef for conversion factor to Volts.
     */
    cdsPlateVMon?: number;

    /**
     * CDS reference voltage monitor. See vRef for conversion factor to Volts.
     */
    cdsRefVMon?: number;

    /**
     * CDS Threshold setting for ESD detection threshold. The CDS Threshold is the
     * adjustable sensitivity of recording/digitizing an ESD as a transient packet.
     */
    cdsThreshold?: number;

    /**
     * CDS throttle number of seconds between CDS transient capture readouts.
     */
    cdsThrottle?: number;

    /**
     * Two byte CRC-16-CCITT checksum (ordered as first byte, second byte).
     */
    checksum?: number;

    /**
     * Unitless dosimeter detector bias for MedLET and HiLET. MedLET (Linear Energy
     * Transfer) and HiLET subsensors detect particles above LET thresholds, 300keV and
     * 1MeV, respectively.
     */
    dosBias?: number;

    /**
     * Internal 5V current monitor for digital supply line. This is sensor status
     * telemetry. See vRef for conversion factor to Volts.
     */
    dsl5VCurrMon?: number;

    /**
     * Number of ESD triggers, high byte of 2-byte counter.
     */
    esdTrigCountH?: number;

    /**
     * Number of ESD triggers, low byte of 2-byte counter.
     */
    esdTrigCountL?: number;

    /**
     * HiLET dosimeter low range output. Low byte of scaler (HiLET) dosimeter output.
     */
    hiLetL?: number;

    /**
     * Unitless HiLET dosimeter medium range output. Medium byte of (HiLET) dosimeter
     * output.
     */
    hiLetM?: number;

    /**
     * Unique identifier of the reporting sensor.
     */
    idSensor?: string;

    /**
     * LowLET dosimeter low range output. Low byte of (LowLET) dosimeter output.
     */
    lowLetL?: number;

    /**
     * LowLET dosimeter medium range output. Medium byte of (LowLET) dosimeter output.
     */
    lowLetM?: number;

    /**
     * MedLET1 dosimeter low range output. Low byte of the 1st (MedLET) dosimeter
     * output.
     */
    medLet1L?: number;

    /**
     * MedLET1 dosimeter medium range output. Medium byte of the 1st (MedLET) dosimeter
     * output.
     */
    medLet1M?: number;

    /**
     * MedLET2 dosimeter low range output. Low byte of the 2nd (MedLET) dosimeter
     * output.
     */
    medLet2L?: number;

    /**
     * MedLET2 dosimeter medium range output. Medium byte of the 2nd (MedLET) dosimeter
     * output.
     */
    medLet2M?: number;

    /**
     * MedLET3 dosimeter low range output. Low byte of the 3rd (MedLET) dosimeter
     * output.
     */
    medLet3L?: number;

    /**
     * MedLET3 dosimeter medium range output. Medium byte of the 3rd (MedLET) dosimeter
     * output.
     */
    medLet3M?: number;

    /**
     * MedLET4 dosimeter low range output. Low byte of the 4th (MedLET) dosimeter
     * output.
     */
    medLet4L?: number;

    /**
     * MedLET4 dosimeter medium range output. Medium byte of the 4th (MedLET) dosimeter
     * output.
     */
    medLet4M?: number;

    /**
     * Unitless sensor mounting plate temperature.
     */
    mpTemp?: number;

    /**
     * Time of the observation, in ISO 8601 UTC format with millisecond precision.
     */
    obTime?: string;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * Optional identifier provided by the record source to indicate the satellite
     * hosting the sensor. This may be an internal identifier and not necessarily map
     * to a valid satellite number.
     */
    origObjectId?: string;

    /**
     * Optional identifier provided by the record source to indicate the sensor
     * identifier which produced this data. This may be an internal identifier and not
     * necessarily a valid sensor ID.
     */
    origSensorId?: string;

    /**
     * Photodiode 1 signal level.
     */
    pd1SigLev?: number;

    /**
     * Photodiode 2 signal level.
     */
    pd2SigLev?: number;

    /**
     * Power supply temperature monitor. This is sensor status telemetry.
     */
    psTempMon?: number;

    /**
     * Flag indicating whether this record is an original or re-transmitted dataset
     * (TRUE indicates a retransmit from the host).
     */
    retransmit?: boolean;

    /**
     * Satellite/catalog number of the on-orbit satellite hosting the sensor.
     */
    satNo?: number;

    /**
     * The sensor mode associated with this measurements (NORMAL, TEST).
     */
    senMode?: string;

    /**
     * Surface dosimeter charge rate high output (converts to pico-amps/bit). High byte
     * of 2 bytes.
     */
    surfDosChargeH?: number;

    /**
     * Surface dosimeter charge rate low output (converts to pico-amps/bit). Low byte
     * of 2 bytes.
     */
    surfDosChargeL?: number;

    /**
     * Surface dosimeter high range output (converts to pico-coulombs/bit). High byte
     * of 3 bytes.
     */
    surfDosH?: number;

    /**
     * Surface dosimeter low range output (converts to pico-coulombs/bit). Low byte of
     * 3 bytes.
     */
    surfDosL?: number;

    /**
     * Surface dosimeter medium range output (converts to pico-coulombs/bit). Middle
     * byte of 3 bytes.
     */
    surfDosM?: number;

    /**
     * Surface dosimeter status byte.
     */
    surfDosStat?: number;

    /**
     * Array of 144 digitized samples of ESD waveform for transient packets.
     */
    transientData?: Array<number>;

    /**
     * Reference voltage (volts/bit). Conversion factor used to convert analog V
     * monitor data from bytes to volts.
     */
    vRef?: number;
  }
}

export declare namespace Ecpsdr {
  export { type EcpsdrUnvalidatedPublishParams as EcpsdrUnvalidatedPublishParams };
}
