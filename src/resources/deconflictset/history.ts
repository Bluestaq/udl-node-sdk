// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../core/resource';
import { APIPromise } from '../../core/api-promise';
import { OffsetPage, type OffsetPageParams, PagePromise } from '../../core/pagination';
import { buildHeaders } from '../../internal/headers';
import { RequestOptions } from '../../internal/request-options';

export class History extends APIResource {
  /**
   * Service operation to dynamically query historical data by a variety of query
   * parameters not specified in this API documentation. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   *
   * @example
   * ```ts
   * // Automatically fetches more pages as needed.
   * for await (const historyListResponse of client.deconflictset.history.list(
   *   { eventStartTime: '2019-12-27T18:11:19.117Z' },
   * )) {
   *   // ...
   * }
   * ```
   */
  list(
    query: HistoryListParams,
    options?: RequestOptions,
  ): PagePromise<HistoryListResponsesOffsetPage, HistoryListResponse> {
    return this._client.getAPIList('/udl/deconflictset/history', OffsetPage<HistoryListResponse>, {
      query,
      ...options,
    });
  }

  /**
   * Service operation to dynamically query historical data by a variety of query
   * parameters not specified in this API documentation, then write that data to the
   * Secure Content Store. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   *
   * @example
   * ```ts
   * await client.deconflictset.history.aodr({
   *   eventStartTime: '2019-12-27T18:11:19.117Z',
   * });
   * ```
   */
  aodr(query: HistoryAodrParams, options?: RequestOptions): APIPromise<void> {
    return this._client.get('/udl/deconflictset/history/aodr', {
      query,
      ...options,
      headers: buildHeaders([{ Accept: '*/*' }, options?.headers]),
    });
  }

  /**
   * Service operation to return the count of records satisfying the specified query
   * parameters. This operation is useful to determine how many records pass a
   * particular query criteria without retrieving large amounts of data. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
   * valid/required query parameter information.
   *
   * @example
   * ```ts
   * const response = await client.deconflictset.history.count({
   *   eventStartTime: '2019-12-27T18:11:19.117Z',
   * });
   * ```
   */
  count(query: HistoryCountParams, options?: RequestOptions): APIPromise<string> {
    return this._client.get('/udl/deconflictset/history/count', {
      query,
      ...options,
      headers: buildHeaders([{ Accept: 'text/plain' }, options?.headers]),
    });
  }
}

export type HistoryListResponsesOffsetPage = OffsetPage<HistoryListResponse>;

/**
 * The DeconflictSet service provides access to a set of DeconflictWindows and
 * metadata about those data. A DeconflictWindow describes a time window during
 * which an action, such as target engagement, may either occur or is prohibited
 * from occurring. The DeconflictWindow model includes information about the
 * spatial details for specific target types. A flag is provided to specify whether
 * the window should be associated with taking action (OPEN), or if no action
 * should occur (CLOSED).
 */
export interface HistoryListResponse {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * The start time of the event associated with the set of DeconflictWindow records,
   * in ISO 8601 UTC format with millisecond precision.
   */
  eventStartTime: string;

  /**
   * The number of windows provided by this DeconflictSet record.
   */
  numWindows: number;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system if not provided on
   * create operations.
   */
  id?: string;

  /**
   * The time at which the window calculations completed, in ISO 8601 UTC format with
   * millisecond precision.
   */
  calculationEndTime?: string;

  /**
   * The algorithm execution id associated with the generation of this DeconflictSet.
   */
  calculationId?: string;

  /**
   * The time at which the window calculations started, in ISO 8601 UTC format with
   * millisecond precision.
   */
  calculationStartTime?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Array of DeconflictWindow records associated with this DeconflictSet.
   */
  deconflictWindows?: Array<HistoryListResponse.DeconflictWindow>;

  /**
   * Array of error messages that potentially contain information about the reasons
   * this deconflict response calculation may be inaccurate, or why it failed.
   */
  errors?: Array<string>;

  /**
   * The end time of the event associated with the set of DeconflictWindow records,
   * in ISO 8601 UTC format with millisecond precision.
   */
  eventEndTime?: string;

  /**
   * The type of event associated with this DeconflictSet record.
   */
  eventType?: string;

  /**
   * The id of the LaserDeconflictRequest record used as input in the generation of
   * this DeconflictSet, if applicable.
   */
  idLaserDeconflictRequest?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * The reference frame of the cartesian orbital states. If the referenceFrame is
   * null it is assumed to be J2000.
   */
  referenceFrame?: string;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * Optional array of provider/source specific tags for this data, where each
   * element is no longer than 32 characters, used for implementing data owner
   * conditional access controls to restrict access to the data. Should be left null
   * by data providers unless conditional access controls are coordinated with the
   * UDL team.
   */
  tags?: Array<string>;

  /**
   * Optional identifier to track a commercial or marketplace transaction executed to
   * produce this data.
   */
  transactionId?: string;

  /**
   * Array of warning messages that potentially contain information about the reasons
   * this deconflict response calculation may be inaccurate, or why it failed.
   */
  warnings?: Array<string>;
}

export namespace HistoryListResponse {
  /**
   * A DeconflictWindow describes a time window during which an action, such as
   * target engagement, may either occur or is prohibited from occurring. The
   * DeconflictWindow model includes information about the spatial details for
   * specific target types. A flag is provided to specify whether the window should
   * be associated with taking action (OPEN), or if no action should occur (CLOSED).
   */
  export interface DeconflictWindow {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * The start time of the event associated with the set of DeconflictWindow records,
     * in ISO 8601 UTC format with millisecond precision.
     */
    eventStartTime: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * The window start time, in ISO 8601 UTC format with millisecond precision.
     */
    startTime: string;

    /**
     * The window stop time, in ISO 8601 UTC format with millisecond precision.
     */
    stopTime: string;

    /**
     * Unique identifier of the record, auto-generated by the system if not provided on
     * create operations.
     */
    id?: string;

    /**
     * The angle at which the victim enters the target zone in reference to the emitter
     * source location, in degrees.
     */
    angleOfEntry?: number;

    /**
     * The angle at which the victim exits the target zone in reference to the emitter
     * source location, in degrees.
     */
    angleOfExit?: number;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * The X, Y, Z coordinates of entry, in the reference frame specified by the parent
     * DeconflictSet record, in meters.
     */
    entryCoords?: Array<number>;

    /**
     * The type of event associated with the window status.
     */
    eventType?: string;

    /**
     * The X, Y, Z coordinates of exit, in the reference frame specified by the parent
     * DeconflictSet record, in meters.
     */
    exitCoords?: Array<number>;

    /**
     * Unique identifier of the parent DeconflictSet, auto-generated by the system. The
     * idDeconflictSet is used to identify all individual windows associated with a
     * parent DeconflictSet record.
     */
    idDeconflictSet?: string;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * The source data library from which this record was received. This could be a
     * remote or tactical UDL or another data library. If null, the record should be
     * assumed to have originated from the primary Enterprise UDL.
     */
    sourceDL?: string;

    /**
     * The target identifier. If the target is a satellite, the target is the
     * satellite/catalog number of the target on-orbit object.
     */
    target?: string;

    /**
     * The target type associated with this window (e.g. VICTIM, EARTH, etc.).
     */
    targetType?: string;

    /**
     * The victim identifier associated with this window. If the victim is a satellite,
     * the victim is the satellite/catalog number of the target on-orbit object.
     */
    victim?: string;

    /**
     * The window status indicating whether possibility of action may occur. In other
     * words, OPEN is akin to a "green light," during which taking action is warranted
     * or authorized (though not necessarily required) over this timeframe, while
     * CLOSED represents a "red light," meaning that absolutely no action is warranted
     * or authorized to take place during this timeframe.
     */
    windowType?: string;
  }
}

export type HistoryCountResponse = string;

export interface HistoryListParams extends OffsetPageParams {
  /**
   * The start time of the event associated with the set of DeconflictWindow records,
   * in ISO 8601 UTC format with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)
   */
  eventStartTime: string;

  /**
   * optional, fields for retrieval. When omitted, ALL fields are assumed. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
   * query fields that can be selected.
   */
  columns?: string;
}

export interface HistoryAodrParams {
  /**
   * The start time of the event associated with the set of DeconflictWindow records,
   * in ISO 8601 UTC format with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)
   */
  eventStartTime: string;

  /**
   * optional, fields for retrieval. When omitted, ALL fields are assumed. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
   * query fields that can be selected.
   */
  columns?: string;

  firstResult?: number;

  maxResults?: number;

  /**
   * optional, notification method for the created file link. When omitted, EMAIL is
   * assumed. Current valid values are: EMAIL, SMS.
   */
  notification?: string;

  /**
   * optional, field delimiter when the created file is not JSON. Must be a single
   * character chosen from this set: (',', ';', ':', '|'). When omitted, "," is used.
   * It is strongly encouraged that your field delimiter be a character unlikely to
   * occur within the data.
   */
  outputDelimiter?: string;

  /**
   * optional, output format for the file. When omitted, JSON is assumed. Current
   * valid values are: JSON and CSV.
   */
  outputFormat?: string;
}

export interface HistoryCountParams {
  /**
   * The start time of the event associated with the set of DeconflictWindow records,
   * in ISO 8601 UTC format with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)
   */
  eventStartTime: string;

  firstResult?: number;

  maxResults?: number;
}

export declare namespace History {
  export {
    type HistoryListResponse as HistoryListResponse,
    type HistoryCountResponse as HistoryCountResponse,
    type HistoryListResponsesOffsetPage as HistoryListResponsesOffsetPage,
    type HistoryListParams as HistoryListParams,
    type HistoryAodrParams as HistoryAodrParams,
    type HistoryCountParams as HistoryCountParams,
  };
}
