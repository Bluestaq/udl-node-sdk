// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../core/resource';
import { APIPromise } from '../../core/api-promise';
import { buildHeaders } from '../../internal/headers';
import { RequestOptions } from '../../internal/request-options';

export class History extends APIResource {
  /**
   * Service operation to dynamically query historical data by a variety of query
   * parameters not specified in this API documentation. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   */
  list(query: HistoryListParams, options?: RequestOptions): APIPromise<HistoryListResponse> {
    return this._client.get('/udl/weatherdata/history', { query, ...options });
  }

  /**
   * Service operation to dynamically query historical data by a variety of query
   * parameters not specified in this API documentation, then write that data to the
   * Secure Content Store. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   */
  aodr(query: HistoryAodrParams, options?: RequestOptions): APIPromise<void> {
    return this._client.get('/udl/weatherdata/history/aodr', {
      query,
      ...options,
      headers: buildHeaders([{ Accept: '*/*' }, options?.headers]),
    });
  }

  /**
   * Service operation to return the count of records satisfying the specified query
   * parameters. This operation is useful to determine how many records pass a
   * particular query criteria without retrieving large amounts of data. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
   * valid/required query parameter information.
   */
  count(query: HistoryCountParams, options?: RequestOptions): APIPromise<string> {
    return this._client.get('/udl/weatherdata/history/count', {
      query,
      ...options,
      headers: buildHeaders([{ Accept: 'text/plain' }, options?.headers]),
    });
  }
}

/**
 * These services provide for posting and querying Weather Data. Weather Data
 * integrates dynamic data measured by Doppler/CG such as signal power and noise
 * levels, to produce useful weather information.
 */
export interface WeatherDataFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Datetime of the weather observation in ISO 8601 UTC datetime format with
   * microsecond precision.
   */
  obTime: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Angle of orientation of the 50% positional confidence ellipse, in degrees
   * clockwise from true north.
   */
  angleOrientation?: number;

  /**
   * Average power of the reflected signal received by the radar, in Watts.
   */
  avgRefPwr?: number;

  /**
   * Average transmitted power of the radar, in kilowatts.
   */
  avgTxPwr?: number;

  /**
   * Checksum value for the data.
   */
  checksum?: number;

  /**
   * Array of the number(s) of measurements used in coherent integrations used for
   * radar data processing. Users should consult the data provider for information on
   * the coherent integrations array structure.
   */
  coIntegs?: Array<number>;

  /**
   * Array of the number(s) of records in consensus for a radar beam. Users should
   * consult the data provider for information on the consensus records array
   * structure.
   */
  consRecs?: Array<number>;

  /**
   * Time the row was created in the database.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database.
   */
  createdBy?: string;

  /**
   * Array of full scale Nyquist Doppler velocities measured by radar, in meters per
   * second. Nyquist velocity refers to the maximum velocity magnitude that the radar
   * system can unambiguously detect. Doppler velocities with absolute values
   * exceeding the Nyquist threshold suffer from aliasing at the time of collection.
   * Users should consult the data provider for information on the doppler velocities
   * array structure.
   */
  doppVels?: Array<number>;

  /**
   * Datetime the system files were created.
   */
  fileCreation?: string;

  /**
   * Array of average maximum number(s) of consecutive instances in which the same
   * first guess velocity is used in radar data processing to estimate wind speed.
   * Users should consult the data provider for information on the first guess
   * averages array structure.
   */
  firstGuessAvgs?: Array<number>;

  /**
   * Unique identifier of the sensor making the weather measurement.
   */
  idSensor?: string;

  /**
   * Array of the elapsed time(s) from the beginning of one pulse to the beginning of
   * the next pulse for a radar beam, in microseconds. Users should consult the data
   * provider for information on the interpulse periods array structure.
   */
  interpulsePeriods?: Array<number>;

  /**
   * Array of sensor(s) that participated in the lightning event location
   * determination.
   */
  lightDetSensors?: Array<number>;

  /**
   * Number of sensors used in the lightning event location solution.
   */
  lightEventNum?: number;

  /**
   * Array of noise level(s) measured by radar, in decibels. Users should consult the
   * data provider for information on the noise levels array structure.
   */
  noiseLvls?: Array<number>;

  /**
   * Number of antennas across all sectors within the radar coverage area.
   */
  numElements?: number;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Optional identifier provided by the record source. This may be an internal
   * identifier and not necessarily a valid sensor ID.
   */
  origSensorId?: string;

  /**
   * The positional confidence of the calculated lightning event location using the
   * chi-square statistical method.
   */
  posConfidence?: number;

  /**
   * Quality control flag value, as defined by the data provider.
   */
  qcValue?: number;

  /**
   * Number of sectors within the radar coverage area, each containing a number of
   * antennas.
   */
  sectorNum?: number;

  /**
   * Semi-major axis of the 50% positional confidence ellipse, in kilometers.
   */
  semiMajorAxis?: number;

  /**
   * Semi-minor axis of the 50% positional confidence ellipse, in kilometers.
   */
  semiMinorAxis?: number;

  /**
   * Array of signal power(s) measured by the sensor, in decibels. Users should
   * consult the data provider for information on the signal powers array structure.
   */
  sigPwrs?: Array<number>;

  /**
   * Signal strength of the electromagnetic energy received due to a lightning event,
   * in kiloamps.
   */
  sigStrength?: number;

  /**
   * Array of signal to noise ratio(s) for a radar beam, in decibels. Users should
   * consult the data provider for information on the signal to noise ratios array
   * structure.
   */
  snrs?: Array<number>;

  /**
   * Array of the number(s) of spectral averages used in radar data processing. Users
   * should consult the data provider for information on the spectral averages array
   * structure.
   */
  specAvgs?: Array<number>;

  /**
   * Array of width(s) of the distribution in Doppler velocity measured by radar, in
   * meters/second. Spectral width depends on the particle size distribution, the
   * wind shear across the radar beam, and turbulence. Users should consult the data
   * provider for information on the spectral widths array structure.
   */
  specWidths?: Array<number>;

  /**
   * Array of UUID(s) of the UDL data record(s) that are related to this WeatherData
   * record. See the associated 'srcTyps' array for the specific types of data,
   * positionally corresponding to the UUIDs in this array. The 'srcTyps' and
   * 'srcIds' arrays must match in size. See the corresponding srcTyps array element
   * for the data type of the UUID and use the appropriate API operation to retrieve
   * that object.
   */
  srcIds?: Array<string>;

  /**
   * Array of UDL record types (SENSOR, WEATHERREPORT) that are related to this
   * WeatherData record. See the associated 'srcIds' array for the record UUIDs,
   * positionally corresponding to the record types in this array. The 'srcTyps' and
   * 'srcIds' arrays must match in size.
   */
  srcTyps?: Array<string>;

  /**
   * Array of the number(s) of radar samples used in time domain averaging for radar
   * data processing. Time domain averaging improves the quality of the measured
   * signal by reducing random noise and enhancing the signal-to-noise ratio. Users
   * should consult the data provider for information on the time domain sample
   * numbers array structure.
   */
  tdAvgSampleNums?: Array<number>;

  /**
   * Last altitude with recorded measurements in this record, in meters.
   */
  termAlt?: number;
}

export type HistoryListResponse = Array<WeatherDataFull>;

export type HistoryCountResponse = string;

export interface HistoryListParams {
  /**
   * Datetime of the weather observation in ISO 8601 UTC datetime format with
   * microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)
   */
  obTime: string;

  /**
   * optional, fields for retrieval. When omitted, ALL fields are assumed. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
   * query fields that can be selected.
   */
  columns?: string;

  firstResult?: number;

  maxResults?: number;
}

export interface HistoryAodrParams {
  /**
   * Datetime of the weather observation in ISO 8601 UTC datetime format with
   * microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)
   */
  obTime: string;

  /**
   * optional, fields for retrieval. When omitted, ALL fields are assumed. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
   * query fields that can be selected.
   */
  columns?: string;

  firstResult?: number;

  maxResults?: number;

  /**
   * optional, notification method for the created file link. When omitted, EMAIL is
   * assumed. Current valid values are: EMAIL, SMS.
   */
  notification?: string;

  /**
   * optional, field delimiter when the created file is not JSON. Must be a single
   * character chosen from this set: (',', ';', ':', '|'). When omitted, "," is used.
   * It is strongly encouraged that your field delimiter be a character unlikely to
   * occur within the data.
   */
  outputDelimiter?: string;

  /**
   * optional, output format for the file. When omitted, JSON is assumed. Current
   * valid values are: JSON and CSV.
   */
  outputFormat?: string;
}

export interface HistoryCountParams {
  /**
   * Datetime of the weather observation in ISO 8601 UTC datetime format with
   * microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)
   */
  obTime: string;

  firstResult?: number;

  maxResults?: number;
}

export declare namespace History {
  export {
    type WeatherDataFull as WeatherDataFull,
    type HistoryListResponse as HistoryListResponse,
    type HistoryCountResponse as HistoryCountResponse,
    type HistoryListParams as HistoryListParams,
    type HistoryAodrParams as HistoryAodrParams,
    type HistoryCountParams as HistoryCountParams,
  };
}
