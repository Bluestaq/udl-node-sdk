// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../core/resource';
import * as LogisticsSupportAPI from './logistics-support';
import { APIPromise } from '../../core/api-promise';
import { OffsetPage, type OffsetPageParams, PagePromise } from '../../core/pagination';
import { buildHeaders } from '../../internal/headers';
import { RequestOptions } from '../../internal/request-options';

export class History extends APIResource {
  /**
   * Service operation to dynamically query historical data by a variety of query
   * parameters not specified in this API documentation. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   *
   * @example
   * ```ts
   * // Automatically fetches more pages as needed.
   * for await (const historyListResponse of client.logisticsSupport.history.list()) {
   *   // ...
   * }
   * ```
   */
  list(
    query: HistoryListParams | null | undefined = {},
    options?: RequestOptions,
  ): PagePromise<HistoryListResponsesOffsetPage, HistoryListResponse> {
    return this._client.getAPIList('/udl/logisticssupport/history', OffsetPage<HistoryListResponse>, {
      query,
      ...options,
    });
  }

  /**
   * Service operation to dynamically query historical data by a variety of query
   * parameters not specified in this API documentation, then write that data to the
   * Secure Content Store. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   *
   * @example
   * ```ts
   * await client.logisticsSupport.history.aodr();
   * ```
   */
  aodr(query: HistoryAodrParams | null | undefined = {}, options?: RequestOptions): APIPromise<void> {
    return this._client.get('/udl/logisticssupport/history/aodr', {
      query,
      ...options,
      headers: buildHeaders([{ Accept: '*/*' }, options?.headers]),
    });
  }

  /**
   * Service operation to return the count of records satisfying the specified query
   * parameters. This operation is useful to determine how many records pass a
   * particular query criteria without retrieving large amounts of data. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
   * valid/required query parameter information.
   *
   * @example
   * ```ts
   * const response =
   *   await client.logisticsSupport.history.count();
   * ```
   */
  count(query: HistoryCountParams | null | undefined = {}, options?: RequestOptions): APIPromise<string> {
    return this._client.get('/udl/logisticssupport/history/count', {
      query,
      ...options,
      headers: buildHeaders([{ Accept: 'text/plain' }, options?.headers]),
    });
  }
}

export type HistoryListResponsesOffsetPage = OffsetPage<HistoryListResponse>;

/**
 * Comprehensive logistical details concerning the planned support of maintenance
 * operations required by an aircraft, including transportation information,
 * supplies coordination, and service personnel.
 */
export interface HistoryListResponse {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * The time this report was created, in ISO 8601 UTC format with millisecond
   * precision.
   */
  rptCreatedTime: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system if not provided on
   * create operations.
   */
  id?: string;

  /**
   * The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15
   * EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained
   * to, MIL-STD-6016 environment dependent specific type designations.
   */
  aircraftMDS?: string;

  /**
   * Time the row was created in the database.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database.
   */
  createdBy?: string;

  /**
   * The current ICAO of the aircraft that is the subject of this
   * LogisticsSupportDetails record.
   */
  currICAO?: string;

  /**
   * The estimated time mission capable for the aircraft, in ISO 8601 UCT format with
   * millisecond precision. This is the estimated time when the aircraft is mission
   * ready.
   */
  etic?: string;

  /**
   * Logistics estimated time mission capable.
   */
  etmc?: string;

  /**
   * Optional system identifier from external systs. This field has no meaning within
   * UDL and is provided as a convenience for systems that require tracking of an
   * internal system generated ID.
   */
  extSystemId?: string;

  /**
   * This field identifies the pacing event for bringing the aircraft to Mission
   * Capable status. It is used in calculating the Estimated Time Mission Capable
   * (ETMC) value. Acceptable values are WA (Will Advise), INW (In Work), P+hhh.h
   * (where P=parts and hhh.h is the number of hours up to 999 plus tenths of hours),
   * EQ+hhh.h (EQ=equipment), MRT+hhh.h (MRT=maintenance recovery team).
   */
  logisticAction?: string;

  /**
   * Discrepancy information associated with this LogisticsSupport record.
   */
  logisticsDiscrepancyInfos?: Array<LogisticsSupportAPI.LogisticsDiscrepancyInfosFull>;

  /**
   * The identifier that represents a Logistics Master Record.
   */
  logisticsRecordId?: string;

  /**
   * Remarks associated with this LogisticsSupport record.
   */
  logisticsRemarks?: Array<LogisticsSupportAPI.LogisticsRemarksFull>;

  /**
   * Support items associated with this LogisticsSupport record.
   */
  logisticsSupportItems?: Array<LogisticsSupportAPI.LogisticsSupportItemsFull>;

  /**
   * Transportation plans associated with this LogisticsSupport record, used to
   * coordinate maintenance efforts.
   */
  logisticsTransportationPlans?: Array<LogisticsSupportAPI.LogisticsTransportationPlansFull>;

  /**
   * The maintenance status code of the aircraft which may be based on pilot
   * descriptions or evaluation codes. Contact the source provider for details.
   */
  maintStatusCode?: string;

  /**
   * The time indicating when all mission essential problems with a given aircraft
   * have been fixed and is mission capable. This datetime should be in ISO 8601 UTC
   * format with millisecond precision.
   */
  mcTime?: string;

  /**
   * The time indicating when a given aircraft breaks for a mission essential reason.
   * This datetime should be in ISO 8601 UTC format with millisecond precision.
   */
  meTime?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * The organization that owns this logistics record.
   */
  owner?: string;

  /**
   * This is used to indicate whether a closed master record has been reopened.
   */
  reopenFlag?: boolean;

  /**
   * The time this report was closed, in ISO 8601 UTC format with millisecond
   * precision.
   */
  rptClosedTime?: string;

  /**
   * The supplying ICAO of the aircraft that is the subject of this
   * LogisticsSupportDetails record.
   */
  suppICAO?: string;

  /**
   * The tail number of the aircraft that is the subject of this
   * LogisticsSupportDetails record.
   */
  tailNumber?: string;

  /**
   * Time the row was updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

export type HistoryCountResponse = string;

export interface HistoryListParams extends OffsetPageParams {
  /**
   * optional, fields for retrieval. When omitted, ALL fields are assumed. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
   * query fields that can be selected.
   */
  columns?: string;
}

export interface HistoryAodrParams {
  /**
   * optional, fields for retrieval. When omitted, ALL fields are assumed. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
   * query fields that can be selected.
   */
  columns?: string;

  firstResult?: number;

  maxResults?: number;

  /**
   * optional, notification method for the created file link. When omitted, EMAIL is
   * assumed. Current valid values are: EMAIL, SMS.
   */
  notification?: string;

  /**
   * optional, field delimiter when the created file is not JSON. Must be a single
   * character chosen from this set: (',', ';', ':', '|'). When omitted, "," is used.
   * It is strongly encouraged that your field delimiter be a character unlikely to
   * occur within the data.
   */
  outputDelimiter?: string;

  /**
   * optional, output format for the file. When omitted, JSON is assumed. Current
   * valid values are: JSON and CSV.
   */
  outputFormat?: string;
}

export interface HistoryCountParams {
  firstResult?: number;

  maxResults?: number;
}

export declare namespace History {
  export {
    type HistoryListResponse as HistoryListResponse,
    type HistoryCountResponse as HistoryCountResponse,
    type HistoryListResponsesOffsetPage as HistoryListResponsesOffsetPage,
    type HistoryListParams as HistoryListParams,
    type HistoryAodrParams as HistoryAodrParams,
    type HistoryCountParams as HistoryCountParams,
  };
}
