// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from 'bluestaq@unified-data-library/core/resource';
import { APIPromise } from 'bluestaq@unified-data-library/core/api-promise';
import { buildHeaders } from 'bluestaq@unified-data-library/internal/headers';
import { RequestOptions } from 'bluestaq@unified-data-library/internal/request-options';

export class History extends APIResource {
  /**
   * Service operation to dynamically query historical data by a variety of query
   * parameters not specified in this API documentation. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   *
   * @example
   * ```ts
   * const histories =
   *   await client.sensorMaintenance.history.retrieve();
   * ```
   */
  retrieve(
    query: HistoryRetrieveParams | null | undefined = {},
    options?: RequestOptions,
  ): APIPromise<HistoryRetrieveResponse> {
    return this._client.get('/udl/sensormaintenance/history', { query, ...options });
  }

  /**
   * Service operation to dynamically query historical data by a variety of query
   * parameters not specified in this API documentation, then write that data to the
   * Secure Content Store. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   *
   * @example
   * ```ts
   * await client.sensorMaintenance.history.aodr();
   * ```
   */
  aodr(query: HistoryAodrParams | null | undefined = {}, options?: RequestOptions): APIPromise<void> {
    return this._client.get('/udl/sensormaintenance/history/aodr', {
      query,
      ...options,
      headers: buildHeaders([{ Accept: '*/*' }, options?.headers]),
    });
  }

  /**
   * Service operation to return the count of records satisfying the specified query
   * parameters. This operation is useful to determine how many records pass a
   * particular query criteria without retrieving large amounts of data. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
   * valid/required query parameter information.
   *
   * @example
   * ```ts
   * const response =
   *   await client.sensorMaintenance.history.count();
   * ```
   */
  count(query: HistoryCountParams | null | undefined = {}, options?: RequestOptions): APIPromise<string> {
    return this._client.get('/udl/sensormaintenance/history/count', {
      query,
      ...options,
      headers: buildHeaders([{ Accept: 'text/plain' }, options?.headers]),
    });
  }
}

export type HistoryRetrieveResponse = Array<HistoryRetrieveResponse.HistoryRetrieveResponseItem>;

export namespace HistoryRetrieveResponse {
  /**
   * Maintenance schedule and operational status of Sensor.
   */
  export interface HistoryRetrieveResponseItem {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * The planned outage end time in ISO8601 UTC format.
     */
    endTime: string;

    /**
     * The site to which this item applies. NOTE - this site code is COLT specific and
     * may not identically correspond to other UDL site IDs.
     */
    siteCode: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * The planned outage start time in ISO8601 UTC format.
     */
    startTime: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    /**
     * Description of the activity taking place during this outage.
     */
    activity?: string;

    /**
     * The name of the approver.
     */
    approver?: string;

    /**
     * The name of the changer, if applicable.
     */
    changer?: string;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * The duration of the planned outage, expressed as ddd:hh:mm.
     */
    duration?: string;

    /**
     * COLT EOWID.
     */
    eowId?: string;

    /**
     * The mission capability status of the equipment (e.g. FMC, NMC, PMC, UNK, etc.).
     */
    equipStatus?: string;

    /**
     * UUID of the sensor.
     */
    idSensor?: string;

    /**
     * The sensor face(s) to which this COLT maintenance item applies, if applicable.
     */
    impactedFaces?: string;

    /**
     * The date that this item became inactive in ISO8601 UTC format.
     */
    inactiveDate?: string;

    /**
     * The internal COLT line number assigned to this item.
     */
    lineNumber?: string;

    /**
     * The Missile Defense operational capability of this maintenance item. Typical
     * values are G, Y, R, and - for non-applicable sites.
     */
    mdOpsCap?: string;

    /**
     * The Missile Warning operational capability of this maintenance item. Typical
     * values are G, Y, R, and - for non-applicable sites.
     */
    mwOpsCap?: string;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * The priority of this maintenance item.
     */
    priority?: string;

    /**
     * The minimum time required to recall this activity, expressed as ddd:hh:mm.
     */
    recall?: string;

    /**
     * Release.
     */
    rel?: string;

    /**
     * Remarks concerning this outage.
     */
    remark?: string;

    /**
     * The name of the requestor.
     */
    requestor?: string;

    /**
     * The name of the resource(s) affected by this maintenance item.
     */
    resource?: string;

    /**
     * The revision number for this maintenance item.
     */
    rev?: string;

    /**
     * The Space Surveillance operational capability of this maintenance item. Typical
     * values are G, Y, R, and - for non-applicable sites.
     */
    ssOpsCap?: string;

    /**
     * Time the row was last updated in the database, auto-populated by the system.
     */
    updatedAt?: string;

    /**
     * Application user who updated the row in the database, auto-populated by the
     * system.
     */
    updatedBy?: string;
  }
}

export type HistoryCountResponse = string;

export interface HistoryRetrieveParams {
  /**
   * optional, fields for retrieval. When omitted, ALL fields are assumed. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
   * query fields that can be selected.
   */
  columns?: string;

  /**
   * (One or more of fields 'endTime, startTime' are required.) The planned outage
   * end time in ISO8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)
   */
  endTime?: string;

  firstResult?: number;

  maxResults?: number;

  /**
   * (One or more of fields 'endTime, startTime' are required.) The planned outage
   * start time in ISO8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)
   */
  startTime?: string;
}

export interface HistoryAodrParams {
  /**
   * optional, fields for retrieval. When omitted, ALL fields are assumed. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
   * query fields that can be selected.
   */
  columns?: string;

  /**
   * (One or more of fields 'endTime, startTime' are required.) The planned outage
   * end time in ISO8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)
   */
  endTime?: string;

  firstResult?: number;

  maxResults?: number;

  /**
   * optional, notification method for the created file link. When omitted, EMAIL is
   * assumed. Current valid values are: EMAIL, SMS.
   */
  notification?: string;

  /**
   * optional, field delimiter when the created file is not JSON. Must be a single
   * character chosen from this set: (',', ';', ':', '|'). When omitted, "," is used.
   * It is strongly encouraged that your field delimiter be a character unlikely to
   * occur within the data.
   */
  outputDelimiter?: string;

  /**
   * optional, output format for the file. When omitted, JSON is assumed. Current
   * valid values are: JSON and CSV.
   */
  outputFormat?: string;

  /**
   * (One or more of fields 'endTime, startTime' are required.) The planned outage
   * start time in ISO8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)
   */
  startTime?: string;
}

export interface HistoryCountParams {
  /**
   * (One or more of fields 'endTime, startTime' are required.) The planned outage
   * end time in ISO8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)
   */
  endTime?: string;

  firstResult?: number;

  maxResults?: number;

  /**
   * (One or more of fields 'endTime, startTime' are required.) The planned outage
   * start time in ISO8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)
   */
  startTime?: string;
}

export declare namespace History {
  export {
    type HistoryRetrieveResponse as HistoryRetrieveResponse,
    type HistoryCountResponse as HistoryCountResponse,
    type HistoryRetrieveParams as HistoryRetrieveParams,
    type HistoryAodrParams as HistoryAodrParams,
    type HistoryCountParams as HistoryCountParams,
  };
}
