// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../../core/resource';
import { APIPromise } from '../../../core/api-promise';
import { OffsetPage, type OffsetPageParams, PagePromise } from '../../../core/pagination';
import { buildHeaders } from '../../../internal/headers';
import { RequestOptions } from '../../../internal/request-options';

export class History extends APIResource {
  /**
   * Service operation to dynamically query historical data by a variety of query
   * parameters not specified in this API documentation. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   *
   * @example
   * ```ts
   * // Automatically fetches more pages as needed.
   * for await (const historyListResponse of client.observations.obscorrelation.history.list(
   *   { msgTs: '2019-12-27T18:11:19.117Z' },
   * )) {
   *   // ...
   * }
   * ```
   */
  list(
    query: HistoryListParams,
    options?: RequestOptions,
  ): PagePromise<HistoryListResponsesOffsetPage, HistoryListResponse> {
    return this._client.getAPIList('/udl/obscorrelation/history', OffsetPage<HistoryListResponse>, {
      query,
      ...options,
    });
  }

  /**
   * Service operation to dynamically query historical data by a variety of query
   * parameters not specified in this API documentation, then write that data to the
   * Secure Content Store. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   *
   * @example
   * ```ts
   * await client.observations.obscorrelation.history.aodr({
   *   msgTs: '2019-12-27T18:11:19.117Z',
   * });
   * ```
   */
  aodr(query: HistoryAodrParams, options?: RequestOptions): APIPromise<void> {
    return this._client.get('/udl/obscorrelation/history/aodr', {
      query,
      ...options,
      headers: buildHeaders([{ Accept: '*/*' }, options?.headers]),
    });
  }

  /**
   * Service operation to return the count of records satisfying the specified query
   * parameters. This operation is useful to determine how many records pass a
   * particular query criteria without retrieving large amounts of data. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
   * valid/required query parameter information.
   *
   * @example
   * ```ts
   * const response =
   *   await client.observations.obscorrelation.history.count({
   *     msgTs: '2019-12-27T18:11:19.117Z',
   *   });
   * ```
   */
  count(query: HistoryCountParams, options?: RequestOptions): APIPromise<string> {
    return this._client.get('/udl/obscorrelation/history/count', {
      query,
      ...options,
      headers: buildHeaders([{ Accept: 'text/plain' }, options?.headers]),
    });
  }
}

export type HistoryListResponsesOffsetPage = OffsetPage<HistoryListResponse>;

/**
 * Model representation supporting post-pass correlation of UCTs and re-correlation
 * of mis-tagged electro-optical (EO), radar, RF, and DOA track/observations.
 */
export interface HistoryListResponse {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the type of correlation is OBSERVATION or TRACK:
   * OBSERVATION: Identifies an observation is being correlated. TRACK: Identifies
   * the entire track of observations is being correlated.
   */
  corrType: 'OBSERVATION' | 'TRACK';

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Correlation message generation time, in ISO 8601 UTC format with millisecond
   * precision.
   */
  msgTs: string;

  /**
   * Identifier of the Observation associated with this Correlation. If
   * corrType=TRACK then this field should reference the first Observation in the
   * track. Note: To retrieve all remaining Observations in the track, the GET query
   * should include this Observation's source and origin field values, along with the
   * trackId.
   */
  obId: string;

  /**
   * Indicator of whether the type of Observation(s) being correlated is DOA, EO,
   * PASSIVE_RADAR, RADAR, RF, SAR, or SOISET: DOA: The observation type being
   * correlated is Difference of Arrival. EO: The observation type being correlated
   * is Electro-Optical. PASSIVE_RADAR: The observation type being correlated is
   * Passive Radar. RADAR: The observation type being correlated is Radar. RF: The
   * observation type being correlated is Radio Frequency. SAR: The observation type
   * being correlated is Synthetic Aperture Radar. SOISET: The observation type being
   * correlated is Space Object Identification Observation Set.
   */
  obType: 'DOA' | 'EO' | 'PASSIVE_RADAR' | 'RADAR' | 'RF' | 'SAR' | 'SOISET';

  /**
   * Identifier of the orbit state used for correlation.
   */
  referenceOrbitId: string;

  /**
   * Indicator of whether the reference orbit type used for correlation is an ELSET,
   * ESID, or SV: ELSET: The reference orbit type is an Element Set. ESID: The
   * reference orbit type is an Ephemeris Set. SV: The reference orbit type is a
   * State Vector.
   */
  referenceOrbitType: 'ELSET' | 'ESID' | 'SV';

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Type of algorithm used for this correlation (e.g. ROTAS, GEOMETRIC, STATISTICAL,
   * MAHALANOBIS, AI/ML, OTHER).
   */
  algorithmCorrType?: string;

  /**
   * Name of the alternate catalog.
   */
  altCatalog?: string;

  /**
   * Associates one or more alternate catalogs with a source provider or system.
   * Namespaces may be defined by their respective data providers or systems (e.g.
   * JCO, 18SDS, EOSSS, EXO, KBR, KRTL, LeoLabs, NorthStar, SAFRAN, Slingshot).
   */
  altNamespace?: string;

  /**
   * Alternate unique object ID within the namespace.
   */
  altObjectId?: string;

  /**
   * Boolean indicating whether the observation or track can be correlated to the
   * alternate object specified under altObjectId. This flag should only be set to
   * true by data providers after an attempt to correlate to an on-orbit object was
   * made and failed. If unable to correlate, the 'origObjectId' field may be
   * populated with an internal data provider specific identifier.
   */
  altUct?: boolean;

  /**
   * Astrostandard ROTAS correlation result (0 - 4), if applicable. Refer to ROTAS
   * documentation for an explanation of ASTAT values.
   */
  astat?: number;

  /**
   * Correlation score ranging from 0.0 to 1.0. A score of 1.0 represents perfect
   * correlation to the orbit of the corresponding satellite, such as when all
   * observation residuals equal 0.
   */
  corrQuality?: number;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Identifier of the correlated target on-orbit object, if associated with a valid
   * satNo.
   */
  idOnOrbit?: string;

  /**
   * Identifier of the ObsCorrelation record from which this ObsCorrelation record
   * originated. This behavior allows for different source providers/systems to make
   * changes to a given correlation and maintain traceability back to the original
   * correlation.
   */
  idParentCorrelation?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Optional identifier indicates the target on-orbit object being correlated. This
   * may be an internal identifier and not necessarily a valid satellite number.
   */
  origObjectId?: string;

  /**
   * Current 18th SDS satellite/catalog number of the target on-orbit object. Useful
   * to know in the case where an observation is correlated to another
   * satellite/catalog number.
   */
  satNo?: number;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * Optional array of provider/source specific tags for this data, where each
   * element is no longer than 32 characters, used for implementing data owner
   * conditional access controls to restrict access to the data. Should be left null
   * by data providers unless conditional access controls are coordinated with the
   * UDL team.
   */
  tags?: Array<string>;

  /**
   * Identifier of the Track associated with this ObsCorrelation.
   */
  trackId?: string;

  /**
   * Optional identifier to track a commercial or marketplace transaction executed to
   * produce this data.
   */
  transactionId?: string;
}

export type HistoryCountResponse = string;

export interface HistoryListParams extends OffsetPageParams {
  /**
   * Correlation message generation time, in ISO 8601 UTC format with millisecond
   * precision. (YYYY-MM-DDTHH:MM:SS.sssZ)
   */
  msgTs: string;

  /**
   * optional, fields for retrieval. When omitted, ALL fields are assumed. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
   * query fields that can be selected.
   */
  columns?: string;
}

export interface HistoryAodrParams {
  /**
   * Correlation message generation time, in ISO 8601 UTC format with millisecond
   * precision. (YYYY-MM-DDTHH:MM:SS.sssZ)
   */
  msgTs: string;

  /**
   * optional, fields for retrieval. When omitted, ALL fields are assumed. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
   * query fields that can be selected.
   */
  columns?: string;

  firstResult?: number;

  maxResults?: number;

  /**
   * optional, notification method for the created file link. When omitted, EMAIL is
   * assumed. Current valid values are: EMAIL, SMS.
   */
  notification?: string;

  /**
   * optional, field delimiter when the created file is not JSON. Must be a single
   * character chosen from this set: (',', ';', ':', '|'). When omitted, "," is used.
   * It is strongly encouraged that your field delimiter be a character unlikely to
   * occur within the data.
   */
  outputDelimiter?: string;

  /**
   * optional, output format for the file. When omitted, JSON is assumed. Current
   * valid values are: JSON and CSV.
   */
  outputFormat?: string;
}

export interface HistoryCountParams {
  /**
   * Correlation message generation time, in ISO 8601 UTC format with millisecond
   * precision. (YYYY-MM-DDTHH:MM:SS.sssZ)
   */
  msgTs: string;

  firstResult?: number;

  maxResults?: number;
}

export declare namespace History {
  export {
    type HistoryListResponse as HistoryListResponse,
    type HistoryCountResponse as HistoryCountResponse,
    type HistoryListResponsesOffsetPage as HistoryListResponsesOffsetPage,
    type HistoryListParams as HistoryListParams,
    type HistoryAodrParams as HistoryAodrParams,
    type HistoryCountParams as HistoryCountParams,
  };
}
