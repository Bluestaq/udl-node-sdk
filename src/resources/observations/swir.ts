// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../resource';
import * as Core from '../../core';

export class Swir extends APIResource {
  /**
   * Service operation to take a list of SWIR records as a POST body and ingest into
   * the database. This operation is intended to be used for automated feeds into
   * UDL. A specific role is required to perform this service operation. Please
   * contact the UDL team for assistance.
   */
  create(body: SwirCreateParams, options?: Core.RequestOptions): Core.APIPromise<void> {
    return this._client.post('/filedrop/swir', {
      body,
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }
}

export type SwirCreateParams = Array<SwirCreateParams.Body>;

export namespace SwirCreateParams {
  /**
   * Data representing observed short wave infrared (SWIR) measurements.
   */
  export interface Body {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Data timestamp in ISO8601 UTC format.
     */
    ts: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    /**
     * Array of absolute flux measurement data, in Watts per square centimeter per
     * micron. This array should correspond with the same-sized array of wavelengths.
     */
    absFluxes?: Array<number>;

    /**
     * User comments concerning sensor or data limitations.
     */
    badWave?: string;

    /**
     * Array of flux ratio data. This array should correspond with the same-sized array
     * of ratioWavelengths.
     */
    fluxRatios?: Array<number>;

    /**
     * Spacecraft WGS84 latitude, in degrees at obTime. -90 to 90 degrees (negative
     * values south of equator).
     */
    lat?: number;

    /**
     * Location/name of the observing sensor.
     */
    locationName?: string;

    /**
     * Spacecraft WGS84 longitude at ob time, in degrees. -180 to 180 degrees (negative
     * values west of Prime Meridian).
     */
    lon?: number;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * Original object ID or Catalog Number provided by source.
     */
    origObjectId?: string;

    /**
     * Array of ratio wavelength data. This array should correspond with the same-sized
     * array of fluxRatios.
     */
    ratioWavelengths?: Array<number>;

    /**
     * Satellite/catalog number of the target on-orbit object.
     */
    satNo?: number;

    /**
     * The angle, in degrees, between the target-to-observer vector and the
     * target-to-sun vector.
     */
    solarPhaseAngle?: number;

    /**
     * Array of wavelengths, in microns. This array should correspond with the
     * same-sized array of absFluxes.
     */
    wavelengths?: Array<number>;
  }
}

export declare namespace Swir {
  export { type SwirCreateParams as SwirCreateParams };
}
