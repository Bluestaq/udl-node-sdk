// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../resource';
import * as Core from '../../core';
import * as AntennasAPI from '../antennas';
import * as BatteriesAPI from '../batteries';
import * as EnginesAPI from '../engines';
import * as EntitiesAPI from '../entities';

export class EcpsdrResource extends APIResource {
  /**
   * Service operation to take a single ECPSDR as a POST body and ingest into the
   * database. A specific role is required to perform this service operation. Please
   * contact the UDL team for assistance.
   */
  create(body: EcpsdrCreateParams, options?: Core.RequestOptions): Core.APIPromise<void> {
    return this._client.post('/udl/ecpsdr', {
      body,
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }

  /**
   * Service operation to get a single ECPSDR by its unique ID passed as a path
   * parameter.
   */
  retrieve(params: EcpsdrRetrieveParams, options?: Core.RequestOptions): Core.APIPromise<Ecpsdr> {
    const { path_id, body_id } = params;
    return this._client.get(`/udl/ecpsdr/${path_id}`, options);
  }

  /**
   * Service operation to dynamically query data by a variety of query parameters not
   * specified in this API documentation. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   */
  list(params: EcpsdrListParams, options?: Core.RequestOptions): Core.APIPromise<EcpsdrListResponse> {
    const { msgTime } = params;
    return this._client.get('/udl/ecpsdr', options);
  }

  /**
   * Service operation to return the count of records satisfying the specified query
   * parameters. This operation is useful to determine how many records pass a
   * particular query criteria without retrieving large amounts of data. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
   * valid/required query parameter information.
   */
  count(params: EcpsdrCountParams, options?: Core.RequestOptions): Core.APIPromise<string> {
    const { msgTime } = params;
    return this._client.get('/udl/ecpsdr/count', {
      ...options,
      headers: { Accept: 'text/plain', ...options?.headers },
    });
  }

  /**
   * Service operation intended for initial integration only, to take a list of
   * ECPSDR as a POST body and ingest into the database. This operation is not
   * intended to be used for automated feeds into UDL. Data providers should contact
   * the UDL team for specific role assignments and for instructions on setting up a
   * permanent feed through an alternate mechanism.
   */
  createBulk(body: EcpsdrCreateBulkParams, options?: Core.RequestOptions): Core.APIPromise<void> {
    return this._client.post('/udl/ecpsdr/createBulk', {
      body,
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }

  /**
   * Service operation to provide detailed information on available dynamic query
   * parameters for a particular data type.
   */
  queryHelp(options?: Core.RequestOptions): Core.APIPromise<void> {
    return this._client.get('/udl/ecpsdr/queryhelp', {
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }

  /**
   * Service operation to dynamically query data and only return specified
   * columns/fields. Requested columns are specified by the 'columns' query parameter
   * and should be a comma separated list of valid fields for the specified data
   * type. classificationMarking is always returned. See the queryhelp operation
   * (/udl/<datatype>/queryhelp) for more details on valid/required query parameter
   * information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5
   * hours would return the satNo and period of elsets with an epoch greater than 5
   * hours ago.
   */
  tuple(params: EcpsdrTupleParams, options?: Core.RequestOptions): Core.APIPromise<EcpsdrTupleResponse> {
    const { columns, msgTime } = params;
    return this._client.get('/udl/ecpsdr/tuple', options);
  }
}

/**
 * Supports Sensor Data Records (SDR) from space-borne Energetic Charged Particle
 * (ECP) Sensors. SDR contains sensor status telemetry and raw dosimeter
 * measurements of the space environment.
 */
export interface Ecpsdr {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: string;

  /**
   * Time stamp of time packet receipt on ground, in ISO 8601 UTC format with
   * millisecond precision.
   */
  msgTime: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * The type of data associated with this record (STANDARD, TRANSIENT).
   */
  type: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Internal 5V current monitor for analog supply line. This is sensor status
   * telemetry. See vRef for conversion factor to Volts.
   */
  asl5VCurrMon?: number;

  /**
   * CDS Charge Plate voltage monitor. See vRef for conversion factor to Volts.
   */
  cdsPlateVMon?: number;

  /**
   * CDS reference voltage monitor. See vRef for conversion factor to Volts.
   */
  cdsRefVMon?: number;

  /**
   * CDS Threshold setting for ESD detection threshold. The CDS Threshold is the
   * adjustable sensitivity of recording/digitizing an ESD as a transient packet.
   */
  cdsThreshold?: number;

  /**
   * CDS throttle number of seconds between CDS transient capture readouts.
   */
  cdsThrottle?: number;

  /**
   * Two byte CRC-16-CCITT checksum (ordered as first byte, second byte).
   */
  checksum?: number;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Unitless dosimeter detector bias for MedLET and HiLET. MedLET (Linear Energy
   * Transfer) and HiLET subsensors detect particles above LET thresholds, 300keV and
   * 1MeV, respectively.
   */
  dosBias?: number;

  /**
   * Internal 5V current monitor for digital supply line. This is sensor status
   * telemetry. See vRef for conversion factor to Volts.
   */
  dsl5VCurrMon?: number;

  /**
   * Number of ESD triggers, high byte of 2-byte counter.
   */
  esdTrigCountH?: number;

  /**
   * Number of ESD triggers, low byte of 2-byte counter.
   */
  esdTrigCountL?: number;

  /**
   * HiLET dosimeter low range output. Low byte of scaler (HiLET) dosimeter output.
   */
  hiLetL?: number;

  /**
   * Unitless HiLET dosimeter medium range output. Medium byte of (HiLET) dosimeter
   * output.
   */
  hiLetM?: number;

  /**
   * Unique identifier of the on-orbit satellite hosting the sensor.
   */
  idOnOrbit?: string;

  /**
   * Unique identifier of the reporting sensor.
   */
  idSensor?: string;

  /**
   * LowLET dosimeter low range output. Low byte of (LowLET) dosimeter output.
   */
  lowLetL?: number;

  /**
   * LowLET dosimeter medium range output. Medium byte of (LowLET) dosimeter output.
   */
  lowLetM?: number;

  /**
   * MedLET1 dosimeter low range output. Low byte of the 1st (MedLET) dosimeter
   * output.
   */
  medLet1L?: number;

  /**
   * MedLET1 dosimeter medium range output. Medium byte of the 1st (MedLET) dosimeter
   * output.
   */
  medLet1M?: number;

  /**
   * MedLET2 dosimeter low range output. Low byte of the 2nd (MedLET) dosimeter
   * output.
   */
  medLet2L?: number;

  /**
   * MedLET2 dosimeter medium range output. Medium byte of the 2nd (MedLET) dosimeter
   * output.
   */
  medLet2M?: number;

  /**
   * MedLET3 dosimeter low range output. Low byte of the 3rd (MedLET) dosimeter
   * output.
   */
  medLet3L?: number;

  /**
   * MedLET3 dosimeter medium range output. Medium byte of the 3rd (MedLET) dosimeter
   * output.
   */
  medLet3M?: number;

  /**
   * MedLET4 dosimeter low range output. Low byte of the 4th (MedLET) dosimeter
   * output.
   */
  medLet4L?: number;

  /**
   * MedLET4 dosimeter medium range output. Medium byte of the 4th (MedLET) dosimeter
   * output.
   */
  medLet4M?: number;

  /**
   * Unitless sensor mounting plate temperature.
   */
  mpTemp?: number;

  /**
   * Time of the observation, in ISO 8601 UTC format with millisecond precision.
   */
  obTime?: string;

  /**
   * Model object representing on-orbit objects or satellites in the system.
   */
  onOrbit?: Ecpsdr.OnOrbit;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Optional identifier provided by the record source to indicate the satellite
   * hosting the sensor. This may be an internal identifier and not necessarily map
   * to a valid satellite number.
   */
  origObjectId?: string;

  /**
   * Optional identifier provided by the record source to indicate the sensor
   * identifier which produced this data. This may be an internal identifier and not
   * necessarily a valid sensor ID.
   */
  origSensorId?: string;

  /**
   * Photodiode 1 signal level.
   */
  pd1SigLev?: number;

  /**
   * Photodiode 2 signal level.
   */
  pd2SigLev?: number;

  /**
   * Power supply temperature monitor. This is sensor status telemetry.
   */
  psTempMon?: number;

  /**
   * Flag indicating whether this record is an original or re-transmitted dataset
   * (TRUE indicates a retransmit from the host).
   */
  retransmit?: boolean;

  /**
   * Satellite/catalog number of the on-orbit satellite hosting the sensor.
   */
  satNo?: number;

  /**
   * The sensor mode associated with this measurements (NORMAL, TEST).
   */
  senMode?: string;

  /**
   * Surface dosimeter charge rate high output (converts to pico-amps/bit). High byte
   * of 2 bytes.
   */
  surfDosChargeH?: number;

  /**
   * Surface dosimeter charge rate low output (converts to pico-amps/bit). Low byte
   * of 2 bytes.
   */
  surfDosChargeL?: number;

  /**
   * Surface dosimeter high range output (converts to pico-coulombs/bit). High byte
   * of 3 bytes.
   */
  surfDosH?: number;

  /**
   * Surface dosimeter low range output (converts to pico-coulombs/bit). Low byte of
   * 3 bytes.
   */
  surfDosL?: number;

  /**
   * Surface dosimeter medium range output (converts to pico-coulombs/bit). Middle
   * byte of 3 bytes.
   */
  surfDosM?: number;

  /**
   * Surface dosimeter status byte.
   */
  surfDosStat?: number;

  /**
   * Array of 144 digitized samples of ESD waveform for transient packets.
   */
  transientData?: Array<number>;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;

  /**
   * Reference voltage (volts/bit). Conversion factor used to convert analog V
   * monitor data from bytes to volts.
   */
  vRef?: number;
}

export namespace Ecpsdr {
  /**
   * Model object representing on-orbit objects or satellites in the system.
   */
  export interface OnOrbit {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: string;

    /**
     * Satellite/Catalog number of the target on-orbit object.
     */
    satNo: number;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Alternate name of the on-orbit object.
     */
    altName?: string;

    /**
     * Read-only collection of antennas on this on-orbit object.
     */
    antennas?: Array<OnOrbit.Antenna>;

    /**
     * Read-only collection of batteries on this on-orbit object.
     */
    batteries?: Array<OnOrbit.Battery>;

    /**
     * Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without
     * State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic,
     * Heliocentric, Interplanetary, Lagrangian, Docked).
     */
    category?: string;

    /**
     * Common name of the on-orbit object.
     */
    commonName?: string;

    /**
     * Constellation to which this satellite belongs.
     */
    constellation?: string;

    /**
     * The country code. This value is typically the ISO 3166 Alpha-2 two-character
     * country code, however it can also represent various consortiums that do not
     * appear in the ISO document. The code must correspond to an existing country in
     * the UDL�s country API. Call udl/country/{code} to get any associated FIPS code,
     * ISO Alpha-3 code, or alternate code values that exist for the specified country
     * code.
     */
    countryCode?: string;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Date of decay.
     */
    decayDate?: string;

    entityCollection?: Array<EntitiesAPI.EntityFull>;

    /**
     * For the public catalog, the idOnOrbit is typically the satellite number as a
     * string, but may be a UUID for analyst or other unknown or untracked satellites,
     * auto-generated by the system.
     */
    idOnOrbit?: string;

    /**
     * International Designator, typically of the format YYYYLLLAAA, where YYYY is the
     * launch year, LLL is the sequential launch number of that year, and AAA is an
     * optional launch piece designator for the launch.
     */
    intlDes?: string;

    /**
     * Date of launch.
     */
    launchDate?: string;

    /**
     * Id of the associated launchSite entity.
     */
    launchSiteId?: string;

    /**
     * Estimated lifetime of the on-orbit payload, if known.
     */
    lifetimeYears?: number;

    /**
     * Mission number of the on-orbit object.
     */
    missionNumber?: string;

    /**
     * Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED,
     * UNKNOWN.
     */
    objectType?: string;

    /**
     * Read-only collection of details for this on-orbit object.
     */
    onorbitDetails?: Array<OnOrbit.OnorbitDetail>;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * Read-only collection of solar arrays on this on-orbit object.
     */
    solarArrays?: Array<OnOrbit.SolarArray>;

    /**
     * Read-only collection of thrusters (engines) on this on-orbit object.
     */
    thrusters?: Array<OnOrbit.Thruster>;

    /**
     * Time the row was last updated in the database, auto-populated by the system.
     */
    updatedAt?: string;

    /**
     * Application user who updated the row in the database, auto-populated by the
     * system.
     */
    updatedBy?: string;
  }

  export namespace OnOrbit {
    /**
     * Read-only collection of antennas on this on-orbit object.
     */
    export interface Antenna {
      /**
       * Classification marking of the data in IC/CAPCO Portion-marked format.
       */
      classificationMarking: string;

      /**
       * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
       *
       * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
       * may include both real and simulated data.
       *
       * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
       * events, and analysis.
       *
       * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
       * datasets.
       *
       * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
       * requirements, and for validating technical, functional, and performance
       * characteristics.
       */
      dataMode: string;

      /**
       * ID of the antenna.
       */
      idAntenna: string;

      /**
       * ID of the on-orbit object.
       */
      idOnOrbit: string;

      /**
       * Source of the data.
       */
      source: string;

      /**
       * Unique identifier of the record, auto-generated by the system.
       */
      id?: string;

      /**
       * Model representation of information on on-orbit/spacecraft communication
       * antennas. A spacecraft may have multiple antennas and each antenna can have
       * multiple 'details' records compiled by different sources.
       */
      antenna?: AntennasAPI.AntennaFull;

      /**
       * Time the row was created in the database, auto-populated by the system.
       */
      createdAt?: string;

      /**
       * Application user who created the row in the database, auto-populated by the
       * system.
       */
      createdBy?: string;

      /**
       * Originating system or organization which produced the data, if different from
       * the source. The origin may be different than the source if the source was a
       * mediating system which forwarded the data on behalf of the origin system. If
       * null, the source may be assumed to be the origin.
       */
      origin?: string;

      /**
       * The originating source network on which this record was created, auto-populated
       * by the system.
       */
      origNetwork?: string;

      /**
       * Time the row was last updated in the database, auto-populated by the system.
       */
      updatedAt?: string;

      /**
       * Application user who updated the row in the database, auto-populated by the
       * system.
       */
      updatedBy?: string;
    }

    /**
     * Read-only collection of batteries on this on-orbit object.
     */
    export interface Battery {
      /**
       * Classification marking of the data in IC/CAPCO Portion-marked format.
       */
      classificationMarking: string;

      /**
       * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
       *
       * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
       * may include both real and simulated data.
       *
       * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
       * events, and analysis.
       *
       * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
       * datasets.
       *
       * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
       * requirements, and for validating technical, functional, and performance
       * characteristics.
       */
      dataMode: string;

      /**
       * ID of the battery.
       */
      idBattery: string;

      /**
       * ID of the on-orbit object.
       */
      idOnOrbit: string;

      /**
       * Source of the data.
       */
      source: string;

      /**
       * Unique identifier of the record, auto-generated by the system.
       */
      id?: string;

      /**
       * Model representation of specific spacecraft battery types.
       */
      battery?: BatteriesAPI.BatteryFull;

      /**
       * Time the row was created in the database, auto-populated by the system.
       */
      createdAt?: string;

      /**
       * Application user who created the row in the database, auto-populated by the
       * system.
       */
      createdBy?: string;

      /**
       * Originating system or organization which produced the data, if different from
       * the source. The origin may be different than the source if the source was a
       * mediating system which forwarded the data on behalf of the origin system. If
       * null, the source may be assumed to be the origin.
       */
      origin?: string;

      /**
       * The originating source network on which this record was created, auto-populated
       * by the system.
       */
      origNetwork?: string;

      /**
       * The number of batteries on the spacecraft of the type identified by idBattery.
       */
      quantity?: number;

      /**
       * Time the row was last updated in the database, auto-populated by the system.
       */
      updatedAt?: string;

      /**
       * Application user who updated the row in the database, auto-populated by the
       * system.
       */
      updatedBy?: string;
    }

    /**
     * Contains details of the OnOrbit object.
     */
    export interface OnorbitDetail {
      /**
       * Classification marking of the data in IC/CAPCO Portion-marked format.
       */
      classificationMarking: string;

      /**
       * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
       *
       * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
       * may include both real and simulated data.
       *
       * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
       * events, and analysis.
       *
       * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
       * datasets.
       *
       * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
       * requirements, and for validating technical, functional, and performance
       * characteristics.
       */
      dataMode: string;

      /**
       * UUID of the parent Onorbit record.
       */
      idOnOrbit: string;

      /**
       * Source of the data.
       */
      source: string;

      /**
       * Unique identifier of the record, auto-generated by the system.
       */
      id?: string;

      /**
       * Mass of fuel and disposables at launch time in kilograms.
       */
      additionalMass?: number;

      /**
       * The radius used for long-term debris environment projection analyses that is not
       * as conservative as COLA Radius, in meters.
       */
      adeptRadius?: number;

      /**
       * The total beginning of life delta V of the spacecraft, in meters per second.
       */
      bolDeltaV?: number;

      /**
       * Spacecraft beginning of life fuel mass, in orbit, in kilograms.
       */
      bolFuelMass?: number;

      /**
       * Average cross sectional area of the bus in meters squared.
       */
      busCrossSection?: number;

      /**
       * Type of the bus on the spacecraft.
       */
      busType?: string;

      /**
       * Maximum dimension of the box circumscribing the spacecraft (d = sqrt(a*a + b*b +
       * c\*c) where a is the tip-to-tip dimension, b and c are perpendicular to that.)
       * in meters.
       */
      colaRadius?: number;

      /**
       * Time the row was created in the database, auto-populated by the system.
       */
      createdAt?: string;

      /**
       * Application user who created the row in the database, auto-populated by the
       * system.
       */
      createdBy?: string;

      /**
       * Average cross sectional area in meters squared.
       */
      crossSection?: number;

      /**
       * The estimated total current mass of the spacecraft, in kilograms.
       */
      currentMass?: number;

      /**
       * The 1-sigma uncertainty of the total spacecraft delta V, in meters per second.
       */
      deltaVUnc?: number;

      /**
       * Array of the estimated mass of each deployable object, in kilograms. Must
       * contain the same number of elements as the value of numDeployable.
       */
      depEstMasses?: Array<number>;

      /**
       * Array of the 1-sigma uncertainty of the mass for each deployable object, in
       * kilograms. Must contain the same number of elements as the value of
       * numDeployable.
       */
      depMassUncs?: Array<number>;

      /**
       * Array of satellite deployable objects. Must contain the same number of elements
       * as the value of numDeployable.
       */
      depNames?: Array<string>;

      /**
       * GEO drift rate, if applicable in degrees per day.
       */
      driftRate?: number;

      /**
       * Spacecraft dry mass (without fuel or disposables) in kilograms.
       */
      dryMass?: number;

      /**
       * Estimated maximum burn duration for the object, in seconds.
       */
      estDeltaVDuration?: number;

      /**
       * Estimated remaining fuel for the object in kilograms.
       */
      fuelRemaining?: number;

      /**
       * GEO slot if applicable, in degrees. -180 (West of Prime Meridian) to 180 degrees
       * (East of Prime Meridian). Prime Meridian is 0.
       */
      geoSlot?: number;

      /**
       * The name of the source who last provided an observation for this idOnOrbit.
       */
      lastObSource?: string;

      /**
       * Time of last reported observation for this object in ISO 8601 UTC with
       * microsecond precision.
       */
      lastObTime?: string;

      /**
       * Nominal mass of spacecraft and fuel at launch time, in kilograms.
       */
      launchMass?: number;

      /**
       * Maximum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
       */
      launchMassMax?: number;

      /**
       * Minimum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
       */
      launchMassMin?: number;

      /**
       * Boolean indicating whether a spacecraft is maneuverable. Note that a spacecraft
       * may have propulsion capability but may not be maneuverable due to lack of fuel,
       * anomalous condition, or other operational constraints.
       */
      maneuverable?: boolean;

      /**
       * Maximum delta V available for this on-orbit spacecraft, in meters per second.
       */
      maxDeltaV?: number;

      /**
       * Maximum dimension across the spacecraft (e.g., tip-to-tip across the solar panel
       * arrays) in meters.
       */
      maxRadius?: number;

      /**
       * Array of the type of missions the spacecraft performs. Must contain the same
       * number of elements as the value of numMission.
       */
      missionTypes?: Array<string>;

      /**
       * The number of sub-satellites or deployable objects on the spacecraft.
       */
      numDeployable?: number;

      /**
       * The number of distinct missions the spacecraft performs.
       */
      numMission?: number;

      /**
       * Originating system or organization which produced the data, if different from
       * the source. The origin may be different than the source if the source was a
       * mediating system which forwarded the data on behalf of the origin system. If
       * null, the source may be assumed to be the origin.
       */
      origin?: string;

      /**
       * The originating source network on which this record was created, auto-populated
       * by the system.
       */
      origNetwork?: string;

      /**
       * Current/latest radar cross section in meters squared.
       */
      rcs?: number;

      /**
       * Maximum radar cross section in meters squared.
       */
      rcsMax?: number;

      /**
       * Mean radar cross section in meters squared.
       */
      rcsMean?: number;

      /**
       * Minimum radar cross section in meters squared.
       */
      rcsMin?: number;

      /**
       * The reference source, sources, or URL from which the data in this record was
       * obtained.
       */
      refSource?: string;

      /**
       * Spacecraft deployed area of solar array in meters squared.
       */
      solarArrayArea?: number;

      /**
       * The 1-sigma uncertainty of the total spacecraft mass, in kilograms.
       */
      totalMassUnc?: number;

      /**
       * Time the row was last updated in the database, auto-populated by the system.
       */
      updatedAt?: string;

      /**
       * Application user who updated the row in the database, auto-populated by the
       * system.
       */
      updatedBy?: string;

      /**
       * Current/latest visual magnitude in M.
       */
      vismag?: number;

      /**
       * Maximum visual magnitude in M.
       */
      vismagMax?: number;

      /**
       * Mean visual magnitude in M.
       */
      vismagMean?: number;

      /**
       * Minimum visual magnitude in M.
       */
      vismagMin?: number;
    }

    /**
     * Read-only collection of solar arrays on this on-orbit object.
     */
    export interface SolarArray {
      /**
       * Classification marking of the data in IC/CAPCO Portion-marked format.
       */
      classificationMarking: string;

      /**
       * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
       *
       * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
       * may include both real and simulated data.
       *
       * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
       * events, and analysis.
       *
       * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
       * datasets.
       *
       * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
       * requirements, and for validating technical, functional, and performance
       * characteristics.
       */
      dataMode: string;

      /**
       * ID of the on-orbit object.
       */
      idOnOrbit: string;

      /**
       * ID of the SolarArray.
       */
      idSolarArray: string;

      /**
       * Source of the data.
       */
      source: string;

      /**
       * Unique identifier of the record, auto-generated by the system.
       */
      id?: string;

      /**
       * Time the row was created in the database, auto-populated by the system.
       */
      createdAt?: string;

      /**
       * Application user who created the row in the database, auto-populated by the
       * system.
       */
      createdBy?: string;

      /**
       * Originating system or organization which produced the data, if different from
       * the source. The origin may be different than the source if the source was a
       * mediating system which forwarded the data on behalf of the origin system. If
       * null, the source may be assumed to be the origin.
       */
      origin?: string;

      /**
       * The originating source network on which this record was created, auto-populated
       * by the system.
       */
      origNetwork?: string;

      /**
       * The number of solar arrays on the spacecraft of the type identified by
       * idSolarArray.
       */
      quantity?: number;

      /**
       * Model representation of information on on-orbit/spacecraft solar arrays. A
       * spacecraft may have multiple solar arrays and each solar array can have multiple
       * 'details' records compiled by different sources.
       */
      solarArray?: SolarArray.SolarArray;

      /**
       * Time the row was last updated in the database, auto-populated by the system.
       */
      updatedAt?: string;

      /**
       * Application user who updated the row in the database, auto-populated by the
       * system.
       */
      updatedBy?: string;
    }

    export namespace SolarArray {
      /**
       * Model representation of information on on-orbit/spacecraft solar arrays. A
       * spacecraft may have multiple solar arrays and each solar array can have multiple
       * 'details' records compiled by different sources.
       */
      export interface SolarArray {
        /**
         * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
         *
         * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
         * may include both real and simulated data.
         *
         * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
         * events, and analysis.
         *
         * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
         * datasets.
         *
         * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
         * requirements, and for validating technical, functional, and performance
         * characteristics.
         */
        dataMode: string;

        /**
         * Solar Array name.
         */
        name: string;

        /**
         * Source of the data.
         */
        source: string;

        /**
         * Unique identifier of the record, auto-generated by the system.
         */
        id?: string;

        /**
         * Time the row was created in the database, auto-populated by the system.
         */
        createdAt?: string;

        /**
         * Application user who created the row in the database, auto-populated by the
         * system.
         */
        createdBy?: string;

        /**
         * Originating system or organization which produced the data, if different from
         * the source. The origin may be different than the source if the source was a
         * mediating system which forwarded the data on behalf of the origin system. If
         * null, the source may be assumed to be the origin.
         */
        origin?: string;

        /**
         * The originating source network on which this record was created, auto-populated
         * by the system.
         */
        origNetwork?: string;

        /**
         * Read-only collection of additional SolarArrayDetails by various sources for this
         * organization, ignored on create/update. These details must be created separately
         * via the /udl/solararraydetails operations.
         */
        solarArrayDetails?: Array<SolarArray.SolarArrayDetail>;

        /**
         * Time the row was last updated in the database, auto-populated by the system.
         */
        updatedAt?: string;

        /**
         * Application user who updated the row in the database, auto-populated by the
         * system.
         */
        updatedBy?: string;
      }

      export namespace SolarArray {
        /**
         * Model representation of Information on spacecraft SolarArrayDetails. A
         * SolarArray may have multiple details records compiled by various sources.
         */
        export interface SolarArrayDetail {
          /**
           * Classification marking of the data in IC/CAPCO Portion-marked format.
           */
          classificationMarking: string;

          /**
           * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
           *
           * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
           * may include both real and simulated data.
           *
           * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
           * events, and analysis.
           *
           * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
           * datasets.
           *
           * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
           * requirements, and for validating technical, functional, and performance
           * characteristics.
           */
          dataMode: string;

          /**
           * Unique identifier of the parent SolarArray.
           */
          idSolarArray: string;

          /**
           * Source of the data.
           */
          source: string;

          /**
           * Unique identifier of the record, auto-generated by the system.
           */
          id?: string;

          /**
           * Solar Array area in square meters.
           */
          area?: number;

          /**
           * Time the row was created in the database, auto-populated by the system.
           */
          createdAt?: string;

          /**
           * Application user who created the row in the database, auto-populated by the
           * system.
           */
          createdBy?: string;

          /**
           * Solar array description/notes.
           */
          description?: string;

          /**
           * Solar array junction technology (e.g. Triple).
           */
          junctionTechnology?: string;

          /**
           * An organization such as a corporation, manufacturer, consortium, government,
           * etc. An organization may have parent and child organizations as well as link to
           * a former organization if this org previously existed as another organization.
           */
          manufacturerOrg?: SolarArrayDetail.ManufacturerOrg;

          /**
           * Unique identifier of the organization that manufactures the solar array.
           */
          manufacturerOrgId?: string;

          /**
           * Originating system or organization which produced the data, if different from
           * the source. The origin may be different than the source if the source was a
           * mediating system which forwarded the data on behalf of the origin system. If
           * null, the source may be assumed to be the origin.
           */
          origin?: string;

          /**
           * The originating source network on which this record was created, auto-populated
           * by the system.
           */
          origNetwork?: string;

          /**
           * Solar Array span in meters.
           */
          span?: number;

          /**
           * Optional array of provider/source specific tags for this data, where each
           * element is no longer than 32 characters, used for implementing data owner
           * conditional access controls to restrict access to the data. Should be left null
           * by data providers unless conditional access controls are coordinated with the
           * UDL team.
           */
          tags?: Array<string>;

          /**
           * Solar array technology (e.g. Ga-As).
           */
          technology?: string;

          /**
           * Type of solar array (e.g. U Shaped).
           */
          type?: string;

          /**
           * Time the row was last updated in the database, auto-populated by the system.
           */
          updatedAt?: string;

          /**
           * Application user who updated the row in the database, auto-populated by the
           * system.
           */
          updatedBy?: string;
        }

        export namespace SolarArrayDetail {
          /**
           * An organization such as a corporation, manufacturer, consortium, government,
           * etc. An organization may have parent and child organizations as well as link to
           * a former organization if this org previously existed as another organization.
           */
          export interface ManufacturerOrg {
            /**
             * Classification marking of the data in IC/CAPCO Portion-marked format.
             */
            classificationMarking: string;

            /**
             * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
             *
             * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
             * may include both real and simulated data.
             *
             * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
             * events, and analysis.
             *
             * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
             * datasets.
             *
             * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
             * requirements, and for validating technical, functional, and performance
             * characteristics.
             */
            dataMode: string;

            /**
             * Organization name.
             */
            name: string;

            /**
             * Source of the data.
             */
            source: string;

            /**
             * Type of organization (e.g. GOVERNMENT, CORPORATION, CONSORTIUM, ACADEMIC).
             */
            type: string;

            /**
             * Unique identifier of the record, auto-generated by the system.
             */
            id?: string;

            /**
             * Boolean indicating if this organization is currently active.
             */
            active?: boolean;

            /**
             * Subtype or category of the organization (e.g. Private company, stock market
             * quoted company, subsidiary, goverment department/agency, etc).
             */
            category?: string;

            /**
             * Country of the physical location of the organization. This value is typically
             * the ISO 3166 Alpha-2 two-character country code. However, it can also represent
             * various consortiums that do not appear in the ISO document. The code must
             * correspond to an existing country in the UDL�s country API. Call
             * udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or
             * alternate code values that exist for the specified country code.
             */
            countryCode?: string;

            /**
             * Time the row was created in the database, auto-populated by the system.
             */
            createdAt?: string;

            /**
             * Application user who created the row in the database, auto-populated by the
             * system.
             */
            createdBy?: string;

            /**
             * Organization description.
             */
            description?: string;

            /**
             * Optional externally provided identifier for this row.
             */
            externalId?: string;

            /**
             * Country of registration or ownership of the organization. This value is
             * typically the ISO 3166 Alpha-2 two-character country code, however it can also
             * represent various consortiums that do not appear in the ISO document. The code
             * must correspond to an existing country in the UDL�s country API. Call
             * udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or
             * alternate code values that exist for the specified country code.
             */
            nationality?: string;

            /**
             * Read-only collection of additional OrganizationDetails by various sources for
             * this organization, ignored on create/update. These details must be created
             * separately via the /udl/organizationdetails operations.
             */
            organizationDetails?: Array<ManufacturerOrg.OrganizationDetail>;

            /**
             * Originating system or organization which produced the data, if different from
             * the source. The origin may be different than the source if the source was a
             * mediating system which forwarded the data on behalf of the origin system. If
             * null, the source may be assumed to be the origin.
             */
            origin?: string;

            /**
             * The originating source network on which this record was created, auto-populated
             * by the system.
             */
            origNetwork?: string;

            /**
             * Time the row was last updated in the database, auto-populated by the system.
             */
            updatedAt?: string;

            /**
             * Application user who updated the row in the database, auto-populated by the
             * system.
             */
            updatedBy?: string;
          }

          export namespace ManufacturerOrg {
            /**
             * Model representation of additional detailed organization data as collected by a
             * particular source.
             */
            export interface OrganizationDetail {
              /**
               * Classification marking of the data in IC/CAPCO Portion-marked format.
               */
              classificationMarking: string;

              /**
               * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
               *
               * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
               * may include both real and simulated data.
               *
               * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
               * events, and analysis.
               *
               * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
               * datasets.
               *
               * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
               * requirements, and for validating technical, functional, and performance
               * characteristics.
               */
              dataMode: string;

              /**
               * Unique identifier of the parent organization.
               */
              idOrganization: string;

              /**
               * Organization details name.
               */
              name: string;

              /**
               * Source of the data.
               */
              source: string;

              /**
               * Unique identifier of the record, auto-generated by the system.
               */
              id?: string;

              /**
               * Street number of the organization.
               */
              address1?: string;

              /**
               * Field for additional organization address information such as PO Box and unit
               * number.
               */
              address2?: string;

              /**
               * Contains the third line of address information for an organization.
               */
              address3?: string;

              /**
               * Designated broker for this organization.
               */
              broker?: string;

              /**
               * For organizations of type CORPORATION, the name of the Chief Executive Officer.
               */
              ceo?: string;

              /**
               * For organizations of type CORPORATION, the name of the Chief Financial Officer.
               */
              cfo?: string;

              /**
               * Time the row was created in the database, auto-populated by the system.
               */
              createdAt?: string;

              /**
               * Application user who created the row in the database, auto-populated by the
               * system.
               */
              createdBy?: string;

              /**
               * For organizations of type CORPORATION, the name of the Chief Technology Officer.
               */
              cto?: string;

              /**
               * Organization description.
               */
              description?: string;

              /**
               * For organizations of type CORPORATION, the company EBITDA value as of
               * financialYearEndDate in US Dollars.
               */
              ebitda?: number;

              /**
               * Listed contact email address for the organization.
               */
              email?: string;

              /**
               * For organizations of type CORPORATION, notes on company financials.
               */
              financialNotes?: string;

              /**
               * For organizations of type CORPORATION, the effective financial year end date for
               * revenue, EBITDA, and profit values.
               */
              financialYearEndDate?: string;

              /**
               * Satellite fleet planning notes for this organization.
               */
              fleetPlanNotes?: string;

              /**
               * Former organization ID (if this organization previously existed as another
               * organization).
               */
              formerOrgId?: string;

              /**
               * Total number of FTEs in this organization.
               */
              ftes?: number;

              /**
               * Administrative boundaries of the first sub-national level. Level 1 is simply the
               * largest demarcation under whatever demarcation criteria has been determined by
               * the governing body. For example, this may be a state or province.
               */
              geoAdminLevel1?: string;

              /**
               * Administrative boundaries of the second sub-national level. Level 2 is simply
               * the second largest demarcation under whatever demarcation criteria has been
               * determined by the governing body. For example, this may be a county or district.
               */
              geoAdminLevel2?: string;

              /**
               * Administrative boundaries of the third sub-national level. Level 3 is simply the
               * third largest demarcation under whatever demarcation criteria has been
               * determined by the governing body. For example, this may be a city or township.
               */
              geoAdminLevel3?: string;

              /**
               * Mass ranking for this organization.
               */
              massRanking?: number;

              /**
               * Originating system or organization which produced the data, if different from
               * the source. The origin may be different than the source if the source was a
               * mediating system which forwarded the data on behalf of the origin system. If
               * null, the source may be assumed to be the origin.
               */
              origin?: string;

              /**
               * The originating source network on which this record was created, auto-populated
               * by the system.
               */
              origNetwork?: string;

              /**
               * Parent organization ID of this organization if it is a child organization.
               */
              parentOrgId?: string;

              /**
               * A postal code, such as PIN or ZIP Code, is a series of letters or digits or both
               * included in the postal address of the organization.
               */
              postalCode?: string;

              /**
               * For organizations of type CORPORATION, total annual profit as of
               * financialYearEndDate in US Dollars.
               */
              profit?: number;

              /**
               * For organizations of type CORPORATION, total annual revenue as of
               * financialYearEndDate in US Dollars.
               */
              revenue?: number;

              /**
               * Revenue ranking for this organization.
               */
              revenueRanking?: number;

              /**
               * The name of the risk manager for the organization.
               */
              riskManager?: string;

              /**
               * Notes on the services provided by the organization.
               */
              servicesNotes?: string;

              /**
               * Optional array of provider/source specific tags for this data, where each
               * element is no longer than 32 characters, used for implementing data owner
               * conditional access controls to restrict access to the data. Should be left null
               * by data providers unless conditional access controls are coordinated with the
               * UDL team.
               */
              tags?: Array<string>;

              /**
               * Time the row was last updated in the database, auto-populated by the system.
               */
              updatedAt?: string;

              /**
               * Application user who updated the row in the database, auto-populated by the
               * system.
               */
              updatedBy?: string;
            }
          }
        }
      }
    }

    /**
     * Read-only collection of thrusters (engines) on this on-orbit object.
     */
    export interface Thruster {
      /**
       * Classification marking of the data in IC/CAPCO Portion-marked format.
       */
      classificationMarking: string;

      /**
       * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
       *
       * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
       * may include both real and simulated data.
       *
       * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
       * events, and analysis.
       *
       * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
       * datasets.
       *
       * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
       * requirements, and for validating technical, functional, and performance
       * characteristics.
       */
      dataMode: string;

      /**
       * ID of the Engine.
       */
      idEngine: string;

      /**
       * ID of the on-orbit object.
       */
      idOnOrbit: string;

      /**
       * Source of the data.
       */
      source: string;

      /**
       * Unique identifier of the record, auto-generated by the system.
       */
      id?: string;

      /**
       * Time the row was created in the database, auto-populated by the system.
       */
      createdAt?: string;

      /**
       * Application user who created the row in the database, auto-populated by the
       * system.
       */
      createdBy?: string;

      /**
       * Known launch vehicle engines and their performance characteristics and limits. A
       * launch vehicle has 1 to many engines per stage.
       */
      engine?: EnginesAPI.Engine;

      /**
       * Originating system or organization which produced the data, if different from
       * the source. The origin may be different than the source if the source was a
       * mediating system which forwarded the data on behalf of the origin system. If
       * null, the source may be assumed to be the origin.
       */
      origin?: string;

      /**
       * The originating source network on which this record was created, auto-populated
       * by the system.
       */
      origNetwork?: string;

      /**
       * The number of engines/thrusters on the spacecraft of the type identified by
       * idEngine.
       */
      quantity?: number;

      /**
       * The type of thruster associated with this record (e.g. LAE, Hydrazine REA,
       * etc.).
       */
      type?: string;

      /**
       * Time the row was last updated in the database, auto-populated by the system.
       */
      updatedAt?: string;

      /**
       * Application user who updated the row in the database, auto-populated by the
       * system.
       */
      updatedBy?: string;
    }
  }
}

/**
 * Supports Sensor Data Records (SDR) from space-borne Energetic Charged Particle
 * (ECP) Sensors. SDR contains sensor status telemetry and raw dosimeter
 * measurements of the space environment.
 */
export interface EcpsdrAbridged {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: string;

  /**
   * Time stamp of time packet receipt on ground, in ISO 8601 UTC format with
   * millisecond precision.
   */
  msgTime: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * The type of data associated with this record (STANDARD, TRANSIENT).
   */
  type: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Internal 5V current monitor for analog supply line. This is sensor status
   * telemetry. See vRef for conversion factor to Volts.
   */
  asl5VCurrMon?: number;

  /**
   * CDS Charge Plate voltage monitor. See vRef for conversion factor to Volts.
   */
  cdsPlateVMon?: number;

  /**
   * CDS reference voltage monitor. See vRef for conversion factor to Volts.
   */
  cdsRefVMon?: number;

  /**
   * CDS Threshold setting for ESD detection threshold. The CDS Threshold is the
   * adjustable sensitivity of recording/digitizing an ESD as a transient packet.
   */
  cdsThreshold?: number;

  /**
   * CDS throttle number of seconds between CDS transient capture readouts.
   */
  cdsThrottle?: number;

  /**
   * Two byte CRC-16-CCITT checksum (ordered as first byte, second byte).
   */
  checksum?: number;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Unitless dosimeter detector bias for MedLET and HiLET. MedLET (Linear Energy
   * Transfer) and HiLET subsensors detect particles above LET thresholds, 300keV and
   * 1MeV, respectively.
   */
  dosBias?: number;

  /**
   * Internal 5V current monitor for digital supply line. This is sensor status
   * telemetry. See vRef for conversion factor to Volts.
   */
  dsl5VCurrMon?: number;

  /**
   * Number of ESD triggers, high byte of 2-byte counter.
   */
  esdTrigCountH?: number;

  /**
   * Number of ESD triggers, low byte of 2-byte counter.
   */
  esdTrigCountL?: number;

  /**
   * HiLET dosimeter low range output. Low byte of scaler (HiLET) dosimeter output.
   */
  hiLetL?: number;

  /**
   * Unitless HiLET dosimeter medium range output. Medium byte of (HiLET) dosimeter
   * output.
   */
  hiLetM?: number;

  /**
   * Unique identifier of the on-orbit satellite hosting the sensor.
   */
  idOnOrbit?: string;

  /**
   * Unique identifier of the reporting sensor.
   */
  idSensor?: string;

  /**
   * LowLET dosimeter low range output. Low byte of (LowLET) dosimeter output.
   */
  lowLetL?: number;

  /**
   * LowLET dosimeter medium range output. Medium byte of (LowLET) dosimeter output.
   */
  lowLetM?: number;

  /**
   * MedLET1 dosimeter low range output. Low byte of the 1st (MedLET) dosimeter
   * output.
   */
  medLet1L?: number;

  /**
   * MedLET1 dosimeter medium range output. Medium byte of the 1st (MedLET) dosimeter
   * output.
   */
  medLet1M?: number;

  /**
   * MedLET2 dosimeter low range output. Low byte of the 2nd (MedLET) dosimeter
   * output.
   */
  medLet2L?: number;

  /**
   * MedLET2 dosimeter medium range output. Medium byte of the 2nd (MedLET) dosimeter
   * output.
   */
  medLet2M?: number;

  /**
   * MedLET3 dosimeter low range output. Low byte of the 3rd (MedLET) dosimeter
   * output.
   */
  medLet3L?: number;

  /**
   * MedLET3 dosimeter medium range output. Medium byte of the 3rd (MedLET) dosimeter
   * output.
   */
  medLet3M?: number;

  /**
   * MedLET4 dosimeter low range output. Low byte of the 4th (MedLET) dosimeter
   * output.
   */
  medLet4L?: number;

  /**
   * MedLET4 dosimeter medium range output. Medium byte of the 4th (MedLET) dosimeter
   * output.
   */
  medLet4M?: number;

  /**
   * Unitless sensor mounting plate temperature.
   */
  mpTemp?: number;

  /**
   * Time of the observation, in ISO 8601 UTC format with millisecond precision.
   */
  obTime?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Optional identifier provided by the record source to indicate the satellite
   * hosting the sensor. This may be an internal identifier and not necessarily map
   * to a valid satellite number.
   */
  origObjectId?: string;

  /**
   * Optional identifier provided by the record source to indicate the sensor
   * identifier which produced this data. This may be an internal identifier and not
   * necessarily a valid sensor ID.
   */
  origSensorId?: string;

  /**
   * Photodiode 1 signal level.
   */
  pd1SigLev?: number;

  /**
   * Photodiode 2 signal level.
   */
  pd2SigLev?: number;

  /**
   * Power supply temperature monitor. This is sensor status telemetry.
   */
  psTempMon?: number;

  /**
   * Flag indicating whether this record is an original or re-transmitted dataset
   * (TRUE indicates a retransmit from the host).
   */
  retransmit?: boolean;

  /**
   * Satellite/catalog number of the on-orbit satellite hosting the sensor.
   */
  satNo?: number;

  /**
   * The sensor mode associated with this measurements (NORMAL, TEST).
   */
  senMode?: string;

  /**
   * Surface dosimeter charge rate high output (converts to pico-amps/bit). High byte
   * of 2 bytes.
   */
  surfDosChargeH?: number;

  /**
   * Surface dosimeter charge rate low output (converts to pico-amps/bit). Low byte
   * of 2 bytes.
   */
  surfDosChargeL?: number;

  /**
   * Surface dosimeter high range output (converts to pico-coulombs/bit). High byte
   * of 3 bytes.
   */
  surfDosH?: number;

  /**
   * Surface dosimeter low range output (converts to pico-coulombs/bit). Low byte of
   * 3 bytes.
   */
  surfDosL?: number;

  /**
   * Surface dosimeter medium range output (converts to pico-coulombs/bit). Middle
   * byte of 3 bytes.
   */
  surfDosM?: number;

  /**
   * Surface dosimeter status byte.
   */
  surfDosStat?: number;

  /**
   * Array of 144 digitized samples of ESD waveform for transient packets.
   */
  transientData?: Array<number>;

  /**
   * Reference voltage (volts/bit). Conversion factor used to convert analog V
   * monitor data from bytes to volts.
   */
  vRef?: number;
}

export type EcpsdrListResponse = Array<EcpsdrAbridged>;

export type EcpsdrCountResponse = string;

export type EcpsdrTupleResponse = Array<Ecpsdr>;

export interface EcpsdrCreateParams {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: string;

  /**
   * Time stamp of time packet receipt on ground, in ISO 8601 UTC format with
   * millisecond precision.
   */
  msgTime: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * The type of data associated with this record (STANDARD, TRANSIENT).
   */
  type: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Internal 5V current monitor for analog supply line. This is sensor status
   * telemetry. See vRef for conversion factor to Volts.
   */
  asl5VCurrMon?: number;

  /**
   * CDS Charge Plate voltage monitor. See vRef for conversion factor to Volts.
   */
  cdsPlateVMon?: number;

  /**
   * CDS reference voltage monitor. See vRef for conversion factor to Volts.
   */
  cdsRefVMon?: number;

  /**
   * CDS Threshold setting for ESD detection threshold. The CDS Threshold is the
   * adjustable sensitivity of recording/digitizing an ESD as a transient packet.
   */
  cdsThreshold?: number;

  /**
   * CDS throttle number of seconds between CDS transient capture readouts.
   */
  cdsThrottle?: number;

  /**
   * Two byte CRC-16-CCITT checksum (ordered as first byte, second byte).
   */
  checksum?: number;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Unitless dosimeter detector bias for MedLET and HiLET. MedLET (Linear Energy
   * Transfer) and HiLET subsensors detect particles above LET thresholds, 300keV and
   * 1MeV, respectively.
   */
  dosBias?: number;

  /**
   * Internal 5V current monitor for digital supply line. This is sensor status
   * telemetry. See vRef for conversion factor to Volts.
   */
  dsl5VCurrMon?: number;

  /**
   * Number of ESD triggers, high byte of 2-byte counter.
   */
  esdTrigCountH?: number;

  /**
   * Number of ESD triggers, low byte of 2-byte counter.
   */
  esdTrigCountL?: number;

  /**
   * HiLET dosimeter low range output. Low byte of scaler (HiLET) dosimeter output.
   */
  hiLetL?: number;

  /**
   * Unitless HiLET dosimeter medium range output. Medium byte of (HiLET) dosimeter
   * output.
   */
  hiLetM?: number;

  /**
   * Unique identifier of the on-orbit satellite hosting the sensor.
   */
  idOnOrbit?: string;

  /**
   * Unique identifier of the reporting sensor.
   */
  idSensor?: string;

  /**
   * LowLET dosimeter low range output. Low byte of (LowLET) dosimeter output.
   */
  lowLetL?: number;

  /**
   * LowLET dosimeter medium range output. Medium byte of (LowLET) dosimeter output.
   */
  lowLetM?: number;

  /**
   * MedLET1 dosimeter low range output. Low byte of the 1st (MedLET) dosimeter
   * output.
   */
  medLet1L?: number;

  /**
   * MedLET1 dosimeter medium range output. Medium byte of the 1st (MedLET) dosimeter
   * output.
   */
  medLet1M?: number;

  /**
   * MedLET2 dosimeter low range output. Low byte of the 2nd (MedLET) dosimeter
   * output.
   */
  medLet2L?: number;

  /**
   * MedLET2 dosimeter medium range output. Medium byte of the 2nd (MedLET) dosimeter
   * output.
   */
  medLet2M?: number;

  /**
   * MedLET3 dosimeter low range output. Low byte of the 3rd (MedLET) dosimeter
   * output.
   */
  medLet3L?: number;

  /**
   * MedLET3 dosimeter medium range output. Medium byte of the 3rd (MedLET) dosimeter
   * output.
   */
  medLet3M?: number;

  /**
   * MedLET4 dosimeter low range output. Low byte of the 4th (MedLET) dosimeter
   * output.
   */
  medLet4L?: number;

  /**
   * MedLET4 dosimeter medium range output. Medium byte of the 4th (MedLET) dosimeter
   * output.
   */
  medLet4M?: number;

  /**
   * Unitless sensor mounting plate temperature.
   */
  mpTemp?: number;

  /**
   * Time of the observation, in ISO 8601 UTC format with millisecond precision.
   */
  obTime?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Optional identifier provided by the record source to indicate the satellite
   * hosting the sensor. This may be an internal identifier and not necessarily map
   * to a valid satellite number.
   */
  origObjectId?: string;

  /**
   * Optional identifier provided by the record source to indicate the sensor
   * identifier which produced this data. This may be an internal identifier and not
   * necessarily a valid sensor ID.
   */
  origSensorId?: string;

  /**
   * Photodiode 1 signal level.
   */
  pd1SigLev?: number;

  /**
   * Photodiode 2 signal level.
   */
  pd2SigLev?: number;

  /**
   * Power supply temperature monitor. This is sensor status telemetry.
   */
  psTempMon?: number;

  /**
   * Flag indicating whether this record is an original or re-transmitted dataset
   * (TRUE indicates a retransmit from the host).
   */
  retransmit?: boolean;

  /**
   * Satellite/catalog number of the on-orbit satellite hosting the sensor.
   */
  satNo?: number;

  /**
   * The sensor mode associated with this measurements (NORMAL, TEST).
   */
  senMode?: string;

  /**
   * Surface dosimeter charge rate high output (converts to pico-amps/bit). High byte
   * of 2 bytes.
   */
  surfDosChargeH?: number;

  /**
   * Surface dosimeter charge rate low output (converts to pico-amps/bit). Low byte
   * of 2 bytes.
   */
  surfDosChargeL?: number;

  /**
   * Surface dosimeter high range output (converts to pico-coulombs/bit). High byte
   * of 3 bytes.
   */
  surfDosH?: number;

  /**
   * Surface dosimeter low range output (converts to pico-coulombs/bit). Low byte of
   * 3 bytes.
   */
  surfDosL?: number;

  /**
   * Surface dosimeter medium range output (converts to pico-coulombs/bit). Middle
   * byte of 3 bytes.
   */
  surfDosM?: number;

  /**
   * Surface dosimeter status byte.
   */
  surfDosStat?: number;

  /**
   * Array of 144 digitized samples of ESD waveform for transient packets.
   */
  transientData?: Array<number>;

  /**
   * Reference voltage (volts/bit). Conversion factor used to convert analog V
   * monitor data from bytes to volts.
   */
  vRef?: number;
}

export interface EcpsdrRetrieveParams {
  /**
   * Path param:
   */
  path_id: string;

  /**
   * Body param: The ID of the ECPSDR to retrieve.
   */
  body_id: string;
}

export interface EcpsdrListParams {
  /**
   * Time stamp of time packet receipt on ground, in ISO 8601 UTC format with
   * millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)
   */
  msgTime: string;
}

export interface EcpsdrCountParams {
  /**
   * Time stamp of time packet receipt on ground, in ISO 8601 UTC format with
   * millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)
   */
  msgTime: string;
}

export type EcpsdrCreateBulkParams = Array<EcpsdrCreateBulkParams.Body>;

export namespace EcpsdrCreateBulkParams {
  /**
   * Supports Sensor Data Records (SDR) from space-borne Energetic Charged Particle
   * (ECP) Sensors. SDR contains sensor status telemetry and raw dosimeter
   * measurements of the space environment.
   */
  export interface Body {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: string;

    /**
     * Time stamp of time packet receipt on ground, in ISO 8601 UTC format with
     * millisecond precision.
     */
    msgTime: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * The type of data associated with this record (STANDARD, TRANSIENT).
     */
    type: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    /**
     * Internal 5V current monitor for analog supply line. This is sensor status
     * telemetry. See vRef for conversion factor to Volts.
     */
    asl5VCurrMon?: number;

    /**
     * CDS Charge Plate voltage monitor. See vRef for conversion factor to Volts.
     */
    cdsPlateVMon?: number;

    /**
     * CDS reference voltage monitor. See vRef for conversion factor to Volts.
     */
    cdsRefVMon?: number;

    /**
     * CDS Threshold setting for ESD detection threshold. The CDS Threshold is the
     * adjustable sensitivity of recording/digitizing an ESD as a transient packet.
     */
    cdsThreshold?: number;

    /**
     * CDS throttle number of seconds between CDS transient capture readouts.
     */
    cdsThrottle?: number;

    /**
     * Two byte CRC-16-CCITT checksum (ordered as first byte, second byte).
     */
    checksum?: number;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Unitless dosimeter detector bias for MedLET and HiLET. MedLET (Linear Energy
     * Transfer) and HiLET subsensors detect particles above LET thresholds, 300keV and
     * 1MeV, respectively.
     */
    dosBias?: number;

    /**
     * Internal 5V current monitor for digital supply line. This is sensor status
     * telemetry. See vRef for conversion factor to Volts.
     */
    dsl5VCurrMon?: number;

    /**
     * Number of ESD triggers, high byte of 2-byte counter.
     */
    esdTrigCountH?: number;

    /**
     * Number of ESD triggers, low byte of 2-byte counter.
     */
    esdTrigCountL?: number;

    /**
     * HiLET dosimeter low range output. Low byte of scaler (HiLET) dosimeter output.
     */
    hiLetL?: number;

    /**
     * Unitless HiLET dosimeter medium range output. Medium byte of (HiLET) dosimeter
     * output.
     */
    hiLetM?: number;

    /**
     * Unique identifier of the on-orbit satellite hosting the sensor.
     */
    idOnOrbit?: string;

    /**
     * Unique identifier of the reporting sensor.
     */
    idSensor?: string;

    /**
     * LowLET dosimeter low range output. Low byte of (LowLET) dosimeter output.
     */
    lowLetL?: number;

    /**
     * LowLET dosimeter medium range output. Medium byte of (LowLET) dosimeter output.
     */
    lowLetM?: number;

    /**
     * MedLET1 dosimeter low range output. Low byte of the 1st (MedLET) dosimeter
     * output.
     */
    medLet1L?: number;

    /**
     * MedLET1 dosimeter medium range output. Medium byte of the 1st (MedLET) dosimeter
     * output.
     */
    medLet1M?: number;

    /**
     * MedLET2 dosimeter low range output. Low byte of the 2nd (MedLET) dosimeter
     * output.
     */
    medLet2L?: number;

    /**
     * MedLET2 dosimeter medium range output. Medium byte of the 2nd (MedLET) dosimeter
     * output.
     */
    medLet2M?: number;

    /**
     * MedLET3 dosimeter low range output. Low byte of the 3rd (MedLET) dosimeter
     * output.
     */
    medLet3L?: number;

    /**
     * MedLET3 dosimeter medium range output. Medium byte of the 3rd (MedLET) dosimeter
     * output.
     */
    medLet3M?: number;

    /**
     * MedLET4 dosimeter low range output. Low byte of the 4th (MedLET) dosimeter
     * output.
     */
    medLet4L?: number;

    /**
     * MedLET4 dosimeter medium range output. Medium byte of the 4th (MedLET) dosimeter
     * output.
     */
    medLet4M?: number;

    /**
     * Unitless sensor mounting plate temperature.
     */
    mpTemp?: number;

    /**
     * Time of the observation, in ISO 8601 UTC format with millisecond precision.
     */
    obTime?: string;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * Optional identifier provided by the record source to indicate the satellite
     * hosting the sensor. This may be an internal identifier and not necessarily map
     * to a valid satellite number.
     */
    origObjectId?: string;

    /**
     * Optional identifier provided by the record source to indicate the sensor
     * identifier which produced this data. This may be an internal identifier and not
     * necessarily a valid sensor ID.
     */
    origSensorId?: string;

    /**
     * Photodiode 1 signal level.
     */
    pd1SigLev?: number;

    /**
     * Photodiode 2 signal level.
     */
    pd2SigLev?: number;

    /**
     * Power supply temperature monitor. This is sensor status telemetry.
     */
    psTempMon?: number;

    /**
     * Flag indicating whether this record is an original or re-transmitted dataset
     * (TRUE indicates a retransmit from the host).
     */
    retransmit?: boolean;

    /**
     * Satellite/catalog number of the on-orbit satellite hosting the sensor.
     */
    satNo?: number;

    /**
     * The sensor mode associated with this measurements (NORMAL, TEST).
     */
    senMode?: string;

    /**
     * Surface dosimeter charge rate high output (converts to pico-amps/bit). High byte
     * of 2 bytes.
     */
    surfDosChargeH?: number;

    /**
     * Surface dosimeter charge rate low output (converts to pico-amps/bit). Low byte
     * of 2 bytes.
     */
    surfDosChargeL?: number;

    /**
     * Surface dosimeter high range output (converts to pico-coulombs/bit). High byte
     * of 3 bytes.
     */
    surfDosH?: number;

    /**
     * Surface dosimeter low range output (converts to pico-coulombs/bit). Low byte of
     * 3 bytes.
     */
    surfDosL?: number;

    /**
     * Surface dosimeter medium range output (converts to pico-coulombs/bit). Middle
     * byte of 3 bytes.
     */
    surfDosM?: number;

    /**
     * Surface dosimeter status byte.
     */
    surfDosStat?: number;

    /**
     * Array of 144 digitized samples of ESD waveform for transient packets.
     */
    transientData?: Array<number>;

    /**
     * Reference voltage (volts/bit). Conversion factor used to convert analog V
     * monitor data from bytes to volts.
     */
    vRef?: number;
  }
}

export interface EcpsdrTupleParams {
  /**
   * Comma-separated list of valid field names for this data type to be returned in
   * the response. Only the fields specified will be returned as well as the
   * classification marking of the data, if applicable. See the �queryhelp� operation
   * for a complete list of possible fields.
   */
  columns: string;

  /**
   * Time stamp of time packet receipt on ground, in ISO 8601 UTC format with
   * millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)
   */
  msgTime: string;
}

export declare namespace EcpsdrResource {
  export {
    type Ecpsdr as Ecpsdr,
    type EcpsdrAbridged as EcpsdrAbridged,
    type EcpsdrListResponse as EcpsdrListResponse,
    type EcpsdrCountResponse as EcpsdrCountResponse,
    type EcpsdrTupleResponse as EcpsdrTupleResponse,
    type EcpsdrCreateParams as EcpsdrCreateParams,
    type EcpsdrRetrieveParams as EcpsdrRetrieveParams,
    type EcpsdrListParams as EcpsdrListParams,
    type EcpsdrCountParams as EcpsdrCountParams,
    type EcpsdrCreateBulkParams as EcpsdrCreateBulkParams,
    type EcpsdrTupleParams as EcpsdrTupleParams,
  };
}
