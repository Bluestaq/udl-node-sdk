// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../core/resource';
import { APIPromise } from '../core/api-promise';
import { OffsetPage, type OffsetPageParams, PagePromise } from '../core/pagination';
import { RequestOptions } from '../internal/request-options';
import { path } from '../internal/utils/path';

export class SensorObservationType extends APIResource {
  list(
    query: SensorObservationTypeListParams | null | undefined = {},
    options?: RequestOptions,
  ): PagePromise<SensorObservationTypeListResponsesOffsetPage, SensorObservationTypeListResponse> {
    return this._client.getAPIList(
      '/udl/sensorobservationtype',
      OffsetPage<SensorObservationTypeListResponse>,
      { query, ...options },
    );
  }

  get(
    id: string,
    query: SensorObservationTypeGetParams | null | undefined = {},
    options?: RequestOptions,
  ): APIPromise<SensorObservationTypeGetResponse> {
    return this._client.get(path`/udl/sensorobservationtype/${id}`, { query, ...options });
  }

  /**
   * Service operation to provide detailed information on available dynamic query
   * parameters for a particular data type.
   */
  queryhelp(options?: RequestOptions): APIPromise<SensorObservationTypeQueryhelpResponse> {
    return this._client.get('/udl/sensorobservationtype/queryhelp', options);
  }
}

export type SensorObservationTypeListResponsesOffsetPage = OffsetPage<SensorObservationTypeListResponse>;

export interface SensorObservationTypeListResponse {
  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * The observation measurement type produced by a sensor.
   */
  type?: string;
}

export interface SensorObservationTypeGetResponse {
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * The observation measurement type produced by a sensor.
   */
  type?: string;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

export interface SensorObservationTypeQueryhelpResponse {
  aodrSupported?: boolean;

  classificationMarking?: string;

  description?: string;

  historySupported?: boolean;

  name?: string;

  parameters?: Array<SensorObservationTypeQueryhelpResponse.Parameter>;

  requiredRoles?: Array<string>;

  restSupported?: boolean;

  sortSupported?: boolean;

  typeName?: string;

  uri?: string;
}

export namespace SensorObservationTypeQueryhelpResponse {
  export interface Parameter {
    classificationMarking?: string;

    derived?: boolean;

    description?: string;

    elemMatch?: boolean;

    format?: string;

    histQuerySupported?: boolean;

    histTupleSupported?: boolean;

    name?: string;

    required?: boolean;

    restQuerySupported?: boolean;

    restTupleSupported?: boolean;

    type?: string;

    unitOfMeasure?: string;

    utcDate?: boolean;
  }
}

export interface SensorObservationTypeListParams extends OffsetPageParams {}

export interface SensorObservationTypeGetParams {
  firstResult?: number;

  maxResults?: number;
}

export declare namespace SensorObservationType {
  export {
    type SensorObservationTypeListResponse as SensorObservationTypeListResponse,
    type SensorObservationTypeGetResponse as SensorObservationTypeGetResponse,
    type SensorObservationTypeQueryhelpResponse as SensorObservationTypeQueryhelpResponse,
    type SensorObservationTypeListResponsesOffsetPage as SensorObservationTypeListResponsesOffsetPage,
    type SensorObservationTypeListParams as SensorObservationTypeListParams,
    type SensorObservationTypeGetParams as SensorObservationTypeGetParams,
  };
}
