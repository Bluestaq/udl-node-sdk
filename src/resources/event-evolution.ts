// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../resource';
import { isRequestOptions } from '../core';
import * as Core from '../core';
import * as EventevolutionsAPI from './eventevolutions/eventevolutions';

export class EventEvolution extends APIResource {
  /**
   * Service operation to take a single EventEvolution object as a POST body and
   * ingest into the database. A specific role is required to perform this service
   * operation. Please contact the UDL team for assistance.
   */
  create(body: EventEvolutionCreateParams, options?: Core.RequestOptions): Core.APIPromise<void> {
    return this._client.post('/udl/eventevolution', {
      body,
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }

  /**
   * Service operation to dynamically query data by a variety of query parameters not
   * specified in this API documentation. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   */
  list(
    params?: EventEvolutionListParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<EventEvolutionListResponse>;
  list(options?: Core.RequestOptions): Core.APIPromise<EventEvolutionListResponse>;
  list(
    params: EventEvolutionListParams | Core.RequestOptions = {},
    options?: Core.RequestOptions,
  ): Core.APIPromise<EventEvolutionListResponse> {
    if (isRequestOptions(params)) {
      return this.list({}, params);
    }
    const { eventId, startTime } = params;
    return this._client.get('/udl/eventevolution', options);
  }

  /**
   * Service operation to return the count of records satisfying the specified query
   * parameters. This operation is useful to determine how many records pass a
   * particular query criteria without retrieving large amounts of data. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
   * valid/required query parameter information.
   */
  count(params?: EventEvolutionCountParams, options?: Core.RequestOptions): Core.APIPromise<string>;
  count(options?: Core.RequestOptions): Core.APIPromise<string>;
  count(
    params: EventEvolutionCountParams | Core.RequestOptions = {},
    options?: Core.RequestOptions,
  ): Core.APIPromise<string> {
    if (isRequestOptions(params)) {
      return this.count({}, params);
    }
    const { eventId, startTime } = params;
    return this._client.get('/udl/eventevolution/count', {
      ...options,
      headers: { Accept: 'text/plain', ...options?.headers },
    });
  }

  /**
   * Service operation intended for initial integration only, to take a list of
   * EventEvolution records as a POST body and ingest into the database. Requires
   * specific roles, please contact the UDL team to gain access. This operation is
   * not intended to be used for automated feeds into UDL...data providers should
   * contact the UDL team for instructions on setting up a permanent feed through an
   * alternate mechanism.
   */
  createBulk(body: EventEvolutionCreateBulkParams, options?: Core.RequestOptions): Core.APIPromise<void> {
    return this._client.post('/udl/eventevolution/createBulk', {
      body,
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }
}

export type EventEvolutionListResponse = Array<EventevolutionsAPI.EventEvolutionAbridged>;

export type EventEvolutionCountResponse = string;

export interface EventEvolutionCreateParams {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: string;

  /**
   * User-provided unique identifier of this activity or event. This ID should remain
   * the same on subsequent updates in order to associate all records pertaining to
   * the activity or event.
   */
  eventId: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * The actual or estimated start time of the activity or event, in ISO 8601 UTC
   * format.
   */
  startTime: string;

  /**
   * Summary or description of the activity or event.
   */
  summary: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON
   * representation of the geometry/geography, of the image as projected on the
   * ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST
   * or PUT request that also specifies a valid 'area' or 'atext' field.
   */
  agjson?: string;

  /**
   * Number of dimensions of the geometry depicted by region.
   */
  andims?: number;

  /**
   * Optional geographical region or polygon (lat/lon pairs) of the area surrounding
   * the point of interest as projected on the ground.
   */
  area?: string;

  /**
   * Geographical spatial_ref_sys for region.
   */
  asrid?: number;

  /**
   * Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known
   * Text representation of the geometry/geography, of the image as projected on the
   * ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored
   * if included with a POST or PUT request that also specifies a valid 'area' field.
   */
  atext?: string;

  /**
   * Type of region as projected on the ground.
   */
  atype?: string;

  /**
   * The activity or event type associated with this record (e.g. BREAKUP, DIRECT
   * FIRE, IED, LAUNCH, PROTEST, etc.). For Significant Activities, recommended but
   * not constrained to, CAMEO.Manual.1.1b3 Chapter 6. Note that the evolution of an
   * event may incorporate records of various types, for example, a LAUNCH event may
   * evolve into a BREAKUP event.
   */
  category?: string;

  /**
   * The country code. This value is typically the ISO 3166 Alpha-2 two-character
   * country code, however it can also represent various consortiums that do not
   * appear in the ISO document. The code must correspond to an existing country in
   * the UDLï¿½s country API. Call udl/country/{code} to get any associated FIPS code,
   * ISO Alpha-3 code, or alternate code values that exist for the specified country
   * code.
   */
  countryCode?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Optional description of the relationship between the records provided in the
   * srcTyps/srcIds and the activity or event.
   */
  dataDescription?: string;

  /**
   * The actual or estimated start time of the activity or event, in ISO 8601 UTC
   * format.
   */
  endTime?: string;

  /**
   * Administrative boundaries of the first sub-national level. Level 1 is simply the
   * largest demarcation under whatever demarcation criteria has been determined by
   * the governing body. For example this may be the state/province in which a
   * terrestrial event takes place, or with which the event is attributed for
   * non-localized or non-terrestrial activity.
   */
  geoAdminLevel1?: string;

  /**
   * Administrative boundaries of the second sub-national level. Level 2 is simply
   * the second largest demarcation under whatever demarcation criteria has been
   * determined by the governing body. For example this may be the city/district in
   * which a terrestrial event takes place, or with which the event is attributed for
   * non-localized or non-terrestrial activity.
   */
  geoAdminLevel2?: string;

  /**
   * Administrative boundaries of the third sub-national level. Level 3 is simply the
   * third largest demarcation under whatever demarcation criteria has been
   * determined by the governing body.
   */
  geoAdminLevel3?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Flag indicating that this record is for the purpose of redacting one or more
   * previously specified records from association with this activity or event. If
   * this flag is set then all records indicated in srcTyps/srcIds should be removed
   * from event association.
   */
  redact?: boolean;

  /**
   * Array of UUIDs of the UDL data records that are related to the determination of
   * this activity or event. See the associated 'srcTyps' array for the specific
   * types of data, positionally corresponding to the UUIDs in this array. The
   * 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps
   * array element for the data type of the UUID and use the appropriate API
   * operation to retrieve that object.
   */
  srcIds?: Array<string>;

  /**
   * Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE,
   * POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that
   * are related to this activity or event. See the associated 'srcIds' array for the
   * record UUIDs, positionally corresponding to the record types in this array. The
   * 'srcTyps' and 'srcIds' arrays must match in size.
   */
  srcTyps?: Array<string>;

  /**
   * The status of this activity or event. (ACTIVE, CONCLUDED, UNKNOWN).
   */
  status?: string;

  /**
   * Optional array of provider/source specific tags for this data, where each
   * element is no longer than 32 characters, used for implementing data owner
   * conditional access controls to restrict access to the data. Should be left null
   * by data providers unless conditional access controls are coordinated with the
   * UDL team.
   */
  tags?: Array<string>;

  /**
   * List of URLs to before/after images of this point of interest entity.
   */
  url?: Array<string>;
}

export interface EventEvolutionListParams {
  /**
   * (One or more of fields 'eventId, startTime' are required.) User-provided unique
   * identifier of this activity or event. This ID should remain the same on
   * subsequent updates in order to associate all records pertaining to the activity
   * or event.
   */
  eventId?: string;

  /**
   * (One or more of fields 'eventId, startTime' are required.) The actual or
   * estimated start time of the activity or event, in ISO 8601 UTC format.
   * (YYYY-MM-DDTHH:MM:SS.sssZ)
   */
  startTime?: string;
}

export interface EventEvolutionCountParams {
  /**
   * (One or more of fields 'eventId, startTime' are required.) User-provided unique
   * identifier of this activity or event. This ID should remain the same on
   * subsequent updates in order to associate all records pertaining to the activity
   * or event.
   */
  eventId?: string;

  /**
   * (One or more of fields 'eventId, startTime' are required.) The actual or
   * estimated start time of the activity or event, in ISO 8601 UTC format.
   * (YYYY-MM-DDTHH:MM:SS.sssZ)
   */
  startTime?: string;
}

export type EventEvolutionCreateBulkParams = Array<EventEvolutionCreateBulkParams.Body>;

export namespace EventEvolutionCreateBulkParams {
  /**
   * Event Evolution is a unique service supporting the association of UDL records of
   * various data types to a common event or activity. The associations may be a one
   * time summary, aggregating sources of a past event, or of an ongoing activity
   * that evolves over a period of time.
   */
  export interface Body {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: string;

    /**
     * User-provided unique identifier of this activity or event. This ID should remain
     * the same on subsequent updates in order to associate all records pertaining to
     * the activity or event.
     */
    eventId: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * The actual or estimated start time of the activity or event, in ISO 8601 UTC
     * format.
     */
    startTime: string;

    /**
     * Summary or description of the activity or event.
     */
    summary: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    /**
     * Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON
     * representation of the geometry/geography, of the image as projected on the
     * ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST
     * or PUT request that also specifies a valid 'area' or 'atext' field.
     */
    agjson?: string;

    /**
     * Number of dimensions of the geometry depicted by region.
     */
    andims?: number;

    /**
     * Optional geographical region or polygon (lat/lon pairs) of the area surrounding
     * the point of interest as projected on the ground.
     */
    area?: string;

    /**
     * Geographical spatial_ref_sys for region.
     */
    asrid?: number;

    /**
     * Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known
     * Text representation of the geometry/geography, of the image as projected on the
     * ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored
     * if included with a POST or PUT request that also specifies a valid 'area' field.
     */
    atext?: string;

    /**
     * Type of region as projected on the ground.
     */
    atype?: string;

    /**
     * The activity or event type associated with this record (e.g. BREAKUP, DIRECT
     * FIRE, IED, LAUNCH, PROTEST, etc.). For Significant Activities, recommended but
     * not constrained to, CAMEO.Manual.1.1b3 Chapter 6. Note that the evolution of an
     * event may incorporate records of various types, for example, a LAUNCH event may
     * evolve into a BREAKUP event.
     */
    category?: string;

    /**
     * The country code. This value is typically the ISO 3166 Alpha-2 two-character
     * country code, however it can also represent various consortiums that do not
     * appear in the ISO document. The code must correspond to an existing country in
     * the UDLï¿½s country API. Call udl/country/{code} to get any associated FIPS code,
     * ISO Alpha-3 code, or alternate code values that exist for the specified country
     * code.
     */
    countryCode?: string;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Optional description of the relationship between the records provided in the
     * srcTyps/srcIds and the activity or event.
     */
    dataDescription?: string;

    /**
     * The actual or estimated start time of the activity or event, in ISO 8601 UTC
     * format.
     */
    endTime?: string;

    /**
     * Administrative boundaries of the first sub-national level. Level 1 is simply the
     * largest demarcation under whatever demarcation criteria has been determined by
     * the governing body. For example this may be the state/province in which a
     * terrestrial event takes place, or with which the event is attributed for
     * non-localized or non-terrestrial activity.
     */
    geoAdminLevel1?: string;

    /**
     * Administrative boundaries of the second sub-national level. Level 2 is simply
     * the second largest demarcation under whatever demarcation criteria has been
     * determined by the governing body. For example this may be the city/district in
     * which a terrestrial event takes place, or with which the event is attributed for
     * non-localized or non-terrestrial activity.
     */
    geoAdminLevel2?: string;

    /**
     * Administrative boundaries of the third sub-national level. Level 3 is simply the
     * third largest demarcation under whatever demarcation criteria has been
     * determined by the governing body.
     */
    geoAdminLevel3?: string;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * Flag indicating that this record is for the purpose of redacting one or more
     * previously specified records from association with this activity or event. If
     * this flag is set then all records indicated in srcTyps/srcIds should be removed
     * from event association.
     */
    redact?: boolean;

    /**
     * Array of UUIDs of the UDL data records that are related to the determination of
     * this activity or event. See the associated 'srcTyps' array for the specific
     * types of data, positionally corresponding to the UUIDs in this array. The
     * 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps
     * array element for the data type of the UUID and use the appropriate API
     * operation to retrieve that object.
     */
    srcIds?: Array<string>;

    /**
     * Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE,
     * POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that
     * are related to this activity or event. See the associated 'srcIds' array for the
     * record UUIDs, positionally corresponding to the record types in this array. The
     * 'srcTyps' and 'srcIds' arrays must match in size.
     */
    srcTyps?: Array<string>;

    /**
     * The status of this activity or event. (ACTIVE, CONCLUDED, UNKNOWN).
     */
    status?: string;

    /**
     * Optional array of provider/source specific tags for this data, where each
     * element is no longer than 32 characters, used for implementing data owner
     * conditional access controls to restrict access to the data. Should be left null
     * by data providers unless conditional access controls are coordinated with the
     * UDL team.
     */
    tags?: Array<string>;

    /**
     * List of URLs to before/after images of this point of interest entity.
     */
    url?: Array<string>;
  }
}

export declare namespace EventEvolution {
  export {
    type EventEvolutionListResponse as EventEvolutionListResponse,
    type EventEvolutionCountResponse as EventEvolutionCountResponse,
    type EventEvolutionCreateParams as EventEvolutionCreateParams,
    type EventEvolutionListParams as EventEvolutionListParams,
    type EventEvolutionCountParams as EventEvolutionCountParams,
    type EventEvolutionCreateBulkParams as EventEvolutionCreateBulkParams,
  };
}
