// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../core/resource';
import * as OrganizationAPI from './organization';
import { APIPromise } from '../core/api-promise';
import { OffsetPage, type OffsetPageParams, PagePromise } from '../core/pagination';
import { buildHeaders } from '../internal/headers';
import { RequestOptions } from '../internal/request-options';
import { path } from '../internal/utils/path';

export class Batterydetails extends APIResource {
  /**
   * Service operation to take a single BatteryDetails as a POST body and ingest into
   * the database. A Battery record may have multiple details records from several
   * sources. A specific role is required to perform this service operation. Please
   * contact the UDL team for assistance.
   *
   * @example
   * ```ts
   * await client.batterydetails.create({
   *   classificationMarking: 'U',
   *   dataMode: 'TEST',
   *   idBattery: 'BATTERY-ID',
   *   source: 'Bluestaq',
   * });
   * ```
   */
  create(body: BatterydetailCreateParams, options?: RequestOptions): APIPromise<void> {
    return this._client.post('/udl/batterydetails', {
      body,
      ...options,
      headers: buildHeaders([{ Accept: '*/*' }, options?.headers]),
    });
  }

  /**
   * Service operation to get a single BatteryDetails record by its unique ID passed
   * as a path parameter. A Battery record may have multiple details records from
   * several sources.
   *
   * @example
   * ```ts
   * const batterydetailsFull =
   *   await client.batterydetails.retrieve('id');
   * ```
   */
  retrieve(
    id: string,
    query: BatterydetailRetrieveParams | null | undefined = {},
    options?: RequestOptions,
  ): APIPromise<BatterydetailsFull> {
    return this._client.get(path`/udl/batterydetails/${id}`, { query, ...options });
  }

  /**
   * Service operation to update a single BatteryDetails. A Battery record may have
   * multiple details records from several sources. A specific role is required to
   * perform this service operation. Please contact the UDL team for assistance.
   *
   * @example
   * ```ts
   * await client.batterydetails.update('id', {
   *   classificationMarking: 'U',
   *   dataMode: 'TEST',
   *   idBattery: 'BATTERY-ID',
   *   source: 'Bluestaq',
   * });
   * ```
   */
  update(pathID: string, body: BatterydetailUpdateParams, options?: RequestOptions): APIPromise<void> {
    return this._client.put(path`/udl/batterydetails/${pathID}`, {
      body,
      ...options,
      headers: buildHeaders([{ Accept: '*/*' }, options?.headers]),
    });
  }

  /**
   * Service operation to dynamically query data by a variety of query parameters not
   * specified in this API documentation. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   *
   * @example
   * ```ts
   * // Automatically fetches more pages as needed.
   * for await (const batterydetailsAbridged of client.batterydetails.list()) {
   *   // ...
   * }
   * ```
   */
  list(
    query: BatterydetailListParams | null | undefined = {},
    options?: RequestOptions,
  ): PagePromise<BatterydetailsAbridgedsOffsetPage, BatterydetailsAbridged> {
    return this._client.getAPIList('/udl/batterydetails', OffsetPage<BatterydetailsAbridged>, {
      query,
      ...options,
    });
  }

  /**
   * Service operation to delete a BatteryDetails object specified by the passed ID
   * path parameter. A Battery record may have multiple details records from several
   * sources. A specific role is required to perform this service operation. Please
   * contact the UDL team for assistance.
   *
   * @example
   * ```ts
   * await client.batterydetails.delete('id');
   * ```
   */
  delete(id: string, options?: RequestOptions): APIPromise<void> {
    return this._client.delete(path`/udl/batterydetails/${id}`, {
      ...options,
      headers: buildHeaders([{ Accept: '*/*' }, options?.headers]),
    });
  }
}

export type BatterydetailsAbridgedsOffsetPage = OffsetPage<BatterydetailsAbridged>;

/**
 * Detailed information on a spacecraft battery type compiled by a particular
 * source. A Battery record may have multiple details records from several sources.
 */
export interface BatterydetailsAbridged {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Identifier of the parent battery type record.
   */
  idBattery: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Battery capacity in Ah.
   */
  capacity?: number;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Battery description/notes.
   */
  description?: string;

  /**
   * Depth of discharge as a percentage/fraction.
   */
  dischargeDepth?: number;

  /**
   * ID of the organization that manufactures the battery.
   */
  manufacturerOrgId?: string;

  /**
   * Battery model number or name.
   */
  model?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Type of battery technology (e.g. Ni-Cd, Ni-H2, Li-ion, etc.).
   */
  technology?: string;
}

/**
 * Detailed information on a spacecraft battery type compiled by a particular
 * source. A Battery record may have multiple details records from several sources.
 */
export interface BatterydetailsFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Identifier of the parent battery type record.
   */
  idBattery: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Battery capacity in Ah.
   */
  capacity?: number;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Battery description/notes.
   */
  description?: string;

  /**
   * Depth of discharge as a percentage/fraction.
   */
  dischargeDepth?: number;

  /**
   * An organization such as a corporation, manufacturer, consortium, government,
   * etc. An organization may have parent and child organizations as well as link to
   * a former organization if this org previously existed as another organization.
   */
  manufacturerOrg?: OrganizationAPI.OrganizationFull;

  /**
   * ID of the organization that manufactures the battery.
   */
  manufacturerOrgId?: string;

  /**
   * Battery model number or name.
   */
  model?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Optional array of provider/source specific tags for this data, where each
   * element is no longer than 32 characters, used for implementing data owner
   * conditional access controls to restrict access to the data. Should be left null
   * by data providers unless conditional access controls are coordinated with the
   * UDL team.
   */
  tags?: Array<string>;

  /**
   * Type of battery technology (e.g. Ni-Cd, Ni-H2, Li-ion, etc.).
   */
  technology?: string;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

export interface BatterydetailCreateParams {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Identifier of the parent battery type record.
   */
  idBattery: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Battery capacity in Ah.
   */
  capacity?: number;

  /**
   * Battery description/notes.
   */
  description?: string;

  /**
   * Depth of discharge as a percentage/fraction.
   */
  dischargeDepth?: number;

  /**
   * ID of the organization that manufactures the battery.
   */
  manufacturerOrgId?: string;

  /**
   * Battery model number or name.
   */
  model?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * Optional array of provider/source specific tags for this data, where each
   * element is no longer than 32 characters, used for implementing data owner
   * conditional access controls to restrict access to the data. Should be left null
   * by data providers unless conditional access controls are coordinated with the
   * UDL team.
   */
  tags?: Array<string>;

  /**
   * Type of battery technology (e.g. Ni-Cd, Ni-H2, Li-ion, etc.).
   */
  technology?: string;
}

export interface BatterydetailRetrieveParams {
  firstResult?: number;

  maxResults?: number;
}

export interface BatterydetailUpdateParams {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Identifier of the parent battery type record.
   */
  idBattery: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  body_id?: string;

  /**
   * Battery capacity in Ah.
   */
  capacity?: number;

  /**
   * Battery description/notes.
   */
  description?: string;

  /**
   * Depth of discharge as a percentage/fraction.
   */
  dischargeDepth?: number;

  /**
   * ID of the organization that manufactures the battery.
   */
  manufacturerOrgId?: string;

  /**
   * Battery model number or name.
   */
  model?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * Optional array of provider/source specific tags for this data, where each
   * element is no longer than 32 characters, used for implementing data owner
   * conditional access controls to restrict access to the data. Should be left null
   * by data providers unless conditional access controls are coordinated with the
   * UDL team.
   */
  tags?: Array<string>;

  /**
   * Type of battery technology (e.g. Ni-Cd, Ni-H2, Li-ion, etc.).
   */
  technology?: string;
}

export interface BatterydetailListParams extends OffsetPageParams {}

export declare namespace Batterydetails {
  export {
    type BatterydetailsAbridged as BatterydetailsAbridged,
    type BatterydetailsFull as BatterydetailsFull,
    type BatterydetailsAbridgedsOffsetPage as BatterydetailsAbridgedsOffsetPage,
    type BatterydetailCreateParams as BatterydetailCreateParams,
    type BatterydetailRetrieveParams as BatterydetailRetrieveParams,
    type BatterydetailUpdateParams as BatterydetailUpdateParams,
    type BatterydetailListParams as BatterydetailListParams,
  };
}
