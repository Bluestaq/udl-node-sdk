// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from 'bluestaq@unified-data-library/core/resource';
import * as Shared from 'bluestaq@unified-data-library/resources/shared';
import { APIPromise } from 'bluestaq@unified-data-library/core/api-promise';
import {
  OffsetPage,
  type OffsetPageParams,
  PagePromise,
} from 'bluestaq@unified-data-library/core/pagination';
import { buildHeaders } from 'bluestaq@unified-data-library/internal/headers';
import { RequestOptions } from 'bluestaq@unified-data-library/internal/request-options';

export class H3GeoHexCell extends APIResource {
  /**
   * Service operation to dynamically query data by a variety of query parameters not
   * specified in this API documentation. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   */
  list(
    query: H3GeoHexCellListParams,
    options?: RequestOptions,
  ): PagePromise<H3GeoHexCellListResponsesOffsetPage, H3GeoHexCellListResponse> {
    return this._client.getAPIList('/udl/h3geohexcell', OffsetPage<H3GeoHexCellListResponse>, {
      query,
      ...options,
    });
  }

  /**
   * Service operation to return the count of records satisfying the specified query
   * parameters. This operation is useful to determine how many records pass a
   * particular query criteria without retrieving large amounts of data. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
   * valid/required query parameter information.
   */
  count(query: H3GeoHexCellCountParams, options?: RequestOptions): APIPromise<string> {
    return this._client.get('/udl/h3geohexcell/count', {
      query,
      ...options,
      headers: buildHeaders([{ Accept: 'text/plain' }, options?.headers]),
    });
  }

  /**
   * Service operation to provide detailed information on available dynamic query
   * parameters for a particular data type.
   */
  queryhelp(options?: RequestOptions): APIPromise<H3GeoHexCellQueryhelpResponse> {
    return this._client.get('/udl/h3geohexcell/queryhelp', options);
  }

  /**
   * Service operation to dynamically query data and only return specified
   * columns/fields. Requested columns are specified by the 'columns' query parameter
   * and should be a comma separated list of valid fields for the specified data
   * type. classificationMarking is always returned. See the queryhelp operation
   * (/udl/<datatype>/queryhelp) for more details on valid/required query parameter
   * information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5
   * hours would return the satNo and period of elsets with an epoch greater than 5
   * hours ago.
   */
  tuple(query: H3GeoHexCellTupleParams, options?: RequestOptions): APIPromise<H3GeoHexCellTupleResponse> {
    return this._client.get('/udl/h3geohexcell/tuple', { query, ...options });
  }
}

export type H3GeoHexCellListResponsesOffsetPage = OffsetPage<H3GeoHexCellListResponse>;

/**
 * Model representation of a hex cell array containing data for a set of
 * observations.
 */
export interface H3GeoHexCellListResponse {
  /**
   * The H3 index represented as a 16 character hexadecimal string.
   */
  cellId: string;

  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * The mean altitude of the set of observations within this cell, measured in
   * kilometers.
   */
  altMean?: number;

  /**
   * The standard deviation of alttitude in the set of observations within this cell,
   * measured in kilometers.
   */
  altSigma?: number;

  /**
   * The anomaly score for probable manufactured interference or RF interference;
   * calculated as a ratio of #anomalous obs / #total obs or coverage.
   */
  anomScoreInterference?: number;

  /**
   * The anomaly score for probable spoofing; calculated as a ratio of #anomalous obs
   * / #total obs or coverage.
   */
  anomScoreSpoofing?: number;

  /**
   * The percentage degree of change in the aggregated observables for a particular
   * H3 bin.
   */
  changeScore?: number;

  /**
   * The total number of available observations in the H3 cell during the start/end
   * times.
   */
  coverage?: number;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Unique identifier of the parent H3 Geo record containing this hex cell.
   */
  idH3Geo?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * The max received power monitor (RPM) output value for the set of data contained
   * within this cell.
   */
  rpmMax?: number;

  /**
   * The mean received power monitor (RPM) output value for the set of data contained
   * within this cell.
   */
  rpmMean?: number;

  /**
   * The median received power monitor (RPM) output value for the set of data
   * contained within this cell.
   */
  rpmMedian?: number;

  /**
   * The min received power monitor (RPM) output value for the set of data contained
   * within this cell.
   */
  rpmMin?: number;

  /**
   * The standard deviation of the received power monitor (RPM) output value for the
   * set of data contained within this cell.
   */
  rpmSigma?: number;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;
}

export type H3GeoHexCellCountResponse = string;

export interface H3GeoHexCellQueryhelpResponse {
  aodrSupported?: boolean;

  classificationMarking?: string;

  description?: string;

  historySupported?: boolean;

  name?: string;

  parameters?: Array<Shared.ParamDescriptor>;

  requiredRoles?: Array<string>;

  restSupported?: boolean;

  sortSupported?: boolean;

  typeName?: string;

  uri?: string;
}

export type H3GeoHexCellTupleResponse = Array<H3GeoHexCellTupleResponse.H3GeoHexCellTupleResponseItem>;

export namespace H3GeoHexCellTupleResponse {
  /**
   * Model representation of a hex cell array containing data for a set of
   * observations.
   */
  export interface H3GeoHexCellTupleResponseItem {
    /**
     * The H3 index represented as a 16 character hexadecimal string.
     */
    cellId: string;

    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    /**
     * The mean altitude of the set of observations within this cell, measured in
     * kilometers.
     */
    altMean?: number;

    /**
     * The standard deviation of alttitude in the set of observations within this cell,
     * measured in kilometers.
     */
    altSigma?: number;

    /**
     * The anomaly score for probable manufactured interference or RF interference;
     * calculated as a ratio of #anomalous obs / #total obs or coverage.
     */
    anomScoreInterference?: number;

    /**
     * The anomaly score for probable spoofing; calculated as a ratio of #anomalous obs
     * / #total obs or coverage.
     */
    anomScoreSpoofing?: number;

    /**
     * The percentage degree of change in the aggregated observables for a particular
     * H3 bin.
     */
    changeScore?: number;

    /**
     * The total number of available observations in the H3 cell during the start/end
     * times.
     */
    coverage?: number;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Unique identifier of the parent H3 Geo record containing this hex cell.
     */
    idH3Geo?: string;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * The max received power monitor (RPM) output value for the set of data contained
     * within this cell.
     */
    rpmMax?: number;

    /**
     * The mean received power monitor (RPM) output value for the set of data contained
     * within this cell.
     */
    rpmMean?: number;

    /**
     * The median received power monitor (RPM) output value for the set of data
     * contained within this cell.
     */
    rpmMedian?: number;

    /**
     * The min received power monitor (RPM) output value for the set of data contained
     * within this cell.
     */
    rpmMin?: number;

    /**
     * The standard deviation of the received power monitor (RPM) output value for the
     * set of data contained within this cell.
     */
    rpmSigma?: number;

    /**
     * The source data library from which this record was received. This could be a
     * remote or tactical UDL or another data library. If null, the record should be
     * assumed to have originated from the primary Enterprise UDL.
     */
    sourceDL?: string;
  }
}

export interface H3GeoHexCellListParams extends OffsetPageParams {
  /**
   * Unique identifier of the parent H3 Geo record containing this hex cell. (uuid)
   */
  idH3Geo: string;
}

export interface H3GeoHexCellCountParams {
  /**
   * Unique identifier of the parent H3 Geo record containing this hex cell. (uuid)
   */
  idH3Geo: string;

  firstResult?: number;

  maxResults?: number;
}

export interface H3GeoHexCellTupleParams {
  /**
   * Comma-separated list of valid field names for this data type to be returned in
   * the response. Only the fields specified will be returned as well as the
   * classification marking of the data, if applicable. See the ‘queryhelp’ operation
   * for a complete list of possible fields.
   */
  columns: string;

  /**
   * Unique identifier of the parent H3 Geo record containing this hex cell. (uuid)
   */
  idH3Geo: string;

  firstResult?: number;

  maxResults?: number;
}

export declare namespace H3GeoHexCell {
  export {
    type H3GeoHexCellListResponse as H3GeoHexCellListResponse,
    type H3GeoHexCellCountResponse as H3GeoHexCellCountResponse,
    type H3GeoHexCellQueryhelpResponse as H3GeoHexCellQueryhelpResponse,
    type H3GeoHexCellTupleResponse as H3GeoHexCellTupleResponse,
    type H3GeoHexCellListResponsesOffsetPage as H3GeoHexCellListResponsesOffsetPage,
    type H3GeoHexCellListParams as H3GeoHexCellListParams,
    type H3GeoHexCellCountParams as H3GeoHexCellCountParams,
    type H3GeoHexCellTupleParams as H3GeoHexCellTupleParams,
  };
}
