// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../core/resource';
import { APIPromise } from '../../core/api-promise';
import { OffsetPage, type OffsetPageParams, PagePromise } from '../../core/pagination';
import { buildHeaders } from '../../internal/headers';
import { RequestOptions } from '../../internal/request-options';

export class History extends APIResource {
  /**
   * Service operation to dynamically query historical data by a variety of query
   * parameters not specified in this API documentation. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   *
   * @example
   * ```ts
   * // Automatically fetches more pages as needed.
   * for await (const onorbitthrusterstatusFull of client.onorbitthrusterstatus.history.list()) {
   *   // ...
   * }
   * ```
   */
  list(
    query: HistoryListParams | null | undefined = {},
    options?: RequestOptions,
  ): PagePromise<OnorbitthrusterstatusFullsOffsetPage, OnorbitthrusterstatusFull> {
    return this._client.getAPIList(
      '/udl/onorbitthrusterstatus/history',
      OffsetPage<OnorbitthrusterstatusFull>,
      { query, ...options },
    );
  }

  /**
   * Service operation to return the count of records satisfying the specified query
   * parameters. This operation is useful to determine how many records pass a
   * particular query criteria without retrieving large amounts of data. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
   * valid/required query parameter information.
   *
   * @example
   * ```ts
   * const response =
   *   await client.onorbitthrusterstatus.history.count();
   * ```
   */
  count(query: HistoryCountParams | null | undefined = {}, options?: RequestOptions): APIPromise<string> {
    return this._client.get('/udl/onorbitthrusterstatus/history/count', {
      query,
      ...options,
      headers: buildHeaders([{ Accept: 'text/plain' }, options?.headers]),
    });
  }
}

export type OnorbitthrusterstatusFullsOffsetPage = OffsetPage<OnorbitthrusterstatusFull>;

/**
 * Status information for OnorbitThruster objects.
 */
export interface OnorbitthrusterstatusFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * ID of the associated OnorbitThruster record. This ID can be used to obtain
   * additional information on an onorbit thruster object using the 'get by ID'
   * operation (e.g. /udl/onorbitthruster/{id}). For example, the OnorbitThruster
   * object with idOnorbitThruster = abc would be queried as
   * /udl/onorbitthruster/abc.
   */
  idOnorbitThruster: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Datetime of the thruster status observation in ISO 8601 UTC datetime format with
   * millisecond precision.
   */
  statusTime: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Estimated available delta-velocity for this thruster, in meters per second.
   */
  estDeltaV?: number;

  /**
   * Total fuel mass available for this thruster's type, in kilograms.
   */
  fuelMass?: number;

  /**
   * 1-sigma uncertainty of the total fuel mass available for this thruster type, in
   * kilograms.
   */
  fuelMassUnc?: number;

  /**
   * Specific impulse for this thruster, in seconds.
   */
  isp?: number;

  /**
   * Maximum available delta-velocity for this thruster, in meters per second.
   */
  maxDeltaV?: number;

  /**
   * Minimum available delta-velocity for this thruster, in meters per second.
   */
  minDeltaV?: number;

  /**
   * Identifier of this thruster.
   */
  name?: string;

  /**
   * Flag indicating if this thruster is operational.
   */
  operational?: boolean;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Average available propellant mass for this thruster's type, in kilograms.
   */
  propMassAvg?: number;

  /**
   * Maximum available propellant mass for this thruster's type, in kilograms.
   */
  propMassMax?: number;

  /**
   * Median available propellant mass for this thruster's type, in kilograms.
   */
  propMassMedian?: number;

  /**
   * Minimum available propellant mass for this thruster's type, in kilograms.
   */
  propMassMin?: number;

  /**
   * Maximum available thrust for this thruster, in newtons.
   */
  thrustMax?: number;

  /**
   * Total delta-velocity available for this thruster's type, in meters per second.
   */
  totalDeltaV?: number;
}

export type HistoryCountResponse = string;

export interface HistoryListParams extends OffsetPageParams {
  /**
   * optional, fields for retrieval. When omitted, ALL fields are assumed. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
   * query fields that can be selected.
   */
  columns?: string;

  /**
   * (One or more of fields 'idOnorbitThruster, statusTime' are required.) ID of the
   * associated OnorbitThruster record. This ID can be used to obtain additional
   * information on an onorbit thruster object using the 'get by ID' operation (e.g.
   * /udl/onorbitthruster/{id}). For example, the OnorbitThruster object with
   * idOnorbitThruster = abc would be queried as /udl/onorbitthruster/abc.
   */
  idOnorbitThruster?: string;

  /**
   * (One or more of fields 'idOnorbitThruster, statusTime' are required.) Datetime
   * of the thruster status observation in ISO 8601 UTC datetime format with
   * millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)
   */
  statusTime?: string;
}

export interface HistoryCountParams {
  firstResult?: number;

  /**
   * (One or more of fields 'idOnorbitThruster, statusTime' are required.) ID of the
   * associated OnorbitThruster record. This ID can be used to obtain additional
   * information on an onorbit thruster object using the 'get by ID' operation (e.g.
   * /udl/onorbitthruster/{id}). For example, the OnorbitThruster object with
   * idOnorbitThruster = abc would be queried as /udl/onorbitthruster/abc.
   */
  idOnorbitThruster?: string;

  maxResults?: number;

  /**
   * (One or more of fields 'idOnorbitThruster, statusTime' are required.) Datetime
   * of the thruster status observation in ISO 8601 UTC datetime format with
   * millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)
   */
  statusTime?: string;
}

export declare namespace History {
  export {
    type OnorbitthrusterstatusFull as OnorbitthrusterstatusFull,
    type HistoryCountResponse as HistoryCountResponse,
    type OnorbitthrusterstatusFullsOffsetPage as OnorbitthrusterstatusFullsOffsetPage,
    type HistoryListParams as HistoryListParams,
    type HistoryCountParams as HistoryCountParams,
  };
}
