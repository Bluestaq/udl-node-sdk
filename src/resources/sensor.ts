// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../resource';
import * as Core from '../core';
import * as EntitiesAPI from './entities';

export class Sensor extends APIResource {
  /**
   * Service operation to take a single sensor as a POST body and ingest into the
   * database. A specific role is required to perform this service operation. Please
   * contact the UDL team for assistance.
   */
  create(body: SensorCreateParams, options?: Core.RequestOptions): Core.APIPromise<void> {
    return this._client.post('/udl/sensor', {
      body,
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }

  /**
   * Service operation to update a single Sensor. A specific role is required to
   * perform this service operation. Please contact the UDL team for assistance.
   */
  update(id: string, body: SensorUpdateParams, options?: Core.RequestOptions): Core.APIPromise<void> {
    return this._client.put(`/udl/sensor/${id}`, {
      body,
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }

  /**
   * Service operation to dynamically query data by a variety of query parameters not
   * specified in this API documentation. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   */
  list(options?: Core.RequestOptions): Core.APIPromise<SensorListResponse> {
    return this._client.get('/udl/sensor', options);
  }

  /**
   * Service operation to delete a Sensor specified by the passed ID path parameter.
   * A specific role is required to perform this service operation. Please contact
   * the UDL team for assistance.
   */
  delete(id: string, options?: Core.RequestOptions): Core.APIPromise<void> {
    return this._client.delete(`/udl/sensor/${id}`, {
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }

  /**
   * Service operation to return the count of records satisfying the specified query
   * parameters. This operation is useful to determine how many records pass a
   * particular query criteria without retrieving large amounts of data. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
   * valid/required query parameter information.
   */
  count(options?: Core.RequestOptions): Core.APIPromise<string> {
    return this._client.get('/udl/sensor/count', {
      ...options,
      headers: { Accept: 'text/plain', ...options?.headers },
    });
  }

  /**
   * Service operation to get a single Sensor by its unique ID passed as a path
   * parameter.
   */
  get(id: string, options?: Core.RequestOptions): Core.APIPromise<SensorGetResponse> {
    return this._client.get(`/udl/sensor/${id}`, options);
  }

  /**
   * Service operation to provide detailed information on available dynamic query
   * parameters for a particular data type.
   */
  queryhelp(options?: Core.RequestOptions): Core.APIPromise<void> {
    return this._client.get('/udl/sensor/queryhelp', {
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }

  /**
   * Service operation to dynamically query data and only return specified
   * columns/fields. Requested columns are specified by the 'columns' query parameter
   * and should be a comma separated list of valid fields for the specified data
   * type. classificationMarking is always returned. See the queryhelp operation
   * (/udl/<datatype>/queryhelp) for more details on valid/required query parameter
   * information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5
   * hours would return the satNo and period of elsets with an epoch greater than 5
   * hours ago.
   */
  tuple(query: SensorTupleParams, options?: Core.RequestOptions): Core.APIPromise<SensorTupleResponse> {
    return this._client.get('/udl/sensor/tuple', { query, ...options });
  }
}

export type SensorListResponse = Array<SensorListResponse.SensorListResponseItem>;

export namespace SensorListResponse {
  /**
   * Model representation of observation data for electro-optical based sensor
   * phenomenologies.
   */
  export interface SensorListResponseItem {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * Unique name of this sensor.
     */
    sensorName: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Optional flag indicating if the sensor is active.
     */
    active?: boolean;

    /**
     * Optional US Air Force identifier for the sensor/ASR site, typically for air
     * surveillance radar (ASR) sensors.
     */
    afId?: string;

    /**
     * The sensor type at the site. Optional field, intended primarily for ASRs.
     */
    asrType?: string;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Optional dissemination control required for accessing data (e.g observations)
     * produced by this sensor. This is typically a proprietary data owner control for
     * commercial sensors.
     */
    dataControl?: string;

    /**
     * An entity is a generic representation of any object within a space/SSA system
     * such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An
     * entity can have an operating unit, a location (if terrestrial), and statuses.
     */
    entity?: EntitiesAPI.EntityAbridged;

    /**
     * Unique identifier of the parent entity. idEntity is required for Put.
     */
    idEntity?: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    idSensor?: string;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * Collection of Sensorcharacteristics which define characteristics and
     * capabilities of a sensor.
     */
    sensorcharacteristics?: Array<SensorListResponseItem.Sensorcharacteristic>;

    /**
     * Sensorlimits define 0 to many limits of a particular sensor in terms of
     * observation coverage of on-orbit objects.
     */
    sensorlimitsCollection?: Array<SensorListResponseItem.SensorlimitsCollection>;

    /**
     * Number assigned to this sensor. Since there is no authoritative numbering
     * scheme, these numbers sometimes collide across sensors (especially commercial
     * sensors). It is therefore not a unique identifier.
     */
    sensorNumber?: number;

    sensorObservationType?: SensorListResponseItem.SensorObservationType;

    /**
     * Collection of SensorStats which contain statistics of a sensor.
     */
    sensorStats?: Array<SensorListResponseItem.SensorStat>;

    sensorType?: SensorListResponseItem.SensorType;

    /**
     * Optional short name for the sensor.
     */
    shortName?: string;
  }

  export namespace SensorListResponseItem {
    /**
     * Model representation of characteristics and capabilities of a sensor.
     */
    export interface Sensorcharacteristic {
      /**
       * Classification marking of the data in IC/CAPCO Portion-marked format.
       */
      classificationMarking: string;

      /**
       * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
       *
       * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
       * may include both real and simulated data.
       *
       * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
       * events, and analysis.
       *
       * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
       * datasets.
       *
       * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
       * requirements, and for validating technical, functional, and performance
       * characteristics.
       */
      dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

      /**
       * Unique identifier of the parent sensor.
       */
      idSensor: string;

      /**
       * Source of the data.
       */
      source: string;

      /**
       * Unique identifier of the record, auto-generated by the system.
       */
      id?: string;

      /**
       * Array of measurement range(s) where radar samples must fall to be acceptable. If
       * this field is populated, the associated beam(s) must be provided in the
       * beamOrder field.
       */
      acceptSampleRanges?: Array<number>;

      /**
       * Optical sensor camera aperture.
       */
      aperture?: number;

      /**
       * For ASR (Air Surveillance Radar) sensors, the scan (360 deg sweep) rate of the
       * radar, in scans/minute.
       */
      asrScanRate?: number;

      /**
       * Array of azimuth angles of a radar beam, in degrees. If this field is populated,
       * the associated beam(s) must be provided in the beamOrder field.
       */
      azAngs?: Array<number>;

      /**
       * Azimuth rate acquisition limit (radians/minute).
       */
      azimuthRate?: number;

      /**
       * Sensor band.
       */
      band?: string;

      /**
       * Array designating the beam order of provided values (e.g. vb1 for vertical beam
       * 1, ob1 for oblique beam 1, etc.). Required if any of the following array fields
       * are populated: azAngs, elAngs, radarPulseWidths, pulseRepPeriods, delayGates,
       * rangeGates, rangeSpacings, vertGateSpacings, vertGateWidths, specAvgSpectraNums,
       * tempMedFiltCodes, runMeanCodes, totRecNums, reqRecords, acceptSampleRanges.
       */
      beamOrder?: Array<string>;

      /**
       * Number of radar beams used by the sensor.
       */
      beamQty?: number;

      /**
       * The angle of the center of a phased array sensor.
       */
      boresight?: number;

      /**
       * The number of degrees off of the boresight for the sensor.
       */
      boresightOffAngle?: number;

      /**
       * Time the row was created in the database, auto-populated by the system.
       */
      createdAt?: string;

      /**
       * Application user who created the row in the database, auto-populated by the
       * system.
       */
      createdBy?: string;

      /**
       * Threshold shear value beyond which one of the radial velocity values will be
       * rejected, measured in units of inverse second.
       */
      critShear?: number;

      /**
       * Array of time delay(s) for pulses from a radar beam to get to the first range
       * gate, in nanoseconds. If this field is populated, the associated beam(s) must be
       * provided in the beamOrder field.
       */
      delayGates?: Array<number>;

      /**
       * Description of the equipment and data source.
       */
      description?: string;

      /**
       * Array of elevation angles of a radar beam, in degrees. If this field is
       * populated, the associated beam(s) must be provided in the beamOrder field.
       */
      elAngs?: Array<number>;

      /**
       * Elevation rate acquisition limit (radians/minute).
       */
      elevationRateGeolm?: number;

      /**
       * Type of equipment used to take measurements.
       */
      equipmentType?: string;

      /**
       * The beam width of a Sensor's Fan (range). The values for this range from (0.0 to
       * PI).
       */
      fanBeamWidth?: number;

      /**
       * Number of Fast Fourier Transform (FFT) points used to convert time varying
       * signals into the frequency domain.
       */
      fft?: number;

      /**
       * Maximum number of times the first guess was propagated in each gate before
       * failing the first guess check.
       */
      fgpCrit?: number;

      /**
       * For radar based sensors, the focal point elevation of the radar at the site, in
       * meters.
       */
      focalPoint?: number;

      /**
       * Horizontal field of view.
       */
      hFOV?: number;

      /**
       * Horizontal pixel resolution.
       */
      hResPixels?: number;

      /**
       * For radar based sensors, K-factor is a relative indicator of refractivity that
       * infers the amount of radar beam bending due to atmosphere. (1<K<2).
       */
      k?: number;

      /**
       * For Orbiting Sensors, First Card Azimuth limit #1 (left, degrees).
       */
      leftClockAngle?: number;

      /**
       * Leftmost GEO belt longitude limit for this sensor (if applicable).
       */
      leftGeoBeltLimit?: number;

      /**
       * Site where measurement is taken.
       */
      location?: string;

      /**
       * Angle between magnetic north and true north at the sensor site, in degrees.
       */
      magDec?: number;

      /**
       * Absolute magnitude acquisition limit for optical sensors.
       */
      magnitudeLimit?: number;

      /**
       * Max deviation angle of the sensor in degrees.
       */
      maxDeviationAngle?: number;

      /**
       * Maximum observable sensor range, in kilometers.
       */
      maxObservableRange?: number;

      /**
       * Maximum observable range limit in kilometers -- sensor cannot acquire beyond
       * this range.
       */
      maxRangeLimit?: number;

      /**
       * Minimum range measurement capability of the sensor, in kilometers.
       */
      minRangeLimit?: number;

      /**
       * Signal to Noise Ratio, in decibels. The values for this range from 0.0 - + 99.99
       * dB.
       */
      minSignalNoiseRatio?: number;

      /**
       * Negative Range-rate/relative velocity limit (kilometers/second).
       */
      negativeRangeRateLimit?: number;

      /**
       * For radar based sensors, number of integrated pulses in a transmit cycle.
       */
      numIntegratedPulses?: number;

      /**
       * The originating source network on which this record was created, auto-populated
       * by the system.
       */
      origNetwork?: string;

      /**
       * Positive Range-rate/relative velocity limit (kilometers/second).
       */
      positiveRangeRateLimit?: number;

      /**
       * For radar based sensors, pulse repetition frequency (PRF), in hertz. Number of
       * new pulses transmitted per second.
       */
      prf?: number;

      /**
       * For radar based sensors, probability of the indication of the presence of a
       * radar target due to noise or interference.
       */
      probFalseAlarm?: number;

      /**
       * Array of interval(s) between the start of one radar pulse and the start of
       * another for a radar beam, in microseconds. If this field is populated, the
       * associated beam(s) must be provided in the beamOrder field.
       */
      pulseRepPeriods?: Array<number>;

      /**
       * Radar frequency of the sensor (if a radar sensor).
       */
      radarFrequency?: number;

      /**
       * Message data format transmitted by the sensor digitizer.
       */
      radarMessageFormat?: string;

      /**
       * For radar based sensors, radar maximum unambiguous range, in kilometers.
       */
      radarMUR?: number;

      /**
       * Array of transmit time(s) for a radar beam pulse, in microseconds. If this field
       * is populated, the associated beam(s) must be provided in the beamOrder field.
       */
      radarPulseWidths?: Array<number>;

      /**
       * Radio frequency (if sensor is RF).
       */
      radioFrequency?: number;

      /**
       * Array of the number(s) of discrete altitudes where return signals are sampled by
       * a radar beam. If this field is populated, the associated beam(s) must be
       * provided in the beamOrder field.
       */
      rangeGates?: Array<number>;

      /**
       * Array of range gate spacing(s) for a radar beam, in nanoseconds. If this field
       * is populated, the associated beam(s) must be provided in the beamOrder field.
       */
      rangeSpacings?: Array<number>;

      /**
       * Array of the total number(s) of records required to meet consensus for a radar
       * beam. If this field is populated, the associated beam(s) must be provided in the
       * beamOrder field.
       */
      reqRecords?: Array<number>;

      /**
       * For Orbiting Sensors, First Card Azimuth limit #3 (right, degrees).
       */
      rightClockAngle?: number;

      /**
       * Rightmost GEO belt longitude limit for this sensor (if applicable).
       */
      rightGeoBeltLimit?: number;

      /**
       * Array of running mean code(s) used by radar data processing. The running mean
       * method involves taking a series of averages of different selections of the full
       * data set to smooth out short-term fluctuations in the data. If this field is
       * populated, the associated beam(s) must be provided in the beamOrder field.
       */
      runMeanCodes?: Array<number>;

      /**
       * Site code of the sensor.
       */
      siteCode?: string;

      /**
       * Array of the number(s) of Doppler spectra used to process measurements from
       * radar. Spectral averaging involves combining multiple Doppler spectra acquired
       * to obtain a more accurate and representative spectrum. If this field is
       * populated, the associated beam(s) must be provided in the beamOrder field.
       */
      specAvgSpectraNums?: Array<number>;

      /**
       * For radar based sensors, expression of the radar system noise, aggregated as an
       * equivalent thermal noise value, in degrees Kelvin.
       */
      systemNoiseTemperature?: number;

      /**
       * Maximum taskable range of the sensor, in kilometers.
       */
      taskableRange?: number;

      /**
       * Array of temporal median filter code(s) of a radar beam. Temporal median
       * filtering is a noise-reducing algorithm which involves replacing each data point
       * with the median value of a window of neighboring points over time. If this field
       * is populated, the associated beam(s) must be provided in the beamOrder field.
       */
      tempMedFiltCodes?: Array<number>;

      /**
       * Test number for the observed measurement.
       */
      testNumber?: string;

      /**
       * Array of the total number(s) of records for a radar beam. If this field is
       * populated, the associated beam(s) must be provided in the beamOrder field.
       */
      totRecNums?: Array<number>;

      /**
       * For tower sensors, the physical height of the sensor tower, in meters.
       */
      towerHeight?: number;

      /**
       * Beginning track angle limit, in radians. Track angle is the angle between the
       * camera axis and the gimbal plane. Values range from 0 - PI/2.
       */
      trackAngle?: number;

      /**
       * Radar transmit power in Watts.
       */
      transmitPower?: number;

      /**
       * True North correction for the sensor, in ACP (Azimunth Change Pulse) count.
       */
      trueNorthCorrector?: number;

      /**
       * Antenna true tilt, in degrees.
       */
      trueTilt?: number;

      /**
       * Flag indicating if a vertical radar beam was used in the wind calculation.
       */
      vertBeamFlag?: boolean;

      /**
       * Array of vertical distance(s) between points where radar measurements are taken,
       * in meters. If this field is populated, the associated beam(s) must be provided
       * in the beamOrder field.
       */
      vertGateSpacings?: Array<number>;

      /**
       * Array of width(s) of each location where radar measurements are taken, in
       * meters. If this field is populated, the associated beam(s) must be provided in
       * the beamOrder field.
       */
      vertGateWidths?: Array<number>;

      /**
       * Vertical field of view.
       */
      vFOV?: number;

      /**
       * Vertical pixel resolution.
       */
      vResPixels?: number;

      /**
       * Peformance zone-1 maximum range, in kilometers. Note that the zones apply only
       * to the PSR/Search radars.
       */
      z1MaxRange?: number;

      /**
       * Peformance zone-1 minimum range, in kilometers. Note that the zones apply only
       * to the PSR/Search radars.
       */
      z1MinRange?: number;

      /**
       * Peformance zone-2 maximum range, in kilometers. Note that the zones apply only
       * to the PSR/Search radars.
       */
      z2MaxRange?: number;

      /**
       * Peformance zone-2 minimum range, in kilometers. Note that the zones apply only
       * to the PSR/Search radars.
       */
      z2MinRange?: number;
    }

    /**
     * Sensorlimits define 0 to many limits of a particular sensor in terms of
     * observation coverage of on-orbit objects.
     */
    export interface SensorlimitsCollection {
      /**
       * Classification marking of the data in IC/CAPCO Portion-marked format.
       */
      classificationMarking: string;

      /**
       * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
       *
       * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
       * may include both real and simulated data.
       *
       * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
       * events, and analysis.
       *
       * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
       * datasets.
       *
       * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
       * requirements, and for validating technical, functional, and performance
       * characteristics.
       */
      dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

      /**
       * Source of the data.
       */
      source: string;

      /**
       * Time the row was created in the database, auto-populated by the system.
       */
      createdAt?: string;

      /**
       * Application user who created the row in the database, auto-populated by the
       * system.
       */
      createdBy?: string;

      /**
       * Unique identifier of the target sensor object.
       */
      idSensor?: string;

      /**
       * Unique identifier of the record, auto-generated by the system.
       */
      idSensorLimits?: string;

      /**
       * Leftmost or minimum lower azimuth within this limit. Interpreted according to
       * site types as lower left azimuth limit elevation angle of axis of conical
       * observation pattern. If the limit rectangle is parallel to the horizon, the
       * upper and lower left azimuth limits would be equal. (degrees).
       */
      lowerLeftAzimuthLimit?: number;

      /**
       * Minimum or lower elevation within this limit. Interpreted according to site
       * types as minimum elevation angle, constant elevation or fan beam centerline.
       * (Degrees).
       */
      lowerLeftElevationLimit?: number;

      /**
       * Rightmost or maximum lower azimuth within this limit. Interpreted according to
       * site types as 2nd lower azimuth limit elevation angle of axis of conical
       * observation pattern. If the limit rectangle is parallel to the horizon, the
       * upper and lower right azimuth limits would be equal. (degrees).
       */
      lowerRightAzimuthLimit?: number;

      /**
       * Minimum or lower right elevation within this limit. Interpreted according to
       * site types as minimum right elevation angle, constant elevation or fan beam
       * centerline. If the limit rectangle is parallel to the horizon, the left and
       * right lower elevation limits would be equal. (Degrees).
       */
      lowerRightElevationLimit?: number;

      /**
       * The originating source network on which this record was created, auto-populated
       * by the system.
       */
      origNetwork?: string;

      /**
       * Leftmost or minimum upper azimuth within this sensor limit. Interpreted
       * according to site types as beginning upper azimuth limit, left-hand upper
       * boundary limit. If the limit rectangle is parallel to the horizon, the upper and
       * lower left azimuth limits would be equal. (in degrees).
       */
      upperLeftAzimuthLimit?: number;

      /**
       * Maximum or upper elevation within this limit. Interpreted according to site
       * types as maximum elevation angle, half the apex of conical observation pattern
       * or star. (Degrees).
       */
      upperLeftElevationLimit?: number;

      /**
       * Rightmost or maximum upper azimuth within this limit. Interpreted according to
       * site types as 2nd azimuth limit elevation angle of axis of conical observation
       * pattern. If the limit rectangle is parallel to the horizon, the upper and lower
       * right azimuth limits would be equal. (degrees).
       */
      upperRightAzimuthLimit?: number;

      /**
       * Maximum or upper right elevation within this limit. Interpreted according to
       * site types as maximum rightmost elevation angle, half the apex of conical
       * observation pattern or star. If the limit rectangle is parallel to the horizon,
       * the left and right upper elevation limits would be equal. (Degrees).
       */
      upperRightElevationLimit?: number;
    }

    export interface SensorObservationType {
      /**
       * Unique identifier of the record, auto-generated by the system.
       */
      id?: string;

      /**
       * Time the row was created in the database, auto-populated by the system.
       */
      createdAt?: string;

      /**
       * Application user who created the row in the database, auto-populated by the
       * system.
       */
      createdBy?: string;

      /**
       * The originating source network on which this record was created, auto-populated
       * by the system.
       */
      origNetwork?: string;

      /**
       * The observation measurement type produced by a sensor.
       */
      type?: string;
    }

    /**
     * SensorStats contain statistics on sensors related to observation production such
     * as last reported observation time.
     */
    export interface SensorStat {
      /**
       * Classification marking of the data in IC/CAPCO Portion-marked format.
       */
      classificationMarking: string;

      /**
       * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
       *
       * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
       * may include both real and simulated data.
       *
       * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
       * events, and analysis.
       *
       * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
       * datasets.
       *
       * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
       * requirements, and for validating technical, functional, and performance
       * characteristics.
       */
      dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

      /**
       * Unique ID of the parent sensor.
       */
      idSensor: string;

      /**
       * Source of the data.
       */
      source: string;

      /**
       * Unique identifier of the record, auto-generated by the system.
       */
      id?: string;

      /**
       * Time the row was created in the database, auto-populated by the system.
       */
      createdAt?: string;

      /**
       * Application user who created the row in the database, auto-populated by the
       * system.
       */
      createdBy?: string;

      /**
       * Time of last reported observation in ISO 8601 UTC with microsecond precision.
       */
      lastObTime?: string;

      /**
       * Read-only time the row was updated in the database, set automatically by the
       * system on update.
       */
      updatedAt?: string;

      /**
       * Application user who last updated the row in the database, set by the system
       * automatically and ignored on create/edit operations.
       */
      updatedBy?: string;
    }

    export interface SensorType {
      /**
       * Unique identifier of the record, auto-generated by the system.
       */
      id?: number;

      /**
       * Time the row was created in the database, auto-populated by the system.
       */
      createdAt?: string;

      /**
       * Application user who created the row in the database, auto-populated by the
       * system.
       */
      createdBy?: string;

      /**
       * The originating source network on which this record was created, auto-populated
       * by the system.
       */
      origNetwork?: string;

      /**
       * The specific sensor type and/or surveillance capability of this sensor.
       */
      type?: string;
    }
  }
}

export type SensorCountResponse = string;

/**
 * Model representation of observation data for electro-optical based sensor
 * phenomenologies.
 */
export interface SensorGetResponse {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Unique name of this sensor.
   */
  sensorName: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Optional flag indicating if the sensor is active.
   */
  active?: boolean;

  /**
   * Optional US Air Force identifier for the sensor/ASR site, typically for air
   * surveillance radar (ASR) sensors.
   */
  afId?: string;

  /**
   * The sensor type at the site. Optional field, intended primarily for ASRs.
   */
  asrType?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Optional dissemination control required for accessing data (e.g observations)
   * produced by this sensor. This is typically a proprietary data owner control for
   * commercial sensors.
   */
  dataControl?: string;

  /**
   * An entity is a generic representation of any object within a space/SSA system
   * such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An
   * entity can have an operating unit, a location (if terrestrial), and statuses.
   */
  entity?: EntitiesAPI.EntityFull;

  /**
   * Unique identifier of the parent entity. idEntity is required for Put.
   */
  idEntity?: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  idSensor?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Collection of Sensorcharacteristics which define characteristics and
   * capabilities of a sensor.
   */
  sensorcharacteristics?: Array<SensorGetResponse.Sensorcharacteristic>;

  /**
   * Sensorlimits define 0 to many limits of a particular sensor in terms of
   * observation coverage of on-orbit objects.
   */
  sensorlimitsCollection?: Array<SensorGetResponse.SensorlimitsCollection>;

  /**
   * Number assigned to this sensor. Since there is no authoritative numbering
   * scheme, these numbers sometimes collide across sensors (especially commercial
   * sensors). It is therefore not a unique identifier.
   */
  sensorNumber?: number;

  sensorObservationType?: SensorGetResponse.SensorObservationType;

  /**
   * Collection of SensorStats which contain statistics of a sensor.
   */
  sensorStats?: Array<SensorGetResponse.SensorStat>;

  sensorType?: SensorGetResponse.SensorType;

  /**
   * Optional short name for the sensor.
   */
  shortName?: string;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

export namespace SensorGetResponse {
  /**
   * Model representation of characteristics and capabilities of a sensor.
   */
  export interface Sensorcharacteristic {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * Unique identifier of the parent sensor.
     */
    idSensor: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    /**
     * Array of measurement range(s) where radar samples must fall to be acceptable. If
     * this field is populated, the associated beam(s) must be provided in the
     * beamOrder field.
     */
    acceptSampleRanges?: Array<number>;

    /**
     * Optical sensor camera aperture.
     */
    aperture?: number;

    /**
     * For ASR (Air Surveillance Radar) sensors, the scan (360 deg sweep) rate of the
     * radar, in scans/minute.
     */
    asrScanRate?: number;

    /**
     * Array of azimuth angles of a radar beam, in degrees. If this field is populated,
     * the associated beam(s) must be provided in the beamOrder field.
     */
    azAngs?: Array<number>;

    /**
     * Azimuth rate acquisition limit (radians/minute).
     */
    azimuthRate?: number;

    /**
     * Sensor band.
     */
    band?: string;

    /**
     * Array designating the beam order of provided values (e.g. vb1 for vertical beam
     * 1, ob1 for oblique beam 1, etc.). Required if any of the following array fields
     * are populated: azAngs, elAngs, radarPulseWidths, pulseRepPeriods, delayGates,
     * rangeGates, rangeSpacings, vertGateSpacings, vertGateWidths, specAvgSpectraNums,
     * tempMedFiltCodes, runMeanCodes, totRecNums, reqRecords, acceptSampleRanges.
     */
    beamOrder?: Array<string>;

    /**
     * Number of radar beams used by the sensor.
     */
    beamQty?: number;

    /**
     * The angle of the center of a phased array sensor.
     */
    boresight?: number;

    /**
     * The number of degrees off of the boresight for the sensor.
     */
    boresightOffAngle?: number;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Threshold shear value beyond which one of the radial velocity values will be
     * rejected, measured in units of inverse second.
     */
    critShear?: number;

    /**
     * Array of time delay(s) for pulses from a radar beam to get to the first range
     * gate, in nanoseconds. If this field is populated, the associated beam(s) must be
     * provided in the beamOrder field.
     */
    delayGates?: Array<number>;

    /**
     * Description of the equipment and data source.
     */
    description?: string;

    /**
     * Array of elevation angles of a radar beam, in degrees. If this field is
     * populated, the associated beam(s) must be provided in the beamOrder field.
     */
    elAngs?: Array<number>;

    /**
     * Elevation rate acquisition limit (radians/minute).
     */
    elevationRateGeolm?: number;

    /**
     * Type of equipment used to take measurements.
     */
    equipmentType?: string;

    /**
     * The beam width of a Sensor's Fan (range). The values for this range from (0.0 to
     * PI).
     */
    fanBeamWidth?: number;

    /**
     * Number of Fast Fourier Transform (FFT) points used to convert time varying
     * signals into the frequency domain.
     */
    fft?: number;

    /**
     * Maximum number of times the first guess was propagated in each gate before
     * failing the first guess check.
     */
    fgpCrit?: number;

    /**
     * For radar based sensors, the focal point elevation of the radar at the site, in
     * meters.
     */
    focalPoint?: number;

    /**
     * Horizontal field of view.
     */
    hFOV?: number;

    /**
     * Horizontal pixel resolution.
     */
    hResPixels?: number;

    /**
     * For radar based sensors, K-factor is a relative indicator of refractivity that
     * infers the amount of radar beam bending due to atmosphere. (1<K<2).
     */
    k?: number;

    /**
     * For Orbiting Sensors, First Card Azimuth limit #1 (left, degrees).
     */
    leftClockAngle?: number;

    /**
     * Leftmost GEO belt longitude limit for this sensor (if applicable).
     */
    leftGeoBeltLimit?: number;

    /**
     * Site where measurement is taken.
     */
    location?: string;

    /**
     * Angle between magnetic north and true north at the sensor site, in degrees.
     */
    magDec?: number;

    /**
     * Absolute magnitude acquisition limit for optical sensors.
     */
    magnitudeLimit?: number;

    /**
     * Max deviation angle of the sensor in degrees.
     */
    maxDeviationAngle?: number;

    /**
     * Maximum observable sensor range, in kilometers.
     */
    maxObservableRange?: number;

    /**
     * Maximum observable range limit in kilometers -- sensor cannot acquire beyond
     * this range.
     */
    maxRangeLimit?: number;

    /**
     * Minimum range measurement capability of the sensor, in kilometers.
     */
    minRangeLimit?: number;

    /**
     * Signal to Noise Ratio, in decibels. The values for this range from 0.0 - + 99.99
     * dB.
     */
    minSignalNoiseRatio?: number;

    /**
     * Negative Range-rate/relative velocity limit (kilometers/second).
     */
    negativeRangeRateLimit?: number;

    /**
     * For radar based sensors, number of integrated pulses in a transmit cycle.
     */
    numIntegratedPulses?: number;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * Positive Range-rate/relative velocity limit (kilometers/second).
     */
    positiveRangeRateLimit?: number;

    /**
     * For radar based sensors, pulse repetition frequency (PRF), in hertz. Number of
     * new pulses transmitted per second.
     */
    prf?: number;

    /**
     * For radar based sensors, probability of the indication of the presence of a
     * radar target due to noise or interference.
     */
    probFalseAlarm?: number;

    /**
     * Array of interval(s) between the start of one radar pulse and the start of
     * another for a radar beam, in microseconds. If this field is populated, the
     * associated beam(s) must be provided in the beamOrder field.
     */
    pulseRepPeriods?: Array<number>;

    /**
     * Radar frequency of the sensor (if a radar sensor).
     */
    radarFrequency?: number;

    /**
     * Message data format transmitted by the sensor digitizer.
     */
    radarMessageFormat?: string;

    /**
     * For radar based sensors, radar maximum unambiguous range, in kilometers.
     */
    radarMUR?: number;

    /**
     * Array of transmit time(s) for a radar beam pulse, in microseconds. If this field
     * is populated, the associated beam(s) must be provided in the beamOrder field.
     */
    radarPulseWidths?: Array<number>;

    /**
     * Radio frequency (if sensor is RF).
     */
    radioFrequency?: number;

    /**
     * Array of the number(s) of discrete altitudes where return signals are sampled by
     * a radar beam. If this field is populated, the associated beam(s) must be
     * provided in the beamOrder field.
     */
    rangeGates?: Array<number>;

    /**
     * Array of range gate spacing(s) for a radar beam, in nanoseconds. If this field
     * is populated, the associated beam(s) must be provided in the beamOrder field.
     */
    rangeSpacings?: Array<number>;

    /**
     * Array of the total number(s) of records required to meet consensus for a radar
     * beam. If this field is populated, the associated beam(s) must be provided in the
     * beamOrder field.
     */
    reqRecords?: Array<number>;

    /**
     * For Orbiting Sensors, First Card Azimuth limit #3 (right, degrees).
     */
    rightClockAngle?: number;

    /**
     * Rightmost GEO belt longitude limit for this sensor (if applicable).
     */
    rightGeoBeltLimit?: number;

    /**
     * Array of running mean code(s) used by radar data processing. The running mean
     * method involves taking a series of averages of different selections of the full
     * data set to smooth out short-term fluctuations in the data. If this field is
     * populated, the associated beam(s) must be provided in the beamOrder field.
     */
    runMeanCodes?: Array<number>;

    /**
     * Site code of the sensor.
     */
    siteCode?: string;

    /**
     * Array of the number(s) of Doppler spectra used to process measurements from
     * radar. Spectral averaging involves combining multiple Doppler spectra acquired
     * to obtain a more accurate and representative spectrum. If this field is
     * populated, the associated beam(s) must be provided in the beamOrder field.
     */
    specAvgSpectraNums?: Array<number>;

    /**
     * For radar based sensors, expression of the radar system noise, aggregated as an
     * equivalent thermal noise value, in degrees Kelvin.
     */
    systemNoiseTemperature?: number;

    /**
     * Maximum taskable range of the sensor, in kilometers.
     */
    taskableRange?: number;

    /**
     * Array of temporal median filter code(s) of a radar beam. Temporal median
     * filtering is a noise-reducing algorithm which involves replacing each data point
     * with the median value of a window of neighboring points over time. If this field
     * is populated, the associated beam(s) must be provided in the beamOrder field.
     */
    tempMedFiltCodes?: Array<number>;

    /**
     * Test number for the observed measurement.
     */
    testNumber?: string;

    /**
     * Array of the total number(s) of records for a radar beam. If this field is
     * populated, the associated beam(s) must be provided in the beamOrder field.
     */
    totRecNums?: Array<number>;

    /**
     * For tower sensors, the physical height of the sensor tower, in meters.
     */
    towerHeight?: number;

    /**
     * Beginning track angle limit, in radians. Track angle is the angle between the
     * camera axis and the gimbal plane. Values range from 0 - PI/2.
     */
    trackAngle?: number;

    /**
     * Radar transmit power in Watts.
     */
    transmitPower?: number;

    /**
     * True North correction for the sensor, in ACP (Azimunth Change Pulse) count.
     */
    trueNorthCorrector?: number;

    /**
     * Antenna true tilt, in degrees.
     */
    trueTilt?: number;

    /**
     * Time the row was last updated in the database, auto-populated by the system.
     */
    updatedAt?: string;

    /**
     * Application user who updated the row in the database, auto-populated by the
     * system.
     */
    updatedBy?: string;

    /**
     * Flag indicating if a vertical radar beam was used in the wind calculation.
     */
    vertBeamFlag?: boolean;

    /**
     * Array of vertical distance(s) between points where radar measurements are taken,
     * in meters. If this field is populated, the associated beam(s) must be provided
     * in the beamOrder field.
     */
    vertGateSpacings?: Array<number>;

    /**
     * Array of width(s) of each location where radar measurements are taken, in
     * meters. If this field is populated, the associated beam(s) must be provided in
     * the beamOrder field.
     */
    vertGateWidths?: Array<number>;

    /**
     * Vertical field of view.
     */
    vFOV?: number;

    /**
     * Vertical pixel resolution.
     */
    vResPixels?: number;

    /**
     * Peformance zone-1 maximum range, in kilometers. Note that the zones apply only
     * to the PSR/Search radars.
     */
    z1MaxRange?: number;

    /**
     * Peformance zone-1 minimum range, in kilometers. Note that the zones apply only
     * to the PSR/Search radars.
     */
    z1MinRange?: number;

    /**
     * Peformance zone-2 maximum range, in kilometers. Note that the zones apply only
     * to the PSR/Search radars.
     */
    z2MaxRange?: number;

    /**
     * Peformance zone-2 minimum range, in kilometers. Note that the zones apply only
     * to the PSR/Search radars.
     */
    z2MinRange?: number;
  }

  /**
   * Sensorlimits define 0 to many limits of a particular sensor in terms of
   * observation coverage of on-orbit objects.
   */
  export interface SensorlimitsCollection {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Unique identifier of the target sensor object.
     */
    idSensor?: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    idSensorLimits?: string;

    /**
     * Leftmost or minimum lower azimuth within this limit. Interpreted according to
     * site types as lower left azimuth limit elevation angle of axis of conical
     * observation pattern. If the limit rectangle is parallel to the horizon, the
     * upper and lower left azimuth limits would be equal. (degrees).
     */
    lowerLeftAzimuthLimit?: number;

    /**
     * Minimum or lower elevation within this limit. Interpreted according to site
     * types as minimum elevation angle, constant elevation or fan beam centerline.
     * (Degrees).
     */
    lowerLeftElevationLimit?: number;

    /**
     * Rightmost or maximum lower azimuth within this limit. Interpreted according to
     * site types as 2nd lower azimuth limit elevation angle of axis of conical
     * observation pattern. If the limit rectangle is parallel to the horizon, the
     * upper and lower right azimuth limits would be equal. (degrees).
     */
    lowerRightAzimuthLimit?: number;

    /**
     * Minimum or lower right elevation within this limit. Interpreted according to
     * site types as minimum right elevation angle, constant elevation or fan beam
     * centerline. If the limit rectangle is parallel to the horizon, the left and
     * right lower elevation limits would be equal. (Degrees).
     */
    lowerRightElevationLimit?: number;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * Time the row was last updated in the database, auto-populated by the system.
     */
    updatedAt?: string;

    /**
     * Application user who updated the row in the database, auto-populated by the
     * system.
     */
    updatedBy?: string;

    /**
     * Leftmost or minimum upper azimuth within this sensor limit. Interpreted
     * according to site types as beginning upper azimuth limit, left-hand upper
     * boundary limit. If the limit rectangle is parallel to the horizon, the upper and
     * lower left azimuth limits would be equal. (in degrees).
     */
    upperLeftAzimuthLimit?: number;

    /**
     * Maximum or upper elevation within this limit. Interpreted according to site
     * types as maximum elevation angle, half the apex of conical observation pattern
     * or star. (Degrees).
     */
    upperLeftElevationLimit?: number;

    /**
     * Rightmost or maximum upper azimuth within this limit. Interpreted according to
     * site types as 2nd azimuth limit elevation angle of axis of conical observation
     * pattern. If the limit rectangle is parallel to the horizon, the upper and lower
     * right azimuth limits would be equal. (degrees).
     */
    upperRightAzimuthLimit?: number;

    /**
     * Maximum or upper right elevation within this limit. Interpreted according to
     * site types as maximum rightmost elevation angle, half the apex of conical
     * observation pattern or star. If the limit rectangle is parallel to the horizon,
     * the left and right upper elevation limits would be equal. (Degrees).
     */
    upperRightElevationLimit?: number;
  }

  export interface SensorObservationType {
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * The observation measurement type produced by a sensor.
     */
    type?: string;

    /**
     * Time the row was last updated in the database, auto-populated by the system.
     */
    updatedAt?: string;

    /**
     * Application user who updated the row in the database, auto-populated by the
     * system.
     */
    updatedBy?: string;
  }

  /**
   * SensorStats contain statistics on sensors related to observation production such
   * as last reported observation time.
   */
  export interface SensorStat {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * Unique ID of the parent sensor.
     */
    idSensor: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Time of last reported observation in ISO 8601 UTC with microsecond precision.
     */
    lastObTime?: string;

    /**
     * Read-only time the row was updated in the database, set automatically by the
     * system on update.
     */
    updatedAt?: string;

    /**
     * Application user who last updated the row in the database, set by the system
     * automatically and ignored on create/edit operations.
     */
    updatedBy?: string;
  }

  export interface SensorType {
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: number;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * The specific sensor type and/or surveillance capability of this sensor.
     */
    type?: string;

    /**
     * Time the row was last updated in the database, auto-populated by the system.
     */
    updatedAt?: string;

    /**
     * Application user who updated the row in the database, auto-populated by the
     * system.
     */
    updatedBy?: string;
  }
}

export type SensorTupleResponse = Array<SensorTupleResponse.SensorTupleResponseItem>;

export namespace SensorTupleResponse {
  /**
   * Model representation of observation data for electro-optical based sensor
   * phenomenologies.
   */
  export interface SensorTupleResponseItem {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * Unique name of this sensor.
     */
    sensorName: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Optional flag indicating if the sensor is active.
     */
    active?: boolean;

    /**
     * Optional US Air Force identifier for the sensor/ASR site, typically for air
     * surveillance radar (ASR) sensors.
     */
    afId?: string;

    /**
     * The sensor type at the site. Optional field, intended primarily for ASRs.
     */
    asrType?: string;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Optional dissemination control required for accessing data (e.g observations)
     * produced by this sensor. This is typically a proprietary data owner control for
     * commercial sensors.
     */
    dataControl?: string;

    /**
     * An entity is a generic representation of any object within a space/SSA system
     * such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An
     * entity can have an operating unit, a location (if terrestrial), and statuses.
     */
    entity?: EntitiesAPI.EntityFull;

    /**
     * Unique identifier of the parent entity. idEntity is required for Put.
     */
    idEntity?: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    idSensor?: string;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * Collection of Sensorcharacteristics which define characteristics and
     * capabilities of a sensor.
     */
    sensorcharacteristics?: Array<SensorTupleResponseItem.Sensorcharacteristic>;

    /**
     * Sensorlimits define 0 to many limits of a particular sensor in terms of
     * observation coverage of on-orbit objects.
     */
    sensorlimitsCollection?: Array<SensorTupleResponseItem.SensorlimitsCollection>;

    /**
     * Number assigned to this sensor. Since there is no authoritative numbering
     * scheme, these numbers sometimes collide across sensors (especially commercial
     * sensors). It is therefore not a unique identifier.
     */
    sensorNumber?: number;

    sensorObservationType?: SensorTupleResponseItem.SensorObservationType;

    /**
     * Collection of SensorStats which contain statistics of a sensor.
     */
    sensorStats?: Array<SensorTupleResponseItem.SensorStat>;

    sensorType?: SensorTupleResponseItem.SensorType;

    /**
     * Optional short name for the sensor.
     */
    shortName?: string;

    /**
     * Time the row was last updated in the database, auto-populated by the system.
     */
    updatedAt?: string;

    /**
     * Application user who updated the row in the database, auto-populated by the
     * system.
     */
    updatedBy?: string;
  }

  export namespace SensorTupleResponseItem {
    /**
     * Model representation of characteristics and capabilities of a sensor.
     */
    export interface Sensorcharacteristic {
      /**
       * Classification marking of the data in IC/CAPCO Portion-marked format.
       */
      classificationMarking: string;

      /**
       * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
       *
       * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
       * may include both real and simulated data.
       *
       * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
       * events, and analysis.
       *
       * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
       * datasets.
       *
       * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
       * requirements, and for validating technical, functional, and performance
       * characteristics.
       */
      dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

      /**
       * Unique identifier of the parent sensor.
       */
      idSensor: string;

      /**
       * Source of the data.
       */
      source: string;

      /**
       * Unique identifier of the record, auto-generated by the system.
       */
      id?: string;

      /**
       * Array of measurement range(s) where radar samples must fall to be acceptable. If
       * this field is populated, the associated beam(s) must be provided in the
       * beamOrder field.
       */
      acceptSampleRanges?: Array<number>;

      /**
       * Optical sensor camera aperture.
       */
      aperture?: number;

      /**
       * For ASR (Air Surveillance Radar) sensors, the scan (360 deg sweep) rate of the
       * radar, in scans/minute.
       */
      asrScanRate?: number;

      /**
       * Array of azimuth angles of a radar beam, in degrees. If this field is populated,
       * the associated beam(s) must be provided in the beamOrder field.
       */
      azAngs?: Array<number>;

      /**
       * Azimuth rate acquisition limit (radians/minute).
       */
      azimuthRate?: number;

      /**
       * Sensor band.
       */
      band?: string;

      /**
       * Array designating the beam order of provided values (e.g. vb1 for vertical beam
       * 1, ob1 for oblique beam 1, etc.). Required if any of the following array fields
       * are populated: azAngs, elAngs, radarPulseWidths, pulseRepPeriods, delayGates,
       * rangeGates, rangeSpacings, vertGateSpacings, vertGateWidths, specAvgSpectraNums,
       * tempMedFiltCodes, runMeanCodes, totRecNums, reqRecords, acceptSampleRanges.
       */
      beamOrder?: Array<string>;

      /**
       * Number of radar beams used by the sensor.
       */
      beamQty?: number;

      /**
       * The angle of the center of a phased array sensor.
       */
      boresight?: number;

      /**
       * The number of degrees off of the boresight for the sensor.
       */
      boresightOffAngle?: number;

      /**
       * Time the row was created in the database, auto-populated by the system.
       */
      createdAt?: string;

      /**
       * Application user who created the row in the database, auto-populated by the
       * system.
       */
      createdBy?: string;

      /**
       * Threshold shear value beyond which one of the radial velocity values will be
       * rejected, measured in units of inverse second.
       */
      critShear?: number;

      /**
       * Array of time delay(s) for pulses from a radar beam to get to the first range
       * gate, in nanoseconds. If this field is populated, the associated beam(s) must be
       * provided in the beamOrder field.
       */
      delayGates?: Array<number>;

      /**
       * Description of the equipment and data source.
       */
      description?: string;

      /**
       * Array of elevation angles of a radar beam, in degrees. If this field is
       * populated, the associated beam(s) must be provided in the beamOrder field.
       */
      elAngs?: Array<number>;

      /**
       * Elevation rate acquisition limit (radians/minute).
       */
      elevationRateGeolm?: number;

      /**
       * Type of equipment used to take measurements.
       */
      equipmentType?: string;

      /**
       * The beam width of a Sensor's Fan (range). The values for this range from (0.0 to
       * PI).
       */
      fanBeamWidth?: number;

      /**
       * Number of Fast Fourier Transform (FFT) points used to convert time varying
       * signals into the frequency domain.
       */
      fft?: number;

      /**
       * Maximum number of times the first guess was propagated in each gate before
       * failing the first guess check.
       */
      fgpCrit?: number;

      /**
       * For radar based sensors, the focal point elevation of the radar at the site, in
       * meters.
       */
      focalPoint?: number;

      /**
       * Horizontal field of view.
       */
      hFOV?: number;

      /**
       * Horizontal pixel resolution.
       */
      hResPixels?: number;

      /**
       * For radar based sensors, K-factor is a relative indicator of refractivity that
       * infers the amount of radar beam bending due to atmosphere. (1<K<2).
       */
      k?: number;

      /**
       * For Orbiting Sensors, First Card Azimuth limit #1 (left, degrees).
       */
      leftClockAngle?: number;

      /**
       * Leftmost GEO belt longitude limit for this sensor (if applicable).
       */
      leftGeoBeltLimit?: number;

      /**
       * Site where measurement is taken.
       */
      location?: string;

      /**
       * Angle between magnetic north and true north at the sensor site, in degrees.
       */
      magDec?: number;

      /**
       * Absolute magnitude acquisition limit for optical sensors.
       */
      magnitudeLimit?: number;

      /**
       * Max deviation angle of the sensor in degrees.
       */
      maxDeviationAngle?: number;

      /**
       * Maximum observable sensor range, in kilometers.
       */
      maxObservableRange?: number;

      /**
       * Maximum observable range limit in kilometers -- sensor cannot acquire beyond
       * this range.
       */
      maxRangeLimit?: number;

      /**
       * Minimum range measurement capability of the sensor, in kilometers.
       */
      minRangeLimit?: number;

      /**
       * Signal to Noise Ratio, in decibels. The values for this range from 0.0 - + 99.99
       * dB.
       */
      minSignalNoiseRatio?: number;

      /**
       * Negative Range-rate/relative velocity limit (kilometers/second).
       */
      negativeRangeRateLimit?: number;

      /**
       * For radar based sensors, number of integrated pulses in a transmit cycle.
       */
      numIntegratedPulses?: number;

      /**
       * The originating source network on which this record was created, auto-populated
       * by the system.
       */
      origNetwork?: string;

      /**
       * Positive Range-rate/relative velocity limit (kilometers/second).
       */
      positiveRangeRateLimit?: number;

      /**
       * For radar based sensors, pulse repetition frequency (PRF), in hertz. Number of
       * new pulses transmitted per second.
       */
      prf?: number;

      /**
       * For radar based sensors, probability of the indication of the presence of a
       * radar target due to noise or interference.
       */
      probFalseAlarm?: number;

      /**
       * Array of interval(s) between the start of one radar pulse and the start of
       * another for a radar beam, in microseconds. If this field is populated, the
       * associated beam(s) must be provided in the beamOrder field.
       */
      pulseRepPeriods?: Array<number>;

      /**
       * Radar frequency of the sensor (if a radar sensor).
       */
      radarFrequency?: number;

      /**
       * Message data format transmitted by the sensor digitizer.
       */
      radarMessageFormat?: string;

      /**
       * For radar based sensors, radar maximum unambiguous range, in kilometers.
       */
      radarMUR?: number;

      /**
       * Array of transmit time(s) for a radar beam pulse, in microseconds. If this field
       * is populated, the associated beam(s) must be provided in the beamOrder field.
       */
      radarPulseWidths?: Array<number>;

      /**
       * Radio frequency (if sensor is RF).
       */
      radioFrequency?: number;

      /**
       * Array of the number(s) of discrete altitudes where return signals are sampled by
       * a radar beam. If this field is populated, the associated beam(s) must be
       * provided in the beamOrder field.
       */
      rangeGates?: Array<number>;

      /**
       * Array of range gate spacing(s) for a radar beam, in nanoseconds. If this field
       * is populated, the associated beam(s) must be provided in the beamOrder field.
       */
      rangeSpacings?: Array<number>;

      /**
       * Array of the total number(s) of records required to meet consensus for a radar
       * beam. If this field is populated, the associated beam(s) must be provided in the
       * beamOrder field.
       */
      reqRecords?: Array<number>;

      /**
       * For Orbiting Sensors, First Card Azimuth limit #3 (right, degrees).
       */
      rightClockAngle?: number;

      /**
       * Rightmost GEO belt longitude limit for this sensor (if applicable).
       */
      rightGeoBeltLimit?: number;

      /**
       * Array of running mean code(s) used by radar data processing. The running mean
       * method involves taking a series of averages of different selections of the full
       * data set to smooth out short-term fluctuations in the data. If this field is
       * populated, the associated beam(s) must be provided in the beamOrder field.
       */
      runMeanCodes?: Array<number>;

      /**
       * Site code of the sensor.
       */
      siteCode?: string;

      /**
       * Array of the number(s) of Doppler spectra used to process measurements from
       * radar. Spectral averaging involves combining multiple Doppler spectra acquired
       * to obtain a more accurate and representative spectrum. If this field is
       * populated, the associated beam(s) must be provided in the beamOrder field.
       */
      specAvgSpectraNums?: Array<number>;

      /**
       * For radar based sensors, expression of the radar system noise, aggregated as an
       * equivalent thermal noise value, in degrees Kelvin.
       */
      systemNoiseTemperature?: number;

      /**
       * Maximum taskable range of the sensor, in kilometers.
       */
      taskableRange?: number;

      /**
       * Array of temporal median filter code(s) of a radar beam. Temporal median
       * filtering is a noise-reducing algorithm which involves replacing each data point
       * with the median value of a window of neighboring points over time. If this field
       * is populated, the associated beam(s) must be provided in the beamOrder field.
       */
      tempMedFiltCodes?: Array<number>;

      /**
       * Test number for the observed measurement.
       */
      testNumber?: string;

      /**
       * Array of the total number(s) of records for a radar beam. If this field is
       * populated, the associated beam(s) must be provided in the beamOrder field.
       */
      totRecNums?: Array<number>;

      /**
       * For tower sensors, the physical height of the sensor tower, in meters.
       */
      towerHeight?: number;

      /**
       * Beginning track angle limit, in radians. Track angle is the angle between the
       * camera axis and the gimbal plane. Values range from 0 - PI/2.
       */
      trackAngle?: number;

      /**
       * Radar transmit power in Watts.
       */
      transmitPower?: number;

      /**
       * True North correction for the sensor, in ACP (Azimunth Change Pulse) count.
       */
      trueNorthCorrector?: number;

      /**
       * Antenna true tilt, in degrees.
       */
      trueTilt?: number;

      /**
       * Time the row was last updated in the database, auto-populated by the system.
       */
      updatedAt?: string;

      /**
       * Application user who updated the row in the database, auto-populated by the
       * system.
       */
      updatedBy?: string;

      /**
       * Flag indicating if a vertical radar beam was used in the wind calculation.
       */
      vertBeamFlag?: boolean;

      /**
       * Array of vertical distance(s) between points where radar measurements are taken,
       * in meters. If this field is populated, the associated beam(s) must be provided
       * in the beamOrder field.
       */
      vertGateSpacings?: Array<number>;

      /**
       * Array of width(s) of each location where radar measurements are taken, in
       * meters. If this field is populated, the associated beam(s) must be provided in
       * the beamOrder field.
       */
      vertGateWidths?: Array<number>;

      /**
       * Vertical field of view.
       */
      vFOV?: number;

      /**
       * Vertical pixel resolution.
       */
      vResPixels?: number;

      /**
       * Peformance zone-1 maximum range, in kilometers. Note that the zones apply only
       * to the PSR/Search radars.
       */
      z1MaxRange?: number;

      /**
       * Peformance zone-1 minimum range, in kilometers. Note that the zones apply only
       * to the PSR/Search radars.
       */
      z1MinRange?: number;

      /**
       * Peformance zone-2 maximum range, in kilometers. Note that the zones apply only
       * to the PSR/Search radars.
       */
      z2MaxRange?: number;

      /**
       * Peformance zone-2 minimum range, in kilometers. Note that the zones apply only
       * to the PSR/Search radars.
       */
      z2MinRange?: number;
    }

    /**
     * Sensorlimits define 0 to many limits of a particular sensor in terms of
     * observation coverage of on-orbit objects.
     */
    export interface SensorlimitsCollection {
      /**
       * Classification marking of the data in IC/CAPCO Portion-marked format.
       */
      classificationMarking: string;

      /**
       * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
       *
       * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
       * may include both real and simulated data.
       *
       * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
       * events, and analysis.
       *
       * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
       * datasets.
       *
       * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
       * requirements, and for validating technical, functional, and performance
       * characteristics.
       */
      dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

      /**
       * Source of the data.
       */
      source: string;

      /**
       * Time the row was created in the database, auto-populated by the system.
       */
      createdAt?: string;

      /**
       * Application user who created the row in the database, auto-populated by the
       * system.
       */
      createdBy?: string;

      /**
       * Unique identifier of the target sensor object.
       */
      idSensor?: string;

      /**
       * Unique identifier of the record, auto-generated by the system.
       */
      idSensorLimits?: string;

      /**
       * Leftmost or minimum lower azimuth within this limit. Interpreted according to
       * site types as lower left azimuth limit elevation angle of axis of conical
       * observation pattern. If the limit rectangle is parallel to the horizon, the
       * upper and lower left azimuth limits would be equal. (degrees).
       */
      lowerLeftAzimuthLimit?: number;

      /**
       * Minimum or lower elevation within this limit. Interpreted according to site
       * types as minimum elevation angle, constant elevation or fan beam centerline.
       * (Degrees).
       */
      lowerLeftElevationLimit?: number;

      /**
       * Rightmost or maximum lower azimuth within this limit. Interpreted according to
       * site types as 2nd lower azimuth limit elevation angle of axis of conical
       * observation pattern. If the limit rectangle is parallel to the horizon, the
       * upper and lower right azimuth limits would be equal. (degrees).
       */
      lowerRightAzimuthLimit?: number;

      /**
       * Minimum or lower right elevation within this limit. Interpreted according to
       * site types as minimum right elevation angle, constant elevation or fan beam
       * centerline. If the limit rectangle is parallel to the horizon, the left and
       * right lower elevation limits would be equal. (Degrees).
       */
      lowerRightElevationLimit?: number;

      /**
       * The originating source network on which this record was created, auto-populated
       * by the system.
       */
      origNetwork?: string;

      /**
       * Time the row was last updated in the database, auto-populated by the system.
       */
      updatedAt?: string;

      /**
       * Application user who updated the row in the database, auto-populated by the
       * system.
       */
      updatedBy?: string;

      /**
       * Leftmost or minimum upper azimuth within this sensor limit. Interpreted
       * according to site types as beginning upper azimuth limit, left-hand upper
       * boundary limit. If the limit rectangle is parallel to the horizon, the upper and
       * lower left azimuth limits would be equal. (in degrees).
       */
      upperLeftAzimuthLimit?: number;

      /**
       * Maximum or upper elevation within this limit. Interpreted according to site
       * types as maximum elevation angle, half the apex of conical observation pattern
       * or star. (Degrees).
       */
      upperLeftElevationLimit?: number;

      /**
       * Rightmost or maximum upper azimuth within this limit. Interpreted according to
       * site types as 2nd azimuth limit elevation angle of axis of conical observation
       * pattern. If the limit rectangle is parallel to the horizon, the upper and lower
       * right azimuth limits would be equal. (degrees).
       */
      upperRightAzimuthLimit?: number;

      /**
       * Maximum or upper right elevation within this limit. Interpreted according to
       * site types as maximum rightmost elevation angle, half the apex of conical
       * observation pattern or star. If the limit rectangle is parallel to the horizon,
       * the left and right upper elevation limits would be equal. (Degrees).
       */
      upperRightElevationLimit?: number;
    }

    export interface SensorObservationType {
      /**
       * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
       *
       * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
       * may include both real and simulated data.
       *
       * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
       * events, and analysis.
       *
       * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
       * datasets.
       *
       * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
       * requirements, and for validating technical, functional, and performance
       * characteristics.
       */
      dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

      /**
       * Source of the data.
       */
      source: string;

      /**
       * Unique identifier of the record, auto-generated by the system.
       */
      id?: string;

      /**
       * Time the row was created in the database, auto-populated by the system.
       */
      createdAt?: string;

      /**
       * Application user who created the row in the database, auto-populated by the
       * system.
       */
      createdBy?: string;

      /**
       * The originating source network on which this record was created, auto-populated
       * by the system.
       */
      origNetwork?: string;

      /**
       * The observation measurement type produced by a sensor.
       */
      type?: string;

      /**
       * Time the row was last updated in the database, auto-populated by the system.
       */
      updatedAt?: string;

      /**
       * Application user who updated the row in the database, auto-populated by the
       * system.
       */
      updatedBy?: string;
    }

    /**
     * SensorStats contain statistics on sensors related to observation production such
     * as last reported observation time.
     */
    export interface SensorStat {
      /**
       * Classification marking of the data in IC/CAPCO Portion-marked format.
       */
      classificationMarking: string;

      /**
       * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
       *
       * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
       * may include both real and simulated data.
       *
       * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
       * events, and analysis.
       *
       * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
       * datasets.
       *
       * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
       * requirements, and for validating technical, functional, and performance
       * characteristics.
       */
      dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

      /**
       * Unique ID of the parent sensor.
       */
      idSensor: string;

      /**
       * Source of the data.
       */
      source: string;

      /**
       * Unique identifier of the record, auto-generated by the system.
       */
      id?: string;

      /**
       * Time the row was created in the database, auto-populated by the system.
       */
      createdAt?: string;

      /**
       * Application user who created the row in the database, auto-populated by the
       * system.
       */
      createdBy?: string;

      /**
       * Time of last reported observation in ISO 8601 UTC with microsecond precision.
       */
      lastObTime?: string;

      /**
       * Read-only time the row was updated in the database, set automatically by the
       * system on update.
       */
      updatedAt?: string;

      /**
       * Application user who last updated the row in the database, set by the system
       * automatically and ignored on create/edit operations.
       */
      updatedBy?: string;
    }

    export interface SensorType {
      /**
       * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
       *
       * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
       * may include both real and simulated data.
       *
       * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
       * events, and analysis.
       *
       * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
       * datasets.
       *
       * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
       * requirements, and for validating technical, functional, and performance
       * characteristics.
       */
      dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

      /**
       * Source of the data.
       */
      source: string;

      /**
       * Unique identifier of the record, auto-generated by the system.
       */
      id?: number;

      /**
       * Time the row was created in the database, auto-populated by the system.
       */
      createdAt?: string;

      /**
       * Application user who created the row in the database, auto-populated by the
       * system.
       */
      createdBy?: string;

      /**
       * The originating source network on which this record was created, auto-populated
       * by the system.
       */
      origNetwork?: string;

      /**
       * The specific sensor type and/or surveillance capability of this sensor.
       */
      type?: string;

      /**
       * Time the row was last updated in the database, auto-populated by the system.
       */
      updatedAt?: string;

      /**
       * Application user who updated the row in the database, auto-populated by the
       * system.
       */
      updatedBy?: string;
    }
  }
}

export interface SensorCreateParams {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Unique name of this sensor.
   */
  sensorName: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Optional flag indicating if the sensor is active.
   */
  active?: boolean;

  /**
   * Optional US Air Force identifier for the sensor/ASR site, typically for air
   * surveillance radar (ASR) sensors.
   */
  afId?: string;

  /**
   * The sensor type at the site. Optional field, intended primarily for ASRs.
   */
  asrType?: string;

  /**
   * Optional dissemination control required for accessing data (e.g observations)
   * produced by this sensor. This is typically a proprietary data owner control for
   * commercial sensors.
   */
  dataControl?: string;

  /**
   * An entity is a generic representation of any object within a space/SSA system
   * such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An
   * entity can have an operating unit, a location (if terrestrial), and statuses.
   */
  entity?: EntitiesAPI.EntityIngest;

  /**
   * Unique identifier of the parent entity. idEntity is required for Put.
   */
  idEntity?: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  idSensor?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * Collection of Sensorcharacteristics which define characteristics and
   * capabilities of a sensor.
   */
  sensorcharacteristics?: Array<SensorCreateParams.Sensorcharacteristic>;

  /**
   * Sensorlimits define 0 to many limits of a particular sensor in terms of
   * observation coverage of on-orbit objects.
   */
  sensorlimitsCollection?: Array<SensorCreateParams.SensorlimitsCollection>;

  /**
   * Number assigned to this sensor. Since there is no authoritative numbering
   * scheme, these numbers sometimes collide across sensors (especially commercial
   * sensors). It is therefore not a unique identifier.
   */
  sensorNumber?: number;

  /**
   * Type of observations produced by this sensor. See the /udl/sensorobservationtype
   * service for a complete list of all available sensor types.
   */
  sensorObservationType?: SensorCreateParams.SensorObservationType;

  /**
   * Collection of SensorStats which contain statistics of a sensor.
   */
  sensorStats?: Array<SensorCreateParams.SensorStat>;

  /**
   * Sensor type..see the /udl/sensortype service for a complete list of all
   * available sensor types.
   */
  sensorType?: SensorCreateParams.SensorType;

  /**
   * Optional short name for the sensor.
   */
  shortName?: string;
}

export namespace SensorCreateParams {
  /**
   * Model representation of characteristics and capabilities of a sensor.
   */
  export interface Sensorcharacteristic {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * Unique identifier of the parent sensor.
     */
    idSensor: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    /**
     * Array of measurement range(s) where radar samples must fall to be acceptable. If
     * this field is populated, the associated beam(s) must be provided in the
     * beamOrder field.
     */
    acceptSampleRanges?: Array<number>;

    /**
     * Optical sensor camera aperture.
     */
    aperture?: number;

    /**
     * For ASR (Air Surveillance Radar) sensors, the scan (360 deg sweep) rate of the
     * radar, in scans/minute.
     */
    asrScanRate?: number;

    /**
     * Array of azimuth angles of a radar beam, in degrees. If this field is populated,
     * the associated beam(s) must be provided in the beamOrder field.
     */
    azAngs?: Array<number>;

    /**
     * Azimuth rate acquisition limit (radians/minute).
     */
    azimuthRate?: number;

    /**
     * Sensor band.
     */
    band?: string;

    /**
     * Array designating the beam order of provided values (e.g. vb1 for vertical beam
     * 1, ob1 for oblique beam 1, etc.). Required if any of the following array fields
     * are populated: azAngs, elAngs, radarPulseWidths, pulseRepPeriods, delayGates,
     * rangeGates, rangeSpacings, vertGateSpacings, vertGateWidths, specAvgSpectraNums,
     * tempMedFiltCodes, runMeanCodes, totRecNums, reqRecords, acceptSampleRanges.
     */
    beamOrder?: Array<string>;

    /**
     * Number of radar beams used by the sensor.
     */
    beamQty?: number;

    /**
     * The angle of the center of a phased array sensor.
     */
    boresight?: number;

    /**
     * The number of degrees off of the boresight for the sensor.
     */
    boresightOffAngle?: number;

    /**
     * Threshold shear value beyond which one of the radial velocity values will be
     * rejected, measured in units of inverse second.
     */
    critShear?: number;

    /**
     * Array of time delay(s) for pulses from a radar beam to get to the first range
     * gate, in nanoseconds. If this field is populated, the associated beam(s) must be
     * provided in the beamOrder field.
     */
    delayGates?: Array<number>;

    /**
     * Description of the equipment and data source.
     */
    description?: string;

    /**
     * Array of elevation angles of a radar beam, in degrees. If this field is
     * populated, the associated beam(s) must be provided in the beamOrder field.
     */
    elAngs?: Array<number>;

    /**
     * Elevation rate acquisition limit (radians/minute).
     */
    elevationRateGeolm?: number;

    /**
     * Type of equipment used to take measurements.
     */
    equipmentType?: string;

    /**
     * The beam width of a Sensor's Fan (range). The values for this range from (0.0 to
     * PI).
     */
    fanBeamWidth?: number;

    /**
     * Number of Fast Fourier Transform (FFT) points used to convert time varying
     * signals into the frequency domain.
     */
    fft?: number;

    /**
     * Maximum number of times the first guess was propagated in each gate before
     * failing the first guess check.
     */
    fgpCrit?: number;

    /**
     * For radar based sensors, the focal point elevation of the radar at the site, in
     * meters.
     */
    focalPoint?: number;

    /**
     * Horizontal field of view.
     */
    hFOV?: number;

    /**
     * Horizontal pixel resolution.
     */
    hResPixels?: number;

    /**
     * For radar based sensors, K-factor is a relative indicator of refractivity that
     * infers the amount of radar beam bending due to atmosphere. (1<K<2).
     */
    k?: number;

    /**
     * For Orbiting Sensors, First Card Azimuth limit #1 (left, degrees).
     */
    leftClockAngle?: number;

    /**
     * Leftmost GEO belt longitude limit for this sensor (if applicable).
     */
    leftGeoBeltLimit?: number;

    /**
     * Site where measurement is taken.
     */
    location?: string;

    /**
     * Angle between magnetic north and true north at the sensor site, in degrees.
     */
    magDec?: number;

    /**
     * Absolute magnitude acquisition limit for optical sensors.
     */
    magnitudeLimit?: number;

    /**
     * Max deviation angle of the sensor in degrees.
     */
    maxDeviationAngle?: number;

    /**
     * Maximum observable sensor range, in kilometers.
     */
    maxObservableRange?: number;

    /**
     * Maximum observable range limit in kilometers -- sensor cannot acquire beyond
     * this range.
     */
    maxRangeLimit?: number;

    /**
     * Minimum range measurement capability of the sensor, in kilometers.
     */
    minRangeLimit?: number;

    /**
     * Signal to Noise Ratio, in decibels. The values for this range from 0.0 - + 99.99
     * dB.
     */
    minSignalNoiseRatio?: number;

    /**
     * Negative Range-rate/relative velocity limit (kilometers/second).
     */
    negativeRangeRateLimit?: number;

    /**
     * For radar based sensors, number of integrated pulses in a transmit cycle.
     */
    numIntegratedPulses?: number;

    /**
     * Positive Range-rate/relative velocity limit (kilometers/second).
     */
    positiveRangeRateLimit?: number;

    /**
     * For radar based sensors, pulse repetition frequency (PRF), in hertz. Number of
     * new pulses transmitted per second.
     */
    prf?: number;

    /**
     * For radar based sensors, probability of the indication of the presence of a
     * radar target due to noise or interference.
     */
    probFalseAlarm?: number;

    /**
     * Array of interval(s) between the start of one radar pulse and the start of
     * another for a radar beam, in microseconds. If this field is populated, the
     * associated beam(s) must be provided in the beamOrder field.
     */
    pulseRepPeriods?: Array<number>;

    /**
     * Radar frequency of the sensor (if a radar sensor).
     */
    radarFrequency?: number;

    /**
     * Message data format transmitted by the sensor digitizer.
     */
    radarMessageFormat?: string;

    /**
     * For radar based sensors, radar maximum unambiguous range, in kilometers.
     */
    radarMUR?: number;

    /**
     * Array of transmit time(s) for a radar beam pulse, in microseconds. If this field
     * is populated, the associated beam(s) must be provided in the beamOrder field.
     */
    radarPulseWidths?: Array<number>;

    /**
     * Radio frequency (if sensor is RF).
     */
    radioFrequency?: number;

    /**
     * Array of the number(s) of discrete altitudes where return signals are sampled by
     * a radar beam. If this field is populated, the associated beam(s) must be
     * provided in the beamOrder field.
     */
    rangeGates?: Array<number>;

    /**
     * Array of range gate spacing(s) for a radar beam, in nanoseconds. If this field
     * is populated, the associated beam(s) must be provided in the beamOrder field.
     */
    rangeSpacings?: Array<number>;

    /**
     * Array of the total number(s) of records required to meet consensus for a radar
     * beam. If this field is populated, the associated beam(s) must be provided in the
     * beamOrder field.
     */
    reqRecords?: Array<number>;

    /**
     * For Orbiting Sensors, First Card Azimuth limit #3 (right, degrees).
     */
    rightClockAngle?: number;

    /**
     * Rightmost GEO belt longitude limit for this sensor (if applicable).
     */
    rightGeoBeltLimit?: number;

    /**
     * Array of running mean code(s) used by radar data processing. The running mean
     * method involves taking a series of averages of different selections of the full
     * data set to smooth out short-term fluctuations in the data. If this field is
     * populated, the associated beam(s) must be provided in the beamOrder field.
     */
    runMeanCodes?: Array<number>;

    /**
     * Site code of the sensor.
     */
    siteCode?: string;

    /**
     * Array of the number(s) of Doppler spectra used to process measurements from
     * radar. Spectral averaging involves combining multiple Doppler spectra acquired
     * to obtain a more accurate and representative spectrum. If this field is
     * populated, the associated beam(s) must be provided in the beamOrder field.
     */
    specAvgSpectraNums?: Array<number>;

    /**
     * For radar based sensors, expression of the radar system noise, aggregated as an
     * equivalent thermal noise value, in degrees Kelvin.
     */
    systemNoiseTemperature?: number;

    /**
     * Maximum taskable range of the sensor, in kilometers.
     */
    taskableRange?: number;

    /**
     * Array of temporal median filter code(s) of a radar beam. Temporal median
     * filtering is a noise-reducing algorithm which involves replacing each data point
     * with the median value of a window of neighboring points over time. If this field
     * is populated, the associated beam(s) must be provided in the beamOrder field.
     */
    tempMedFiltCodes?: Array<number>;

    /**
     * Test number for the observed measurement.
     */
    testNumber?: string;

    /**
     * Array of the total number(s) of records for a radar beam. If this field is
     * populated, the associated beam(s) must be provided in the beamOrder field.
     */
    totRecNums?: Array<number>;

    /**
     * For tower sensors, the physical height of the sensor tower, in meters.
     */
    towerHeight?: number;

    /**
     * Beginning track angle limit, in radians. Track angle is the angle between the
     * camera axis and the gimbal plane. Values range from 0 - PI/2.
     */
    trackAngle?: number;

    /**
     * Radar transmit power in Watts.
     */
    transmitPower?: number;

    /**
     * True North correction for the sensor, in ACP (Azimunth Change Pulse) count.
     */
    trueNorthCorrector?: number;

    /**
     * Antenna true tilt, in degrees.
     */
    trueTilt?: number;

    /**
     * Flag indicating if a vertical radar beam was used in the wind calculation.
     */
    vertBeamFlag?: boolean;

    /**
     * Array of vertical distance(s) between points where radar measurements are taken,
     * in meters. If this field is populated, the associated beam(s) must be provided
     * in the beamOrder field.
     */
    vertGateSpacings?: Array<number>;

    /**
     * Array of width(s) of each location where radar measurements are taken, in
     * meters. If this field is populated, the associated beam(s) must be provided in
     * the beamOrder field.
     */
    vertGateWidths?: Array<number>;

    /**
     * Vertical field of view.
     */
    vFOV?: number;

    /**
     * Vertical pixel resolution.
     */
    vResPixels?: number;

    /**
     * Peformance zone-1 maximum range, in kilometers. Note that the zones apply only
     * to the PSR/Search radars.
     */
    z1MaxRange?: number;

    /**
     * Peformance zone-1 minimum range, in kilometers. Note that the zones apply only
     * to the PSR/Search radars.
     */
    z1MinRange?: number;

    /**
     * Peformance zone-2 maximum range, in kilometers. Note that the zones apply only
     * to the PSR/Search radars.
     */
    z2MaxRange?: number;

    /**
     * Peformance zone-2 minimum range, in kilometers. Note that the zones apply only
     * to the PSR/Search radars.
     */
    z2MinRange?: number;
  }

  /**
   * Sensorlimits define 0 to many limits of a particular sensor in terms of
   * observation coverage of on-orbit objects.
   */
  export interface SensorlimitsCollection {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Unique identifier of the target sensor object.
     */
    idSensor?: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    idSensorLimits?: string;

    /**
     * Leftmost or minimum lower azimuth within this limit. Interpreted according to
     * site types as lower left azimuth limit elevation angle of axis of conical
     * observation pattern. If the limit rectangle is parallel to the horizon, the
     * upper and lower left azimuth limits would be equal. (degrees).
     */
    lowerLeftAzimuthLimit?: number;

    /**
     * Minimum or lower elevation within this limit. Interpreted according to site
     * types as minimum elevation angle, constant elevation or fan beam centerline.
     * (Degrees).
     */
    lowerLeftElevationLimit?: number;

    /**
     * Rightmost or maximum lower azimuth within this limit. Interpreted according to
     * site types as 2nd lower azimuth limit elevation angle of axis of conical
     * observation pattern. If the limit rectangle is parallel to the horizon, the
     * upper and lower right azimuth limits would be equal. (degrees).
     */
    lowerRightAzimuthLimit?: number;

    /**
     * Minimum or lower right elevation within this limit. Interpreted according to
     * site types as minimum right elevation angle, constant elevation or fan beam
     * centerline. If the limit rectangle is parallel to the horizon, the left and
     * right lower elevation limits would be equal. (Degrees).
     */
    lowerRightElevationLimit?: number;

    /**
     * Leftmost or minimum upper azimuth within this sensor limit. Interpreted
     * according to site types as beginning upper azimuth limit, left-hand upper
     * boundary limit. If the limit rectangle is parallel to the horizon, the upper and
     * lower left azimuth limits would be equal. (in degrees).
     */
    upperLeftAzimuthLimit?: number;

    /**
     * Maximum or upper elevation within this limit. Interpreted according to site
     * types as maximum elevation angle, half the apex of conical observation pattern
     * or star. (Degrees).
     */
    upperLeftElevationLimit?: number;

    /**
     * Rightmost or maximum upper azimuth within this limit. Interpreted according to
     * site types as 2nd azimuth limit elevation angle of axis of conical observation
     * pattern. If the limit rectangle is parallel to the horizon, the upper and lower
     * right azimuth limits would be equal. (degrees).
     */
    upperRightAzimuthLimit?: number;

    /**
     * Maximum or upper right elevation within this limit. Interpreted according to
     * site types as maximum rightmost elevation angle, half the apex of conical
     * observation pattern or star. If the limit rectangle is parallel to the horizon,
     * the left and right upper elevation limits would be equal. (Degrees).
     */
    upperRightElevationLimit?: number;
  }

  /**
   * Type of observations produced by this sensor. See the /udl/sensorobservationtype
   * service for a complete list of all available sensor types.
   */
  export interface SensorObservationType {
    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    /**
     * The observation measurement type produced by a sensor.
     */
    type?: string;
  }

  /**
   * SensorStats contain statistics on sensors related to observation production such
   * as last reported observation time.
   */
  export interface SensorStat {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * Unique ID of the parent sensor.
     */
    idSensor: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    /**
     * Time of last reported observation in ISO 8601 UTC with microsecond precision.
     */
    lastObTime?: string;
  }

  /**
   * Sensor type..see the /udl/sensortype service for a complete list of all
   * available sensor types.
   */
  export interface SensorType {
    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: number;

    /**
     * The specific sensor type and/or surveillance capability of this sensor.
     */
    type?: string;
  }
}

export interface SensorUpdateParams {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Unique name of this sensor.
   */
  sensorName: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Optional flag indicating if the sensor is active.
   */
  active?: boolean;

  /**
   * Optional US Air Force identifier for the sensor/ASR site, typically for air
   * surveillance radar (ASR) sensors.
   */
  afId?: string;

  /**
   * The sensor type at the site. Optional field, intended primarily for ASRs.
   */
  asrType?: string;

  /**
   * Optional dissemination control required for accessing data (e.g observations)
   * produced by this sensor. This is typically a proprietary data owner control for
   * commercial sensors.
   */
  dataControl?: string;

  /**
   * An entity is a generic representation of any object within a space/SSA system
   * such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An
   * entity can have an operating unit, a location (if terrestrial), and statuses.
   */
  entity?: EntitiesAPI.EntityIngest;

  /**
   * Unique identifier of the parent entity. idEntity is required for Put.
   */
  idEntity?: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  idSensor?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * Collection of Sensorcharacteristics which define characteristics and
   * capabilities of a sensor.
   */
  sensorcharacteristics?: Array<SensorUpdateParams.Sensorcharacteristic>;

  /**
   * Sensorlimits define 0 to many limits of a particular sensor in terms of
   * observation coverage of on-orbit objects.
   */
  sensorlimitsCollection?: Array<SensorUpdateParams.SensorlimitsCollection>;

  /**
   * Number assigned to this sensor. Since there is no authoritative numbering
   * scheme, these numbers sometimes collide across sensors (especially commercial
   * sensors). It is therefore not a unique identifier.
   */
  sensorNumber?: number;

  /**
   * Type of observations produced by this sensor. See the /udl/sensorobservationtype
   * service for a complete list of all available sensor types.
   */
  sensorObservationType?: SensorUpdateParams.SensorObservationType;

  /**
   * Collection of SensorStats which contain statistics of a sensor.
   */
  sensorStats?: Array<SensorUpdateParams.SensorStat>;

  /**
   * Sensor type..see the /udl/sensortype service for a complete list of all
   * available sensor types.
   */
  sensorType?: SensorUpdateParams.SensorType;

  /**
   * Optional short name for the sensor.
   */
  shortName?: string;
}

export namespace SensorUpdateParams {
  /**
   * Model representation of characteristics and capabilities of a sensor.
   */
  export interface Sensorcharacteristic {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * Unique identifier of the parent sensor.
     */
    idSensor: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    /**
     * Array of measurement range(s) where radar samples must fall to be acceptable. If
     * this field is populated, the associated beam(s) must be provided in the
     * beamOrder field.
     */
    acceptSampleRanges?: Array<number>;

    /**
     * Optical sensor camera aperture.
     */
    aperture?: number;

    /**
     * For ASR (Air Surveillance Radar) sensors, the scan (360 deg sweep) rate of the
     * radar, in scans/minute.
     */
    asrScanRate?: number;

    /**
     * Array of azimuth angles of a radar beam, in degrees. If this field is populated,
     * the associated beam(s) must be provided in the beamOrder field.
     */
    azAngs?: Array<number>;

    /**
     * Azimuth rate acquisition limit (radians/minute).
     */
    azimuthRate?: number;

    /**
     * Sensor band.
     */
    band?: string;

    /**
     * Array designating the beam order of provided values (e.g. vb1 for vertical beam
     * 1, ob1 for oblique beam 1, etc.). Required if any of the following array fields
     * are populated: azAngs, elAngs, radarPulseWidths, pulseRepPeriods, delayGates,
     * rangeGates, rangeSpacings, vertGateSpacings, vertGateWidths, specAvgSpectraNums,
     * tempMedFiltCodes, runMeanCodes, totRecNums, reqRecords, acceptSampleRanges.
     */
    beamOrder?: Array<string>;

    /**
     * Number of radar beams used by the sensor.
     */
    beamQty?: number;

    /**
     * The angle of the center of a phased array sensor.
     */
    boresight?: number;

    /**
     * The number of degrees off of the boresight for the sensor.
     */
    boresightOffAngle?: number;

    /**
     * Threshold shear value beyond which one of the radial velocity values will be
     * rejected, measured in units of inverse second.
     */
    critShear?: number;

    /**
     * Array of time delay(s) for pulses from a radar beam to get to the first range
     * gate, in nanoseconds. If this field is populated, the associated beam(s) must be
     * provided in the beamOrder field.
     */
    delayGates?: Array<number>;

    /**
     * Description of the equipment and data source.
     */
    description?: string;

    /**
     * Array of elevation angles of a radar beam, in degrees. If this field is
     * populated, the associated beam(s) must be provided in the beamOrder field.
     */
    elAngs?: Array<number>;

    /**
     * Elevation rate acquisition limit (radians/minute).
     */
    elevationRateGeolm?: number;

    /**
     * Type of equipment used to take measurements.
     */
    equipmentType?: string;

    /**
     * The beam width of a Sensor's Fan (range). The values for this range from (0.0 to
     * PI).
     */
    fanBeamWidth?: number;

    /**
     * Number of Fast Fourier Transform (FFT) points used to convert time varying
     * signals into the frequency domain.
     */
    fft?: number;

    /**
     * Maximum number of times the first guess was propagated in each gate before
     * failing the first guess check.
     */
    fgpCrit?: number;

    /**
     * For radar based sensors, the focal point elevation of the radar at the site, in
     * meters.
     */
    focalPoint?: number;

    /**
     * Horizontal field of view.
     */
    hFOV?: number;

    /**
     * Horizontal pixel resolution.
     */
    hResPixels?: number;

    /**
     * For radar based sensors, K-factor is a relative indicator of refractivity that
     * infers the amount of radar beam bending due to atmosphere. (1<K<2).
     */
    k?: number;

    /**
     * For Orbiting Sensors, First Card Azimuth limit #1 (left, degrees).
     */
    leftClockAngle?: number;

    /**
     * Leftmost GEO belt longitude limit for this sensor (if applicable).
     */
    leftGeoBeltLimit?: number;

    /**
     * Site where measurement is taken.
     */
    location?: string;

    /**
     * Angle between magnetic north and true north at the sensor site, in degrees.
     */
    magDec?: number;

    /**
     * Absolute magnitude acquisition limit for optical sensors.
     */
    magnitudeLimit?: number;

    /**
     * Max deviation angle of the sensor in degrees.
     */
    maxDeviationAngle?: number;

    /**
     * Maximum observable sensor range, in kilometers.
     */
    maxObservableRange?: number;

    /**
     * Maximum observable range limit in kilometers -- sensor cannot acquire beyond
     * this range.
     */
    maxRangeLimit?: number;

    /**
     * Minimum range measurement capability of the sensor, in kilometers.
     */
    minRangeLimit?: number;

    /**
     * Signal to Noise Ratio, in decibels. The values for this range from 0.0 - + 99.99
     * dB.
     */
    minSignalNoiseRatio?: number;

    /**
     * Negative Range-rate/relative velocity limit (kilometers/second).
     */
    negativeRangeRateLimit?: number;

    /**
     * For radar based sensors, number of integrated pulses in a transmit cycle.
     */
    numIntegratedPulses?: number;

    /**
     * Positive Range-rate/relative velocity limit (kilometers/second).
     */
    positiveRangeRateLimit?: number;

    /**
     * For radar based sensors, pulse repetition frequency (PRF), in hertz. Number of
     * new pulses transmitted per second.
     */
    prf?: number;

    /**
     * For radar based sensors, probability of the indication of the presence of a
     * radar target due to noise or interference.
     */
    probFalseAlarm?: number;

    /**
     * Array of interval(s) between the start of one radar pulse and the start of
     * another for a radar beam, in microseconds. If this field is populated, the
     * associated beam(s) must be provided in the beamOrder field.
     */
    pulseRepPeriods?: Array<number>;

    /**
     * Radar frequency of the sensor (if a radar sensor).
     */
    radarFrequency?: number;

    /**
     * Message data format transmitted by the sensor digitizer.
     */
    radarMessageFormat?: string;

    /**
     * For radar based sensors, radar maximum unambiguous range, in kilometers.
     */
    radarMUR?: number;

    /**
     * Array of transmit time(s) for a radar beam pulse, in microseconds. If this field
     * is populated, the associated beam(s) must be provided in the beamOrder field.
     */
    radarPulseWidths?: Array<number>;

    /**
     * Radio frequency (if sensor is RF).
     */
    radioFrequency?: number;

    /**
     * Array of the number(s) of discrete altitudes where return signals are sampled by
     * a radar beam. If this field is populated, the associated beam(s) must be
     * provided in the beamOrder field.
     */
    rangeGates?: Array<number>;

    /**
     * Array of range gate spacing(s) for a radar beam, in nanoseconds. If this field
     * is populated, the associated beam(s) must be provided in the beamOrder field.
     */
    rangeSpacings?: Array<number>;

    /**
     * Array of the total number(s) of records required to meet consensus for a radar
     * beam. If this field is populated, the associated beam(s) must be provided in the
     * beamOrder field.
     */
    reqRecords?: Array<number>;

    /**
     * For Orbiting Sensors, First Card Azimuth limit #3 (right, degrees).
     */
    rightClockAngle?: number;

    /**
     * Rightmost GEO belt longitude limit for this sensor (if applicable).
     */
    rightGeoBeltLimit?: number;

    /**
     * Array of running mean code(s) used by radar data processing. The running mean
     * method involves taking a series of averages of different selections of the full
     * data set to smooth out short-term fluctuations in the data. If this field is
     * populated, the associated beam(s) must be provided in the beamOrder field.
     */
    runMeanCodes?: Array<number>;

    /**
     * Site code of the sensor.
     */
    siteCode?: string;

    /**
     * Array of the number(s) of Doppler spectra used to process measurements from
     * radar. Spectral averaging involves combining multiple Doppler spectra acquired
     * to obtain a more accurate and representative spectrum. If this field is
     * populated, the associated beam(s) must be provided in the beamOrder field.
     */
    specAvgSpectraNums?: Array<number>;

    /**
     * For radar based sensors, expression of the radar system noise, aggregated as an
     * equivalent thermal noise value, in degrees Kelvin.
     */
    systemNoiseTemperature?: number;

    /**
     * Maximum taskable range of the sensor, in kilometers.
     */
    taskableRange?: number;

    /**
     * Array of temporal median filter code(s) of a radar beam. Temporal median
     * filtering is a noise-reducing algorithm which involves replacing each data point
     * with the median value of a window of neighboring points over time. If this field
     * is populated, the associated beam(s) must be provided in the beamOrder field.
     */
    tempMedFiltCodes?: Array<number>;

    /**
     * Test number for the observed measurement.
     */
    testNumber?: string;

    /**
     * Array of the total number(s) of records for a radar beam. If this field is
     * populated, the associated beam(s) must be provided in the beamOrder field.
     */
    totRecNums?: Array<number>;

    /**
     * For tower sensors, the physical height of the sensor tower, in meters.
     */
    towerHeight?: number;

    /**
     * Beginning track angle limit, in radians. Track angle is the angle between the
     * camera axis and the gimbal plane. Values range from 0 - PI/2.
     */
    trackAngle?: number;

    /**
     * Radar transmit power in Watts.
     */
    transmitPower?: number;

    /**
     * True North correction for the sensor, in ACP (Azimunth Change Pulse) count.
     */
    trueNorthCorrector?: number;

    /**
     * Antenna true tilt, in degrees.
     */
    trueTilt?: number;

    /**
     * Flag indicating if a vertical radar beam was used in the wind calculation.
     */
    vertBeamFlag?: boolean;

    /**
     * Array of vertical distance(s) between points where radar measurements are taken,
     * in meters. If this field is populated, the associated beam(s) must be provided
     * in the beamOrder field.
     */
    vertGateSpacings?: Array<number>;

    /**
     * Array of width(s) of each location where radar measurements are taken, in
     * meters. If this field is populated, the associated beam(s) must be provided in
     * the beamOrder field.
     */
    vertGateWidths?: Array<number>;

    /**
     * Vertical field of view.
     */
    vFOV?: number;

    /**
     * Vertical pixel resolution.
     */
    vResPixels?: number;

    /**
     * Peformance zone-1 maximum range, in kilometers. Note that the zones apply only
     * to the PSR/Search radars.
     */
    z1MaxRange?: number;

    /**
     * Peformance zone-1 minimum range, in kilometers. Note that the zones apply only
     * to the PSR/Search radars.
     */
    z1MinRange?: number;

    /**
     * Peformance zone-2 maximum range, in kilometers. Note that the zones apply only
     * to the PSR/Search radars.
     */
    z2MaxRange?: number;

    /**
     * Peformance zone-2 minimum range, in kilometers. Note that the zones apply only
     * to the PSR/Search radars.
     */
    z2MinRange?: number;
  }

  /**
   * Sensorlimits define 0 to many limits of a particular sensor in terms of
   * observation coverage of on-orbit objects.
   */
  export interface SensorlimitsCollection {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Unique identifier of the target sensor object.
     */
    idSensor?: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    idSensorLimits?: string;

    /**
     * Leftmost or minimum lower azimuth within this limit. Interpreted according to
     * site types as lower left azimuth limit elevation angle of axis of conical
     * observation pattern. If the limit rectangle is parallel to the horizon, the
     * upper and lower left azimuth limits would be equal. (degrees).
     */
    lowerLeftAzimuthLimit?: number;

    /**
     * Minimum or lower elevation within this limit. Interpreted according to site
     * types as minimum elevation angle, constant elevation or fan beam centerline.
     * (Degrees).
     */
    lowerLeftElevationLimit?: number;

    /**
     * Rightmost or maximum lower azimuth within this limit. Interpreted according to
     * site types as 2nd lower azimuth limit elevation angle of axis of conical
     * observation pattern. If the limit rectangle is parallel to the horizon, the
     * upper and lower right azimuth limits would be equal. (degrees).
     */
    lowerRightAzimuthLimit?: number;

    /**
     * Minimum or lower right elevation within this limit. Interpreted according to
     * site types as minimum right elevation angle, constant elevation or fan beam
     * centerline. If the limit rectangle is parallel to the horizon, the left and
     * right lower elevation limits would be equal. (Degrees).
     */
    lowerRightElevationLimit?: number;

    /**
     * Leftmost or minimum upper azimuth within this sensor limit. Interpreted
     * according to site types as beginning upper azimuth limit, left-hand upper
     * boundary limit. If the limit rectangle is parallel to the horizon, the upper and
     * lower left azimuth limits would be equal. (in degrees).
     */
    upperLeftAzimuthLimit?: number;

    /**
     * Maximum or upper elevation within this limit. Interpreted according to site
     * types as maximum elevation angle, half the apex of conical observation pattern
     * or star. (Degrees).
     */
    upperLeftElevationLimit?: number;

    /**
     * Rightmost or maximum upper azimuth within this limit. Interpreted according to
     * site types as 2nd azimuth limit elevation angle of axis of conical observation
     * pattern. If the limit rectangle is parallel to the horizon, the upper and lower
     * right azimuth limits would be equal. (degrees).
     */
    upperRightAzimuthLimit?: number;

    /**
     * Maximum or upper right elevation within this limit. Interpreted according to
     * site types as maximum rightmost elevation angle, half the apex of conical
     * observation pattern or star. If the limit rectangle is parallel to the horizon,
     * the left and right upper elevation limits would be equal. (Degrees).
     */
    upperRightElevationLimit?: number;
  }

  /**
   * Type of observations produced by this sensor. See the /udl/sensorobservationtype
   * service for a complete list of all available sensor types.
   */
  export interface SensorObservationType {
    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    /**
     * The observation measurement type produced by a sensor.
     */
    type?: string;
  }

  /**
   * SensorStats contain statistics on sensors related to observation production such
   * as last reported observation time.
   */
  export interface SensorStat {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * Unique ID of the parent sensor.
     */
    idSensor: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    /**
     * Time of last reported observation in ISO 8601 UTC with microsecond precision.
     */
    lastObTime?: string;
  }

  /**
   * Sensor type..see the /udl/sensortype service for a complete list of all
   * available sensor types.
   */
  export interface SensorType {
    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: number;

    /**
     * The specific sensor type and/or surveillance capability of this sensor.
     */
    type?: string;
  }
}

export interface SensorTupleParams {
  /**
   * Comma-separated list of valid field names for this data type to be returned in
   * the response. Only the fields specified will be returned as well as the
   * classification marking of the data, if applicable. See the ‘queryhelp’ operation
   * for a complete list of possible fields.
   */
  columns: string;
}

export declare namespace Sensor {
  export {
    type SensorListResponse as SensorListResponse,
    type SensorCountResponse as SensorCountResponse,
    type SensorGetResponse as SensorGetResponse,
    type SensorTupleResponse as SensorTupleResponse,
    type SensorCreateParams as SensorCreateParams,
    type SensorUpdateParams as SensorUpdateParams,
    type SensorTupleParams as SensorTupleParams,
  };
}
