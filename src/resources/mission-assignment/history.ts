// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../core/resource';
import { APIPromise } from '../../core/api-promise';
import { buildHeaders } from '../../internal/headers';
import { RequestOptions } from '../../internal/request-options';

export class History extends APIResource {
  /**
   * Service operation to dynamically query historical data by a variety of query
   * parameters not specified in this API documentation, then write that data to the
   * Secure Content Store. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   *
   * @example
   * ```ts
   * await client.missionAssignment.history.aodr({
   *   ts: '2019-12-27T18:11:19.117Z',
   * });
   * ```
   */
  aodr(query: HistoryAodrParams, options?: RequestOptions): APIPromise<void> {
    return this._client.get('/udl/missionassignment/history/aodr', {
      query,
      ...options,
      headers: buildHeaders([{ Accept: '*/*' }, options?.headers]),
    });
  }

  /**
   * Service operation to return the count of records satisfying the specified query
   * parameters. This operation is useful to determine how many records pass a
   * particular query criteria without retrieving large amounts of data. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
   * valid/required query parameter information.
   *
   * @example
   * ```ts
   * const response =
   *   await client.missionAssignment.history.count({
   *     ts: '2019-12-27T18:11:19.117Z',
   *   });
   * ```
   */
  count(query: HistoryCountParams, options?: RequestOptions): APIPromise<string> {
    return this._client.get('/udl/missionassignment/history/count', {
      query,
      ...options,
      headers: buildHeaders([{ Accept: 'text/plain' }, options?.headers]),
    });
  }

  /**
   * Service operation to dynamically query historical data by a variety of query
   * parameters not specified in this API documentation. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   *
   * @example
   * ```ts
   * const response =
   *   await client.missionAssignment.history.query({
   *     ts: '2019-12-27T18:11:19.117Z',
   *   });
   * ```
   */
  query(query: HistoryQueryParams, options?: RequestOptions): APIPromise<HistoryQueryResponse> {
    return this._client.get('/udl/missionassignment/history', { query, ...options });
  }
}

export type HistoryCountResponse = string;

export type HistoryQueryResponse = Array<HistoryQueryResponse.HistoryQueryResponseItem>;

export namespace HistoryQueryResponse {
  /**
   * Platform mission assignment data.
   */
  export interface HistoryQueryResponseItem {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * The mission assignment discrete value.
     */
    mad: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * The timestamp of the mission data, in ISO 8601 UTC format.
     */
    ts: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    /**
     * TARGET POSITION CONTINUATION WORD - number of associated dmpis.
     */
    c1associateddmpis?: number;

    /**
     * TARGET DATA CONTINUATION WORD - air specific type, see TABLE B-21.
     */
    c2air?: string;

    /**
     * TARGET DATA CONTINUATION WORD - altitude, 100 FT, 2047=NS.
     */
    c2alt?: number;

    /**
     * TARGET DATA CONTINUATION WORD - course in increments of 1 degree.
     */
    c2crs?: number;

    /**
     * TARGET DATA CONTINUATION WORD - exercise indicator.
     */
    c2exerciseindicator?: string;

    /**
     * TARGET DATA CONTINUATION WORD - method of fire.
     */
    c2exercisemof?: string;

    /**
     * TARGET DATA CONTINUATION WORD - identity.
     */
    c2id?: string;

    /**
     * TARGET DATA CONTINUATION WORD - identity amplifying descriptor.
     */
    c2idamplifyingdescriptor?: string;

    /**
     * TARGET DATA CONTINUATION WORD - land specific type, see TABLE B-21.
     */
    c2lnd?: string;

    /**
     * TARGET DATA CONTINUATION WORD - space specific type, see TABLE B-39.
     */
    c2spc?: string;

    /**
     * TARGET DATA CONTINUATION WORD - speed in 2 DM/HR, 2047=NS.
     */
    c2spd?: number;

    /**
     * TARGET DATA CONTINUATION WORD - special interest indicator.
     */
    c2specialinterestindicator?: string;

    /**
     * TARGET DATA CONTINUATION WORD - surface specific type, see TABLE B-21.
     */
    c2sur?: string;

    /**
     * POINT LOCATION CONTINUATION WORD - elevation, 25 FT, 1023=NS.
     */
    c3elv?: number;

    /**
     * POINT LOCATION CONTINUATION WORD - latitude, 0.0013 MINUTE.
     */
    c3lat?: number;

    /**
     * POINT LOCATION CONTINUATION WORD - longitude, 0.0013 MINUTE.
     */
    c3lon?: number;

    /**
     * TARGET DATA CONTINUATION WORD - point type 1.
     */
    c3ptl?: string;

    /**
     * TARGET DATA CONTINUATION WORD - point number.
     */
    c3ptnum?: string;

    /**
     * SURFACE ATTACK CONTINUATION WORD - minute.
     */
    c4colon?: number;

    /**
     * SURFACE ATTACK CONTINUATION WORD - target defenses.
     */
    c4def?: string;

    /**
     * SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.
     */
    c4egress?: number;

    /**
     * SURFACE ATTACK CONTINUATION WORD - mode of delivery.
     */
    c4mod?: number;

    /**
     * SURFACE ATTACK CONTINUATION WORD - number of stores, NS=63.
     */
    c4numberofstores?: number;

    /**
     * SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.
     */
    c4runin?: number;

    /**
     * SURFACE ATTACK CONTINUATION WORD - target type - see TABLE B-32.
     */
    c4tgt?: string;

    /**
     * SURFACE ATTACK CONTINUATION WORD - time discrete.
     */
    c4timediscrete?: string;

    /**
     * SURFACE ATTACK CONTINUATION WORD - hour.
     */
    c4tm?: number;

    /**
     * SURFACE ATTACK CONTINUATION WORD - type of stores.
     */
    c4typeofstores?: number;

    /**
     * SURFACE ATTACK CONTINUATION WORD - seconds in increments of 1 sec.
     */
    c5colon?: number;

    /**
     * CONTINUATION WORD - used with c3_elv to double precision to approx 3 ft.
     */
    c5elevationlsbs?: number;

    /**
     * CONTINUATION WORD - hae adjustment, measured in 3.125 FT.
     */
    c5haeadj?: number;

    /**
     * CONTINUATION WORD - used with c3_lat to double precision to approx 4 ft.
     */
    c5latlsb?: number;

    /**
     * CONTINUATION WORD - used with c3_lon to double precision to approx 4 ft.
     */
    c5lonlsb?: number;

    /**
     * CONTINUATION WORD - target bearing.
     */
    c5tgtbrng?: number;

    /**
     * CONTINUATION WORD - time window.
     */
    c5tw?: number;

    /**
     * TARGETING CONTINUATION WORD - designator/seeker pulse code.
     */
    c6dspc?: string;

    /**
     * TARGETING CONTINUATION WORD - designator/seeker pulse code type.
     */
    c6dspct?: string;

    /**
     * TARGETING CONTINUATION WORD - first pulse/last pulse mode.
     */
    c6fplpm?: string;

    /**
     * TARGETING CONTINUATION WORD - index number, related, 0=NS.
     */
    c6intel?: number;

    /**
     * TARGETING CONTINUATION WORD - laser illuminator code.
     */
    c6laser?: number;

    /**
     * TARGETING CONTINUATION WORD - long pulse mode.
     */
    c6longpm?: string;

    /**
     * TARGETING CONTINUATION WORD - track number, related to 3.
     */
    c6tnr3?: number;

    /**
     * THIRD PARTY CONTINUATION WORD - elevation angle, 2.
     */
    c7elang2?: number;

    /**
     * THIRD PARTY CONTINUATION WORD - index number, third party.
     */
    c7in3p?: number;

    /**
     * THIRD PARTY CONTINUATION WORD - track number, index originator.
     */
    c7tnor?: string;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Environment.
     */
    env?: string;

    /**
     * Index number.
     */
    index?: number;

    /**
     * WGS84 latitude, in degrees. -90 to 90 degrees (negative values south of
     * equator).
     */
    lat?: number;

    /**
     * WGS84 longitude, in degrees. -180 to 180 degrees (negative values west of Prime
     * Meridian).
     */
    lon?: number;

    /**
     * Origin of index number.
     */
    orginx?: string;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * Receipt/Compliance, values from TABLE B-9.
     */
    rc?: string;

    /**
     * Recurrence rate, receipt/compliance.
     */
    rr?: number;

    /**
     * Strength.
     */
    sz?: string;

    /**
     * Track number objective.
     */
    tno?: string;

    /**
     * The track ID that the status is referencing, addressee.
     */
    trkId?: string;

    /**
     * Threat warning environment.
     */
    twenv?: string;

    /**
     * Time the row was updated in the database, auto-populated by the system.
     */
    updatedAt?: string;

    /**
     * Application user who updated the row in the database, auto-populated by the
     * system.
     */
    updatedBy?: string;
  }
}

export interface HistoryAodrParams {
  /**
   * the timestamp of the mission data, in ISO 8601 UTC format.
   * (YYYY-MM-DDTHH:MM:SS.ssssssZ)
   */
  ts: string;

  /**
   * optional, fields for retrieval. When omitted, ALL fields are assumed. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
   * query fields that can be selected.
   */
  columns?: string;

  firstResult?: number;

  maxResults?: number;

  /**
   * optional, notification method for the created file link. When omitted, EMAIL is
   * assumed. Current valid values are: EMAIL, SMS.
   */
  notification?: string;

  /**
   * optional, field delimiter when the created file is not JSON. Must be a single
   * character chosen from this set: (',', ';', ':', '|'). When omitted, "," is used.
   * It is strongly encouraged that your field delimiter be a character unlikely to
   * occur within the data.
   */
  outputDelimiter?: string;

  /**
   * optional, output format for the file. When omitted, JSON is assumed. Current
   * valid values are: JSON and CSV.
   */
  outputFormat?: string;
}

export interface HistoryCountParams {
  /**
   * the timestamp of the mission data, in ISO 8601 UTC format.
   * (YYYY-MM-DDTHH:MM:SS.ssssssZ)
   */
  ts: string;

  firstResult?: number;

  maxResults?: number;
}

export interface HistoryQueryParams {
  /**
   * the timestamp of the mission data, in ISO 8601 UTC format.
   * (YYYY-MM-DDTHH:MM:SS.ssssssZ)
   */
  ts: string;

  /**
   * optional, fields for retrieval. When omitted, ALL fields are assumed. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
   * query fields that can be selected.
   */
  columns?: string;

  firstResult?: number;

  maxResults?: number;
}

export declare namespace History {
  export {
    type HistoryCountResponse as HistoryCountResponse,
    type HistoryQueryResponse as HistoryQueryResponse,
    type HistoryAodrParams as HistoryAodrParams,
    type HistoryCountParams as HistoryCountParams,
    type HistoryQueryParams as HistoryQueryParams,
  };
}
