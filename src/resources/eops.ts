// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../resource';
import * as Core from '../core';
import * as Shared from './shared';

export class Eops extends APIResource {
  /**
   * Service operation to get a single EOP record by its unique ID passed as a path
   * parameter.
   */
  retrieve(params: EopRetrieveParams, options?: Core.RequestOptions): Core.APIPromise<Shared.EopFull> {
    const { path_id, body_id } = params;
    return this._client.get(`/udl/eop/${path_id}`, options);
  }

  /**
   * Service operation to update a single EOP Record. A specific role is required to
   * perform this service operation. Please contact the UDL team for assistance.
   */
  update(params: EopUpdateParams, options?: Core.RequestOptions): Core.APIPromise<void> {
    const { path_id, body_id, body_id, ...body } = params;
    return this._client.put(`/udl/eop/${path_id}`, {
      body: { id: body_id, id: body_id, ...body },
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }

  /**
   * Service operation to dynamically query data and only return specified
   * columns/fields. Requested columns are specified by the 'columns' query parameter
   * and should be a comma separated list of valid fields for the specified data
   * type. classificationMarking is always returned. See the queryhelp operation
   * (/udl/<datatype>/queryhelp) for more details on valid/required query parameter
   * information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5
   * hours would return the satNo and period of elsets with an epoch greater than 5
   * hours ago.
   */
  list(params: EopListParams, options?: Core.RequestOptions): Core.APIPromise<EopListResponse> {
    const { columns, eopDate } = params;
    return this._client.get('/udl/eop/tuple', options);
  }

  /**
   * Service operation to delete an EOP Record specified by the passed ID path
   * parameter. Note, delete operations do not remove data from historical or
   * publish/subscribe stores. A specific role is required to perform this service
   * operation. Please contact the UDL team for assistance.
   */
  delete(params: EopDeleteParams, options?: Core.RequestOptions): Core.APIPromise<void> {
    const { path_id, body_id } = params;
    return this._client.delete(`/udl/eop/${path_id}`, {
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }
}

export type EopListResponse = Array<Shared.EopFull>;

export interface EopRetrieveParams {
  /**
   * Path param:
   */
  path_id: string;

  /**
   * Body param: The ID of the EOP to retrieve.
   */
  body_id: string;
}

export interface EopUpdateParams {
  /**
   * Path param:
   */
  path_id: string;

  /**
   * Body param: The ID of the EOP to update.
   */
  body_id: string;

  /**
   * Body param: Classification marking of the data in IC/CAPCO Portion-marked
   * format.
   */
  classificationMarking: string;

  /**
   * Body param: Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST
   * data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: string;

  /**
   * Body param: Effective date/time for the EOP values in ISO8601 UTC format. The
   * values could be current or predicted.
   */
  eopDate: string;

  /**
   * Body param: Source of the data.
   */
  source: string;

  /**
   * Body param: Unique identifier of the record, auto-generated by the system.
   */
  body_id?: string;

  /**
   * Body param: Time the row was created in the database, auto-populated by the
   * system.
   */
  createdAt?: string;

  /**
   * Body param: Application user who created the row in the database, auto-populated
   * by the system.
   */
  createdBy?: string;

  /**
   * Body param: The Bulletin A offset in obliquity dDe1980 with respect to the IAU
   * 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in
   * milliseconds of arc. Note: dEpsilon is not used when this record represents IAU
   * 2000 data.
   */
  dEpsilon?: number;

  /**
   * Body param: The Bulletin B offset in obliquity dDe1980 with respect to the IAU
   * 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in
   * milliseconds of arc. Note: dEpsilonB is not used when this record represents IAU
   * 2000 data.
   */
  dEpsilonB?: number;

  /**
   * Body param: The estimated uncertainty/error in the dEpsilon value in
   * milliseconds of arc.
   */
  dEpsilonUnc?: number;

  /**
   * Body param: The Bulletin A offset in longitude dDy1980 with respect to the IAU
   * 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in
   * milliseconds of arc. Note: dPSI is not used when this record represents IAU 2000
   * data.
   */
  dPSI?: number;

  /**
   * Body param: The Bulletin B offset in longitude dDy1980 with respect to the IAU
   * 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in
   * milliseconds of arc. Note: dPSIB is not used when this record represents IAU
   * 2000 data.
   */
  dPSIB?: number;

  /**
   * Body param: The estimated uncertainty/error in the dPSI value in milliseconds of
   * arc.
   */
  dPSIUnc?: number;

  /**
   * Body param: The Bulletin A celestial pole offset along x-axis with respect to
   * the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of
   * arc. Note: dX is not used when this record represents IAU 1980 data.
   */
  dX?: number;

  /**
   * Body param: The Bulletin B celestial pole offset along the X-axis with respect
   * to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of
   * arc. Note: dXB is not used when this record represents IAU 1980 data.
   */
  dXB?: number;

  /**
   * Body param: The estimated uncertainty/error in the Bulletin A dX value, in
   * milliseconds of arc.
   */
  dXUnc?: number;

  /**
   * Body param: The Bulletin A celestial pole offset along y-axis with respect to
   * the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of
   * arc. Note: dY is not used when this record represents IAU 1980 data.
   */
  dY?: number;

  /**
   * Body param: The Bulletin B celestial pole offset along the Y-axis with respect
   * to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of
   * arc. Note: dYB is not used when this record represents IAU 1980 data.
   */
  dYB?: number;

  /**
   * Body param: The estimated uncertainty/error in the Bulletin A dY value, in
   * milliseconds of arc.
   */
  dYUnc?: number;

  /**
   * Body param: Bulletin A length of day or LOD in milliseconds. Universal time
   * (UT1) is the time of the earth clock, which performs one revolution in about
   * 24h. It is practically proportional to the sidereal time. The excess revolution
   * time is called length of day (LOD).
   */
  lod?: number;

  /**
   * Body param: The estimated uncertainty/error in the lod value in seconds.
   */
  lodUnc?: number;

  /**
   * Body param: Flag indicating Issued (I), or Predicted (P) for this record's
   * nutation values (dPSI and dEpsilon).
   */
  nutationState?: string;

  /**
   * Body param: Originating system or organization which produced the data, if
   * different from the source. The origin may be different than the source if the
   * source was a mediating system which forwarded the data on behalf of the origin
   * system. If null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * Body param: The originating source network on which this record was created,
   * auto-populated by the system.
   */
  origNetwork?: string;

  /**
   * Body param: Flag indicating Issued (I), or Predicted (P) for this record's polar
   * motion values.
   */
  polarMotionState?: string;

  /**
   * Body param: The Bulletin A X coordinate value of earth polar motion at eopDate.
   * Polar motion of the Earth is the motion of the Earth's rotational axis relative
   * to its crust. This is measured with respect to a reference frame in which the
   * solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference
   * frame). Measured in arc seconds.
   */
  polarMotionX?: number;

  /**
   * Body param: Bulletin B X coordinate value of earth polar motion at eopDate.
   * Polar motion of the Earth is the motion of the Earth's rotational axis relative
   * to its crust. This is measured with respect to a reference frame in which the
   * solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference
   * frame). Measured in arc seconds.
   */
  polarMotionXB?: number;

  /**
   * Body param: Estimated uncertainty/error in polarMotionX value in arc seconds.
   */
  polarMotionXUnc?: number;

  /**
   * Body param: The Bulletin A Y coordinate value of earth polar motion at eopDate.
   * Polar motion of the Earth is the motion of the Earth's rotational axis relative
   * to its crust. This is measured with respect to a reference frame in which the
   * solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference
   * frame). Measured in arc seconds.
   */
  polarMotionY?: number;

  /**
   * Body param: Bulletin B Y coordinate value of earth polar motion at eopDate.
   * Polar motion of the Earth is the motion of the Earth's rotational axis relative
   * to its crust. This is measured with respect to a reference frame in which the
   * solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference
   * frame). Measured in arc seconds.
   */
  polarMotionYB?: number;

  /**
   * Body param: Estimated uncertainty/error in polarMotionY value in arc seconds.
   */
  polarMotionYUnc?: number;

  /**
   * Body param: The IAU Theory of Precession and Theory of Nutation applied to the
   * data in this record. IAU1980 records employ the IAU 1976 Theory of Precession
   * and IAU 1980 Theory of Nutation, and IAU2000 records employ the IAU 2000A Theory
   * of Precession and Nutation.
   */
  precessionNutationStd?: string;

  /**
   * Body param: Optional URI location in the document repository of the raw file
   * parsed by the system to produce this record. To download the raw file, prepend
   * https://udl-hostname/scs/download?id= to this value.
   */
  rawFileURI?: string;

  /**
   * Body param: The difference between the Bulletin A UT1 and UTC time scales as of
   * eopDate in seconds.
   */
  ut1UTC?: number;

  /**
   * Body param: The Bulletin B difference between the UT1 and UTC time scales as of
   * eopDate in seconds.
   */
  ut1UTCB?: number;

  /**
   * Body param: Flag indicating Issued (I), or Predicted (P) for this record''s
   * Bulletin A UT1-UTC values.
   */
  ut1UTCState?: string;

  /**
   * Body param: The estimated uncertainty/error in the ut1UTC value in seconds.
   */
  ut1UTCUnc?: number;
}

export interface EopListParams {
  /**
   * Comma-separated list of valid field names for this data type to be returned in
   * the response. Only the fields specified will be returned as well as the
   * classification marking of the data, if applicable. See the �queryhelp� operation
   * for a complete list of possible fields.
   */
  columns: string;

  /**
   * Effective date/time for the EOP values in ISO8601 UTC format. The values could
   * be current or predicted. (YYYY-MM-DDTHH:MM:SS.sssZ)
   */
  eopDate: string;
}

export interface EopDeleteParams {
  /**
   * Path param:
   */
  path_id: string;

  /**
   * Body param: The ID of the EOP to delete.
   */
  body_id: string;
}

export declare namespace Eops {
  export {
    type EopListResponse as EopListResponse,
    type EopRetrieveParams as EopRetrieveParams,
    type EopUpdateParams as EopUpdateParams,
    type EopListParams as EopListParams,
    type EopDeleteParams as EopDeleteParams,
  };
}
