// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../core/resource';
import { APIPromise } from '../../core/api-promise';
import { OffsetPage, type OffsetPageParams, PagePromise } from '../../core/pagination';
import { buildHeaders } from '../../internal/headers';
import { RequestOptions } from '../../internal/request-options';

export class History extends APIResource {
  /**
   * Service operation to dynamically query historical data by a variety of query
   * parameters not specified in this API documentation. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   *
   * @example
   * ```ts
   * // Automatically fetches more pages as needed.
   * for await (const historyListResponse of client.hazard.history.list(
   *   { detectTime: '2019-12-27T18:11:19.117Z' },
   * )) {
   *   // ...
   * }
   * ```
   */
  list(
    query: HistoryListParams,
    options?: RequestOptions,
  ): PagePromise<HistoryListResponsesOffsetPage, HistoryListResponse> {
    return this._client.getAPIList('/udl/hazard/history', OffsetPage<HistoryListResponse>, {
      query,
      ...options,
    });
  }

  /**
   * Service operation to dynamically query historical data by a variety of query
   * parameters not specified in this API documentation, then write that data to the
   * Secure Content Store. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   *
   * @example
   * ```ts
   * await client.hazard.history.aodr({
   *   detectTime: '2019-12-27T18:11:19.117Z',
   * });
   * ```
   */
  aodr(query: HistoryAodrParams, options?: RequestOptions): APIPromise<void> {
    return this._client.get('/udl/hazard/history/aodr', {
      query,
      ...options,
      headers: buildHeaders([{ Accept: '*/*' }, options?.headers]),
    });
  }

  /**
   * Service operation to return the count of records satisfying the specified query
   * parameters. This operation is useful to determine how many records pass a
   * particular query criteria without retrieving large amounts of data. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
   * valid/required query parameter information.
   *
   * @example
   * ```ts
   * const response = await client.hazard.history.count({
   *   detectTime: '2019-12-27T18:11:19.117Z',
   * });
   * ```
   */
  count(query: HistoryCountParams, options?: RequestOptions): APIPromise<string> {
    return this._client.get('/udl/hazard/history/count', {
      query,
      ...options,
      headers: buildHeaders([{ Accept: 'text/plain' }, options?.headers]),
    });
  }
}

export type HistoryListResponsesOffsetPage = OffsetPage<HistoryListResponse>;

/**
 * Hazard contains information concerning the exposure of a geographic area to a
 * Chemical, Biological, Radiological, or Nuclear (CBRN) contaminant. The Hazard
 * schema includes the detection time and type of contamination as well as optional
 * information regarding specific material properties, the extent of contamination,
 * and identification of affected regions.
 */
export interface HistoryListResponse {
  /**
   * Array of the specific alarms associated with this detection. The alarms and
   * alarmValues arrays must contain the same number of elements.
   */
  alarms: Array<string>;

  /**
   * Array of the values that correspond to each of the alarms contained in alarms.
   * The alarms and alarmValues arrays must contain the same number of elements.
   */
  alarmValues: Array<number>;

  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * The detect time, in ISO 8601 UTC format, with millisecond precision.
   */
  detectTime: string;

  /**
   * The type of hazard (Chemical, Biological, Radiological, Nuclear) detect
   * associated with this record.
   */
  detectType: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * The (rounded) Mass Number of the material associated with this detection. The
   * rounded value is the mass number of the most abundant isotope of the element.
   */
  a?: number;

  /**
   * The radioactivity measurement of the material associated with this detection, in
   * becquerels (Bq). One becquerel (Bq) is equal to one nuclear decay per second.
   */
  activity?: number;

  /**
   * The specific bottle ID associated with this detection.
   */
  bottleId?: string;

  /**
   * The CAS Registry Number, also referred to as CAS Number or CAS RN, associated
   * with the this detection. The CAS Number is a unique numerical identifier
   * assigned by the Chemical Abstracts Service (CAS), to every chemical substance
   * described in the open scientific literature. It includes organic and inorganic
   * compounds, minerals, isotopes, alloys, mixtures, and nonstructurable materials
   * (UVCBs, substances of unknown or variable composition, complex reaction
   * products, or biological origin). For further information, reference
   * https://www.cas.org/cas-data/cas-registry.
   */
  casRN?: string;

  /**
   * The applicable channel involved in this biological material detection (e.g.
   * Digestive, Eyes, Respiratory, Skin, etc.) .
   */
  channel?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * The concentration time, in (kg/sec)/m^3, associated with this material
   * detection.
   */
  ctrnTime?: number;

  /**
   * Measure of density of the material associated with this detection, in kg/m^3.
   */
  density?: number;

  /**
   * The deposition measurement of the contaminant to surface area, in kg/m^2.
   */
  dep?: number;

  /**
   * The deposition concentration of the contaminant to surface area, in
   * becquerels/m^2.
   */
  depCtrn?: number;

  /**
   * The dose associated with this detection, in gray. Dose is the measure of the
   * energy deposited in matter by ionizing radiation per unit mass. One gray is
   * defined as one Joule of energy absorbed per kilogram of matter.
   */
  dose?: number;

  /**
   * The dose rate associated with this detection, in gray/sec. One gray is defined
   * as one Joule of energy absorbed per kilogram of matter.
   */
  doseRate?: number;

  /**
   * The known or projected hazard duration, in seconds, associated with this
   * material detection.
   */
  duration?: number;

  /**
   * Chemical Agent Monitor (CAM) G-type agent measurement, in number of display
   * bars. In G-mode, CAMs monitor for G-series nerve agents.
   */
  gBar?: number;

  /**
   * Flag indicating whether this detection is harmful to humans.
   */
  harmful?: boolean;

  /**
   * Chemical Agent Monitor (CAM) H-type agent measurement, in number of display
   * bars. In H-mode, CAMs monitor for blister agents.
   */
  hBar?: number;

  /**
   * ID of the Point of Interest (POI) record related to this hazard record.
   */
  idPOI?: string;

  /**
   * ID of the Track record related to this hazard record.
   */
  idTrack?: string;

  /**
   * Ratio of the chemical substance mass to the total mass of the mixture.
   */
  massFrac?: number;

  /**
   * The Radiological Category (1 - 5) which applies to the material associated with
   * this detection, according to the following definitions:
   *
   * Category 1: If not safely or securely managed, would be likely to cause
   * permanent injury to a person who handled them or was otherwise in contact with
   * them for more than a few minutes. It would probably be fatal to be close to this
   * amount of unshielded material for a period of a few minutes to an hour.
   *
   * Category 2: If not safely or securely managed, could cause permanent injury to a
   * person who handled them or was otherwise in contact with them for a short time
   * (minutes to hours). It could possibly be fatal to be close to this amount of
   * unshielded radioactive material for a period of hours to days.
   *
   * Category 3: If not safely or securely managed, could cause permanent injury to a
   * person who handled them or was otherwise in contact with them for hours. It
   * could possibly - although it is unlikely to be - fatal to be close to this
   * amount of unshielded radioactive material for a period of days to weeks.
   *
   * Category 4: If not safely managed or securely protected, could possibly cause
   * temporary injury to someone who handled them or was otherwise in contact with or
   * close to them for a period of many weeks, though this is unlikely. It is very
   * unlikely anyone would be permanently injured by this amount of radioactive
   * material.
   *
   * Category 5: Cannot cause permanent injury. This category applies to x-ray
   * fluorescence devices and electron capture devices.
   */
  matCat?: number;

  /**
   * The specific Material Class for the material associated with this detect. The
   * material class is generally associated with chemical and biological detections.
   */
  matClass?: string;

  /**
   * The material common name associated with this detection.
   */
  matName?: string;

  /**
   * The specific material type (MT) or MT Code involved in this detection, when
   * applicable. The material type is generally associated with radiological and/or
   * nuclear detections. For further information, reference Nuclear Materials
   * Management and Safeguards System (NMMSS) Users Guide Rev. 2.1.
   */
  matType?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Measure of the concentration of the material associated with this detection, in
   * parts per million (units of contaminant mass per million parts of total mass).
   */
  ppm?: number;

  /**
   * Measure of radioactive concentration of the material associated with this
   * detection, in becquerels/m^3. One becquerel (Bq) is equal to one nuclear decay
   * per second.
   */
  radCtrn?: number;

  /**
   * Array of the specific readings associated with this detection. The readings,
   * readingUnits, and readingValues arrays must contain the same number of elements.
   */
  readings?: Array<string>;

  /**
   * Array of the units that correspond to each of the readingValues. The readings,
   * readingUnits, and readingValues arrays must contain the same number of elements.
   */
  readingUnits?: Array<string>;

  /**
   * Array of the values that correspond to each of the readings contained in
   * readings. The readings, readingUnits, and readingValues arrays must contain the
   * same number of elements.
   */
  readingValues?: Array<number>;

  /**
   * The Atomic Number of the material associated with this detection.
   */
  z?: number;
}

export type HistoryCountResponse = string;

export interface HistoryListParams extends OffsetPageParams {
  /**
   * The detect time, in ISO 8601 UTC format, with millisecond precision.
   * (YYYY-MM-DDTHH:MM:SS.sssZ)
   */
  detectTime: string;

  /**
   * optional, fields for retrieval. When omitted, ALL fields are assumed. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
   * query fields that can be selected.
   */
  columns?: string;
}

export interface HistoryAodrParams {
  /**
   * The detect time, in ISO 8601 UTC format, with millisecond precision.
   * (YYYY-MM-DDTHH:MM:SS.sssZ)
   */
  detectTime: string;

  /**
   * optional, fields for retrieval. When omitted, ALL fields are assumed. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
   * query fields that can be selected.
   */
  columns?: string;

  firstResult?: number;

  maxResults?: number;

  /**
   * optional, notification method for the created file link. When omitted, EMAIL is
   * assumed. Current valid values are: EMAIL, SMS.
   */
  notification?: string;

  /**
   * optional, field delimiter when the created file is not JSON. Must be a single
   * character chosen from this set: (',', ';', ':', '|'). When omitted, "," is used.
   * It is strongly encouraged that your field delimiter be a character unlikely to
   * occur within the data.
   */
  outputDelimiter?: string;

  /**
   * optional, output format for the file. When omitted, JSON is assumed. Current
   * valid values are: JSON and CSV.
   */
  outputFormat?: string;
}

export interface HistoryCountParams {
  /**
   * The detect time, in ISO 8601 UTC format, with millisecond precision.
   * (YYYY-MM-DDTHH:MM:SS.sssZ)
   */
  detectTime: string;

  firstResult?: number;

  maxResults?: number;
}

export declare namespace History {
  export {
    type HistoryListResponse as HistoryListResponse,
    type HistoryCountResponse as HistoryCountResponse,
    type HistoryListResponsesOffsetPage as HistoryListResponsesOffsetPage,
    type HistoryListParams as HistoryListParams,
    type HistoryAodrParams as HistoryAodrParams,
    type HistoryCountParams as HistoryCountParams,
  };
}
