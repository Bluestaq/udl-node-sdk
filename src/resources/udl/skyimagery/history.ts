// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../../core/resource';
import * as Shared from '../../shared';
import * as HistoryAPI from '../../eo-observations/history';
import { OffsetPage } from '../../../core/pagination';

export class History extends APIResource {}

export type SkyimageryFullsOffsetPage = OffsetPage<SkyimageryFull>;

/**
 * Model representation of sky imagery data. Sky imagery is ground or space based
 * telescope imagery of RSO's and includes metadata on the image (time, source,
 * etc) as well as binary image content (e.g. FITS, EOSSA, EOCHIP, MP4). Binary
 * content must be downloaded individually by ID using the 'getFile' operation.
 */
export interface SkyimageryFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Start time of the exposure, in ISO 8601 UTC format with microsecond precision.
   */
  expStartTime: string;

  /**
   * The type of image associated with this record (e.g. FITS, EOSSA, EOCHIP, MP4).
   */
  imageType: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Reference to an annotation document associated with this image.
   */
  annotationKey?: string;

  /**
   * Reference to a calibration document associated with this image.
   */
  calibrationKey?: string;

  /**
   * MD5 value of the file. The ingest/create operation will automatically generate
   * the value.
   */
  checksumValue?: string;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Optional name/description associated with this image.
   */
  description?: string;

  /**
   * Collection of linked EOObservations.
   */
  eoObservations?: Array<HistoryAPI.EoObservationFull>;

  /**
   * End time of the exposure, in ISO 8601 UTC format with microsecond precision.
   */
  expEndTime?: string;

  /**
   * Name of the uploaded image file.
   */
  filename?: string;

  /**
   * Size of the image file, in bytes.
   */
  filesize?: number;

  /**
   * Field Of View frame height, in degrees.
   */
  frameFOVHeight?: number;

  /**
   * Field Of View frame width, in degrees.
   */
  frameFOVWidth?: number;

  /**
   * Frame height of the image, in number of pixels.
   */
  frameHeightPixels?: number;

  /**
   * Frame width of the image, in number of pixels.
   */
  frameWidthPixels?: number;

  /**
   * Optional identifier of the AttitudeSet data record describing the orientation of
   * an object body.
   */
  idAttitudeSet?: string;

  /**
   * Optional identifier of the target on-orbit object, if correlated.
   */
  idOnOrbit?: string;

  /**
   * Unique identifier of the reporting sensor.
   */
  idSensor?: string;

  /**
   * Optional unique identifier of the SOI Observation Set associated with this
   * image.
   */
  idSOISet?: string;

  /**
   * The user-defined set ID of a sequence of images.
   */
  imageSetId?: string;

  /**
   * The number of images in an image set.
   */
  imageSetLength?: number;

  /**
   * String that uniquely identifies the data source.
   */
  imageSourceInfo?: string;

  /**
   * Model object representing on-orbit objects or satellites in the system.
   */
  onOrbit?: Shared.OnorbitFull;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Optional identifier provided by the imaging source to indicate the target
   * onorbit object of this image. This may be an internal identifier and not
   * necessarily a valid satellite number.
   */
  origObjectId?: string;

  /**
   * Optional identifier provided by the imaging source to indicate the sensor
   * identifier which produced this image. This may be an internal identifier and not
   * necessarily a valid sensor ID.
   */
  origSensorId?: string;

  /**
   * Bit depth of the image, in number of pixels.
   */
  pixelBitDepth?: number;

  /**
   * Field Of View pixel height, in degrees.
   */
  pixelFOVHeight?: number;

  /**
   * Field Of View pixel width, in degrees.
   */
  pixelFOVWidth?: number;

  /**
   * Catalog number of the target on-orbit object.
   */
  satNo?: number;

  /**
   * Sensor altitude at exposure start epoch, in km. If null, can be obtained from
   * sensor info.
   */
  senalt?: number;

  /**
   * Sensor latitude at exposure start epoch, in degrees. If null, can be obtained
   * from sensor info. -90 to 90 degrees (negative values south of equator).
   */
  senlat?: number;

  /**
   * Sensor longitude at exposure start epoch, in degrees. If null, can be obtained
   * from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
   */
  senlon?: number;

  /**
   * The quaternion describing the rotation of the body-fixed frame used for this
   * system into the local geodetic frame, at exposure start epoch (expStartTime).
   * The array element order convention is scalar component first, followed by the
   * three vector components. For a vector u in the body-fixed frame, the
   * corresponding vector u' in the geodetic frame should satisfy u' = quq\*, where q
   * is this quaternion.
   */
  senQuat?: Array<number>;

  /**
   * The derivative of the quaternion describing the rotation of the body-fixed frame
   * used for this system into the local geodetic frame, exposure start epoch
   * (expStartTime). The array element order convention is scalar component first,
   * followed by the three vector components. For a vector u in the body-fixed frame,
   * the corresponding vector u' in the geodetic frame should satisfy u' = quq\*,
   * where q is this quaternion.
   */
  senQuatDot?: Array<number>;

  /**
   * Sensor x position at exposure start epoch, in km (if mobile/onorbit) in J2000
   * coordinate frame.
   */
  senx?: number;

  /**
   * Sensor y position at exposure start epoch, in km (if mobile/onorbit) in J2000
   * coordinate frame.
   */
  seny?: number;

  /**
   * Sensor z position at exposure start epoch, in km (if mobile/onorbit) in J2000
   * coordinate frame.
   */
  senz?: number;

  /**
   * The sequence ID of an image within an image set.
   */
  sequenceId?: number;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * Optional array of provider/source specific tags for this data, where each
   * element is no longer than 32 characters, used for implementing data owner
   * conditional access controls to restrict access to the data. Should be left null
   * by data providers unless conditional access controls are coordinated with the
   * UDL team.
   */
  tags?: Array<string>;

  /**
   * The telescope pointing azimuth, in degrees, at the exposure start epoch.
   */
  topLeftStartAz?: number;

  /**
   * The telescope pointing elevation, in degrees, at the exposure start epoch.
   */
  topLeftStartEl?: number;

  /**
   * The telescope pointing azimuth, in degrees, at the exposure stop epoch.
   */
  topLeftStopAz?: number;

  /**
   * The telescope pointing elevation, in degrees, at the exposure stop epoch.
   */
  topLeftStopEl?: number;

  /**
   * Optional identifier to track a commercial or marketplace transaction executed to
   * produce this data.
   */
  transactionId?: string;
}

export declare namespace History {
  export { type SkyimageryFull as SkyimageryFull };
}
