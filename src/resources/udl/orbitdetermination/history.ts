// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../../core/resource';
import * as Shared from '../../shared';
import { OffsetPage } from '../../../core/pagination';

export class History extends APIResource {}

export type OrbitdeterminationFullsOffsetPage = OffsetPage<OrbitdeterminationFull>;

/**
 * Model representation of orbit determination algorithm results describing General
 * Perturbations or Special Perturbations orbital updates.
 */
export interface OrbitdeterminationFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * End time for OD solution in ISO 8601 UTC datetime format, with microsecond
   * precision.
   */
  endTime: string;

  /**
   * Flag indicating whether this is an initial orbit determination.
   */
  initialOD: boolean;

  /**
   * Orbit determination method used to produce this record (e.g. BLS, KF, UKF,
   * etc.).
   */
  method: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Start time for OD solution in ISO 8601 UTC datetime format, with microsecond
   * precision.
   */
  startTime: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Array of UDL data (observation) UUIDs that were accepted in this OD solution.
   * See the associated acceptedObTyps array for the specific types of observations
   * for the positionally corresponding UUIDs in this array (the two arrays must
   * match in size).
   */
  acceptedObIds?: Array<string>;

  /**
   * Array of UDL observation types (e.g. DOA, EO, RADAR, RF) of the observations
   * that were accepted in this OD solution. See the associated acceptedObIds array
   * for the records UUID(s), positionally corresponding to the record types in this
   * array. The acceptedObTyps and acceptedObIds arrays must match in size.
   */
  acceptedObTyps?: Array<string>;

  /**
   * Flag indicating whether the AGOM was estimated during this OD solution.
   */
  agomEst?: boolean;

  /**
   * Model used to estimate the AGOM.
   */
  agomModel?: string;

  /**
   * An element set is a collection of Keplerian orbital elements describing an orbit
   * of a particular satellite. The data is used along with an orbit propagator in
   * order to predict the motion of a satellite. The element set, or elset for short,
   * consists of identification data, the classical elements and drag parameters.
   */
  aprioriElset?: OrbitdeterminationFull.AprioriElset;

  /**
   * Identifier of the element set used to seed this OD solution. This ID can be used
   * to obtain additional information on an Elset object using the 'get by ID'
   * operation (e.g. /udl/elset/{id}). For example, the Elset with idElset = abc
   * would be queried as /udl/elset/abc.
   */
  aprioriIdElset?: string;

  /**
   * Identifier of the state vector used to seed this OD solution. This ID can be
   * used to obtain additional information on a StateVector object using the 'get by
   * ID' operation (e.g. /udl/statevector/{id}). For example, the StateVector with
   * idStateVector = abc would be queried as /udl/statevector/abc.
   */
  aprioriIdStateVector?: string;

  /**
   * This service provides operations for querying and manipulation of state vectors
   * for OnOrbit objects. State vectors are cartesian vectors of position (r) and
   * velocity (v) that, together with their time (epoch) (t), uniquely determine the
   * trajectory of the orbiting body in space. J2000 is the preferred coordinate
   * frame for all state vector positions/velocities in UDL, but in some cases data
   * may be in another frame depending on the provider and/or datatype. Please see
   * the 'Discover' tab in the storefront to confirm coordinate frames by data
   * provider.
   */
  aprioriStateVector?: OrbitdeterminationFull.AprioriStateVector;

  /**
   * Flag indicating whether the ballistic coefficient was estimated during this OD
   * solution.
   */
  ballisticCoeffEst?: boolean;

  /**
   * Model used to estimate the ballistic coefficient.
   */
  ballisticCoeffModel?: string;

  /**
   * Lowest Weighted Root Mean Squared (RMS) value achieved for any single satellite
   * pass during the observation span, indicating the pass with the highest quality
   * OD solution.
   */
  bestPassWrms?: number;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Model parameter value for energy dissipation rate (EDR) in watts per kilogram.
   */
  edr?: number;

  /**
   * Optional start time at which this OD solution is accurate, in ISO 8601 UTC
   * datetime format with microsecond precision.
   */
  effectiveFrom?: string;

  /**
   * Optional end time at which this OD solution may no longer be accurate, in ISO
   * 8601 UTC datetime format with microsecond precision.
   */
  effectiveUntil?: string;

  /**
   * Error growth rate of the OD solution in kilometers per day.
   */
  errorGrowthRate?: number;

  /**
   * The Weighted Root Mean Squared (RMS) calculated for the first satellite pass in
   * the observation span. Serves as the initial quality metric for the beginning of
   * the observation period.
   */
  firstPassWrms?: number;

  /**
   * The fit span, in days, used in a Batch Least Squares (BLS) OD.
   */
  fitSpan?: number;

  /**
   * Unique identifier of the target satellite on-orbit object. This ID can be used
   * to obtain additional information on an OnOrbit object using the 'get by ID'
   * operation (e.g. /udl/onorbit/{id}). For example, the OnOrbit with idOnOrbit =
   * 25544 would be queried as /udl/onorbit/25544.
   */
  idOnOrbit?: string;

  /**
   * The end of the time interval containing the time of the last accepted
   * observation, in ISO 8601 UTC datetime format with microsecond precision. For an
   * exact observation time, the lastObStart and lastObEnd are the same.
   */
  lastObEnd?: string;

  /**
   * The start of the time interval containing the time of the last accepted
   * observation, in ISO 8601 UTC datetime format with microsecond precision. For an
   * exact observation time, the lastObStart and lastObEnd are the same.
   */
  lastObStart?: string;

  /**
   * Source of orbit determination method used to produce this record (e.g. ASW,
   * ACTRAC, FreeFlyer, GEODYNE, GDTS, etc.).
   */
  methodSource?: string;

  /**
   * The number of iterations taken for the algorithm to converge on an OD solution.
   */
  numIterations?: number;

  /**
   * Model object representing on-orbit objects or satellites in the system.
   */
  onOrbit?: Shared.OnorbitFull;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Optional identifier provided by the OD source to indicate the target on-orbit
   * object of this OD solution. This may be an internal identifier and not
   * necessarily map to a valid satellite number.
   */
  origObjectId?: string;

  /**
   * The Weighted Root Mean Squared (RMS) of the differential correction from the
   * previous overhead pass of the satellite. Provides a point of comparison for
   * assessing changes in the quality of the OD solution between consecutive passes.
   */
  previousWrms?: number;

  /**
   * Array of UDL data (observation) UUIDs that were rejected in this OD solution.
   * See the associated rejectedObTyps array for the specific types of observations
   * for the positionally corresponding UUIDs in this array (the two arrays must
   * match in size).
   */
  rejectedObIds?: Array<string>;

  /**
   * Array of UDL observation types (e.g. DOA, EO, RADAR, RF) of the observations
   * that were rejected in this OD solution. See the associated rejectedObIds array
   * for the records UUID(s), positionally corresponding to the record types in this
   * array. The rejectedObTyps and rejectedObIds arrays must match in size.
   */
  rejectedObTyps?: Array<string>;

  /**
   * OD parameter value for the Root Mean Square (RMS) convergence criteria to
   * successfully close the OD solution.
   */
  rmsConvergenceCriteria?: number;

  /**
   * Satellite/Catalog number of the target on-orbit object.
   */
  satNo?: number;

  /**
   * Array of UDL UUIDs (idSensor) of the sensors that contributed observations in
   * this OD solution.
   */
  sensorIds?: Array<string>;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * The time span used for the OD of the object, in days.
   */
  timeSpan?: number;

  /**
   * The Weighted Root Mean Squared (RMS) of the differential correction of the
   * target object that produced this OD state. WRMS is a quality indicator of the OD
   * update, with a value of 1.00 being optimal. WRMS applies to batch least squares
   * (BLS) processes.
   */
  wrms?: number;
}

export namespace OrbitdeterminationFull {
  /**
   * An element set is a collection of Keplerian orbital elements describing an orbit
   * of a particular satellite. The data is used along with an orbit propagator in
   * order to predict the motion of a satellite. The element set, or elset for short,
   * consists of identification data, the classical elements and drag parameters.
   */
  export interface AprioriElset {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * Elset epoch time in ISO 8601 UTC format, with microsecond precision.
     */
    epoch: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * AGOM, expressed in m^2/kg, is the value of the (averaged) object Area times the
     * solar radiation pressure coefficient(Gamma) over the object Mass. Applicable
     * only with ephemType4.
     */
    agom?: number;

    /**
     * Optional algorithm used to produce this record.
     */
    algorithm?: string;

    /**
     * The orbit point furthest from the center of the earth in kilometers. If not
     * provided, apogee will be computed from the TLE according to the following. Using
     * mu, the standard gravitational parameter for the earth (398600.4418), semi-major
     * axis A = (mu/(n _ 2 _ pi/(24*3600))^2)(1/3). Using semi-major axis A,
     * eccentricity E, apogee = (A * (1 + E)) in km. Note that the calculations are for
     * computing the apogee radius from the center of the earth, to compute apogee
     * altitude the radius of the earth should be subtracted (6378.135 km).
     */
    apogee?: number;

    /**
     * The argument of perigee is the angle in degrees formed between the perigee and
     * the ascending node. If the perigee would occur at the ascending node, the
     * argument of perigee would be 0.
     */
    argOfPerigee?: number;

    /**
     * Ballistic coefficient, in m^2/kg. Applicable only with ephemType4.
     */
    ballisticCoeff?: number;

    /**
     * The drag term for SGP4 orbital model, used for calculating decay constants for
     * altitude, eccentricity etc, measured in inverse earth radii.
     */
    bStar?: number;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Optional source-provided and searchable metadata or descriptor of the data.
     */
    descriptor?: string;

    /**
     * The orbital eccentricity of an astronomical object is a parameter that
     * determines the amount by which its orbit around another body deviates from a
     * perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an
     * elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a
     * hyperbolic escape orbit.
     */
    eccentricity?: number;

    /**
     * Read-only start time at which this elset was the 'current' elset for its
     * satellite. This field and is set by the system automatically and ignored on
     * create/edit operations.
     */
    effectiveFrom?: string;

    /**
     * Read-only end time at which this elset was no longer the 'current' elset for its
     * satellite. This field and is set by the system automatically and ignored on
     * create/edit operations.
     */
    effectiveUntil?: string;

    /**
     * The ephemeris type associated with this TLE:
     *
     * 0:&nbsp;SGP (or SGP4 with Kozai mean motion)
     *
     * 1:&nbsp;SGP (Kozai mean motion)
     *
     * 2:&nbsp;SGP4 (Brouver mean motion)
     *
     * 3:&nbsp;SDP4
     *
     * 4:&nbsp;SGP4-XP
     *
     * 5:&nbsp;SDP8
     *
     * 6:&nbsp;SP (osculating mean motion)
     */
    ephemType?: number;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    idElset?: string;

    /**
     * Unique identifier of the satellite on-orbit object, if correlated. For the
     * public catalog, the idOnOrbit is typically the satellite number as a string, but
     * may be a UUID for analyst or other unknown or untracked satellites.
     */
    idOnOrbit?: string;

    /**
     * Unique identifier of the OD solution record that produced this elset. This ID
     * can be used to obtain additional information on an OrbitDetermination object
     * using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For
     * example, the OrbitDetermination with idOrbitDetermination = abc would be queried
     * as /udl/orbitdetermination/abc.
     */
    idOrbitDetermination?: string;

    /**
     * The angle between the equator and the orbit when looking from the center of the
     * Earth. If the orbit went exactly around the equator from left to right, then the
     * inclination would be 0. The inclination ranges from 0 to 180 degrees.
     */
    inclination?: number;

    /**
     * Read only derived/generated line1 of a legacy TLE (two line element set) format,
     * ignored on create/edit operations.
     */
    line1?: string;

    /**
     * Read only derived/generated line2 of a legacy TLE (two line element set) format,
     * ignored on create/edit operations.
     */
    line2?: string;

    /**
     * Where the satellite is in its orbital path. The mean anomaly ranges from 0 to
     * 360 degrees. The mean anomaly is referenced to the perigee. If the satellite
     * were at the perigee, the mean anomaly would be 0.
     */
    meanAnomaly?: number;

    /**
     * Mean motion is the angular speed required for a body to complete one orbit,
     * assuming constant speed in a circular orbit which completes in the same time as
     * the variable speed, elliptical orbit of the actual body. Measured in revolutions
     * per day.
     */
    meanMotion?: number;

    /**
     * 2nd derivative of the mean motion with respect to time. Units are revolutions
     * per day cubed.
     */
    meanMotionDDot?: number;

    /**
     * 1st derivative of the mean motion with respect to time. Units are revolutions
     * per day squared.
     */
    meanMotionDot?: number;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * Optional identifier provided by elset source to indicate the target onorbit
     * object of this elset. This may be an internal identifier and not necessarily map
     * to a valid satellite number.
     */
    origObjectId?: string;

    /**
     * The orbit point nearest to the center of the earth in kilometers. If not
     * provided, perigee will be computed from the TLE according to the following.
     * Using mu, the standard gravitational parameter for the earth (398600.4418),
     * semi-major axis A = (mu/(n _ 2 _ pi/(24*3600))^2)(1/3). Using semi-major axis A,
     * eccentricity E, perigee = (A * (1 - E)) in km. Note that the calculations are
     * for computing the perigee radius from the center of the earth, to compute
     * perigee altitude the radius of the earth should be subtracted (6378.135 km).
     */
    perigee?: number;

    /**
     * Period of the orbit equal to inverse of mean motion, in minutes.
     */
    period?: number;

    /**
     * Right ascension of the ascending node, or RAAN is the angle as measured in
     * degrees eastwards (or, as seen from the north, counterclockwise) from the First
     * Point of Aries to the ascending node, which is where the orbit crosses the
     * equator when traveling north.
     */
    raan?: number;

    /**
     * Optional URI location in the document repository of the raw file parsed by the
     * system to produce this record. To download the raw file, prepend
     * https://udl-hostname/scs/download?id= to this value.
     */
    rawFileURI?: string;

    /**
     * The current revolution number. The value is incremented when a satellite crosses
     * the equator on an ascending pass.
     */
    revNo?: number;

    /**
     * Satellite/catalog number of the target on-orbit object.
     */
    satNo?: number;

    /**
     * The sum of the periapsis and apoapsis distances divided by two. For circular
     * orbits, the semimajor axis is the distance between the centers of the bodies,
     * not the distance of the bodies from the center of mass. Units are kilometers.
     */
    semiMajorAxis?: number;

    /**
     * Optional array of UDL data (observation) UUIDs used to build this element set.
     * See the associated sourcedDataTypes array for the specific types of observations
     * for the positionally corresponding UUIDs in this array (the two arrays must
     * match in size).
     */
    sourcedData?: Array<string>;

    /**
     * Optional array of UDL observation data types used to build this element set
     * (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific
     * UUIDs of observations for the positionally corresponding data types in this
     * array (the two arrays must match in size).
     */
    sourcedDataTypes?: Array<'EO' | 'RADAR' | 'RF' | 'DOA' | 'ELSET' | 'SV'>;

    /**
     * The source data library from which this record was received. This could be a
     * remote or tactical UDL or another data library. If null, the record should be
     * assumed to have originated from the primary Enterprise UDL.
     */
    sourceDL?: string;

    /**
     * Optional array of provider/source specific tags for this data, where each
     * element is no longer than 32 characters, used for implementing data owner
     * conditional access controls to restrict access to the data. Should be left null
     * by data providers unless conditional access controls are coordinated with the
     * UDL team.
     */
    tags?: Array<string>;

    /**
     * Optional identifier to track a commercial or marketplace transaction executed to
     * produce this data.
     */
    transactionId?: string;

    /**
     * Boolean indicating this Elset was unable to be correlated to a known object.
     * This flag should only be set to true by data providers after an attempt to
     * correlate to an on-orbit object was made and failed. If unable to correlate, the
     * 'origObjectId' field may be populated with an internal data provider specific
     * identifier.
     */
    uct?: boolean;
  }

  /**
   * This service provides operations for querying and manipulation of state vectors
   * for OnOrbit objects. State vectors are cartesian vectors of position (r) and
   * velocity (v) that, together with their time (epoch) (t), uniquely determine the
   * trajectory of the orbiting body in space. J2000 is the preferred coordinate
   * frame for all state vector positions/velocities in UDL, but in some cases data
   * may be in another frame depending on the provider and/or datatype. Please see
   * the 'Discover' tab in the storefront to confirm coordinate frames by data
   * provider.
   */
  export interface AprioriStateVector {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * Time of validity for state vector in ISO 8601 UTC datetime format, with
     * microsecond precision.
     */
    epoch: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * The actual time span used for the OD of the object, expressed in days.
     */
    actualODSpan?: number;

    /**
     * Optional algorithm used to produce this record.
     */
    algorithm?: string;

    /**
     * The reference frame of the alternate1 (Alt1) cartesian orbital state.
     */
    alt1ReferenceFrame?: string;

    /**
     * The reference frame of the alternate2 (Alt2) cartesian orbital state.
     */
    alt2ReferenceFrame?: string;

    /**
     * The actual area of the object at it's largest cross-section, expressed in
     * meters^2.
     */
    area?: number;

    /**
     * First derivative of drag/ballistic coefficient (m2/kg-s).
     */
    bDot?: number;

    /**
     * Model parameter value for center of mass offset (m).
     */
    cmOffset?: number;

    /**
     * Covariance matrix, in kilometer and second based units, in the specified
     * covReferenceFrame. If the covReferenceFrame is null it is assumed to be J2000.
     * The array values (1-21) represent the lower triangular half of the
     * position-velocity covariance matrix. The size of the covariance matrix is
     * dynamic, depending on whether the covariance for position only or position &
     * velocity. The covariance elements are position dependent within the array with
     * values ordered as follows:
     *
     * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR&nbsp;&nbsp;
     *
     * x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1
     *
     * y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;3
     *
     * z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;6
     *
     * x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;10
     *
     * y'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
     *
     * z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;
     *
     * The cov array should contain only the lower left triangle values from top left
     * down to bottom right, in order.
     *
     * If additional covariance terms are included for DRAG, SRP, and/or THRUST, the
     * matrix can be extended with the following order of elements:
     *
     * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR
     *
     * DRG&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;23&nbsp;&nbsp;24&nbsp;&nbsp;25&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;
     *
     * SRP&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;30&nbsp;&nbsp;31&nbsp;&nbsp;32&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;
     *
     * THR&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;38&nbsp;&nbsp;39&nbsp;&nbsp;40&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;44&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45&nbsp;
     */
    cov?: Array<number>;

    /**
     * The method used to generate the covariance during the orbit determination (OD)
     * that produced the state vector, or whether an arbitrary, non-calculated default
     * value was used (CALCULATED, DEFAULT).
     */
    covMethod?: string;

    /**
     * The reference frame of the covariance matrix elements. If the covReferenceFrame
     * is null it is assumed to be J2000.
     */
    covReferenceFrame?: 'J2000' | 'UVW';

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Optional source-provided and searchable metadata or descriptor of the data.
     */
    descriptor?: string;

    /**
     * The effective area of the object exposed to atmospheric drag, expressed in
     * meters^2.
     */
    dragArea?: number;

    /**
     * Area-to-mass ratio coefficient for atmospheric ballistic drag (m2/kg).
     */
    dragCoeff?: number;

    /**
     * The Drag Model used for this vector (e.g. HARRIS-PRIESTER, JAC70, JBH09, MSIS90,
     * NONE, etc.).
     */
    dragModel?: string;

    /**
     * Model parameter value for energy dissipation rate (EDR) (w/kg).
     */
    edr?: number;

    /**
     * Start time at which this state vector was the 'current' state vector for its
     * satellite.
     */
    effectiveFrom?: string;

    /**
     * End time at which this state vector was no longer the 'current' state vector for
     * its satellite.
     */
    effectiveUntil?: string;

    /**
     * The covariance matrix values represent the lower triangular half of the
     * covariance matrix in terms of equinoctial elements.&nbsp; The size of the
     * covariance matrix is dynamic.&nbsp; The values are outputted in order across
     * each row, i.e.:
     *
     * 1&nbsp;&nbsp; 2&nbsp;&nbsp; 3&nbsp;&nbsp; 4&nbsp;&nbsp; 5
     *
     * 6&nbsp;&nbsp; 7&nbsp;&nbsp; 8&nbsp;&nbsp; 9&nbsp; 10
     *
     * :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
     *
     * :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
     *
     * 51&nbsp; 52&nbsp; 53&nbsp; 54&nbsp; 55
     *
     * :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
     *
     * :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
     *
     * The ordering of values is as follows:
     *
     * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Af&nbsp;&nbsp;
     * Ag&nbsp;&nbsp; L&nbsp;&nbsp;&nbsp; N&nbsp;&nbsp; Chi&nbsp; Psi&nbsp;&nbsp;
     * B&nbsp;&nbsp; BDOT AGOM&nbsp; T&nbsp;&nbsp; C1&nbsp;&nbsp; C2&nbsp; ...
     *
     * Af&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1
     *
     * Ag&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp; 3
     *
     * L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
     * 4&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp; 6
     *
     * N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
     * 7&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp; 10
     *
     * Chi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11&nbsp;&nbsp; 12&nbsp;&nbsp;
     * 13&nbsp;&nbsp; 14&nbsp;&nbsp; 15
     *
     * Psi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 16&nbsp;&nbsp; 17&nbsp;&nbsp;
     * 18&nbsp;&nbsp; 19&nbsp;&nbsp; 20&nbsp;&nbsp; 21
     *
     * B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 22&nbsp;&nbsp;
     * 23&nbsp;&nbsp; 24 &nbsp;&nbsp;25&nbsp;&nbsp; 26&nbsp;&nbsp; 27&nbsp;&nbsp; 28
     *
     * BDOT&nbsp;&nbsp; 29&nbsp;&nbsp; 30&nbsp;&nbsp; 31&nbsp;&nbsp; 32&nbsp;&nbsp;
     * 33&nbsp;&nbsp; 34&nbsp;&nbsp; 35&nbsp;&nbsp; 36
     *
     * AGOM&nbsp; 37&nbsp;&nbsp; 38&nbsp;&nbsp; 39&nbsp;&nbsp; 40&nbsp;&nbsp;
     * 41&nbsp;&nbsp; 42&nbsp;&nbsp; 43&nbsp;&nbsp; 44&nbsp;&nbsp; 45
     *
     * T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 46&nbsp;&nbsp;
     * 47&nbsp;&nbsp; 48&nbsp;&nbsp; 49&nbsp;&nbsp; 50&nbsp;&nbsp; 51&nbsp;&nbsp;
     * 52&nbsp;&nbsp; 53&nbsp;&nbsp; 54&nbsp;&nbsp; 55
     *
     * C1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 56&nbsp;&nbsp; 57&nbsp;&nbsp;
     * 58&nbsp;&nbsp; 59&nbsp;&nbsp; 60&nbsp;&nbsp; 61&nbsp;&nbsp; 62&nbsp;&nbsp;
     * 63&nbsp;&nbsp; 64&nbsp;&nbsp; 65&nbsp;&nbsp; 66
     *
     * C2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 67&nbsp;&nbsp; 68&nbsp;&nbsp;
     * 69&nbsp;&nbsp; 70&nbsp;&nbsp; 71&nbsp; &nbsp;72&nbsp;&nbsp; 73&nbsp;&nbsp;
     * 74&nbsp;&nbsp; 75&nbsp;&nbsp; 76&nbsp;&nbsp; 77&nbsp;&nbsp; 78
     *
     * :
     *
     * :
     *
     * where C1, C2, etc, are the "consider parameters" that may be added to the
     * covariance matrix.&nbsp; The covariance matrix will be as large as the last
     * element/model parameter needed.&nbsp; In other words, if the DC solved for all 6
     * elements plus AGOM, the covariance matrix will be 9x9 (and the rows for B and
     * BDOT will be all zeros).&nbsp; If the covariance matrix is unavailable, the size
     * will be set to 0x0, and no data will follow.&nbsp; The cov field should contain
     * only the lower left triangle values from top left down to bottom right, in
     * order.
     */
    eqCov?: Array<number>;

    /**
     * Integrator error control.
     */
    errorControl?: number;

    /**
     * Boolean indicating use of fixed step size for this vector.
     */
    fixedStep?: boolean;

    /**
     * Geopotential model used for this vector (e.g. EGM-96, WGS-84, WGS-72, JGM-2, or
     * GEM-T3), including mm degree zonals, nn degree/order tesserals. E.g. EGM-96
     * 24Z,24T.
     */
    geopotentialModel?: string;

    /**
     * Number of terms used in the IAU 1980 nutation model (4, 50, or 106).
     */
    iau1980Terms?: number;

    /**
     * Unique identifier of the satellite on-orbit object, if correlated. For the
     * public catalog, the idOnOrbit is typically the satellite number as a string, but
     * may be a UUID for analyst or other unknown or untracked satellites.
     */
    idOnOrbit?: string;

    /**
     * Unique identifier of the OD solution record that produced this state vector.
     * This ID can be used to obtain additional information on an OrbitDetermination
     * object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For
     * example, the OrbitDetermination with idOrbitDetermination = abc would be queries
     * as /udl/orbitdetermination/abc.
     */
    idOrbitDetermination?: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    idStateVector?: string;

    /**
     * Integrator Mode.
     */
    integratorMode?: string;

    /**
     * Boolean indicating use of in-track thrust perturbations for this vector.
     */
    inTrackThrust?: boolean;

    /**
     * The end of the time interval containing the time of the last accepted
     * observation, in ISO 8601 UTC format with microsecond precision. For an exact
     * observation time, the firstObTime and lastObTime are the same.
     */
    lastObEnd?: string;

    /**
     * The start of the time interval containing the time of the last accepted
     * observation, in ISO 8601 UTC format with microsecond precision. For an exact
     * observation time, the firstObTime and lastObTime are the same.
     */
    lastObStart?: string;

    /**
     * Time of the next leap second after epoch in ISO 8601 UTC time. If the next leap
     * second is not known, the time of the previous leap second is used.
     */
    leapSecondTime?: string;

    /**
     * Boolean indicating use of lunar/solar perturbations for this vector.
     */
    lunarSolar?: boolean;

    /**
     * The mass of the object, in kilograms.
     */
    mass?: number;

    /**
     * The number of observations available for the OD of the object.
     */
    obsAvailable?: number;

    /**
     * The number of observations accepted for the OD of the object.
     */
    obsUsed?: number;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;

    /**
     * Optional identifier provided by state vector source to indicate the target
     * onorbit object of this state vector. This may be an internal identifier and not
     * necessarily map to a valid satellite number.
     */
    origObjectId?: string;

    /**
     * Type of partial derivatives used (ANALYTIC, FULL NUM, or FAST NUM).
     */
    partials?: string;

    /**
     * The pedigree of state vector, or methods used for its generation to include
     * state update/orbit determination, propagation from another state, or a state
     * from a calibration satellite (e.g. ORBIT_UPDATE, PROPAGATION, CALIBRATION,
     * CONJUNCTION, FLIGHT_PLAN).
     */
    pedigree?: string;

    /**
     * Polar Wander Motion X (arc seconds).
     */
    polarMotionX?: number;

    /**
     * Polar Wander Motion Y (arc seconds).
     */
    polarMotionY?: number;

    /**
     * One sigma position uncertainty, in kilometers.
     */
    posUnc?: number;

    /**
     * Optional URI location in the document repository of the raw file parsed by the
     * system to produce this record. To download the raw file, prepend
     * https://udl-hostname/scs/download?id= to this value.
     */
    rawFileURI?: string;

    /**
     * The recommended OD time span calculated for the object, expressed in days.
     */
    recODSpan?: number;

    /**
     * The reference frame of the cartesian orbital states. If the referenceFrame is
     * null it is assumed to be J2000.
     */
    referenceFrame?: 'J2000' | 'EFG/TDR' | 'ECR/ECEF' | 'TEME' | 'ITRF' | 'GCRF';

    /**
     * The percentage of residuals accepted in the OD of the object.
     */
    residualsAcc?: number;

    /**
     * Epoch revolution number.
     */
    revNo?: number;

    /**
     * The Weighted Root Mean Squared (RMS) of the differential correction on the
     * target object that produced this vector. WRMS is a quality indicator of the
     * state vector update, with a value of 1.00 being optimal. WRMS applies to Batch
     * Least Squares (BLS) processes.
     */
    rms?: number;

    /**
     * Satellite/Catalog number of the target OnOrbit object.
     */
    satNo?: number;

    /**
     * Array containing the standard deviation of error in target object position, U, V
     * and W direction respectively (km).
     */
    sigmaPosUVW?: Array<number>;

    /**
     * Array containing the standard deviation of error in target object velocity, U, V
     * and W direction respectively (km/sec).
     */
    sigmaVelUVW?: Array<number>;

    /**
     * Average solar flux geomagnetic index.
     */
    solarFluxAPAvg?: number;

    /**
     * F10 (10.7 cm) solar flux value.
     */
    solarFluxF10?: number;

    /**
     * F10 (10.7 cm) solar flux 81-day average value.
     */
    solarFluxF10Avg?: number;

    /**
     * Boolean indicating use of solar radiation pressure perturbations for this
     * vector.
     */
    solarRadPress?: boolean;

    /**
     * Area-to-mass ratio coefficient for solar radiation pressure.
     */
    solarRadPressCoeff?: number;

    /**
     * Boolean indicating use of solid earth tide perturbations for this vector.
     */
    solidEarthTides?: boolean;

    /**
     * Optional array of UDL data (observation) UUIDs used to build this state vector.
     * See the associated sourcedDataTypes array for the specific types of observations
     * for the positionally corresponding UUIDs in this array (the two arrays must
     * match in size).
     */
    sourcedData?: Array<string>;

    /**
     * Optional array of UDL observation data types used to build this state vector
     * (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific
     * UUIDs of observations for the positionally corresponding data types in this
     * array (the two arrays must match in size).
     */
    sourcedDataTypes?: Array<'EO' | 'RADAR' | 'RF' | 'DOA' | 'ELSET' | 'SV'>;

    /**
     * The source data library from which this record was received. This could be a
     * remote or tactical UDL or another data library. If null, the record should be
     * assumed to have originated from the primary Enterprise UDL.
     */
    sourceDL?: string;

    /**
     * The effective area of the object exposed to solar radiation pressure, expressed
     * in meters^2.
     */
    srpArea?: number;

    /**
     * Integrator step mode (AUTO, TIME, or S).
     */
    stepMode?: string;

    /**
     * Initial integration step size (seconds).
     */
    stepSize?: number;

    /**
     * Initial step size selection (AUTO or MANUAL).
     */
    stepSizeSelection?: string;

    /**
     * Optional array of provider/source specific tags for this data, where each
     * element is no longer than 32 characters, used for implementing data owner
     * conditional access controls to restrict access to the data. Should be left null
     * by data providers unless conditional access controls are coordinated with the
     * UDL team.
     */
    tags?: Array<string>;

    /**
     * TAI (Temps Atomique International) minus UTC (Universal Time Coordinates) offset
     * in seconds.
     */
    taiUtc?: number;

    /**
     * Model parameter value for thrust acceleration (m/s2).
     */
    thrustAccel?: number;

    /**
     * The number of sensor tracks available for the OD of the object.
     */
    tracksAvail?: number;

    /**
     * The number of sensor tracks accepted for the OD of the object.
     */
    tracksUsed?: number;

    /**
     * Optional identifier to track a commercial or marketplace transaction executed to
     * produce this data.
     */
    transactionId?: string;

    /**
     * Boolean indicating this state vector was unable to be correlated to a known
     * object. This flag should only be set to true by data providers after an attempt
     * to correlate to an OnOrbit object was made and failed. If unable to correlate,
     * the 'origObjectId' field may be populated with an internal data provider
     * specific identifier.
     */
    uct?: boolean;

    /**
     * Rate of change of UT1 (milliseconds/day) - first derivative of ut1Utc.
     */
    ut1Rate?: number;

    /**
     * Universal Time-1 (UT1) minus UTC offset, in seconds.
     */
    ut1Utc?: number;

    /**
     * One sigma velocity uncertainty, in kilometers/second.
     */
    velUnc?: number;

    /**
     * Cartesian X acceleration of target, in kilometers/second^2, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    xaccel?: number;

    /**
     * Cartesian X position of the target, in kilometers, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    xpos?: number;

    /**
     * Cartesian X position of the target, in kilometers, in the specified
     * alt1ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    xposAlt1?: number;

    /**
     * Cartesian X position of the target, in kilometers, in the specified
     * alt2ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    xposAlt2?: number;

    /**
     * Cartesian X velocity of target, in kilometers/second, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    xvel?: number;

    /**
     * Cartesian X velocity of the target, in kilometers/second, in the specified
     * alt1ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    xvelAlt1?: number;

    /**
     * Cartesian X velocity of the target, in kilometers/second, in the specified
     * alt2ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    xvelAlt2?: number;

    /**
     * Cartesian Y acceleration of target, in kilometers/second^2, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    yaccel?: number;

    /**
     * Cartesian Y position of the target, in kilometers, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    ypos?: number;

    /**
     * Cartesian Y position of the target, in kilometers, in the specified
     * alt1ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    yposAlt1?: number;

    /**
     * Cartesian Y position of the target, in kilometers, in the specified
     * alt2ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    yposAlt2?: number;

    /**
     * Cartesian Y velocity of target, in kilometers/second, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    yvel?: number;

    /**
     * Cartesian Y velocity of the target, in kilometers/second, in the specified
     * alt1ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    yvelAlt1?: number;

    /**
     * Cartesian Y velocity of the target, in kilometers/second, in the specified
     * alt2ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    yvelAlt2?: number;

    /**
     * Cartesian Z acceleration of target, in kilometers/second^2, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    zaccel?: number;

    /**
     * Cartesian Z position of the target, in kilometers, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    zpos?: number;

    /**
     * Cartesian Z position of the target, in kilometers, in the specified
     * alt1ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    zposAlt1?: number;

    /**
     * Cartesian Z position of the target, in kilometers, in the specified
     * alt2ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    zposAlt2?: number;

    /**
     * Cartesian Z velocity of target, in kilometers/second, in the specified
     * referenceFrame. If referenceFrame is null then J2K should be assumed.
     */
    zvel?: number;

    /**
     * Cartesian Z velocity of the target, in kilometers/second, in the specified
     * alt1ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    zvelAlt1?: number;

    /**
     * Cartesian Z velocity of the target, in kilometers/second, in the specified
     * alt2ReferenceFrame. Alternate reference frames are optional and are intended to
     * allow a data source to provide an equivalent vector in a different cartesian
     * frame than the primary vector.
     */
    zvelAlt2?: number;
  }
}

export declare namespace History {
  export { type OrbitdeterminationFull as OrbitdeterminationFull };
}
