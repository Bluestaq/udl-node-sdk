// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../../resource';
import * as Shared from '../../shared';

export class History extends APIResource {}

/**
 * A Plan is used to aggregate two or more of the same type of record to a parent
 * entity, with the planId (UUID) being included in all of the subordinate records,
 * enabling resolution back to the parent.
 */
export interface SensorplanFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * The type of records that comprise this parent set (COLLECT, CONTACT).
   */
  recType: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * The start time of the plan or schedule, in ISO 8601 UTC format.
   */
  startTime: string;

  /**
   * The type of this sensor plan/schedule (PLAN, REQUEST, SCHEDULE).
   */
  type: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * The list of collect requests belonging to the SensorPlan. Each collect request
   * is associated with a parent SensorPlan via the IdPlan. If provided, the list
   * must have the same size as reqTotal.
   */
  collectRequests?: Array<Shared.CollectRequestFull>;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * The customer for this plan or schedule.
   */
  customer?: string;

  /**
   * The end time of the plan or schedule, in ISO 8601 UTC format.
   */
  endTime?: string;

  /**
   * Unique identifier of the requested/schedule/planned sensor associated with this
   * request.
   */
  idSensor?: string;

  /**
   * Name associated with this plan or schedule.
   */
  name?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Optional identifier provided by the source to indicate the sensor identifier
   * requested/scheduled/planned for this request. This may be an internal identifier
   * and not necessarily a valid sensor ID.
   */
  origSensorId?: string;

  /**
   * The purpose/description of this plan or schedule.
   */
  purpose?: string;

  /**
   * The total number of requests contained in this plan or schedule. Value of this
   * field must match the size of collectRequest list if the list is provided and can
   * be null or any value otherwise.
   */
  reqTotal?: number;

  /**
   * The sensor or ground network associated with this plan or schedule.
   */
  senNetwork?: string;

  /**
   * The status of this plan or schedule (ACCEPTED, APPROVED, COMPLETED, PROPOSED,
   * REJECTED, REQUESTED, SCHEDULED).
   */
  status?: string;

  /**
   * Optional array of provider/source specific tags for this data, where each
   * element is no longer than 32 characters, used for implementing data owner
   * conditional access controls to restrict access to the data. Should be left null
   * by data providers unless conditional access controls are coordinated with the
   * UDL team.
   */
  tags?: Array<string>;

  /**
   * Time the row was updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

export declare namespace History {
  export { type SensorplanFull as SensorplanFull };
}
