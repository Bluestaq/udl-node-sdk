// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../../resource';
import * as Shared from '../../shared';
import * as ElsetsAPI from '../../elsets/elsets';
import * as StatevectorAPI from '../../statevector/statevector';

export class History extends APIResource {}

/**
 * Model representation of on-orbit object maneuver information for detected,
 * possible, and confirmed maneuvers.
 */
export interface ManeuverFull {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Maneuver event start time in ISO 8601 UTC with microsecond precision. For
   * maneuvers without start and end times, the start time is considered to be the
   * maneuver event time.
   */
  eventStartTime: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Optional algorithm used to produce this record.
   */
  algorithm?: string;

  /**
   * Optional purpose of the maneuver if known (e.g. North-South Station Keeping,
   * East-West Station Keeping, Longitude Shift, Unknown).
   */
  characterization?: string;

  /**
   * Uncertainty in the characterization or purpose assessment of this maneuver (0 -
   * 1).
   */
  characterizationUnc?: number;

  /**
   * Optional maneuver cross-track/radial/in-track covariance array, in meter and
   * second based units, in the following order: CR_R, CI_R, CI_I, CC_R, CC_I, CC_C,
   * CT_R, CT_I, CT_C, CT_T.
   */
  cov?: Array<number>;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Difference in mass before and after the maneuver, in kg.
   */
  deltaMass?: number;

  /**
   * Magnitude, in km, of the difference in the pre- and post-maneuver position
   * vectors at the maneuver event time.
   */
  deltaPos?: number;

  /**
   * Magnitude, in km, of the difference in the pre- and post-maneuver position
   * vectors in the direction of the pre-maneuver 'U' unit vector at the maneuver
   * event time.
   */
  deltaPosU?: number;

  /**
   * Magnitude, in km, of the difference in the pre- and post-maneuver position
   * vectors in the direction of the pre-maneuver 'V' unit vector at the maneuver
   * event time.
   */
  deltaPosV?: number;

  /**
   * Magnitude, in km, of the difference in the pre- and post-maneuver position
   * vectors in the direction of the pre-maneuver 'W' unit vector at the maneuver
   * event time.
   */
  deltaPosW?: number;

  /**
   * Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity
   * vectors at the maneuver event time.
   */
  deltaVel?: number;

  /**
   * Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity
   * vectors in the direction of the pre-maneuver 'U' unit vector at the maneuver
   * event time.
   */
  deltaVelU?: number;

  /**
   * Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity
   * vectors in the direction of the pre-maneuver 'V' unit vector at the maneuver
   * event time.
   */
  deltaVelV?: number;

  /**
   * Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity
   * vectors in the direction of the pre-maneuver 'W' unit vector at the maneuver
   * event time.
   */
  deltaVelW?: number;

  /**
   * Description and notes of the maneuver.
   */
  description?: string;

  /**
   * Optional source-provided and searchable metadata or descriptor of the data.
   */
  descriptor?: string;

  /**
   * Maneuver event end time in ISO 8601 UTC with microsecond precision.
   */
  eventEndTime?: string;

  /**
   * Optional source-provided identifier for this maneuver event. In the case where
   * multiple maneuver records are submitted for the same event, this field can be
   * used to tie them together to the same event.
   */
  eventId?: string;

  /**
   * Target maneuvering on-orbit object. For the public catalog, the idOnOrbit is
   * typically the satellite number as a string, but may be a UUID for analyst or
   * other unknown or untracked satellites.
   */
  idOnOrbit?: string;

  /**
   * Optional ID of the sensor that detected this maneuver (for example, if detected
   * by passive RF anomalies).
   */
  idSensor?: string;

  /**
   * Uncertainty in the occurrence of this maneuver (0 - 1).
   */
  maneuverUnc?: number;

  /**
   * Array of estimated acceleration values, in meters per second squared. Number of
   * elements must match the numAccelPoints.
   */
  mnvrAccels?: Array<number>;

  /**
   * Array of elapsed times, in seconds from maneuver start time, at which each
   * acceleration point is estimated. Number of elements must match the
   * numAccelPoints.
   */
  mnvrAccelTimes?: Array<number>;

  /**
   * Array of the 1-sigma uncertainties in estimated accelerations, in meters per
   * second squared. Number of elements must match the numAccelPoints.
   */
  mnvrAccelUncs?: Array<number>;

  /**
   * The total number of estimated acceleration points during the maneuver.
   */
  numAccelPoints?: number;

  /**
   * Number of observations used to generate the maneuver data.
   */
  numObs?: number;

  /**
   * Maneuver orbit determination fit data end time in ISO 8601 UTC with microsecond
   * precision.
   */
  odFitEndTime?: string;

  /**
   * Model object representing on-orbit objects or satellites in the system.
   */
  onOrbit?: Shared.Onorbit;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Identifier provided by source to indicate the target on-orbit object performing
   * this maneuver. This may be an internal identifier and not necessarily a valid
   * satellite number/ID.
   */
  origObjectId?: string;

  /**
   * Optional identifier provided by source to indicate the sensor identifier used to
   * detect this event. This may be an internal identifier and not necessarily a
   * valid sensor ID.
   */
  origSensorId?: string;

  /**
   * Post-event spacecraft apogee (measured from Earth center), in kilometers.
   */
  postApogee?: number;

  /**
   * Estimated area of the object following the maneuver, in meters squared.
   */
  postArea?: number;

  /**
   * Post-event ballistic coefficient. The units of the ballistic coefficient vary
   * depending on provider. Users should consult the data provider to verify the
   * units of the ballistic coefficient.
   */
  postBallisticCoeff?: number;

  /**
   * Post-event GEO drift rate of the spacecraft, in degrees per day. Negative values
   * indicate westward drift.
   */
  postDriftRate?: number;

  /**
   * Post-event spacecraft eccentricity.
   */
  postEccentricity?: number;

  /**
   * An element set is a collection of Keplerian orbital elements describing an orbit
   * of a particular satellite. The data is used along with an orbit propagator in
   * order to predict the motion of a satellite. The element set, or elset for short,
   * consists of identification data, the classical elements and drag parameters.
   */
  postEventElset?: ElsetsAPI.Elset;

  /**
   * Optional identifier of the element set for the post-maneuver orbit.
   */
  postEventIdElset?: string;

  /**
   * Optional identifier of the state vector for the post-maneuver trajectory of the
   * spacecraft.
   */
  postEventIdStateVector?: string;

  /**
   * This service provides operations for querying and manipulation of state vectors
   * for OnOrbit objects. State vectors are cartesian vectors of position (r) and
   * velocity (v) that, together with their time (epoch) (t), uniquely determine the
   * trajectory of the orbiting body in space. J2000 is the preferred coordinate
   * frame for all state vector positions/velocities in UDL, but in some cases data
   * may be in another frame depending on the provider and/or datatype. Please see
   * the 'Discover' tab in the storefront to confirm coordinate frames by data
   * provider.
   */
  postEventStateVector?: StatevectorAPI.StateVectorFull;

  /**
   * Post-event spacecraft WGS-84 GEO belt longitude, represented as -180 to 180
   * degrees (negative values west of Prime Meridian).
   */
  postGeoLongitude?: number;

  /**
   * Post-event spacecraft orbital inclination, in degrees. 0-180.
   */
  postInclination?: number;

  /**
   * Estimated mass of the object following the maneuver, in kg.
   */
  postMass?: number;

  /**
   * Post-event spacecraft perigee (measured from Earth center), in kilometers.
   */
  postPerigee?: number;

  /**
   * Post-event spacecraft orbital period, in minutes.
   */
  postPeriod?: number;

  /**
   * Post-event X component of position in ECI space, in km.
   */
  postPosX?: number;

  /**
   * Post-event Y component of position in ECI space, in km.
   */
  postPosY?: number;

  /**
   * Post-event Z component of position in ECI space, in km.
   */
  postPosZ?: number;

  /**
   * Post-event spacecraft Right Ascension of the Ascending Node (RAAN), in degrees.
   */
  postRAAN?: number;

  /**
   * Post-event radiation pressure coefficient. The units of the radiation pressure
   * coefficient vary depending on provider. Users should consult the data provider
   * to verify the units of the radiation pressure coefficient.
   */
  postRadiationPressCoeff?: number;

  /**
   * Post-event standard deviation, in kilometers, of spacecraft position in the 'U'
   * unit vector direction.
   */
  postSigmaU?: number;

  /**
   * Post-event standard deviation, in kilometers, of spacecraft position in the 'V'
   * unit vector direction.
   */
  postSigmaV?: number;

  /**
   * Post-event standard deviation, in kilometers, of spacecraft position in the 'W'
   * unit vector direction.
   */
  postSigmaW?: number;

  /**
   * Post-event spacecraft Semi-Major Axis (SMA), in kilometers.
   */
  postSMA?: number;

  /**
   * Post-event X component of velocity in ECI space, in km/sec.
   */
  postVelX?: number;

  /**
   * Post-event Y component of velocity in ECI space, in km/sec.
   */
  postVelY?: number;

  /**
   * Post-event Z component of velocity in ECI space, in km/sec.
   */
  postVelZ?: number;

  /**
   * Pre-event spacecraft apogee (measured from Earth center), in kilometers.
   */
  preApogee?: number;

  /**
   * Pre-event ballistic coefficient. The units of the ballistic coefficient vary
   * depending on provider. Users should consult the data provider to verify the
   * units of the ballistic coefficient.
   */
  preBallisticCoeff?: number;

  /**
   * Pre-event GEO drift rate of the spacecraft, in degrees per day. Negative values
   * indicate westward drift.
   */
  preDriftRate?: number;

  /**
   * Pre-event spacecraft eccentricity.
   */
  preEccentricity?: number;

  /**
   * An element set is a collection of Keplerian orbital elements describing an orbit
   * of a particular satellite. The data is used along with an orbit propagator in
   * order to predict the motion of a satellite. The element set, or elset for short,
   * consists of identification data, the classical elements and drag parameters.
   */
  preEventElset?: ElsetsAPI.Elset;

  /**
   * Optional identifier of the element set for the pre-maneuver orbit.
   */
  preEventIdElset?: string;

  /**
   * Optional identifier of the state vector for the pre-maneuver trajectory of the
   * spacecraft.
   */
  preEventIdStateVector?: string;

  /**
   * This service provides operations for querying and manipulation of state vectors
   * for OnOrbit objects. State vectors are cartesian vectors of position (r) and
   * velocity (v) that, together with their time (epoch) (t), uniquely determine the
   * trajectory of the orbiting body in space. J2000 is the preferred coordinate
   * frame for all state vector positions/velocities in UDL, but in some cases data
   * may be in another frame depending on the provider and/or datatype. Please see
   * the 'Discover' tab in the storefront to confirm coordinate frames by data
   * provider.
   */
  preEventStateVector?: StatevectorAPI.StateVectorFull;

  /**
   * Pre-event spacecraft WGS-84 GEO belt longitude, represented as -180 to 180
   * degrees (negative values west of Prime Meridian).
   */
  preGeoLongitude?: number;

  /**
   * Pre-event spacecraft orbital inclination, in degrees. 0-180.
   */
  preInclination?: number;

  /**
   * Pre-event spacecraft perigee (measured from Earth center), in kilometers.
   */
  prePerigee?: number;

  /**
   * Pre-event spacecraft orbital period, in minutes.
   */
  prePeriod?: number;

  /**
   * Pre-event X component of position in ECI space, in km.
   */
  prePosX?: number;

  /**
   * Pre-event Y component of position in ECI space, in km.
   */
  prePosY?: number;

  /**
   * Pre-event Z component of position in ECI space, in km.
   */
  prePosZ?: number;

  /**
   * Pre-event spacecraft Right Ascension of the Ascending Node (RAAN), in degrees.
   */
  preRAAN?: number;

  /**
   * Pre-event radiation pressure coefficient. The units of the radiation pressure
   * coefficient vary depending on provider. Users should consult the data provider
   * to verify the units of the radiation pressure coefficient.
   */
  preRadiationPressCoeff?: number;

  /**
   * Pre-event standard deviation, in kilometers, of spacecraft position in the 'U'
   * unit vector direction.
   */
  preSigmaU?: number;

  /**
   * Pre-event standard deviation, in kilometers, of spacecraft position in the 'V'
   * unit vector direction.
   */
  preSigmaV?: number;

  /**
   * Pre-event standard deviation, in kilometers, of spacecraft position in the 'W'
   * unit vector direction.
   */
  preSigmaW?: number;

  /**
   * Pre-event spacecraft orbital Semi-Major Axis (SMA), in kilometers.
   */
  preSMA?: number;

  /**
   * Pre-event X component of velocity in ECI space, in km/sec.
   */
  preVelX?: number;

  /**
   * Pre-event Y component of velocity in ECI space, in km/sec.
   */
  preVelY?: number;

  /**
   * Pre-event Z component of velocity in ECI space, in km/sec.
   */
  preVelZ?: number;

  /**
   * The time that the report or alert of this maneuver was generated, in ISO 8601
   * UTC format.
   */
  reportTime?: string;

  /**
   * Satellite/Catalog number of the target on-orbit object.
   */
  satNo?: number;

  /**
   * Optional array of UDL data (elsets, state vectors, etc) UUIDs used to build this
   * maneuver. See the associated sourcedDataTypes array for the specific types of
   * data for the positionally corresponding UUIDs in this array (the two arrays must
   * match in size).
   */
  sourcedData?: Array<string>;

  /**
   * Optional array of UDL data types used to build this maneuver (e.g. EO, RADAR,
   * RF, DOA, ELSET, SV). See the associated sourcedData array for the specific UUIDs
   * of data for the positionally corresponding data types in this array (the two
   * arrays must match in size).
   */
  sourcedDataTypes?: Array<'EO' | 'RADAR' | 'RF' | 'DOA' | 'ELSET' | 'SV'>;

  /**
   * Name of the state model used to generate the maneuver data.
   */
  stateModel?: string;

  /**
   * Version of the state model used to generate the maneuver data.
   */
  stateModelVersion?: number;

  /**
   * Status of this maneuver (CANCELLED, PLANNED, POSSIBLE, REDACTED, VERIFIED).
   *
   * CANCELLED: A previously planned maneuver whose execution was cancelled.
   *
   * PLANNED: A maneuver planned to take place at the eventStartTime.
   *
   * POSSIBLE: A possible maneuver detected by observation of the spacecraft or by
   * evaluation of the spacecraft orbit.
   *
   * REDACTED: A redaction of a reported possible maneuver that has been determined
   * to have not taken place after further observation/evaluation.
   *
   * VERIFIED: A maneuver whose execution has been verified, either by the
   * owner/operator or observation/evaluation.
   */
  status?: string;

  /**
   * Optional array of provider/source specific tags for this data, where each
   * element is no longer than 32 characters, used for implementing data owner
   * conditional access controls to restrict access to the data. Should be left null
   * by data providers unless conditional access controls are coordinated with the
   * UDL team.
   */
  tags?: Array<string>;

  /**
   * The estimated total active burn time of a maneuver, in seconds. This includes
   * the sum of all burns in numAccelPoints. Not to be confused with the total
   * duration of the maneuver.
   */
  totalBurnTime?: number;

  /**
   * Optional identifier to track a commercial or marketplace transaction executed to
   * produce this data.
   */
  transactionId?: string;

  /**
   * Boolean indicating this maneuver was unable to be correlated to a known object.
   * This flag should only be set to true by data providers after an attempt to
   * correlate to an on-orbit object was made and failed. If unable to correlate, the
   * 'origObjectId' field may be populated with an internal data provider specific
   * identifier.
   */
  uct?: boolean;
}

export declare namespace History {
  export { type ManeuverFull as ManeuverFull };
}
