// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../core/resource';
import * as Shared from '../shared';
import { APIPromise } from '../../core/api-promise';
import { OffsetPage, type OffsetPageParams, PagePromise } from '../../core/pagination';
import { buildHeaders } from '../../internal/headers';
import { RequestOptions } from '../../internal/request-options';

export class History extends APIResource {
  /**
   * Service operation to dynamically query historical data by a variety of query
   * parameters not specified in this API documentation. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   *
   * @example
   * ```ts
   * // Automatically fetches more pages as needed.
   * for await (const historyListResponse of client.emireport.history.list(
   *   { reportTime: '2019-12-27T18:11:19.117Z' },
   * )) {
   *   // ...
   * }
   * ```
   */
  list(
    query: HistoryListParams,
    options?: RequestOptions,
  ): PagePromise<HistoryListResponsesOffsetPage, HistoryListResponse> {
    return this._client.getAPIList('/udl/emireport/history', OffsetPage<HistoryListResponse>, {
      query,
      ...options,
    });
  }

  /**
   * Service operation to dynamically query historical data by a variety of query
   * parameters not specified in this API documentation, then write that data to the
   * Secure Content Store. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   *
   * @example
   * ```ts
   * await client.emireport.history.aodr({
   *   reportTime: '2019-12-27T18:11:19.117Z',
   * });
   * ```
   */
  aodr(query: HistoryAodrParams, options?: RequestOptions): APIPromise<void> {
    return this._client.get('/udl/emireport/history/aodr', {
      query,
      ...options,
      headers: buildHeaders([{ Accept: '*/*' }, options?.headers]),
    });
  }

  /**
   * Service operation to return the count of records satisfying the specified query
   * parameters. This operation is useful to determine how many records pass a
   * particular query criteria without retrieving large amounts of data. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on
   * valid/required query parameter information.
   *
   * @example
   * ```ts
   * const response = await client.emireport.history.count({
   *   reportTime: '2019-12-27T18:11:19.117Z',
   * });
   * ```
   */
  count(query: HistoryCountParams, options?: RequestOptions): APIPromise<string> {
    return this._client.get('/udl/emireport/history/count', {
      query,
      ...options,
      headers: buildHeaders([{ Accept: 'text/plain' }, options?.headers]),
    });
  }
}

export type HistoryListResponsesOffsetPage = OffsetPage<HistoryListResponse>;

/**
 * The EMI Report service supports the reporting, response, and
 * resolution/mitigation for spectrum interference, and provides details regarding
 * electromagnetic interference (EMI) detection, characterization, reporting,
 * identification, geo-location, and resolution data for space-based and
 * terrestrial systems.
 */
export interface HistoryListResponse {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * Flag indicating whether the affected mission is an ISR mission.
   */
  isr: boolean;

  /**
   * User generated report identifier. This ID should remain the same on subsequent
   * updates to this report.
   */
  reportId: string;

  /**
   * The reporting time of this EMI Report record, in ISO 8601 UTC format, with
   * millisecond precision.
   */
  reportTime: string;

  /**
   * The type of Electromagnetic Interference (EMI) being reported (GPS, SATCOM,
   * TERRESTRIAL).
   */
  reportType: string;

  /**
   * Flag indicating whether assistance is being requested to address this EMI.
   */
  requestAssist: boolean;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * The EMI start time in ISO 8601 UTC format, with millisecond precision.
   */
  startTime: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Actions(s) taken to troubleshoot, mitigate, work-around, and/or resolve the EMI
   * impacts.
   */
  actionsTaken?: string;

  /**
   * The specific type of activity affected by the reported EMI (e.g. UPLINK,
   * DOWNLINK, HF COMM, etc.).
   */
  affActivity?: string;

  /**
   * Altitude of the affected receiver, expressed in meters above WGS-84 ellipsoid.
   */
  alt?: number;

  /**
   * The Area Of Responsibility (AOR), Organization, or Combatant Command under which
   * the reported EMI pertains (AFRICOM, CENTCOM, EUCOM, INDOPACOM, NORTHCOM, SOCOM,
   * SOUTHCOM, SPACECOM, STRATCOM, TRANSCOM, UNKNOWN).
   */
  aor?: string;

  /**
   * The band (EHF, SHF, UHF, etc.) affected by the EMI.
   */
  band?: string;

  /**
   * The beam pattern in use.
   */
  beamPattern?: string;

  /**
   * The channel affected by the EMI.
   */
  channel?: string;

  /**
   * Flag indicating whether this interference appears to be illegally passing
   * traffic over a known channel.
   */
  chanPirate?: boolean;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Text description of the EMI particulars and other supporting information which
   * may be relevant to the cause and/or possible resolution of the issue.
   */
  description?: string;

  /**
   * Duration, Nature, Extent of impact.
   */
  dneImpact?: string;

  /**
   * The type of EMI (i.e. BARRAGE, CARRIER WAVE, etc.), if known.
   */
  emiType?: string;

  /**
   * The EMI end time in ISO 8601 UTC format, with millisecond precision. The endTime
   * may be excluded if EMI is ongoing.
   */
  endTime?: string;

  /**
   * The affected frequency, in MHz.
   */
  frequency?: number;

  /**
   * Confidence ellipse centered about the detection location [semi-major axis (m),
   * semi-minor axis (m), orientation (deg) measured clockwise (0 - 360) from true
   * North].
   */
  geoLocErrEllp?: Array<number>;

  /**
   * Flag indicating whether encryption is in use on the affected GPS frequency.
   */
  gpsEncrypted?: boolean;

  /**
   * The affected GPS Frequency (L1, L2, etc.).
   */
  gpsFreq?: string;

  /**
   * The highest affected frequency, in MHz.
   */
  highAffectedFrequency?: number;

  /**
   * Unique identifier of the affected on-orbit object. For the public catalog, the
   * idOnOrbit is typically the satellite number as a string, but may be a UUID for
   * analyst or other unknown or untracked satellites.
   */
  idOnOrbit?: string;

  /**
   * Flag indicating whether the EMI is a decipherable intercept over the affected
   * receiver. Additional information may be included in the description field
   * content of this record.
   */
  intercept?: boolean;

  /**
   * The language heard over the intercepted source. Applicable when interceptType =
   * VOICE.
   */
  interceptLang?: string;

  /**
   * The type of transmission being intercepted (e.g. VOICE, etc.). Applicable when
   * intercept = TRUE.
   */
  interceptType?: string;

  /**
   * The relative amplitude, in decibels (dB), of the interfering source, if known.
   */
  intSrcAmplitude?: number;

  /**
   * The bandwidth, in MHz, of the interfering source, if known.
   */
  intSrcBandwidth?: number;

  /**
   * The center frequency, in MHz, of the interfering source, if known.
   */
  intSrcCentFreq?: number;

  /**
   * Flag indicating whether the interfering source is encrypted.
   */
  intSrcEncrypted?: boolean;

  /**
   * The modulation method (e.g. AM, FM, FSK, PSK, etc.) of the interfering source,
   * if known.
   */
  intSrcModulation?: string;

  /**
   * Flag indicating whether this EMI is impacting ISR collection.
   */
  isrCollectionImpact?: boolean;

  /**
   * The location of the affected receiver, reported as a kill box.
   */
  killBox?: string;

  /**
   * WGS-84 latitude of the affected receiver, represented as -90 to 90 degrees
   * (negative values south of equator).
   */
  lat?: number;

  /**
   * The name or identifier of the affected link.
   */
  link?: string;

  /**
   * WGS-84 longitude of the affected receiver, represented as -180 to 180 degrees
   * (negative values west of Prime Meridian).
   */
  lon?: number;

  /**
   * The Military Grid Reference System (MGRS) location of the affected receiver. The
   * Military Grid Reference System is the geocoordinate standard used by NATO
   * militaries for locating points on Earth. The MGRS is derived from the Universal
   * Transverse Mercator (UTM) grid system and the Universal Polar Stereographic
   * (UPS) grid system, but uses a different labeling convention. The MGRS is used as
   * geocode for the entire Earth. Example of a milgrid coordinate, or grid
   * reference, would be 4QFJ12345678, which consists of three parts:
   *
   * 4Q (grid zone designator, GZD) FJ (the 100,000-meter square identifier) 12345678
   * (numerical location; easting is 1234 and northing is 5678, in this case
   * specifying a location with 10 m resolution).
   */
  milGrid?: string;

  /**
   * Model object representing on-orbit objects or satellites in the system.
   */
  onOrbit?: Shared.OnorbitFull;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Optional identifier provided by the reporting source to indicate the affected
   * object of this report. This may be an internal identifier and not necessarily
   * map to a valid satellite number.
   */
  origObjectId?: string;

  /**
   * The persistence status (e.g. CONTINUOUS, INTERMITTENT, RANDOM, etc.) of the EMI.
   */
  persistence?: string;

  /**
   * The name or identifier of the affected platform.
   */
  platform?: string;

  /**
   * The demodulation method (e.g. AM, FM, FSK, PSK, etc.) setting of the affected
   * receiver.
   */
  rcvrDemod?: string;

  /**
   * The gain setting of the affected receiver, in decibels (dB).
   */
  rcvrGain?: number;

  /**
   * Description of the affected receiver location.
   */
  rcvrLocation?: string;

  /**
   * The affected antenna type (e.g. DISH, OMNI, PHASED ARRAY, etc.) experiencing the
   * EMI.
   */
  rcvrType?: string;

  /**
   * The responsible service branch under which this EMI falls (AIR FORCE, ARMY,
   * COAST GUARD, MARINES, NAVY).
   */
  respService?: string;

  /**
   * The priority (LOW, MEDIUM, HIGH) of the affected SATCOM.
   */
  satcomPriority?: string;

  /**
   * The downlink frequency, in MHz, of the impacted link.
   */
  satDownlinkFrequency?: number;

  /**
   * The downlink polarization e.g. H - (Horizontally Polarized), V - (Vertically
   * Polarized), L - (Left Hand Circularly Polarized), R - (Right Hand Circularly
   * Polarized).
   */
  satDownlinkPolarization?: string;

  /**
   * The name of the spacecraft whose link is being affected by the EMI.
   */
  satName?: string;

  /**
   * Satellite/Catalog number of the affected OnOrbit object.
   */
  satNo?: number;

  /**
   * The name or identifier of the affected sat transponder.
   */
  satTransponderId?: string;

  /**
   * The uplink frequency, in MHz, of the impacted link.
   */
  satUplinkFrequency?: number;

  /**
   * The uplink polarization e.g. H - (Horizontally Polarized), V - (Vertically
   * Polarized), L - (Left Hand Circularly Polarized), R - (Right Hand Circularly
   * Polarized).
   */
  satUplinkPolarization?: string;

  /**
   * The source data library from which this record was received. This could be a
   * remote or tactical UDL or another data library. If null, the record should be
   * assumed to have originated from the primary Enterprise UDL.
   */
  sourceDL?: string;

  /**
   * The reporting status (INITIAL, UPDATE, RESOLVED) of this EMI issue.
   */
  status?: string;

  /**
   * The ISR role of the impacted asset.
   */
  supportedISRRole?: string;

  /**
   * The name or identifier of the affected system.
   */
  system?: string;

  /**
   * Optional array of provider/source specific tags for this data, where each
   * element is no longer than 32 characters, used for implementing data owner
   * conditional access controls to restrict access to the data. Should be left null
   * by data providers unless conditional access controls are coordinated with the
   * UDL team.
   */
  tags?: Array<string>;

  /**
   * Optional identifier to track a commercial or marketplace transaction executed to
   * produce this data.
   */
  transactionId?: string;

  /**
   * The alternate country identifier in which the EMI occurred or is occurring.
   * Specifies an alternate country code if the data provider code is not part of an
   * official Country Code standard such as ISO-3166 or FIPS.
   */
  victimAltCountry?: string;

  /**
   * The country code in which the EMI occurred or is occurring. This value is
   * typically the ISO 3166 Alpha-2 two-character country code, however it can also
   * represent various consortiums that do not appear in the ISO document. The code
   * must correspond to an existing country in the UDL’s country API. Call
   * udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or
   * alternate code values that exist for the specified country code.
   */
  victimCountryCode?: string;

  /**
   * The victim functional impacts (e.g. C2, COMM DATA LINK, ISR SENSOR, PNT, etc.).
   */
  victimFuncImpacts?: string;

  /**
   * The e-mail contact of the reporting POC.
   */
  victimPOCMail?: string;

  /**
   * The Point of Contact (POC) for this EMI Report.
   */
  victimPOCName?: string;

  /**
   * The phone number of the reporting POC, represented as digits only, no spaces or
   * special characters.
   */
  victimPOCPhone?: string;

  /**
   * The Unit or Organization of the reporting POC.
   */
  victimPOCUnit?: string;

  /**
   * The victim reaction (e.g. LOITER ORBIT, RETASK ASSET, RETURN TO BASE,
   * TROUBLESHOOT, etc.).
   */
  victimReaction?: string;
}

export type HistoryCountResponse = string;

export interface HistoryListParams extends OffsetPageParams {
  /**
   * The reporting time of this EMI Report record, in ISO 8601 UTC format, with
   * millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)
   */
  reportTime: string;

  /**
   * optional, fields for retrieval. When omitted, ALL fields are assumed. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
   * query fields that can be selected.
   */
  columns?: string;
}

export interface HistoryAodrParams {
  /**
   * The reporting time of this EMI Report record, in ISO 8601 UTC format, with
   * millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)
   */
  reportTime: string;

  /**
   * optional, fields for retrieval. When omitted, ALL fields are assumed. See the
   * queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid
   * query fields that can be selected.
   */
  columns?: string;

  firstResult?: number;

  maxResults?: number;

  /**
   * optional, notification method for the created file link. When omitted, EMAIL is
   * assumed. Current valid values are: EMAIL, SMS.
   */
  notification?: string;

  /**
   * optional, field delimiter when the created file is not JSON. Must be a single
   * character chosen from this set: (',', ';', ':', '|'). When omitted, "," is used.
   * It is strongly encouraged that your field delimiter be a character unlikely to
   * occur within the data.
   */
  outputDelimiter?: string;

  /**
   * optional, output format for the file. When omitted, JSON is assumed. Current
   * valid values are: JSON and CSV.
   */
  outputFormat?: string;
}

export interface HistoryCountParams {
  /**
   * The reporting time of this EMI Report record, in ISO 8601 UTC format, with
   * millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)
   */
  reportTime: string;

  firstResult?: number;

  maxResults?: number;
}

export declare namespace History {
  export {
    type HistoryListResponse as HistoryListResponse,
    type HistoryCountResponse as HistoryCountResponse,
    type HistoryListResponsesOffsetPage as HistoryListResponsesOffsetPage,
    type HistoryListParams as HistoryListParams,
    type HistoryAodrParams as HistoryAodrParams,
    type HistoryCountParams as HistoryCountParams,
  };
}
