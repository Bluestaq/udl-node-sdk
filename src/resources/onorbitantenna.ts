// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../resource';
import * as Core from '../core';
import * as AntennasAPI from './antennas';

export class Onorbitantenna extends APIResource {
  /**
   * Service operation to take a single OnorbitAntenna as a POST body and ingest into
   * the database. An OnorbitAntenna is the association between on-orbit spacecraft
   * antennas and a particular on-orbit spacecraft. An antenna type may be associated
   * with many different on-orbit spacecraft. A specific role is required to perform
   * this service operation. Please contact the UDL team for assistance.
   */
  create(body: OnorbitantennaCreateParams, options?: Core.RequestOptions): Core.APIPromise<void> {
    return this._client.post('/udl/onorbitantenna', {
      body,
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }

  /**
   * Service operation to update a single OnorbitAntenna. An OnorbitAntenna is the
   * association between on-orbit spacecraft antennas and a particular on-orbit
   * spacecraft. An antenna type may be associated with many different on-orbit
   * spacecraft. A specific role is required to perform this service operation.
   * Please contact the UDL team for assistance.
   */
  update(
    pathId: string,
    body: OnorbitantennaUpdateParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<void> {
    return this._client.put(`/udl/onorbitantenna/${pathId}`, {
      body,
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }

  /**
   * Service operation to dynamically query data by a variety of query parameters not
   * specified in this API documentation. See the queryhelp operation
   * (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query
   * parameter information.
   */
  list(options?: Core.RequestOptions): Core.APIPromise<OnorbitantennaListResponse> {
    return this._client.get('/udl/onorbitantenna', options);
  }

  /**
   * Service operation to delete a OnorbitAntenna object specified by the passed ID
   * path parameter. An OnorbitAntenna is the association between on-orbit spacecraft
   * antennas and a particular on-orbit spacecraft. An antenna type may be associated
   * with many different on-orbit spacecraft. A specific role is required to perform
   * this service operation. Please contact the UDL team for assistance.
   */
  delete(id: string, options?: Core.RequestOptions): Core.APIPromise<void> {
    return this._client.delete(`/udl/onorbitantenna/${id}`, {
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
    });
  }

  /**
   * Service operation to get a single OnorbitAntenna record by its unique ID passed
   * as a path parameter. An OnorbitAntenna is the association between on-orbit
   * spacecraft antennas and a particular on-orbit spacecraft. An antenna type may be
   * associated with many different on-orbit spacecraft.
   */
  get(id: string, options?: Core.RequestOptions): Core.APIPromise<OnorbitantennaGetResponse> {
    return this._client.get(`/udl/onorbitantenna/${id}`, options);
  }
}

export type OnorbitantennaListResponse = Array<OnorbitantennaListResponse.OnorbitantennaListResponseItem>;

export namespace OnorbitantennaListResponse {
  export interface OnorbitantennaListResponseItem {
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classificationMarking: string;

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
     * may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
     * events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
     * datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance
     * characteristics.
     */
    dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

    /**
     * ID of the antenna.
     */
    idAntenna: string;

    /**
     * ID of the on-orbit object.
     */
    idOnOrbit: string;

    /**
     * Source of the data.
     */
    source: string;

    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id?: string;

    /**
     * Model representation of information on on-orbit/spacecraft communication
     * antennas. A spacecraft may have multiple antennas and each antenna can have
     * multiple 'details' records compiled by different sources.
     */
    antenna?: AntennasAPI.AntennaAbridged;

    /**
     * Time the row was created in the database, auto-populated by the system.
     */
    createdAt?: string;

    /**
     * Application user who created the row in the database, auto-populated by the
     * system.
     */
    createdBy?: string;

    /**
     * Originating system or organization which produced the data, if different from
     * the source. The origin may be different than the source if the source was a
     * mediating system which forwarded the data on behalf of the origin system. If
     * null, the source may be assumed to be the origin.
     */
    origin?: string;

    /**
     * The originating source network on which this record was created, auto-populated
     * by the system.
     */
    origNetwork?: string;
  }
}

/**
 * Read-only collection of antennas on this on-orbit object.
 */
export interface OnorbitantennaGetResponse {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * ID of the antenna.
   */
  idAntenna: string;

  /**
   * ID of the on-orbit object.
   */
  idOnOrbit: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Model representation of information on on-orbit/spacecraft communication
   * antennas. A spacecraft may have multiple antennas and each antenna can have
   * multiple 'details' records compiled by different sources.
   */
  antenna?: AntennasAPI.AntennaFull;

  /**
   * Time the row was created in the database, auto-populated by the system.
   */
  createdAt?: string;

  /**
   * Application user who created the row in the database, auto-populated by the
   * system.
   */
  createdBy?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;

  /**
   * The originating source network on which this record was created, auto-populated
   * by the system.
   */
  origNetwork?: string;

  /**
   * Time the row was last updated in the database, auto-populated by the system.
   */
  updatedAt?: string;

  /**
   * Application user who updated the row in the database, auto-populated by the
   * system.
   */
  updatedBy?: string;
}

export interface OnorbitantennaCreateParams {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * ID of the antenna.
   */
  idAntenna: string;

  /**
   * ID of the on-orbit object.
   */
  idOnOrbit: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  id?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;
}

export interface OnorbitantennaUpdateParams {
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   */
  classificationMarking: string;

  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   *
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
   * may include both real and simulated data.
   *
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects,
   * events, and analysis.
   *
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
   * datasets.
   *
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
   * requirements, and for validating technical, functional, and performance
   * characteristics.
   */
  dataMode: 'REAL' | 'TEST' | 'SIMULATED' | 'EXERCISE';

  /**
   * ID of the antenna.
   */
  idAntenna: string;

  /**
   * ID of the on-orbit object.
   */
  idOnOrbit: string;

  /**
   * Source of the data.
   */
  source: string;

  /**
   * Unique identifier of the record, auto-generated by the system.
   */
  body_id?: string;

  /**
   * Originating system or organization which produced the data, if different from
   * the source. The origin may be different than the source if the source was a
   * mediating system which forwarded the data on behalf of the origin system. If
   * null, the source may be assumed to be the origin.
   */
  origin?: string;
}

export declare namespace Onorbitantenna {
  export {
    type OnorbitantennaListResponse as OnorbitantennaListResponse,
    type OnorbitantennaGetResponse as OnorbitantennaGetResponse,
    type OnorbitantennaCreateParams as OnorbitantennaCreateParams,
    type OnorbitantennaUpdateParams as OnorbitantennaUpdateParams,
  };
}
